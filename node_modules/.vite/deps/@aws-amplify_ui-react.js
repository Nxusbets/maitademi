import {
  require_jsx_runtime
} from "./chunk-YUEMZWDV.js";
import {
  require_react_dom
} from "./chunk-OK4P3QOP.js";
import {
  __commonJS,
  __export,
  __toESM,
  require_react
} from "./chunk-5A2KPB3J.js";

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index3 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index3, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      return index3 < 0 ? void 0 : data[index3][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index3][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    var nativeObjectToString = objectProto2.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto2 = Object.prototype;
    var nativeObjectToString = objectProto2.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject4(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject4;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject4 = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction6(value) {
      if (!isObject4(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction6;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction6 = require_isFunction();
    var isMasked = require_isMasked();
    var isObject4 = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto2 = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject4(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction6(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue2(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue2;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue2 = require_getValue();
    function getNative(object, key) {
      var value = getValue2(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map3, key) {
      var data = map3.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size4 = data.size;
      data.set(key, value);
      this.size += data.size == size4 ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs2 = data.__data__;
        if (!Map2 || pairs2.length < LARGE_ARRAY_SIZE - 1) {
          pairs2.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs2);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index3 = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index3 < length) {
        this.add(values[index3]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array, predicate) {
      var index3 = -1, length = array == null ? 0 : array.length;
      while (++index3 < length) {
        if (predicate(array[index3], index3, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index3 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index3 < arrLength) {
        var arrValue = array[index3], othValue = other[index3];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index3, other, array, stack) : customizer(arrValue, othValue, index3, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array2 = root.Uint8Array;
    module.exports = Uint8Array2;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map3) {
      var index3 = -1, result = Array(map3.size);
      map3.forEach(function(value, key) {
        result[++index3] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set2) {
      var index3 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index3] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var Uint8Array2 = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values) {
      var index3 = -1, length = values.length, offset4 = array.length;
      while (++index3 < length) {
        array[offset4 + index3] = values[index3];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray6 = Array.isArray;
    module.exports = isArray6;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray6 = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray6(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index3 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index3 < length) {
        var value = array[index3];
        if (predicate(value, index3, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto2 = Object.prototype;
    var propertyIsEnumerable = objectProto2.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n, iteratee) {
      var index3 = -1, result = Array(n);
      while (++index3 < n) {
        result[index3] = iteratee(index3);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    var propertyIsEnumerable = objectProto2.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray6 = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray6(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto2 = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction6 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike2(value) {
      return value != null && isLength(value.length) && !isFunction6(value);
    }
    module.exports = isArrayLike2;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike2 = require_isArrayLike();
    function keys(object) {
      return isArrayLike2(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index3 = objLength;
      while (index3--) {
        var key = objProps[index3];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index3 < objLength) {
        key = objProps[index3];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView2 = getNative(root, "DataView");
    module.exports = DataView2;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap2 = getNative(root, "WeakMap");
    module.exports = WeakMap2;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView2 = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray6 = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray6(object), othIsArr = isArray6(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual3(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual3;
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    (function() {
      function is(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      function useSyncExternalStore$2(subscribe, getSnapshot) {
        didWarnOld18Alpha || void 0 === React188.startTransition || (didWarnOld18Alpha = true, console.error(
          "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
        ));
        var value = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedValue = getSnapshot();
          objectIs(value, cachedValue) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        }
        cachedValue = useState39({
          inst: { value, getSnapshot }
        });
        var inst = cachedValue[0].inst, forceUpdate = cachedValue[1];
        useLayoutEffect9(
          function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          },
          [subscribe, value, getSnapshot]
        );
        useEffect37(
          function() {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            return subscribe(function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            });
          },
          [subscribe]
        );
        useDebugValue2(value);
        return value;
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error3) {
          return true;
        }
      }
      function useSyncExternalStore$1(subscribe, getSnapshot) {
        return getSnapshot();
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React188 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is, useState39 = React188.useState, useEffect37 = React188.useEffect, useLayoutEffect9 = React188.useLayoutEffect, useDebugValue2 = React188.useDebugValue, didWarnOld18Alpha = false, didWarnUncachedGetSnapshot = false, shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
      exports.useSyncExternalStore = void 0 !== React188.useSyncExternalStore ? React188.useSyncExternalStore : shim;
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
var require_with_selector_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
    "use strict";
    (function() {
      function is(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React188 = require_react(), shim = require_shim(), objectIs = "function" === typeof Object.is ? Object.is : is, useSyncExternalStore = shim.useSyncExternalStore, useRef28 = React188.useRef, useEffect37 = React188.useEffect, useMemo27 = React188.useMemo, useDebugValue2 = React188.useDebugValue;
      exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual3) {
        var instRef = useRef28(null);
        if (null === instRef.current) {
          var inst = { hasValue: false, value: null };
          instRef.current = inst;
        } else
          inst = instRef.current;
        instRef = useMemo27(
          function() {
            function memoizedSelector(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                nextSnapshot = selector(nextSnapshot);
                if (void 0 !== isEqual3 && inst.hasValue) {
                  var currentSelection = inst.value;
                  if (isEqual3(currentSelection, nextSnapshot))
                    return memoizedSelection = currentSelection;
                }
                return memoizedSelection = nextSnapshot;
              }
              currentSelection = memoizedSelection;
              if (objectIs(memoizedSnapshot, nextSnapshot))
                return currentSelection;
              var nextSelection = selector(nextSnapshot);
              if (void 0 !== isEqual3 && isEqual3(currentSelection, nextSelection))
                return memoizedSnapshot = nextSnapshot, currentSelection;
              memoizedSnapshot = nextSnapshot;
              return memoizedSelection = nextSelection;
            }
            var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
            return [
              function() {
                return memoizedSelector(getSnapshot());
              },
              null === maybeGetServerSnapshot ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              }
            ];
          },
          [getSnapshot, getServerSnapshot, selector, isEqual3]
        );
        var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
        useEffect37(
          function() {
            inst.hasValue = true;
            inst.value = value;
          },
          [value]
        );
        useDebugValue2(value);
        return value;
      };
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_with_selector_development();
    }
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index3 = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index3 < length) {
        result[index3] = iteratee(array[index3], index3, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports, module) {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index3 = matchData.length, length = index3, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index3--) {
        var data = matchData[index3];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index3 < length) {
        data = matchData[index3];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports, module) {
    var isObject4 = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject4(value);
    }
    module.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports, module) {
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    module.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports, module) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    module.exports = baseMatches;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray6 = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey2(value, object) {
      if (isArray6(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey2;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath2 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    module.exports = stringToPath2;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray6 = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray6(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray6 = require_isArray();
    var isKey2 = require_isKey();
    var stringToPath2 = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray6(value)) {
        return value;
      }
      return isKey2(value, object) ? [value] : stringToPath2(toString(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet2(object, path2) {
      path2 = castPath(path2, object);
      var index3 = 0, length = path2.length;
      while (object != null && index3 < length) {
        object = object[toKey(path2[index3++])];
      }
      return index3 && index3 == length ? object : void 0;
    }
    module.exports = baseGet2;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module) {
    var baseGet2 = require_baseGet();
    function get2(object, path2, defaultValue2) {
      var result = object == null ? void 0 : baseGet2(object, path2);
      return result === void 0 ? defaultValue2 : result;
    }
    module.exports = get2;
  }
});

// node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/lodash/_baseHasIn.js"(exports, module) {
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    module.exports = baseHasIn;
  }
});

// node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/lodash/_hasPath.js"(exports, module) {
    var castPath = require_castPath();
    var isArguments = require_isArguments();
    var isArray6 = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey = require_toKey();
    function hasPath(object, path2, hasFunc) {
      path2 = castPath(path2, object);
      var index3 = -1, length = path2.length, result = false;
      while (++index3 < length) {
        var key = toKey(path2[index3]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index3 != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray6(object) || isArguments(object));
    }
    module.exports = hasPath;
  }
});

// node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/lodash/hasIn.js"(exports, module) {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object, path2) {
      return object != null && hasPath(object, path2, baseHasIn);
    }
    module.exports = hasIn;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    var get2 = require_get();
    var hasIn = require_hasIn();
    var isKey2 = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path2, srcValue) {
      if (isKey2(path2) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path2), srcValue);
      }
      return function(object) {
        var objValue = get2(object, path2);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity2(value) {
      return value;
    }
    module.exports = identity2;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports, module) {
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = baseProperty;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports, module) {
    var baseGet2 = require_baseGet();
    function basePropertyDeep(path2) {
      return function(object) {
        return baseGet2(object, path2);
      };
    }
    module.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey2 = require_isKey();
    var toKey = require_toKey();
    function property(path2) {
      return isKey2(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
    }
    module.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports, module) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity2 = require_identity();
    var isArray6 = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity2;
      }
      if (typeof value == "object") {
        return isArray6(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_baseSet.js
var require_baseSet = __commonJS({
  "node_modules/lodash/_baseSet.js"(exports, module) {
    var assignValue = require_assignValue();
    var castPath = require_castPath();
    var isIndex = require_isIndex();
    var isObject4 = require_isObject();
    var toKey = require_toKey();
    function baseSet(object, path2, value, customizer) {
      if (!isObject4(object)) {
        return object;
      }
      path2 = castPath(path2, object);
      var index3 = -1, length = path2.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index3 < length) {
        var key = toKey(path2[index3]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index3 != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject4(objValue) ? objValue : isIndex(path2[index3 + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    module.exports = baseSet;
  }
});

// node_modules/lodash/_basePickBy.js
var require_basePickBy = __commonJS({
  "node_modules/lodash/_basePickBy.js"(exports, module) {
    var baseGet2 = require_baseGet();
    var baseSet = require_baseSet();
    var castPath = require_castPath();
    function basePickBy(object, paths, predicate) {
      var index3 = -1, length = paths.length, result = {};
      while (++index3 < length) {
        var path2 = paths[index3], value = baseGet2(object, path2);
        if (predicate(value, path2)) {
          baseSet(result, castPath(path2, object), value);
        }
      }
      return result;
    }
    module.exports = basePickBy;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  "node_modules/lodash/_getSymbolsIn.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    module.exports = getSymbolsIn;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject4 = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto2 = Object.prototype;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject4(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike2 = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike2(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  "node_modules/lodash/_getAllKeysIn.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module.exports = getAllKeysIn;
  }
});

// node_modules/lodash/pickBy.js
var require_pickBy = __commonJS({
  "node_modules/lodash/pickBy.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseIteratee = require_baseIteratee();
    var basePickBy = require_basePickBy();
    var getAllKeysIn = require_getAllKeysIn();
    function pickBy2(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = baseIteratee(predicate);
      return basePickBy(object, props, function(value, path2) {
        return predicate(value, path2[0]);
      });
    }
    module.exports = pickBy2;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index3 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index3];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    function cloneBuffer(buffer2, isDeep) {
      if (isDeep) {
        return buffer2.slice();
      }
      var length = buffer2.length, result = allocUnsafe ? allocUnsafe(length) : new buffer2.constructor(length);
      buffer2.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array2 = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index3 = -1, length = source.length;
      array || (array = Array(length));
      while (++index3 < length) {
        array[index3] = source[index3];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject4 = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject4(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike2 = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike2(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto2 = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto2.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject2(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject2;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject2(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index3 = -1, length = props.length;
      while (++index3 < length) {
        var key = props[index3];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject2;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject2 = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject2(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray6 = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction6 = require_isFunction();
    var isObject4 = require_isObject();
    var isPlainObject2 = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray6(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray6(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject4(objValue) || isFunction6(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject4 = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject4(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start3, transform) {
      start3 = nativeMax(start3 === void 0 ? func.length - 1 : start3, 0);
      return function() {
        var args = arguments, index3 = -1, length = nativeMax(args.length - start3, 0), array = Array(length);
        while (++index3 < length) {
          array[index3] = args[start3 + index3];
        }
        index3 = -1;
        var otherArgs = Array(start3 + 1);
        while (++index3 < start3) {
          otherArgs[index3] = args[index3];
        }
        otherArgs[start3] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity2 = require_identity();
    var baseSetToString = !defineProperty ? identity2 : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count5 = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count5 >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count5 = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity2 = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start3) {
      return setToString(overRest(func, start3, identity2), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike2 = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject4 = require_isObject();
    function isIterateeCall(value, index3, object) {
      if (!isObject4(object)) {
        return false;
      }
      var type = typeof index3;
      if (type == "number" ? isArrayLike2(object) && isIndex(index3, object.length) : type == "string" && index3 in object) {
        return eq(object[index3], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index3 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index3 < length) {
          var source = sources[index3];
          if (source) {
            assigner(object, source, index3, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge4 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge4;
  }
});

// node_modules/lodash/_arrayReduce.js
var require_arrayReduce = __commonJS({
  "node_modules/lodash/_arrayReduce.js"(exports, module) {
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index3 = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index3];
      }
      while (++index3 < length) {
        accumulator = iteratee(accumulator, array[index3], index3, array);
      }
      return accumulator;
    }
    module.exports = arrayReduce;
  }
});

// node_modules/lodash/_basePropertyOf.js
var require_basePropertyOf = __commonJS({
  "node_modules/lodash/_basePropertyOf.js"(exports, module) {
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = basePropertyOf;
  }
});

// node_modules/lodash/_deburrLetter.js
var require_deburrLetter = __commonJS({
  "node_modules/lodash/_deburrLetter.js"(exports, module) {
    var basePropertyOf = require_basePropertyOf();
    var deburredLetters = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "s"
    };
    var deburrLetter = basePropertyOf(deburredLetters);
    module.exports = deburrLetter;
  }
});

// node_modules/lodash/deburr.js
var require_deburr = __commonJS({
  "node_modules/lodash/deburr.js"(exports, module) {
    var deburrLetter = require_deburrLetter();
    var toString = require_toString();
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsCombo = "[" + rsComboRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module.exports = deburr;
  }
});

// node_modules/lodash/_asciiWords.js
var require_asciiWords = __commonJS({
  "node_modules/lodash/_asciiWords.js"(exports, module) {
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    module.exports = asciiWords;
  }
});

// node_modules/lodash/_hasUnicodeWord.js
var require_hasUnicodeWord = __commonJS({
  "node_modules/lodash/_hasUnicodeWord.js"(exports, module) {
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    module.exports = hasUnicodeWord;
  }
});

// node_modules/lodash/_unicodeWords.js
var require_unicodeWords = __commonJS({
  "node_modules/lodash/_unicodeWords.js"(exports, module) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['’]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
    var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    module.exports = unicodeWords;
  }
});

// node_modules/lodash/words.js
var require_words = __commonJS({
  "node_modules/lodash/words.js"(exports, module) {
    var asciiWords = require_asciiWords();
    var hasUnicodeWord = require_hasUnicodeWord();
    var toString = require_toString();
    var unicodeWords = require_unicodeWords();
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }
    module.exports = words;
  }
});

// node_modules/lodash/_createCompounder.js
var require_createCompounder = __commonJS({
  "node_modules/lodash/_createCompounder.js"(exports, module) {
    var arrayReduce = require_arrayReduce();
    var deburr = require_deburr();
    var words = require_words();
    var rsApos = "['’]";
    var reApos = RegExp(rsApos, "g");
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
      };
    }
    module.exports = createCompounder;
  }
});

// node_modules/lodash/kebabCase.js
var require_kebabCase = __commonJS({
  "node_modules/lodash/kebabCase.js"(exports, module) {
    var createCompounder = require_createCompounder();
    var kebabCase2 = createCompounder(function(result, word, index3) {
      return result + (index3 ? "-" : "") + word.toLowerCase();
    });
    module.exports = kebabCase2;
  }
});

// browser-external:fast-xml-parser
var require_fast_xml_parser = __commonJS({
  "browser-external:fast-xml-parser"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fast-xml-parser" has been externalized for browser compatibility. Cannot access "fast-xml-parser.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:buffer
var require_buffer = __commonJS({
  "browser-external:buffer"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/crc-32/crc32.js
var require_crc32 = __commonJS({
  "node_modules/crc-32/crc32.js"(exports) {
    var CRC32;
    (function(factory) {
      if (typeof DO_NOT_EXPORT_CRC === "undefined") {
        if ("object" === typeof exports) {
          factory(exports);
        } else if ("function" === typeof define && define.amd) {
          define(function() {
            var module2 = {};
            factory(module2);
            return module2;
          });
        } else {
          factory(CRC32 = {});
        }
      } else {
        factory(CRC32 = {});
      }
    })(function(CRC322) {
      CRC322.version = "1.2.2";
      function signed_crc_table() {
        var c = 0, table2 = new Array(256);
        for (var n = 0; n != 256; ++n) {
          c = n;
          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
          c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
          table2[n] = c;
        }
        return typeof Int32Array !== "undefined" ? new Int32Array(table2) : table2;
      }
      var T0 = signed_crc_table();
      function slice_by_16_tables(T) {
        var c = 0, v = 0, n = 0, table2 = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
        for (n = 0; n != 256; ++n)
          table2[n] = T[n];
        for (n = 0; n != 256; ++n) {
          v = T[n];
          for (c = 256 + n; c < 4096; c += 256)
            v = table2[c] = v >>> 8 ^ T[v & 255];
        }
        var out = [];
        for (n = 1; n != 16; ++n)
          out[n - 1] = typeof Int32Array !== "undefined" ? table2.subarray(n * 256, n * 256 + 256) : table2.slice(n * 256, n * 256 + 256);
        return out;
      }
      var TT = slice_by_16_tables(T0);
      var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
      var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
      var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
      function crc32_bstr(bstr, seed) {
        var C = seed ^ -1;
        for (var i = 0, L = bstr.length; i < L; )
          C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 255];
        return ~C;
      }
      function crc32_buf(B, seed) {
        var C = seed ^ -1, L = B.length - 15, i = 0;
        for (; i < L; )
          C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
        L += 15;
        while (i < L)
          C = C >>> 8 ^ T0[(C ^ B[i++]) & 255];
        return ~C;
      }
      function crc32_str(str, seed) {
        var C = seed ^ -1;
        for (var i = 0, L = str.length, c = 0, d = 0; i < L; ) {
          c = str.charCodeAt(i++);
          if (c < 128) {
            C = C >>> 8 ^ T0[(C ^ c) & 255];
          } else if (c < 2048) {
            C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 255];
            C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
          } else if (c >= 55296 && c < 57344) {
            c = (c & 1023) + 64;
            d = str.charCodeAt(i++) & 1023;
            C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 255];
            C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 255];
            C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 255];
            C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 255];
          } else {
            C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 255];
            C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 255];
            C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
          }
        }
        return ~C;
      }
      CRC322.table = T0;
      CRC322.bstr = crc32_bstr;
      CRC322.buf = crc32_buf;
      CRC322.str = crc32_str;
    });
  }
});

// node_modules/lodash/now.js
var require_now = __commonJS({
  "node_modules/lodash/now.js"(exports, module) {
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module.exports = now;
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index3 = string.length;
      while (index3-- && reWhitespace.test(string.charAt(index3))) {
      }
      return index3;
    }
    module.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module.exports = baseTrim;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module) {
    var baseTrim = require_baseTrim();
    var isObject4 = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject4(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject4(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  }
});

// node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "node_modules/lodash/debounce.js"(exports, module) {
    var isObject4 = require_isObject();
    var now = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce4(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject4(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time2) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time2;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time2) {
        lastInvokeTime = time2;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time2) : result;
      }
      function remainingWait(time2) {
        var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time2) {
        var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time2 = now();
        if (shouldInvoke(time2)) {
          return trailingEdge(time2);
        }
        timerId = setTimeout(timerExpired, remainingWait(time2));
      }
      function trailingEdge(time2) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time2);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel3() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time2 = now(), isInvoking = shouldInvoke(time2);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time2;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel3;
      debounced.flush = flush;
      return debounced;
    }
    module.exports = debounce4;
  }
});

// node_modules/qrcode/lib/can-promise.js
var require_can_promise = __commonJS({
  "node_modules/qrcode/lib/can-promise.js"(exports, module) {
    module.exports = function() {
      return typeof Promise === "function" && Promise.prototype && Promise.prototype.then;
    };
  }
});

// node_modules/qrcode/lib/core/utils.js
var require_utils = __commonJS({
  "node_modules/qrcode/lib/core/utils.js"(exports) {
    var toSJISFunction;
    var CODEWORDS_COUNT = [
      0,
      // Not used
      26,
      44,
      70,
      100,
      134,
      172,
      196,
      242,
      292,
      346,
      404,
      466,
      532,
      581,
      655,
      733,
      815,
      901,
      991,
      1085,
      1156,
      1258,
      1364,
      1474,
      1588,
      1706,
      1828,
      1921,
      2051,
      2185,
      2323,
      2465,
      2611,
      2761,
      2876,
      3034,
      3196,
      3362,
      3532,
      3706
    ];
    exports.getSymbolSize = function getSymbolSize(version2) {
      if (!version2)
        throw new Error('"version" cannot be null or undefined');
      if (version2 < 1 || version2 > 40)
        throw new Error('"version" should be in range from 1 to 40');
      return version2 * 4 + 17;
    };
    exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version2) {
      return CODEWORDS_COUNT[version2];
    };
    exports.getBCHDigit = function(data) {
      let digit = 0;
      while (data !== 0) {
        digit++;
        data >>>= 1;
      }
      return digit;
    };
    exports.setToSJISFunction = function setToSJISFunction(f2) {
      if (typeof f2 !== "function") {
        throw new Error('"toSJISFunc" is not a valid function.');
      }
      toSJISFunction = f2;
    };
    exports.isKanjiModeEnabled = function() {
      return typeof toSJISFunction !== "undefined";
    };
    exports.toSJIS = function toSJIS(kanji) {
      return toSJISFunction(kanji);
    };
  }
});

// node_modules/qrcode/lib/core/error-correction-level.js
var require_error_correction_level = __commonJS({
  "node_modules/qrcode/lib/core/error-correction-level.js"(exports) {
    exports.L = { bit: 1 };
    exports.M = { bit: 0 };
    exports.Q = { bit: 3 };
    exports.H = { bit: 2 };
    function fromString(string) {
      if (typeof string !== "string") {
        throw new Error("Param is not a string");
      }
      const lcStr = string.toLowerCase();
      switch (lcStr) {
        case "l":
        case "low":
          return exports.L;
        case "m":
        case "medium":
          return exports.M;
        case "q":
        case "quartile":
          return exports.Q;
        case "h":
        case "high":
          return exports.H;
        default:
          throw new Error("Unknown EC Level: " + string);
      }
    }
    exports.isValid = function isValid(level) {
      return level && typeof level.bit !== "undefined" && level.bit >= 0 && level.bit < 4;
    };
    exports.from = function from2(value, defaultValue2) {
      if (exports.isValid(value)) {
        return value;
      }
      try {
        return fromString(value);
      } catch (e) {
        return defaultValue2;
      }
    };
  }
});

// node_modules/qrcode/lib/core/bit-buffer.js
var require_bit_buffer = __commonJS({
  "node_modules/qrcode/lib/core/bit-buffer.js"(exports, module) {
    function BitBuffer() {
      this.buffer = [];
      this.length = 0;
    }
    BitBuffer.prototype = {
      get: function(index3) {
        const bufIndex = Math.floor(index3 / 8);
        return (this.buffer[bufIndex] >>> 7 - index3 % 8 & 1) === 1;
      },
      put: function(num, length) {
        for (let i = 0; i < length; i++) {
          this.putBit((num >>> length - i - 1 & 1) === 1);
        }
      },
      getLengthInBits: function() {
        return this.length;
      },
      putBit: function(bit) {
        const bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0);
        }
        if (bit) {
          this.buffer[bufIndex] |= 128 >>> this.length % 8;
        }
        this.length++;
      }
    };
    module.exports = BitBuffer;
  }
});

// node_modules/qrcode/lib/core/bit-matrix.js
var require_bit_matrix = __commonJS({
  "node_modules/qrcode/lib/core/bit-matrix.js"(exports, module) {
    function BitMatrix(size4) {
      if (!size4 || size4 < 1) {
        throw new Error("BitMatrix size must be defined and greater than 0");
      }
      this.size = size4;
      this.data = new Uint8Array(size4 * size4);
      this.reservedBit = new Uint8Array(size4 * size4);
    }
    BitMatrix.prototype.set = function(row, col, value, reserved) {
      const index3 = row * this.size + col;
      this.data[index3] = value;
      if (reserved)
        this.reservedBit[index3] = true;
    };
    BitMatrix.prototype.get = function(row, col) {
      return this.data[row * this.size + col];
    };
    BitMatrix.prototype.xor = function(row, col, value) {
      this.data[row * this.size + col] ^= value;
    };
    BitMatrix.prototype.isReserved = function(row, col) {
      return this.reservedBit[row * this.size + col];
    };
    module.exports = BitMatrix;
  }
});

// node_modules/qrcode/lib/core/alignment-pattern.js
var require_alignment_pattern = __commonJS({
  "node_modules/qrcode/lib/core/alignment-pattern.js"(exports) {
    var getSymbolSize = require_utils().getSymbolSize;
    exports.getRowColCoords = function getRowColCoords(version2) {
      if (version2 === 1)
        return [];
      const posCount = Math.floor(version2 / 7) + 2;
      const size4 = getSymbolSize(version2);
      const intervals = size4 === 145 ? 26 : Math.ceil((size4 - 13) / (2 * posCount - 2)) * 2;
      const positions = [size4 - 7];
      for (let i = 1; i < posCount - 1; i++) {
        positions[i] = positions[i - 1] - intervals;
      }
      positions.push(6);
      return positions.reverse();
    };
    exports.getPositions = function getPositions(version2) {
      const coords = [];
      const pos = exports.getRowColCoords(version2);
      const posLength = pos.length;
      for (let i = 0; i < posLength; i++) {
        for (let j = 0; j < posLength; j++) {
          if (i === 0 && j === 0 || // top-left
          i === 0 && j === posLength - 1 || // bottom-left
          i === posLength - 1 && j === 0) {
            continue;
          }
          coords.push([pos[i], pos[j]]);
        }
      }
      return coords;
    };
  }
});

// node_modules/qrcode/lib/core/finder-pattern.js
var require_finder_pattern = __commonJS({
  "node_modules/qrcode/lib/core/finder-pattern.js"(exports) {
    var getSymbolSize = require_utils().getSymbolSize;
    var FINDER_PATTERN_SIZE = 7;
    exports.getPositions = function getPositions(version2) {
      const size4 = getSymbolSize(version2);
      return [
        // top-left
        [0, 0],
        // top-right
        [size4 - FINDER_PATTERN_SIZE, 0],
        // bottom-left
        [0, size4 - FINDER_PATTERN_SIZE]
      ];
    };
  }
});

// node_modules/qrcode/lib/core/mask-pattern.js
var require_mask_pattern = __commonJS({
  "node_modules/qrcode/lib/core/mask-pattern.js"(exports) {
    exports.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var PenaltyScores = {
      N1: 3,
      N2: 3,
      N3: 40,
      N4: 10
    };
    exports.isValid = function isValid(mask) {
      return mask != null && mask !== "" && !isNaN(mask) && mask >= 0 && mask <= 7;
    };
    exports.from = function from2(value) {
      return exports.isValid(value) ? parseInt(value, 10) : void 0;
    };
    exports.getPenaltyN1 = function getPenaltyN1(data) {
      const size4 = data.size;
      let points = 0;
      let sameCountCol = 0;
      let sameCountRow = 0;
      let lastCol = null;
      let lastRow = null;
      for (let row = 0; row < size4; row++) {
        sameCountCol = sameCountRow = 0;
        lastCol = lastRow = null;
        for (let col = 0; col < size4; col++) {
          let module2 = data.get(row, col);
          if (module2 === lastCol) {
            sameCountCol++;
          } else {
            if (sameCountCol >= 5)
              points += PenaltyScores.N1 + (sameCountCol - 5);
            lastCol = module2;
            sameCountCol = 1;
          }
          module2 = data.get(col, row);
          if (module2 === lastRow) {
            sameCountRow++;
          } else {
            if (sameCountRow >= 5)
              points += PenaltyScores.N1 + (sameCountRow - 5);
            lastRow = module2;
            sameCountRow = 1;
          }
        }
        if (sameCountCol >= 5)
          points += PenaltyScores.N1 + (sameCountCol - 5);
        if (sameCountRow >= 5)
          points += PenaltyScores.N1 + (sameCountRow - 5);
      }
      return points;
    };
    exports.getPenaltyN2 = function getPenaltyN2(data) {
      const size4 = data.size;
      let points = 0;
      for (let row = 0; row < size4 - 1; row++) {
        for (let col = 0; col < size4 - 1; col++) {
          const last3 = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
          if (last3 === 4 || last3 === 0)
            points++;
        }
      }
      return points * PenaltyScores.N2;
    };
    exports.getPenaltyN3 = function getPenaltyN3(data) {
      const size4 = data.size;
      let points = 0;
      let bitsCol = 0;
      let bitsRow = 0;
      for (let row = 0; row < size4; row++) {
        bitsCol = bitsRow = 0;
        for (let col = 0; col < size4; col++) {
          bitsCol = bitsCol << 1 & 2047 | data.get(row, col);
          if (col >= 10 && (bitsCol === 1488 || bitsCol === 93))
            points++;
          bitsRow = bitsRow << 1 & 2047 | data.get(col, row);
          if (col >= 10 && (bitsRow === 1488 || bitsRow === 93))
            points++;
        }
      }
      return points * PenaltyScores.N3;
    };
    exports.getPenaltyN4 = function getPenaltyN4(data) {
      let darkCount = 0;
      const modulesCount = data.data.length;
      for (let i = 0; i < modulesCount; i++)
        darkCount += data.data[i];
      const k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
      return k * PenaltyScores.N4;
    };
    function getMaskAt(maskPattern, i, j) {
      switch (maskPattern) {
        case exports.Patterns.PATTERN000:
          return (i + j) % 2 === 0;
        case exports.Patterns.PATTERN001:
          return i % 2 === 0;
        case exports.Patterns.PATTERN010:
          return j % 3 === 0;
        case exports.Patterns.PATTERN011:
          return (i + j) % 3 === 0;
        case exports.Patterns.PATTERN100:
          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;
        case exports.Patterns.PATTERN101:
          return i * j % 2 + i * j % 3 === 0;
        case exports.Patterns.PATTERN110:
          return (i * j % 2 + i * j % 3) % 2 === 0;
        case exports.Patterns.PATTERN111:
          return (i * j % 3 + (i + j) % 2) % 2 === 0;
        default:
          throw new Error("bad maskPattern:" + maskPattern);
      }
    }
    exports.applyMask = function applyMask(pattern, data) {
      const size4 = data.size;
      for (let col = 0; col < size4; col++) {
        for (let row = 0; row < size4; row++) {
          if (data.isReserved(row, col))
            continue;
          data.xor(row, col, getMaskAt(pattern, row, col));
        }
      }
    };
    exports.getBestMask = function getBestMask(data, setupFormatFunc) {
      const numPatterns = Object.keys(exports.Patterns).length;
      let bestPattern = 0;
      let lowerPenalty = Infinity;
      for (let p = 0; p < numPatterns; p++) {
        setupFormatFunc(p);
        exports.applyMask(p, data);
        const penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);
        exports.applyMask(p, data);
        if (penalty < lowerPenalty) {
          lowerPenalty = penalty;
          bestPattern = p;
        }
      }
      return bestPattern;
    };
  }
});

// node_modules/qrcode/lib/core/error-correction-code.js
var require_error_correction_code = __commonJS({
  "node_modules/qrcode/lib/core/error-correction-code.js"(exports) {
    var ECLevel = require_error_correction_level();
    var EC_BLOCKS_TABLE = [
      // L  M  Q  H
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      1,
      2,
      2,
      4,
      1,
      2,
      4,
      4,
      2,
      4,
      4,
      4,
      2,
      4,
      6,
      5,
      2,
      4,
      6,
      6,
      2,
      5,
      8,
      8,
      4,
      5,
      8,
      8,
      4,
      5,
      8,
      11,
      4,
      8,
      10,
      11,
      4,
      9,
      12,
      16,
      4,
      9,
      16,
      16,
      6,
      10,
      12,
      18,
      6,
      10,
      17,
      16,
      6,
      11,
      16,
      19,
      6,
      13,
      18,
      21,
      7,
      14,
      21,
      25,
      8,
      16,
      20,
      25,
      8,
      17,
      23,
      25,
      9,
      17,
      23,
      34,
      9,
      18,
      25,
      30,
      10,
      20,
      27,
      32,
      12,
      21,
      29,
      35,
      12,
      23,
      34,
      37,
      12,
      25,
      34,
      40,
      13,
      26,
      35,
      42,
      14,
      28,
      38,
      45,
      15,
      29,
      40,
      48,
      16,
      31,
      43,
      51,
      17,
      33,
      45,
      54,
      18,
      35,
      48,
      57,
      19,
      37,
      51,
      60,
      19,
      38,
      53,
      63,
      20,
      40,
      56,
      66,
      21,
      43,
      59,
      70,
      22,
      45,
      62,
      74,
      24,
      47,
      65,
      77,
      25,
      49,
      68,
      81
    ];
    var EC_CODEWORDS_TABLE = [
      // L  M  Q  H
      7,
      10,
      13,
      17,
      10,
      16,
      22,
      28,
      15,
      26,
      36,
      44,
      20,
      36,
      52,
      64,
      26,
      48,
      72,
      88,
      36,
      64,
      96,
      112,
      40,
      72,
      108,
      130,
      48,
      88,
      132,
      156,
      60,
      110,
      160,
      192,
      72,
      130,
      192,
      224,
      80,
      150,
      224,
      264,
      96,
      176,
      260,
      308,
      104,
      198,
      288,
      352,
      120,
      216,
      320,
      384,
      132,
      240,
      360,
      432,
      144,
      280,
      408,
      480,
      168,
      308,
      448,
      532,
      180,
      338,
      504,
      588,
      196,
      364,
      546,
      650,
      224,
      416,
      600,
      700,
      224,
      442,
      644,
      750,
      252,
      476,
      690,
      816,
      270,
      504,
      750,
      900,
      300,
      560,
      810,
      960,
      312,
      588,
      870,
      1050,
      336,
      644,
      952,
      1110,
      360,
      700,
      1020,
      1200,
      390,
      728,
      1050,
      1260,
      420,
      784,
      1140,
      1350,
      450,
      812,
      1200,
      1440,
      480,
      868,
      1290,
      1530,
      510,
      924,
      1350,
      1620,
      540,
      980,
      1440,
      1710,
      570,
      1036,
      1530,
      1800,
      570,
      1064,
      1590,
      1890,
      600,
      1120,
      1680,
      1980,
      630,
      1204,
      1770,
      2100,
      660,
      1260,
      1860,
      2220,
      720,
      1316,
      1950,
      2310,
      750,
      1372,
      2040,
      2430
    ];
    exports.getBlocksCount = function getBlocksCount(version2, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_BLOCKS_TABLE[(version2 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_BLOCKS_TABLE[(version2 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_BLOCKS_TABLE[(version2 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_BLOCKS_TABLE[(version2 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
    exports.getTotalCodewordsCount = function getTotalCodewordsCount(version2, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_CODEWORDS_TABLE[(version2 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_CODEWORDS_TABLE[(version2 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_CODEWORDS_TABLE[(version2 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_CODEWORDS_TABLE[(version2 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
  }
});

// node_modules/qrcode/lib/core/galois-field.js
var require_galois_field = __commonJS({
  "node_modules/qrcode/lib/core/galois-field.js"(exports) {
    var EXP_TABLE = new Uint8Array(512);
    var LOG_TABLE = new Uint8Array(256);
    (function initTables() {
      let x = 1;
      for (let i = 0; i < 255; i++) {
        EXP_TABLE[i] = x;
        LOG_TABLE[x] = i;
        x <<= 1;
        if (x & 256) {
          x ^= 285;
        }
      }
      for (let i = 255; i < 512; i++) {
        EXP_TABLE[i] = EXP_TABLE[i - 255];
      }
    })();
    exports.log = function log3(n) {
      if (n < 1)
        throw new Error("log(" + n + ")");
      return LOG_TABLE[n];
    };
    exports.exp = function exp(n) {
      return EXP_TABLE[n];
    };
    exports.mul = function mul(x, y) {
      if (x === 0 || y === 0)
        return 0;
      return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];
    };
  }
});

// node_modules/qrcode/lib/core/polynomial.js
var require_polynomial = __commonJS({
  "node_modules/qrcode/lib/core/polynomial.js"(exports) {
    var GF = require_galois_field();
    exports.mul = function mul(p1, p2) {
      const coeff = new Uint8Array(p1.length + p2.length - 1);
      for (let i = 0; i < p1.length; i++) {
        for (let j = 0; j < p2.length; j++) {
          coeff[i + j] ^= GF.mul(p1[i], p2[j]);
        }
      }
      return coeff;
    };
    exports.mod = function mod(divident, divisor) {
      let result = new Uint8Array(divident);
      while (result.length - divisor.length >= 0) {
        const coeff = result[0];
        for (let i = 0; i < divisor.length; i++) {
          result[i] ^= GF.mul(divisor[i], coeff);
        }
        let offset4 = 0;
        while (offset4 < result.length && result[offset4] === 0)
          offset4++;
        result = result.slice(offset4);
      }
      return result;
    };
    exports.generateECPolynomial = function generateECPolynomial(degree) {
      let poly = new Uint8Array([1]);
      for (let i = 0; i < degree; i++) {
        poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]));
      }
      return poly;
    };
  }
});

// node_modules/qrcode/lib/core/reed-solomon-encoder.js
var require_reed_solomon_encoder = __commonJS({
  "node_modules/qrcode/lib/core/reed-solomon-encoder.js"(exports, module) {
    var Polynomial = require_polynomial();
    function ReedSolomonEncoder(degree) {
      this.genPoly = void 0;
      this.degree = degree;
      if (this.degree)
        this.initialize(this.degree);
    }
    ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
      this.degree = degree;
      this.genPoly = Polynomial.generateECPolynomial(this.degree);
    };
    ReedSolomonEncoder.prototype.encode = function encode(data) {
      if (!this.genPoly) {
        throw new Error("Encoder not initialized");
      }
      const paddedData = new Uint8Array(data.length + this.degree);
      paddedData.set(data);
      const remainder = Polynomial.mod(paddedData, this.genPoly);
      const start3 = this.degree - remainder.length;
      if (start3 > 0) {
        const buff = new Uint8Array(this.degree);
        buff.set(remainder, start3);
        return buff;
      }
      return remainder;
    };
    module.exports = ReedSolomonEncoder;
  }
});

// node_modules/qrcode/lib/core/version-check.js
var require_version_check = __commonJS({
  "node_modules/qrcode/lib/core/version-check.js"(exports) {
    exports.isValid = function isValid(version2) {
      return !isNaN(version2) && version2 >= 1 && version2 <= 40;
    };
  }
});

// node_modules/qrcode/lib/core/regex.js
var require_regex = __commonJS({
  "node_modules/qrcode/lib/core/regex.js"(exports) {
    var numeric = "[0-9]+";
    var alphanumeric = "[A-Z $%*+\\-./:]+";
    var kanji = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
    kanji = kanji.replace(/u/g, "\\u");
    var byte = "(?:(?![A-Z0-9 $%*+\\-./:]|" + kanji + ")(?:.|[\r\n]))+";
    exports.KANJI = new RegExp(kanji, "g");
    exports.BYTE_KANJI = new RegExp("[^A-Z0-9 $%*+\\-./:]+", "g");
    exports.BYTE = new RegExp(byte, "g");
    exports.NUMERIC = new RegExp(numeric, "g");
    exports.ALPHANUMERIC = new RegExp(alphanumeric, "g");
    var TEST_KANJI = new RegExp("^" + kanji + "$");
    var TEST_NUMERIC = new RegExp("^" + numeric + "$");
    var TEST_ALPHANUMERIC = new RegExp("^[A-Z0-9 $%*+\\-./:]+$");
    exports.testKanji = function testKanji(str) {
      return TEST_KANJI.test(str);
    };
    exports.testNumeric = function testNumeric(str) {
      return TEST_NUMERIC.test(str);
    };
    exports.testAlphanumeric = function testAlphanumeric(str) {
      return TEST_ALPHANUMERIC.test(str);
    };
  }
});

// node_modules/qrcode/lib/core/mode.js
var require_mode = __commonJS({
  "node_modules/qrcode/lib/core/mode.js"(exports) {
    var VersionCheck = require_version_check();
    var Regex = require_regex();
    exports.NUMERIC = {
      id: "Numeric",
      bit: 1 << 0,
      ccBits: [10, 12, 14]
    };
    exports.ALPHANUMERIC = {
      id: "Alphanumeric",
      bit: 1 << 1,
      ccBits: [9, 11, 13]
    };
    exports.BYTE = {
      id: "Byte",
      bit: 1 << 2,
      ccBits: [8, 16, 16]
    };
    exports.KANJI = {
      id: "Kanji",
      bit: 1 << 3,
      ccBits: [8, 10, 12]
    };
    exports.MIXED = {
      bit: -1
    };
    exports.getCharCountIndicator = function getCharCountIndicator(mode, version2) {
      if (!mode.ccBits)
        throw new Error("Invalid mode: " + mode);
      if (!VersionCheck.isValid(version2)) {
        throw new Error("Invalid version: " + version2);
      }
      if (version2 >= 1 && version2 < 10)
        return mode.ccBits[0];
      else if (version2 < 27)
        return mode.ccBits[1];
      return mode.ccBits[2];
    };
    exports.getBestModeForData = function getBestModeForData(dataStr) {
      if (Regex.testNumeric(dataStr))
        return exports.NUMERIC;
      else if (Regex.testAlphanumeric(dataStr))
        return exports.ALPHANUMERIC;
      else if (Regex.testKanji(dataStr))
        return exports.KANJI;
      else
        return exports.BYTE;
    };
    exports.toString = function toString(mode) {
      if (mode && mode.id)
        return mode.id;
      throw new Error("Invalid mode");
    };
    exports.isValid = function isValid(mode) {
      return mode && mode.bit && mode.ccBits;
    };
    function fromString(string) {
      if (typeof string !== "string") {
        throw new Error("Param is not a string");
      }
      const lcStr = string.toLowerCase();
      switch (lcStr) {
        case "numeric":
          return exports.NUMERIC;
        case "alphanumeric":
          return exports.ALPHANUMERIC;
        case "kanji":
          return exports.KANJI;
        case "byte":
          return exports.BYTE;
        default:
          throw new Error("Unknown mode: " + string);
      }
    }
    exports.from = function from2(value, defaultValue2) {
      if (exports.isValid(value)) {
        return value;
      }
      try {
        return fromString(value);
      } catch (e) {
        return defaultValue2;
      }
    };
  }
});

// node_modules/qrcode/lib/core/version.js
var require_version = __commonJS({
  "node_modules/qrcode/lib/core/version.js"(exports) {
    var Utils = require_utils();
    var ECCode = require_error_correction_code();
    var ECLevel = require_error_correction_level();
    var Mode = require_mode();
    var VersionCheck = require_version_check();
    var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
    var G18_BCH = Utils.getBCHDigit(G18);
    function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
      for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    function getReservedBitsCount(mode, version2) {
      return Mode.getCharCountIndicator(mode, version2) + 4;
    }
    function getTotalBitsFromDataArray(segments, version2) {
      let totalBits = 0;
      segments.forEach(function(data) {
        const reservedBits = getReservedBitsCount(data.mode, version2);
        totalBits += reservedBits + data.getBitsLength();
      });
      return totalBits;
    }
    function getBestVersionForMixedData(segments, errorCorrectionLevel) {
      for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
        const length = getTotalBitsFromDataArray(segments, currentVersion);
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    exports.from = function from2(value, defaultValue2) {
      if (VersionCheck.isValid(value)) {
        return parseInt(value, 10);
      }
      return defaultValue2;
    };
    exports.getCapacity = function getCapacity(version2, errorCorrectionLevel, mode) {
      if (!VersionCheck.isValid(version2)) {
        throw new Error("Invalid QR Code version");
      }
      if (typeof mode === "undefined")
        mode = Mode.BYTE;
      const totalCodewords = Utils.getSymbolTotalCodewords(version2);
      const ecTotalCodewords = ECCode.getTotalCodewordsCount(version2, errorCorrectionLevel);
      const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (mode === Mode.MIXED)
        return dataTotalCodewordsBits;
      const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version2);
      switch (mode) {
        case Mode.NUMERIC:
          return Math.floor(usableBits / 10 * 3);
        case Mode.ALPHANUMERIC:
          return Math.floor(usableBits / 11 * 2);
        case Mode.KANJI:
          return Math.floor(usableBits / 13);
        case Mode.BYTE:
        default:
          return Math.floor(usableBits / 8);
      }
    };
    exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
      let seg;
      const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);
      if (Array.isArray(data)) {
        if (data.length > 1) {
          return getBestVersionForMixedData(data, ecl);
        }
        if (data.length === 0) {
          return 1;
        }
        seg = data[0];
      } else {
        seg = data;
      }
      return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
    };
    exports.getEncodedBits = function getEncodedBits(version2) {
      if (!VersionCheck.isValid(version2) || version2 < 7) {
        throw new Error("Invalid QR Code version");
      }
      let d = version2 << 12;
      while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
        d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;
      }
      return version2 << 12 | d;
    };
  }
});

// node_modules/qrcode/lib/core/format-info.js
var require_format_info = __commonJS({
  "node_modules/qrcode/lib/core/format-info.js"(exports) {
    var Utils = require_utils();
    var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
    var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
    var G15_BCH = Utils.getBCHDigit(G15);
    exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
      const data = errorCorrectionLevel.bit << 3 | mask;
      let d = data << 10;
      while (Utils.getBCHDigit(d) - G15_BCH >= 0) {
        d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;
      }
      return (data << 10 | d) ^ G15_MASK;
    };
  }
});

// node_modules/qrcode/lib/core/numeric-data.js
var require_numeric_data = __commonJS({
  "node_modules/qrcode/lib/core/numeric-data.js"(exports, module) {
    var Mode = require_mode();
    function NumericData(data) {
      this.mode = Mode.NUMERIC;
      this.data = data.toString();
    }
    NumericData.getBitsLength = function getBitsLength(length) {
      return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);
    };
    NumericData.prototype.getLength = function getLength() {
      return this.data.length;
    };
    NumericData.prototype.getBitsLength = function getBitsLength() {
      return NumericData.getBitsLength(this.data.length);
    };
    NumericData.prototype.write = function write(bitBuffer) {
      let i, group, value;
      for (i = 0; i + 3 <= this.data.length; i += 3) {
        group = this.data.substr(i, 3);
        value = parseInt(group, 10);
        bitBuffer.put(value, 10);
      }
      const remainingNum = this.data.length - i;
      if (remainingNum > 0) {
        group = this.data.substr(i);
        value = parseInt(group, 10);
        bitBuffer.put(value, remainingNum * 3 + 1);
      }
    };
    module.exports = NumericData;
  }
});

// node_modules/qrcode/lib/core/alphanumeric-data.js
var require_alphanumeric_data = __commonJS({
  "node_modules/qrcode/lib/core/alphanumeric-data.js"(exports, module) {
    var Mode = require_mode();
    var ALPHA_NUM_CHARS = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      " ",
      "$",
      "%",
      "*",
      "+",
      "-",
      ".",
      "/",
      ":"
    ];
    function AlphanumericData(data) {
      this.mode = Mode.ALPHANUMERIC;
      this.data = data;
    }
    AlphanumericData.getBitsLength = function getBitsLength(length) {
      return 11 * Math.floor(length / 2) + 6 * (length % 2);
    };
    AlphanumericData.prototype.getLength = function getLength() {
      return this.data.length;
    };
    AlphanumericData.prototype.getBitsLength = function getBitsLength() {
      return AlphanumericData.getBitsLength(this.data.length);
    };
    AlphanumericData.prototype.write = function write(bitBuffer) {
      let i;
      for (i = 0; i + 2 <= this.data.length; i += 2) {
        let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;
        value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);
        bitBuffer.put(value, 11);
      }
      if (this.data.length % 2) {
        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
      }
    };
    module.exports = AlphanumericData;
  }
});

// node_modules/encode-utf8/index.js
var require_encode_utf8 = __commonJS({
  "node_modules/encode-utf8/index.js"(exports, module) {
    "use strict";
    module.exports = function encodeUtf8(input2) {
      var result = [];
      var size4 = input2.length;
      for (var index3 = 0; index3 < size4; index3++) {
        var point = input2.charCodeAt(index3);
        if (point >= 55296 && point <= 56319 && size4 > index3 + 1) {
          var second = input2.charCodeAt(index3 + 1);
          if (second >= 56320 && second <= 57343) {
            point = (point - 55296) * 1024 + second - 56320 + 65536;
            index3 += 1;
          }
        }
        if (point < 128) {
          result.push(point);
          continue;
        }
        if (point < 2048) {
          result.push(point >> 6 | 192);
          result.push(point & 63 | 128);
          continue;
        }
        if (point < 55296 || point >= 57344 && point < 65536) {
          result.push(point >> 12 | 224);
          result.push(point >> 6 & 63 | 128);
          result.push(point & 63 | 128);
          continue;
        }
        if (point >= 65536 && point <= 1114111) {
          result.push(point >> 18 | 240);
          result.push(point >> 12 & 63 | 128);
          result.push(point >> 6 & 63 | 128);
          result.push(point & 63 | 128);
          continue;
        }
        result.push(239, 191, 189);
      }
      return new Uint8Array(result).buffer;
    };
  }
});

// node_modules/qrcode/lib/core/byte-data.js
var require_byte_data = __commonJS({
  "node_modules/qrcode/lib/core/byte-data.js"(exports, module) {
    var encodeUtf8 = require_encode_utf8();
    var Mode = require_mode();
    function ByteData(data) {
      this.mode = Mode.BYTE;
      this.data = new Uint8Array(encodeUtf8(data));
    }
    ByteData.getBitsLength = function getBitsLength(length) {
      return length * 8;
    };
    ByteData.prototype.getLength = function getLength() {
      return this.data.length;
    };
    ByteData.prototype.getBitsLength = function getBitsLength() {
      return ByteData.getBitsLength(this.data.length);
    };
    ByteData.prototype.write = function(bitBuffer) {
      for (let i = 0, l = this.data.length; i < l; i++) {
        bitBuffer.put(this.data[i], 8);
      }
    };
    module.exports = ByteData;
  }
});

// node_modules/qrcode/lib/core/kanji-data.js
var require_kanji_data = __commonJS({
  "node_modules/qrcode/lib/core/kanji-data.js"(exports, module) {
    var Mode = require_mode();
    var Utils = require_utils();
    function KanjiData(data) {
      this.mode = Mode.KANJI;
      this.data = data;
    }
    KanjiData.getBitsLength = function getBitsLength(length) {
      return length * 13;
    };
    KanjiData.prototype.getLength = function getLength() {
      return this.data.length;
    };
    KanjiData.prototype.getBitsLength = function getBitsLength() {
      return KanjiData.getBitsLength(this.data.length);
    };
    KanjiData.prototype.write = function(bitBuffer) {
      let i;
      for (i = 0; i < this.data.length; i++) {
        let value = Utils.toSJIS(this.data[i]);
        if (value >= 33088 && value <= 40956) {
          value -= 33088;
        } else if (value >= 57408 && value <= 60351) {
          value -= 49472;
        } else {
          throw new Error(
            "Invalid SJIS character: " + this.data[i] + "\nMake sure your charset is UTF-8"
          );
        }
        value = (value >>> 8 & 255) * 192 + (value & 255);
        bitBuffer.put(value, 13);
      }
    };
    module.exports = KanjiData;
  }
});

// node_modules/dijkstrajs/dijkstra.js
var require_dijkstra = __commonJS({
  "node_modules/dijkstrajs/dijkstra.js"(exports, module) {
    "use strict";
    var dijkstra = {
      single_source_shortest_paths: function(graph, s, d) {
        var predecessors = {};
        var costs = {};
        costs[s] = 0;
        var open = dijkstra.PriorityQueue.make();
        open.push(s, 0);
        var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;
        while (!open.empty()) {
          closest = open.pop();
          u = closest.value;
          cost_of_s_to_u = closest.cost;
          adjacent_nodes = graph[u] || {};
          for (v in adjacent_nodes) {
            if (adjacent_nodes.hasOwnProperty(v)) {
              cost_of_e = adjacent_nodes[v];
              cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;
              cost_of_s_to_v = costs[v];
              first_visit = typeof costs[v] === "undefined";
              if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
                costs[v] = cost_of_s_to_u_plus_cost_of_e;
                open.push(v, cost_of_s_to_u_plus_cost_of_e);
                predecessors[v] = u;
              }
            }
          }
        }
        if (typeof d !== "undefined" && typeof costs[d] === "undefined") {
          var msg = ["Could not find a path from ", s, " to ", d, "."].join("");
          throw new Error(msg);
        }
        return predecessors;
      },
      extract_shortest_path_from_predecessor_list: function(predecessors, d) {
        var nodes = [];
        var u = d;
        var predecessor;
        while (u) {
          nodes.push(u);
          predecessor = predecessors[u];
          u = predecessors[u];
        }
        nodes.reverse();
        return nodes;
      },
      find_path: function(graph, s, d) {
        var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
        return dijkstra.extract_shortest_path_from_predecessor_list(
          predecessors,
          d
        );
      },
      /**
       * A very naive priority queue implementation.
       */
      PriorityQueue: {
        make: function(opts) {
          var T = dijkstra.PriorityQueue, t2 = {}, key;
          opts = opts || {};
          for (key in T) {
            if (T.hasOwnProperty(key)) {
              t2[key] = T[key];
            }
          }
          t2.queue = [];
          t2.sorter = opts.sorter || T.default_sorter;
          return t2;
        },
        default_sorter: function(a, b) {
          return a.cost - b.cost;
        },
        /**
         * Add a new item to the queue and ensure the highest priority element
         * is at the front of the queue.
         */
        push: function(value, cost) {
          var item = { value, cost };
          this.queue.push(item);
          this.queue.sort(this.sorter);
        },
        /**
         * Return the highest priority element in the queue.
         */
        pop: function() {
          return this.queue.shift();
        },
        empty: function() {
          return this.queue.length === 0;
        }
      }
    };
    if (typeof module !== "undefined") {
      module.exports = dijkstra;
    }
  }
});

// node_modules/qrcode/lib/core/segments.js
var require_segments = __commonJS({
  "node_modules/qrcode/lib/core/segments.js"(exports) {
    var Mode = require_mode();
    var NumericData = require_numeric_data();
    var AlphanumericData = require_alphanumeric_data();
    var ByteData = require_byte_data();
    var KanjiData = require_kanji_data();
    var Regex = require_regex();
    var Utils = require_utils();
    var dijkstra = require_dijkstra();
    function getStringByteLength(str) {
      return unescape(encodeURIComponent(str)).length;
    }
    function getSegments(regex, mode, str) {
      const segments = [];
      let result;
      while ((result = regex.exec(str)) !== null) {
        segments.push({
          data: result[0],
          index: result.index,
          mode,
          length: result[0].length
        });
      }
      return segments;
    }
    function getSegmentsFromString(dataStr) {
      const numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
      const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
      let byteSegs;
      let kanjiSegs;
      if (Utils.isKanjiModeEnabled()) {
        byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
        kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
      } else {
        byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
        kanjiSegs = [];
      }
      const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
      return segs.sort(function(s1, s2) {
        return s1.index - s2.index;
      }).map(function(obj) {
        return {
          data: obj.data,
          mode: obj.mode,
          length: obj.length
        };
      });
    }
    function getSegmentBitsLength(length, mode) {
      switch (mode) {
        case Mode.NUMERIC:
          return NumericData.getBitsLength(length);
        case Mode.ALPHANUMERIC:
          return AlphanumericData.getBitsLength(length);
        case Mode.KANJI:
          return KanjiData.getBitsLength(length);
        case Mode.BYTE:
          return ByteData.getBitsLength(length);
      }
    }
    function mergeSegments(segs) {
      return segs.reduce(function(acc, curr) {
        const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
        if (prevSeg && prevSeg.mode === curr.mode) {
          acc[acc.length - 1].data += curr.data;
          return acc;
        }
        acc.push(curr);
        return acc;
      }, []);
    }
    function buildNodes(segs) {
      const nodes = [];
      for (let i = 0; i < segs.length; i++) {
        const seg = segs[i];
        switch (seg.mode) {
          case Mode.NUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.ALPHANUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.KANJI:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
            break;
          case Mode.BYTE:
            nodes.push([
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
        }
      }
      return nodes;
    }
    function buildGraph(nodes, version2) {
      const table2 = {};
      const graph = { start: {} };
      let prevNodeIds = ["start"];
      for (let i = 0; i < nodes.length; i++) {
        const nodeGroup = nodes[i];
        const currentNodeIds = [];
        for (let j = 0; j < nodeGroup.length; j++) {
          const node = nodeGroup[j];
          const key = "" + i + j;
          currentNodeIds.push(key);
          table2[key] = { node, lastCount: 0 };
          graph[key] = {};
          for (let n = 0; n < prevNodeIds.length; n++) {
            const prevNodeId = prevNodeIds[n];
            if (table2[prevNodeId] && table2[prevNodeId].node.mode === node.mode) {
              graph[prevNodeId][key] = getSegmentBitsLength(table2[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table2[prevNodeId].lastCount, node.mode);
              table2[prevNodeId].lastCount += node.length;
            } else {
              if (table2[prevNodeId])
                table2[prevNodeId].lastCount = node.length;
              graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version2);
            }
          }
        }
        prevNodeIds = currentNodeIds;
      }
      for (let n = 0; n < prevNodeIds.length; n++) {
        graph[prevNodeIds[n]].end = 0;
      }
      return { map: graph, table: table2 };
    }
    function buildSingleSegment(data, modesHint) {
      let mode;
      const bestMode = Mode.getBestModeForData(data);
      mode = Mode.from(modesHint, bestMode);
      if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
        throw new Error('"' + data + '" cannot be encoded with mode ' + Mode.toString(mode) + ".\n Suggested mode is: " + Mode.toString(bestMode));
      }
      if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
        mode = Mode.BYTE;
      }
      switch (mode) {
        case Mode.NUMERIC:
          return new NumericData(data);
        case Mode.ALPHANUMERIC:
          return new AlphanumericData(data);
        case Mode.KANJI:
          return new KanjiData(data);
        case Mode.BYTE:
          return new ByteData(data);
      }
    }
    exports.fromArray = function fromArray(array) {
      return array.reduce(function(acc, seg) {
        if (typeof seg === "string") {
          acc.push(buildSingleSegment(seg, null));
        } else if (seg.data) {
          acc.push(buildSingleSegment(seg.data, seg.mode));
        }
        return acc;
      }, []);
    };
    exports.fromString = function fromString(data, version2) {
      const segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());
      const nodes = buildNodes(segs);
      const graph = buildGraph(nodes, version2);
      const path2 = dijkstra.find_path(graph.map, "start", "end");
      const optimizedSegs = [];
      for (let i = 1; i < path2.length - 1; i++) {
        optimizedSegs.push(graph.table[path2[i]].node);
      }
      return exports.fromArray(mergeSegments(optimizedSegs));
    };
    exports.rawSplit = function rawSplit(data) {
      return exports.fromArray(
        getSegmentsFromString(data, Utils.isKanjiModeEnabled())
      );
    };
  }
});

// node_modules/qrcode/lib/core/qrcode.js
var require_qrcode = __commonJS({
  "node_modules/qrcode/lib/core/qrcode.js"(exports) {
    var Utils = require_utils();
    var ECLevel = require_error_correction_level();
    var BitBuffer = require_bit_buffer();
    var BitMatrix = require_bit_matrix();
    var AlignmentPattern = require_alignment_pattern();
    var FinderPattern = require_finder_pattern();
    var MaskPattern = require_mask_pattern();
    var ECCode = require_error_correction_code();
    var ReedSolomonEncoder = require_reed_solomon_encoder();
    var Version = require_version();
    var FormatInfo = require_format_info();
    var Mode = require_mode();
    var Segments = require_segments();
    function setupFinderPattern(matrix, version2) {
      const size4 = matrix.size;
      const pos = FinderPattern.getPositions(version2);
      for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0];
        const col = pos[i][1];
        for (let r = -1; r <= 7; r++) {
          if (row + r <= -1 || size4 <= row + r)
            continue;
          for (let c = -1; c <= 7; c++) {
            if (col + c <= -1 || size4 <= col + c)
              continue;
            if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {
              matrix.set(row + r, col + c, true, true);
            } else {
              matrix.set(row + r, col + c, false, true);
            }
          }
        }
      }
    }
    function setupTimingPattern(matrix) {
      const size4 = matrix.size;
      for (let r = 8; r < size4 - 8; r++) {
        const value = r % 2 === 0;
        matrix.set(r, 6, value, true);
        matrix.set(6, r, value, true);
      }
    }
    function setupAlignmentPattern(matrix, version2) {
      const pos = AlignmentPattern.getPositions(version2);
      for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0];
        const col = pos[i][1];
        for (let r = -2; r <= 2; r++) {
          for (let c = -2; c <= 2; c++) {
            if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {
              matrix.set(row + r, col + c, true, true);
            } else {
              matrix.set(row + r, col + c, false, true);
            }
          }
        }
      }
    }
    function setupVersionInfo(matrix, version2) {
      const size4 = matrix.size;
      const bits = Version.getEncodedBits(version2);
      let row, col, mod;
      for (let i = 0; i < 18; i++) {
        row = Math.floor(i / 3);
        col = i % 3 + size4 - 8 - 3;
        mod = (bits >> i & 1) === 1;
        matrix.set(row, col, mod, true);
        matrix.set(col, row, mod, true);
      }
    }
    function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
      const size4 = matrix.size;
      const bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
      let i, mod;
      for (i = 0; i < 15; i++) {
        mod = (bits >> i & 1) === 1;
        if (i < 6) {
          matrix.set(i, 8, mod, true);
        } else if (i < 8) {
          matrix.set(i + 1, 8, mod, true);
        } else {
          matrix.set(size4 - 15 + i, 8, mod, true);
        }
        if (i < 8) {
          matrix.set(8, size4 - i - 1, mod, true);
        } else if (i < 9) {
          matrix.set(8, 15 - i - 1 + 1, mod, true);
        } else {
          matrix.set(8, 15 - i - 1, mod, true);
        }
      }
      matrix.set(size4 - 8, 8, 1, true);
    }
    function setupData(matrix, data) {
      const size4 = matrix.size;
      let inc = -1;
      let row = size4 - 1;
      let bitIndex = 7;
      let byteIndex = 0;
      for (let col = size4 - 1; col > 0; col -= 2) {
        if (col === 6)
          col--;
        while (true) {
          for (let c = 0; c < 2; c++) {
            if (!matrix.isReserved(row, col - c)) {
              let dark = false;
              if (byteIndex < data.length) {
                dark = (data[byteIndex] >>> bitIndex & 1) === 1;
              }
              matrix.set(row, col - c, dark);
              bitIndex--;
              if (bitIndex === -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }
          row += inc;
          if (row < 0 || size4 <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    }
    function createData(version2, errorCorrectionLevel, segments) {
      const buffer2 = new BitBuffer();
      segments.forEach(function(data) {
        buffer2.put(data.mode.bit, 4);
        buffer2.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version2));
        data.write(buffer2);
      });
      const totalCodewords = Utils.getSymbolTotalCodewords(version2);
      const ecTotalCodewords = ECCode.getTotalCodewordsCount(version2, errorCorrectionLevel);
      const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (buffer2.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
        buffer2.put(0, 4);
      }
      while (buffer2.getLengthInBits() % 8 !== 0) {
        buffer2.putBit(0);
      }
      const remainingByte = (dataTotalCodewordsBits - buffer2.getLengthInBits()) / 8;
      for (let i = 0; i < remainingByte; i++) {
        buffer2.put(i % 2 ? 17 : 236, 8);
      }
      return createCodewords(buffer2, version2, errorCorrectionLevel);
    }
    function createCodewords(bitBuffer, version2, errorCorrectionLevel) {
      const totalCodewords = Utils.getSymbolTotalCodewords(version2);
      const ecTotalCodewords = ECCode.getTotalCodewordsCount(version2, errorCorrectionLevel);
      const dataTotalCodewords = totalCodewords - ecTotalCodewords;
      const ecTotalBlocks = ECCode.getBlocksCount(version2, errorCorrectionLevel);
      const blocksInGroup2 = totalCodewords % ecTotalBlocks;
      const blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
      const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
      const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
      const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;
      const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;
      const rs = new ReedSolomonEncoder(ecCount);
      let offset4 = 0;
      const dcData = new Array(ecTotalBlocks);
      const ecData = new Array(ecTotalBlocks);
      let maxDataSize = 0;
      const buffer2 = new Uint8Array(bitBuffer.buffer);
      for (let b = 0; b < ecTotalBlocks; b++) {
        const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;
        dcData[b] = buffer2.slice(offset4, offset4 + dataSize);
        ecData[b] = rs.encode(dcData[b]);
        offset4 += dataSize;
        maxDataSize = Math.max(maxDataSize, dataSize);
      }
      const data = new Uint8Array(totalCodewords);
      let index3 = 0;
      let i, r;
      for (i = 0; i < maxDataSize; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          if (i < dcData[r].length) {
            data[index3++] = dcData[r][i];
          }
        }
      }
      for (i = 0; i < ecCount; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          data[index3++] = ecData[r][i];
        }
      }
      return data;
    }
    function createSymbol(data, version2, errorCorrectionLevel, maskPattern) {
      let segments;
      if (Array.isArray(data)) {
        segments = Segments.fromArray(data);
      } else if (typeof data === "string") {
        let estimatedVersion = version2;
        if (!estimatedVersion) {
          const rawSegments = Segments.rawSplit(data);
          estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);
        }
        segments = Segments.fromString(data, estimatedVersion || 40);
      } else {
        throw new Error("Invalid data");
      }
      const bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);
      if (!bestVersion) {
        throw new Error("The amount of data is too big to be stored in a QR Code");
      }
      if (!version2) {
        version2 = bestVersion;
      } else if (version2 < bestVersion) {
        throw new Error(
          "\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " + bestVersion + ".\n"
        );
      }
      const dataBits = createData(version2, errorCorrectionLevel, segments);
      const moduleCount = Utils.getSymbolSize(version2);
      const modules = new BitMatrix(moduleCount);
      setupFinderPattern(modules, version2);
      setupTimingPattern(modules);
      setupAlignmentPattern(modules, version2);
      setupFormatInfo(modules, errorCorrectionLevel, 0);
      if (version2 >= 7) {
        setupVersionInfo(modules, version2);
      }
      setupData(modules, dataBits);
      if (isNaN(maskPattern)) {
        maskPattern = MaskPattern.getBestMask(
          modules,
          setupFormatInfo.bind(null, modules, errorCorrectionLevel)
        );
      }
      MaskPattern.applyMask(maskPattern, modules);
      setupFormatInfo(modules, errorCorrectionLevel, maskPattern);
      return {
        modules,
        version: version2,
        errorCorrectionLevel,
        maskPattern,
        segments
      };
    }
    exports.create = function create(data, options) {
      if (typeof data === "undefined" || data === "") {
        throw new Error("No input text");
      }
      let errorCorrectionLevel = ECLevel.M;
      let version2;
      let mask;
      if (typeof options !== "undefined") {
        errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
        version2 = Version.from(options.version);
        mask = MaskPattern.from(options.maskPattern);
        if (options.toSJISFunc) {
          Utils.setToSJISFunction(options.toSJISFunc);
        }
      }
      return createSymbol(data, version2, errorCorrectionLevel, mask);
    };
  }
});

// node_modules/qrcode/lib/renderer/utils.js
var require_utils2 = __commonJS({
  "node_modules/qrcode/lib/renderer/utils.js"(exports) {
    function hex2rgba(hex) {
      if (typeof hex === "number") {
        hex = hex.toString();
      }
      if (typeof hex !== "string") {
        throw new Error("Color should be defined as hex string");
      }
      let hexCode = hex.slice().replace("#", "").split("");
      if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
        throw new Error("Invalid hex color: " + hex);
      }
      if (hexCode.length === 3 || hexCode.length === 4) {
        hexCode = Array.prototype.concat.apply([], hexCode.map(function(c) {
          return [c, c];
        }));
      }
      if (hexCode.length === 6)
        hexCode.push("F", "F");
      const hexValue = parseInt(hexCode.join(""), 16);
      return {
        r: hexValue >> 24 & 255,
        g: hexValue >> 16 & 255,
        b: hexValue >> 8 & 255,
        a: hexValue & 255,
        hex: "#" + hexCode.slice(0, 6).join("")
      };
    }
    exports.getOptions = function getOptions(options) {
      if (!options)
        options = {};
      if (!options.color)
        options.color = {};
      const margin = typeof options.margin === "undefined" || options.margin === null || options.margin < 0 ? 4 : options.margin;
      const width = options.width && options.width >= 21 ? options.width : void 0;
      const scale = options.scale || 4;
      return {
        width,
        scale: width ? 4 : scale,
        margin,
        color: {
          dark: hex2rgba(options.color.dark || "#000000ff"),
          light: hex2rgba(options.color.light || "#ffffffff")
        },
        type: options.type,
        rendererOpts: options.rendererOpts || {}
      };
    };
    exports.getScale = function getScale2(qrSize, opts) {
      return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
    };
    exports.getImageWidth = function getImageWidth(qrSize, opts) {
      const scale = exports.getScale(qrSize, opts);
      return Math.floor((qrSize + opts.margin * 2) * scale);
    };
    exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
      const size4 = qr.modules.size;
      const data = qr.modules.data;
      const scale = exports.getScale(size4, opts);
      const symbolSize = Math.floor((size4 + opts.margin * 2) * scale);
      const scaledMargin = opts.margin * scale;
      const palette = [opts.color.light, opts.color.dark];
      for (let i = 0; i < symbolSize; i++) {
        for (let j = 0; j < symbolSize; j++) {
          let posDst = (i * symbolSize + j) * 4;
          let pxColor = opts.color.light;
          if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
            const iSrc = Math.floor((i - scaledMargin) / scale);
            const jSrc = Math.floor((j - scaledMargin) / scale);
            pxColor = palette[data[iSrc * size4 + jSrc] ? 1 : 0];
          }
          imgData[posDst++] = pxColor.r;
          imgData[posDst++] = pxColor.g;
          imgData[posDst++] = pxColor.b;
          imgData[posDst] = pxColor.a;
        }
      }
    };
  }
});

// node_modules/qrcode/lib/renderer/canvas.js
var require_canvas = __commonJS({
  "node_modules/qrcode/lib/renderer/canvas.js"(exports) {
    var Utils = require_utils2();
    function clearCanvas(ctx, canvas, size4) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (!canvas.style)
        canvas.style = {};
      canvas.height = size4;
      canvas.width = size4;
      canvas.style.height = size4 + "px";
      canvas.style.width = size4 + "px";
    }
    function getCanvasElement() {
      try {
        return document.createElement("canvas");
      } catch (e) {
        throw new Error("You need to specify a canvas element");
      }
    }
    exports.render = function render(qrData, canvas, options) {
      let opts = options;
      let canvasEl = canvas;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!canvas) {
        canvasEl = getCanvasElement();
      }
      opts = Utils.getOptions(opts);
      const size4 = Utils.getImageWidth(qrData.modules.size, opts);
      const ctx = canvasEl.getContext("2d");
      const image2 = ctx.createImageData(size4, size4);
      Utils.qrToImageData(image2.data, qrData, opts);
      clearCanvas(ctx, canvasEl, size4);
      ctx.putImageData(image2, 0, 0);
      return canvasEl;
    };
    exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
      let opts = options;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!opts)
        opts = {};
      const canvasEl = exports.render(qrData, canvas, opts);
      const type = opts.type || "image/png";
      const rendererOpts = opts.rendererOpts || {};
      return canvasEl.toDataURL(type, rendererOpts.quality);
    };
  }
});

// node_modules/qrcode/lib/renderer/svg-tag.js
var require_svg_tag = __commonJS({
  "node_modules/qrcode/lib/renderer/svg-tag.js"(exports) {
    var Utils = require_utils2();
    function getColorAttrib(color, attrib) {
      const alpha = color.a / 255;
      const str = attrib + '="' + color.hex + '"';
      return alpha < 1 ? str + " " + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
    }
    function svgCmd(cmd, x, y) {
      let str = cmd + x;
      if (typeof y !== "undefined")
        str += " " + y;
      return str;
    }
    function qrToPath(data, size4, margin) {
      let path2 = "";
      let moveBy = 0;
      let newRow = false;
      let lineLength = 0;
      for (let i = 0; i < data.length; i++) {
        const col = Math.floor(i % size4);
        const row = Math.floor(i / size4);
        if (!col && !newRow)
          newRow = true;
        if (data[i]) {
          lineLength++;
          if (!(i > 0 && col > 0 && data[i - 1])) {
            path2 += newRow ? svgCmd("M", col + margin, 0.5 + row + margin) : svgCmd("m", moveBy, 0);
            moveBy = 0;
            newRow = false;
          }
          if (!(col + 1 < size4 && data[i + 1])) {
            path2 += svgCmd("h", lineLength);
            lineLength = 0;
          }
        } else {
          moveBy++;
        }
      }
      return path2;
    }
    exports.render = function render(qrData, options, cb) {
      const opts = Utils.getOptions(options);
      const size4 = qrData.modules.size;
      const data = qrData.modules.data;
      const qrcodesize = size4 + opts.margin * 2;
      const bg = !opts.color.light.a ? "" : "<path " + getColorAttrib(opts.color.light, "fill") + ' d="M0 0h' + qrcodesize + "v" + qrcodesize + 'H0z"/>';
      const path2 = "<path " + getColorAttrib(opts.color.dark, "stroke") + ' d="' + qrToPath(data, size4, opts.margin) + '"/>';
      const viewBox = 'viewBox="0 0 ' + qrcodesize + " " + qrcodesize + '"';
      const width = !opts.width ? "" : 'width="' + opts.width + '" height="' + opts.width + '" ';
      const svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path2 + "</svg>\n";
      if (typeof cb === "function") {
        cb(null, svgTag);
      }
      return svgTag;
    };
  }
});

// node_modules/qrcode/lib/browser.js
var require_browser = __commonJS({
  "node_modules/qrcode/lib/browser.js"(exports) {
    var canPromise = require_can_promise();
    var QRCode2 = require_qrcode();
    var CanvasRenderer = require_canvas();
    var SvgRenderer = require_svg_tag();
    function renderCanvas(renderFunc, canvas, text2, opts, cb) {
      const args = [].slice.call(arguments, 1);
      const argsNum = args.length;
      const isLastArgCb = typeof args[argsNum - 1] === "function";
      if (!isLastArgCb && !canPromise()) {
        throw new Error("Callback required as last argument");
      }
      if (isLastArgCb) {
        if (argsNum < 2) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 2) {
          cb = text2;
          text2 = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 3) {
          if (canvas.getContext && typeof cb === "undefined") {
            cb = opts;
            opts = void 0;
          } else {
            cb = opts;
            opts = text2;
            text2 = canvas;
            canvas = void 0;
          }
        }
      } else {
        if (argsNum < 1) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 1) {
          text2 = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 2 && !canvas.getContext) {
          opts = text2;
          text2 = canvas;
          canvas = void 0;
        }
        return new Promise(function(resolve, reject) {
          try {
            const data = QRCode2.create(text2, opts);
            resolve(renderFunc(data, canvas, opts));
          } catch (e) {
            reject(e);
          }
        });
      }
      try {
        const data = QRCode2.create(text2, opts);
        cb(null, renderFunc(data, canvas, opts));
      } catch (e) {
        cb(e);
      }
    }
    exports.create = QRCode2.create;
    exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
    exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);
    exports.toString = renderCanvas.bind(null, function(data, _, opts) {
      return SvgRenderer.render(data, opts);
    });
  }
});

// node_modules/@aws-amplify/ui-react/dist/esm/components/index.mjs
var components_exports = {};
__export(components_exports, {
  AccountSettings: () => AccountSettings,
  Authenticator: () => Authenticator,
  ThemeProvider: () => ThemeProvider,
  useAuthenticator: () => useAuthenticator,
  withAuthenticator: () => withAuthenticator
});

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/ChangePassword/ChangePassword.mjs
var import_react39 = __toESM(require_react(), 1);
var import_isEqual = __toESM(require_isEqual(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorProvider.mjs
var import_react7 = __toESM(require_react(), 1);

// node_modules/@xstate/react/es/useMachine.js
var import_react3 = __toESM(require_react());
var import_with_selector = __toESM(require_with_selector());

// node_modules/xstate/es/actions.js
var actions_exports = {};
__export(actions_exports, {
  actionTypes: () => actionTypes_exports,
  after: () => after2,
  assign: () => assign2,
  cancel: () => cancel2,
  choose: () => choose2,
  done: () => done,
  doneInvoke: () => doneInvoke,
  error: () => error2,
  escalate: () => escalate,
  forwardTo: () => forwardTo,
  getActionFunction: () => getActionFunction,
  initEvent: () => initEvent,
  isActionObject: () => isActionObject,
  log: () => log2,
  pure: () => pure2,
  raise: () => raise2,
  resolveActions: () => resolveActions,
  resolveLog: () => resolveLog,
  resolveRaise: () => resolveRaise,
  resolveSend: () => resolveSend,
  resolveStop: () => resolveStop,
  respond: () => respond,
  send: () => send2,
  sendParent: () => sendParent,
  sendTo: () => sendTo,
  sendUpdate: () => sendUpdate,
  start: () => start2,
  stop: () => stop2,
  toActionObject: () => toActionObject,
  toActionObjects: () => toActionObjects,
  toActivityDefinition: () => toActivityDefinition
});

// node_modules/xstate/es/_virtual/_tslib.js
var __assign = function() {
  __assign = Object.assign || function __assign4(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t2[p] = s[p];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t2 = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error3) {
    e = { error: error3 };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}

// node_modules/xstate/es/types.js
var ActionTypes;
(function(ActionTypes2) {
  ActionTypes2["Start"] = "xstate.start";
  ActionTypes2["Stop"] = "xstate.stop";
  ActionTypes2["Raise"] = "xstate.raise";
  ActionTypes2["Send"] = "xstate.send";
  ActionTypes2["Cancel"] = "xstate.cancel";
  ActionTypes2["NullEvent"] = "";
  ActionTypes2["Assign"] = "xstate.assign";
  ActionTypes2["After"] = "xstate.after";
  ActionTypes2["DoneState"] = "done.state";
  ActionTypes2["DoneInvoke"] = "done.invoke";
  ActionTypes2["Log"] = "xstate.log";
  ActionTypes2["Init"] = "xstate.init";
  ActionTypes2["Invoke"] = "xstate.invoke";
  ActionTypes2["ErrorExecution"] = "error.execution";
  ActionTypes2["ErrorCommunication"] = "error.communication";
  ActionTypes2["ErrorPlatform"] = "error.platform";
  ActionTypes2["ErrorCustom"] = "xstate.error";
  ActionTypes2["Update"] = "xstate.update";
  ActionTypes2["Pure"] = "xstate.pure";
  ActionTypes2["Choose"] = "xstate.choose";
})(ActionTypes || (ActionTypes = {}));
var SpecialTargets;
(function(SpecialTargets2) {
  SpecialTargets2["Parent"] = "#_parent";
  SpecialTargets2["Internal"] = "#_internal";
})(SpecialTargets || (SpecialTargets = {}));

// node_modules/xstate/es/actionTypes.js
var actionTypes_exports = {};
__export(actionTypes_exports, {
  after: () => after,
  assign: () => assign,
  cancel: () => cancel,
  choose: () => choose,
  doneState: () => doneState,
  error: () => error,
  errorExecution: () => errorExecution,
  errorPlatform: () => errorPlatform,
  init: () => init,
  invoke: () => invoke,
  log: () => log,
  nullEvent: () => nullEvent,
  pure: () => pure,
  raise: () => raise,
  send: () => send,
  start: () => start,
  stop: () => stop,
  update: () => update
});
var start = ActionTypes.Start;
var stop = ActionTypes.Stop;
var raise = ActionTypes.Raise;
var send = ActionTypes.Send;
var cancel = ActionTypes.Cancel;
var nullEvent = ActionTypes.NullEvent;
var assign = ActionTypes.Assign;
var after = ActionTypes.After;
var doneState = ActionTypes.DoneState;
var log = ActionTypes.Log;
var init = ActionTypes.Init;
var invoke = ActionTypes.Invoke;
var errorExecution = ActionTypes.ErrorExecution;
var errorPlatform = ActionTypes.ErrorPlatform;
var error = ActionTypes.ErrorCustom;
var update = ActionTypes.Update;
var choose = ActionTypes.Choose;
var pure = ActionTypes.Pure;

// node_modules/xstate/es/constants.js
var STATE_DELIMITER = ".";
var EMPTY_ACTIVITY_MAP = {};
var DEFAULT_GUARD_TYPE = "xstate.guard";
var TARGETLESS_KEY = "";

// node_modules/xstate/es/environment.js
var IS_PRODUCTION = false;

// node_modules/xstate/es/utils.js
var _a;
function matchesState(parentStateId, childStateId, delimiter) {
  if (delimiter === void 0) {
    delimiter = STATE_DELIMITER;
  }
  var parentStateValue = toStateValue(parentStateId, delimiter);
  var childStateValue = toStateValue(childStateId, delimiter);
  if (isString(childStateValue)) {
    if (isString(parentStateValue)) {
      return childStateValue === parentStateValue;
    }
    return false;
  }
  if (isString(parentStateValue)) {
    return parentStateValue in childStateValue;
  }
  return Object.keys(parentStateValue).every(function(key) {
    if (!(key in childStateValue)) {
      return false;
    }
    return matchesState(parentStateValue[key], childStateValue[key]);
  });
}
function getEventType(event2) {
  try {
    return isString(event2) || typeof event2 === "number" ? "".concat(event2) : event2.type;
  } catch (e) {
    throw new Error("Events must be strings or objects with a string event.type property.");
  }
}
function toStatePath(stateId, delimiter) {
  try {
    if (isArray(stateId)) {
      return stateId;
    }
    return stateId.toString().split(delimiter);
  } catch (e) {
    throw new Error("'".concat(stateId, "' is not a valid state path."));
  }
}
function isStateLike(state) {
  return typeof state === "object" && "value" in state && "context" in state && "event" in state && "_event" in state;
}
function toStateValue(stateValue, delimiter) {
  if (isStateLike(stateValue)) {
    return stateValue.value;
  }
  if (isArray(stateValue)) {
    return pathToStateValue(stateValue);
  }
  if (typeof stateValue !== "string") {
    return stateValue;
  }
  var statePath = toStatePath(stateValue, delimiter);
  return pathToStateValue(statePath);
}
function pathToStateValue(statePath) {
  if (statePath.length === 1) {
    return statePath[0];
  }
  var value = {};
  var marker = value;
  for (var i = 0; i < statePath.length - 1; i++) {
    if (i === statePath.length - 2) {
      marker[statePath[i]] = statePath[i + 1];
    } else {
      marker[statePath[i]] = {};
      marker = marker[statePath[i]];
    }
  }
  return value;
}
function mapValues(collection2, iteratee) {
  var result = {};
  var collectionKeys = Object.keys(collection2);
  for (var i = 0; i < collectionKeys.length; i++) {
    var key = collectionKeys[i];
    result[key] = iteratee(collection2[key], key, collection2, i);
  }
  return result;
}
function mapFilterValues(collection2, iteratee, predicate) {
  var e_1, _a2;
  var result = {};
  try {
    for (var _b = __values(Object.keys(collection2)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var item = collection2[key];
      if (!predicate(item)) {
        continue;
      }
      result[key] = iteratee(item, key, collection2);
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b.return))
        _a2.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return result;
}
var path = function(props) {
  return function(object) {
    var e_2, _a2;
    var result = object;
    try {
      for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
        var prop = props_1_1.value;
        result = result[prop];
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (props_1_1 && !props_1_1.done && (_a2 = props_1.return))
          _a2.call(props_1);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return result;
  };
};
function nestedPath(props, accessorProp) {
  return function(object) {
    var e_3, _a2;
    var result = object;
    try {
      for (var props_2 = __values(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {
        var prop = props_2_1.value;
        result = result[accessorProp][prop];
      }
    } catch (e_3_1) {
      e_3 = {
        error: e_3_1
      };
    } finally {
      try {
        if (props_2_1 && !props_2_1.done && (_a2 = props_2.return))
          _a2.call(props_2);
      } finally {
        if (e_3)
          throw e_3.error;
      }
    }
    return result;
  };
}
function toStatePaths(stateValue) {
  if (!stateValue) {
    return [[]];
  }
  if (isString(stateValue)) {
    return [[stateValue]];
  }
  var result = flatten(Object.keys(stateValue).map(function(key) {
    var subStateValue = stateValue[key];
    if (typeof subStateValue !== "string" && (!subStateValue || !Object.keys(subStateValue).length)) {
      return [[key]];
    }
    return toStatePaths(stateValue[key]).map(function(subPath) {
      return [key].concat(subPath);
    });
  }));
  return result;
}
function flatten(array) {
  var _a2;
  return (_a2 = []).concat.apply(_a2, __spreadArray([], __read(array), false));
}
function toArrayStrict(value) {
  if (isArray(value)) {
    return value;
  }
  return [value];
}
function toArray(value) {
  if (value === void 0) {
    return [];
  }
  return toArrayStrict(value);
}
function mapContext(mapper, context2, _event) {
  var e_5, _a2;
  if (isFunction(mapper)) {
    return mapper(context2, _event.data);
  }
  var result = {};
  try {
    for (var _b = __values(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var key = _c.value;
      var subMapper = mapper[key];
      if (isFunction(subMapper)) {
        result[key] = subMapper(context2, _event.data);
      } else {
        result[key] = subMapper;
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a2 = _b.return))
        _a2.call(_b);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return result;
}
function isBuiltInEvent(eventType) {
  return /^(done|error)\./.test(eventType);
}
function isPromiseLike(value) {
  if (value instanceof Promise) {
    return true;
  }
  if (value !== null && (isFunction(value) || typeof value === "object") && isFunction(value.then)) {
    return true;
  }
  return false;
}
function isBehavior(value) {
  return value !== null && typeof value === "object" && "transition" in value && typeof value.transition === "function";
}
function partition(items, predicate) {
  var e_6, _a2;
  var _b = __read([[], []], 2), truthy = _b[0], falsy = _b[1];
  try {
    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
      var item = items_1_1.value;
      if (predicate(item)) {
        truthy.push(item);
      } else {
        falsy.push(item);
      }
    }
  } catch (e_6_1) {
    e_6 = {
      error: e_6_1
    };
  } finally {
    try {
      if (items_1_1 && !items_1_1.done && (_a2 = items_1.return))
        _a2.call(items_1);
    } finally {
      if (e_6)
        throw e_6.error;
    }
  }
  return [truthy, falsy];
}
function updateHistoryStates(hist, stateValue) {
  return mapValues(hist.states, function(subHist, key) {
    if (!subHist) {
      return void 0;
    }
    var subStateValue = (isString(stateValue) ? void 0 : stateValue[key]) || (subHist ? subHist.current : void 0);
    if (!subStateValue) {
      return void 0;
    }
    return {
      current: subStateValue,
      states: updateHistoryStates(subHist, subStateValue)
    };
  });
}
function updateHistoryValue(hist, stateValue) {
  return {
    current: stateValue,
    states: updateHistoryStates(hist, stateValue)
  };
}
function updateContext(context2, _event, assignActions, state) {
  if (!IS_PRODUCTION) {
    warn(!!context2, "Attempting to update undefined context");
  }
  var updatedContext = context2 ? assignActions.reduce(function(acc, assignAction) {
    var e_7, _a2;
    var assignment = assignAction.assignment;
    var meta = {
      state,
      action: assignAction,
      _event
    };
    var partialUpdate = {};
    if (isFunction(assignment)) {
      partialUpdate = assignment(acc, _event.data, meta);
    } else {
      try {
        for (var _b = __values(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          var propAssignment = assignment[key];
          partialUpdate[key] = isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_7)
            throw e_7.error;
        }
      }
    }
    return Object.assign({}, acc, partialUpdate);
  }, context2) : context2;
  return updatedContext;
}
var warn = function() {
};
if (!IS_PRODUCTION) {
  warn = function(condition, message2) {
    var error3 = condition instanceof Error ? condition : void 0;
    if (!error3 && condition) {
      return;
    }
    if (console !== void 0) {
      var args = ["Warning: ".concat(message2)];
      if (error3) {
        args.push(error3);
      }
      console.warn.apply(console, args);
    }
  };
}
function isArray(value) {
  return Array.isArray(value);
}
function isFunction(value) {
  return typeof value === "function";
}
function isString(value) {
  return typeof value === "string";
}
function toGuard(condition, guardMap) {
  if (!condition) {
    return void 0;
  }
  if (isString(condition)) {
    return {
      type: DEFAULT_GUARD_TYPE,
      name: condition,
      predicate: guardMap ? guardMap[condition] : void 0
    };
  }
  if (isFunction(condition)) {
    return {
      type: DEFAULT_GUARD_TYPE,
      name: condition.name,
      predicate: condition
    };
  }
  return condition;
}
function isObservable(value) {
  try {
    return "subscribe" in value && isFunction(value.subscribe);
  } catch (e) {
    return false;
  }
}
var symbolObservable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();
var interopSymbols = (_a = {}, _a[symbolObservable] = function() {
  return this;
}, _a[Symbol.observable] = function() {
  return this;
}, _a);
function isMachine(value) {
  return !!value && "__xstatenode" in value;
}
function isActor(value) {
  return !!value && typeof value.send === "function";
}
var uniqueId = function() {
  var currentId = 0;
  return function() {
    currentId++;
    return currentId.toString(16);
  };
}();
function toEventObject(event2, payload) {
  if (isString(event2) || typeof event2 === "number") {
    return __assign({
      type: event2
    }, payload);
  }
  return event2;
}
function toSCXMLEvent(event2, scxmlEvent) {
  if (!isString(event2) && "$$type" in event2 && event2.$$type === "scxml") {
    return event2;
  }
  var eventObject = toEventObject(event2);
  return __assign({
    name: eventObject.type,
    data: eventObject,
    $$type: "scxml",
    type: "external"
  }, scxmlEvent);
}
function toTransitionConfigArray(event2, configLike) {
  var transitions = toArrayStrict(configLike).map(function(transitionLike) {
    if (typeof transitionLike === "undefined" || typeof transitionLike === "string" || isMachine(transitionLike)) {
      return {
        target: transitionLike,
        event: event2
      };
    }
    return __assign(__assign({}, transitionLike), {
      event: event2
    });
  });
  return transitions;
}
function normalizeTarget(target) {
  if (target === void 0 || target === TARGETLESS_KEY) {
    return void 0;
  }
  return toArray(target);
}
function reportUnhandledExceptionOnInvocation(originalError, currentError, id) {
  if (!IS_PRODUCTION) {
    var originalStackTrace = originalError.stack ? " Stacktrace was '".concat(originalError.stack, "'") : "";
    if (originalError === currentError) {
      console.error("Missing onError handler for invocation '".concat(id, "', error was '").concat(originalError, "'.").concat(originalStackTrace));
    } else {
      var stackTrace = currentError.stack ? " Stacktrace was '".concat(currentError.stack, "'") : "";
      console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(id, "'. ") + "Original error: '".concat(originalError, "'. ").concat(originalStackTrace, " Current error is '").concat(currentError, "'.").concat(stackTrace));
    }
  }
}
function evaluateGuard(machine, guard, context2, _event, state) {
  var guards = machine.options.guards;
  var guardMeta = {
    state,
    cond: guard,
    _event
  };
  if (guard.type === DEFAULT_GUARD_TYPE) {
    return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context2, _event.data, guardMeta);
  }
  var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];
  if (!condFn) {
    throw new Error("Guard '".concat(guard.type, "' is not implemented on machine '").concat(machine.id, "'."));
  }
  return condFn(context2, _event.data, guardMeta);
}
function toInvokeSource(src) {
  if (typeof src === "string") {
    return {
      type: src
    };
  }
  return src;
}
function toObserver(nextHandler, errorHandler, completionHandler) {
  var noop3 = function() {
  };
  var isObserver2 = typeof nextHandler === "object";
  var self2 = isObserver2 ? nextHandler : null;
  return {
    next: ((isObserver2 ? nextHandler.next : nextHandler) || noop3).bind(self2),
    error: ((isObserver2 ? nextHandler.error : errorHandler) || noop3).bind(self2),
    complete: ((isObserver2 ? nextHandler.complete : completionHandler) || noop3).bind(self2)
  };
}
function createInvokeId(stateNodeId, index3) {
  return "".concat(stateNodeId, ":invocation[").concat(index3, "]");
}
function isRaisableAction(action) {
  return (action.type === raise || action.type === send && action.to === SpecialTargets.Internal) && typeof action.delay !== "number";
}

// node_modules/xstate/es/actions.js
var initEvent = toSCXMLEvent({
  type: init
});
function getActionFunction(actionType, actionFunctionMap) {
  return actionFunctionMap ? actionFunctionMap[actionType] || void 0 : void 0;
}
function toActionObject(action, actionFunctionMap) {
  var actionObject;
  if (isString(action) || typeof action === "number") {
    var exec = getActionFunction(action, actionFunctionMap);
    if (isFunction(exec)) {
      actionObject = {
        type: action,
        exec
      };
    } else if (exec) {
      actionObject = exec;
    } else {
      actionObject = {
        type: action,
        exec: void 0
      };
    }
  } else if (isFunction(action)) {
    actionObject = {
      // Convert action to string if unnamed
      type: action.name || action.toString(),
      exec: action
    };
  } else {
    var exec = getActionFunction(action.type, actionFunctionMap);
    if (isFunction(exec)) {
      actionObject = __assign(__assign({}, action), {
        exec
      });
    } else if (exec) {
      var actionType = exec.type || action.type;
      actionObject = __assign(__assign(__assign({}, exec), action), {
        type: actionType
      });
    } else {
      actionObject = action;
    }
  }
  return actionObject;
}
var toActionObjects = function(action, actionFunctionMap) {
  if (!action) {
    return [];
  }
  var actions = isArray(action) ? action : [action];
  return actions.map(function(subAction) {
    return toActionObject(subAction, actionFunctionMap);
  });
};
function toActivityDefinition(action) {
  var actionObject = toActionObject(action);
  return __assign(__assign({
    id: isString(action) ? action : actionObject.id
  }, actionObject), {
    type: actionObject.type
  });
}
function raise2(event2, options) {
  return {
    type: raise,
    event: typeof event2 === "function" ? event2 : toEventObject(event2),
    delay: options ? options.delay : void 0,
    id: options === null || options === void 0 ? void 0 : options.id
  };
}
function resolveRaise(action, ctx, _event, delaysMap) {
  var meta = {
    _event
  };
  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);
  var resolvedDelay;
  if (isString(action.delay)) {
    var configDelay = delaysMap && delaysMap[action.delay];
    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
  } else {
    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
  }
  return __assign(__assign({}, action), {
    type: raise,
    _event: resolvedEvent,
    delay: resolvedDelay
  });
}
function send2(event2, options) {
  return {
    to: options ? options.to : void 0,
    type: send,
    event: isFunction(event2) ? event2 : toEventObject(event2),
    delay: options ? options.delay : void 0,
    // TODO: don't auto-generate IDs here like that
    // there is too big chance of the ID collision
    id: options && options.id !== void 0 ? options.id : isFunction(event2) ? event2.name : getEventType(event2)
  };
}
function resolveSend(action, ctx, _event, delaysMap) {
  var meta = {
    _event
  };
  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);
  var resolvedDelay;
  if (isString(action.delay)) {
    var configDelay = delaysMap && delaysMap[action.delay];
    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
  } else {
    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;
  }
  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;
  return __assign(__assign({}, action), {
    to: resolvedTarget,
    _event: resolvedEvent,
    event: resolvedEvent.data,
    delay: resolvedDelay
  });
}
function sendParent(event2, options) {
  return send2(event2, __assign(__assign({}, options), {
    to: SpecialTargets.Parent
  }));
}
function sendTo(actor, event2, options) {
  return send2(event2, __assign(__assign({}, options), {
    to: actor
  }));
}
function sendUpdate() {
  return sendParent(update);
}
function respond(event2, options) {
  return send2(event2, __assign(__assign({}, options), {
    to: function(_, __, _a2) {
      var _event = _a2._event;
      return _event.origin;
    }
  }));
}
var defaultLogExpr = function(context2, event2) {
  return {
    context: context2,
    event: event2
  };
};
function log2(expr, label) {
  if (expr === void 0) {
    expr = defaultLogExpr;
  }
  return {
    type: log,
    label,
    expr
  };
}
var resolveLog = function(action, ctx, _event) {
  return __assign(__assign({}, action), {
    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {
      _event
    })
  });
};
var cancel2 = function(sendId) {
  return {
    type: cancel,
    sendId
  };
};
function start2(activity) {
  var activityDef = toActivityDefinition(activity);
  return {
    type: ActionTypes.Start,
    activity: activityDef,
    exec: void 0
  };
}
function stop2(actorRef) {
  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);
  return {
    type: ActionTypes.Stop,
    activity,
    exec: void 0
  };
}
function resolveStop(action, context2, _event) {
  var actorRefOrString = isFunction(action.activity) ? action.activity(context2, _event.data) : action.activity;
  var resolvedActorRef = typeof actorRefOrString === "string" ? {
    id: actorRefOrString
  } : actorRefOrString;
  var actionObject = {
    type: ActionTypes.Stop,
    activity: resolvedActorRef
  };
  return actionObject;
}
var assign2 = function(assignment) {
  return {
    type: assign,
    assignment
  };
};
function isActionObject(action) {
  return typeof action === "object" && "type" in action;
}
function after2(delayRef, id) {
  var idSuffix = id ? "#".concat(id) : "";
  return "".concat(ActionTypes.After, "(").concat(delayRef, ")").concat(idSuffix);
}
function done(id, data) {
  var type = "".concat(ActionTypes.DoneState, ".").concat(id);
  var eventObject = {
    type,
    data
  };
  eventObject.toString = function() {
    return type;
  };
  return eventObject;
}
function doneInvoke(id, data) {
  var type = "".concat(ActionTypes.DoneInvoke, ".").concat(id);
  var eventObject = {
    type,
    data
  };
  eventObject.toString = function() {
    return type;
  };
  return eventObject;
}
function error2(id, data) {
  var type = "".concat(ActionTypes.ErrorPlatform, ".").concat(id);
  var eventObject = {
    type,
    data
  };
  eventObject.toString = function() {
    return type;
  };
  return eventObject;
}
function pure2(getActions) {
  return {
    type: ActionTypes.Pure,
    get: getActions
  };
}
function forwardTo(target, options) {
  if (!IS_PRODUCTION && (!target || typeof target === "function")) {
    var originalTarget_1 = target;
    target = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var resolvedTarget = typeof originalTarget_1 === "function" ? originalTarget_1.apply(void 0, __spreadArray([], __read(args), false)) : originalTarget_1;
      if (!resolvedTarget) {
        throw new Error("Attempted to forward event to undefined actor. This risks an infinite loop in the sender.");
      }
      return resolvedTarget;
    };
  }
  return send2(function(_, event2) {
    return event2;
  }, __assign(__assign({}, options), {
    to: target
  }));
}
function escalate(errorData, options) {
  return sendParent(function(context2, event2, meta) {
    return {
      type: error,
      data: isFunction(errorData) ? errorData(context2, event2, meta) : errorData
    };
  }, __assign(__assign({}, options), {
    to: SpecialTargets.Parent
  }));
}
function choose2(conds) {
  return {
    type: ActionTypes.Choose,
    conds
  };
}
var pluckAssigns = function(actionBlocks) {
  var e_1, _a2;
  var assignActions = [];
  try {
    for (var actionBlocks_1 = __values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
      var block = actionBlocks_1_1.value;
      var i = 0;
      while (i < block.actions.length) {
        if (block.actions[i].type === assign) {
          assignActions.push(block.actions[i]);
          block.actions.splice(i, 1);
          continue;
        }
        i++;
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a2 = actionBlocks_1.return))
        _a2.call(actionBlocks_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return assignActions;
};
function resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {
  if (preserveActionOrder === void 0) {
    preserveActionOrder = false;
  }
  var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);
  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;
  var preservedContexts = preserveActionOrder ? [currentContext] : void 0;
  var deferredToBlockEnd = [];
  function handleAction(blockType, actionObject) {
    var _a2;
    switch (actionObject.type) {
      case raise: {
        var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);
        if (predictableExec && typeof raisedAction.delay === "number") {
          predictableExec(raisedAction, updatedContext, _event);
        }
        return raisedAction;
      }
      case send:
        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays);
        if (!IS_PRODUCTION) {
          var configuredDelay = actionObject.delay;
          warn(
            !isString(configuredDelay) || typeof sendAction.delay === "number",
            // tslint:disable-next-line:max-line-length
            "No delay reference for delay expression '".concat(configuredDelay, "' was found on machine '").concat(machine.id, "'")
          );
        }
        if (predictableExec && sendAction.to !== SpecialTargets.Internal) {
          if (blockType === "entry") {
            deferredToBlockEnd.push(sendAction);
          } else {
            predictableExec(sendAction, updatedContext, _event);
          }
        }
        return sendAction;
      case log: {
        var resolved2 = resolveLog(actionObject, updatedContext, _event);
        predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved2, updatedContext, _event);
        return resolved2;
      }
      case choose: {
        var chooseAction = actionObject;
        var matchedActions = (_a2 = chooseAction.conds.find(function(condition) {
          var guard = toGuard(condition.cond, machine.options.guards);
          return !guard || evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : void 0);
        })) === null || _a2 === void 0 ? void 0 : _a2.actions;
        if (!matchedActions) {
          return [];
        }
        var _b = __read(resolveActions(machine, currentState, updatedContext, _event, [{
          type: blockType,
          actions: toActionObjects(toArray(matchedActions), machine.options.actions)
        }], predictableExec, preserveActionOrder), 2), resolvedActionsFromChoose = _b[0], resolvedContextFromChoose = _b[1];
        updatedContext = resolvedContextFromChoose;
        preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
        return resolvedActionsFromChoose;
      }
      case pure: {
        var matchedActions = actionObject.get(updatedContext, _event.data);
        if (!matchedActions) {
          return [];
        }
        var _c = __read(resolveActions(machine, currentState, updatedContext, _event, [{
          type: blockType,
          actions: toActionObjects(toArray(matchedActions), machine.options.actions)
        }], predictableExec, preserveActionOrder), 2), resolvedActionsFromPure = _c[0], resolvedContext = _c[1];
        updatedContext = resolvedContext;
        preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
        return resolvedActionsFromPure;
      }
      case stop: {
        var resolved2 = resolveStop(actionObject, updatedContext, _event);
        predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved2, currentContext, _event);
        return resolved2;
      }
      case assign: {
        updatedContext = updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : void 0);
        preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);
        break;
      }
      default:
        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);
        var exec_1 = resolvedActionObject.exec;
        if (predictableExec) {
          predictableExec(resolvedActionObject, updatedContext, _event);
        } else if (exec_1 && preservedContexts) {
          var contextIndex_1 = preservedContexts.length - 1;
          var wrapped = __assign(__assign({}, resolvedActionObject), {
            exec: function(_ctx) {
              var args = [];
              for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
              }
              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));
            }
          });
          resolvedActionObject = wrapped;
        }
        return resolvedActionObject;
    }
  }
  function processBlock(block) {
    var e_2, _a2;
    var resolvedActions2 = [];
    try {
      for (var _b = __values(block.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
        var action = _c.value;
        var resolved2 = handleAction(block.type, action);
        if (resolved2) {
          resolvedActions2 = resolvedActions2.concat(resolved2);
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a2 = _b.return))
          _a2.call(_b);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    deferredToBlockEnd.forEach(function(action2) {
      predictableExec(action2, updatedContext, _event);
    });
    deferredToBlockEnd.length = 0;
    return resolvedActions2;
  }
  var resolvedActions = flatten(actionBlocks.map(processBlock));
  return [resolvedActions, updatedContext];
}

// node_modules/xstate/es/serviceScope.js
var serviceStack = [];
var provide = function(service, fn) {
  serviceStack.push(service);
  var result = fn(service);
  serviceStack.pop();
  return result;
};
var consume = function(fn) {
  return fn(serviceStack[serviceStack.length - 1]);
};

// node_modules/xstate/es/Actor.js
function createNullActor(id) {
  var _a2;
  return _a2 = {
    id,
    send: function() {
      return void 0;
    },
    subscribe: function() {
      return {
        unsubscribe: function() {
          return void 0;
        }
      };
    },
    getSnapshot: function() {
      return void 0;
    },
    toJSON: function() {
      return {
        id
      };
    }
  }, _a2[symbolObservable] = function() {
    return this;
  }, _a2;
}
function createInvocableActor(invokeDefinition, machine, context2, _event) {
  var _a2;
  var invokeSrc = toInvokeSource(invokeDefinition.src);
  var serviceCreator = (_a2 = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a2 === void 0 ? void 0 : _a2[invokeSrc.type];
  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context2, _event) : void 0;
  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id);
  tempActor.meta = invokeDefinition;
  return tempActor;
}
function createDeferredActor(entity, id, data) {
  var tempActor = createNullActor(id);
  tempActor.deferred = true;
  if (isMachine(entity)) {
    var initialState_1 = tempActor.state = provide(void 0, function() {
      return (data ? entity.withContext(data) : entity).initialState;
    });
    tempActor.getSnapshot = function() {
      return initialState_1;
    };
  }
  return tempActor;
}
function isActor2(item) {
  try {
    return typeof item.send === "function";
  } catch (e) {
    return false;
  }
}
function isSpawnedActor(item) {
  return isActor2(item) && "id" in item;
}
function toActorRef(actorRefLike) {
  var _a2;
  return __assign((_a2 = {
    subscribe: function() {
      return {
        unsubscribe: function() {
          return void 0;
        }
      };
    },
    id: "anonymous",
    getSnapshot: function() {
      return void 0;
    }
  }, _a2[symbolObservable] = function() {
    return this;
  }, _a2), actorRefLike);
}

// node_modules/xstate/es/stateUtils.js
var isLeafNode = function(stateNode) {
  return stateNode.type === "atomic" || stateNode.type === "final";
};
function getAllChildren(stateNode) {
  return Object.keys(stateNode.states).map(function(key) {
    return stateNode.states[key];
  });
}
function getChildren(stateNode) {
  return getAllChildren(stateNode).filter(function(sn) {
    return sn.type !== "history";
  });
}
function getAllStateNodes(stateNode) {
  var stateNodes = [stateNode];
  if (isLeafNode(stateNode)) {
    return stateNodes;
  }
  return stateNodes.concat(flatten(getChildren(stateNode).map(getAllStateNodes)));
}
function getConfiguration(prevStateNodes, stateNodes) {
  var e_1, _a2, e_2, _b, e_3, _c, e_4, _d;
  var prevConfiguration = new Set(prevStateNodes);
  var prevAdjList = getAdjList(prevConfiguration);
  var configuration = new Set(stateNodes);
  try {
    for (var configuration_1 = __values(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
      var s = configuration_1_1.value;
      var m = s.parent;
      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (configuration_1_1 && !configuration_1_1.done && (_a2 = configuration_1.return))
        _a2.call(configuration_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  var adjList = getAdjList(configuration);
  try {
    for (var configuration_2 = __values(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {
      var s = configuration_2_1.value;
      if (s.type === "compound" && (!adjList.get(s) || !adjList.get(s).length)) {
        if (prevAdjList.get(s)) {
          prevAdjList.get(s).forEach(function(sn) {
            return configuration.add(sn);
          });
        } else {
          s.initialStateNodes.forEach(function(sn) {
            return configuration.add(sn);
          });
        }
      } else {
        if (s.type === "parallel") {
          try {
            for (var _e = (e_3 = void 0, __values(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {
              var child = _f.value;
              if (!configuration.has(child)) {
                configuration.add(child);
                if (prevAdjList.get(child)) {
                  prevAdjList.get(child).forEach(function(sn) {
                    return configuration.add(sn);
                  });
                } else {
                  child.initialStateNodes.forEach(function(sn) {
                    return configuration.add(sn);
                  });
                }
              }
            }
          } catch (e_3_1) {
            e_3 = {
              error: e_3_1
            };
          } finally {
            try {
              if (_f && !_f.done && (_c = _e.return))
                _c.call(_e);
            } finally {
              if (e_3)
                throw e_3.error;
            }
          }
        }
      }
    }
  } catch (e_2_1) {
    e_2 = {
      error: e_2_1
    };
  } finally {
    try {
      if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return))
        _b.call(configuration_2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  try {
    for (var configuration_3 = __values(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {
      var s = configuration_3_1.value;
      var m = s.parent;
      while (m && !configuration.has(m)) {
        configuration.add(m);
        m = m.parent;
      }
    }
  } catch (e_4_1) {
    e_4 = {
      error: e_4_1
    };
  } finally {
    try {
      if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return))
        _d.call(configuration_3);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return configuration;
}
function getValueFromAdj(baseNode, adjList) {
  var childStateNodes = adjList.get(baseNode);
  if (!childStateNodes) {
    return {};
  }
  if (baseNode.type === "compound") {
    var childStateNode = childStateNodes[0];
    if (childStateNode) {
      if (isLeafNode(childStateNode)) {
        return childStateNode.key;
      }
    } else {
      return {};
    }
  }
  var stateValue = {};
  childStateNodes.forEach(function(csn) {
    stateValue[csn.key] = getValueFromAdj(csn, adjList);
  });
  return stateValue;
}
function getAdjList(configuration) {
  var e_5, _a2;
  var adjList = /* @__PURE__ */ new Map();
  try {
    for (var configuration_4 = __values(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {
      var s = configuration_4_1.value;
      if (!adjList.has(s)) {
        adjList.set(s, []);
      }
      if (s.parent) {
        if (!adjList.has(s.parent)) {
          adjList.set(s.parent, []);
        }
        adjList.get(s.parent).push(s);
      }
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (configuration_4_1 && !configuration_4_1.done && (_a2 = configuration_4.return))
        _a2.call(configuration_4);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return adjList;
}
function getValue(rootNode, configuration) {
  var config2 = getConfiguration([rootNode], configuration);
  return getValueFromAdj(rootNode, getAdjList(config2));
}
function has(iterable, item) {
  if (Array.isArray(iterable)) {
    return iterable.some(function(member) {
      return member === item;
    });
  }
  if (iterable instanceof Set) {
    return iterable.has(item);
  }
  return false;
}
function nextEvents(configuration) {
  return __spreadArray([], __read(new Set(flatten(__spreadArray([], __read(configuration.map(function(sn) {
    return sn.ownEvents;
  })), false)))), false);
}
function isInFinalState(configuration, stateNode) {
  if (stateNode.type === "compound") {
    return getChildren(stateNode).some(function(s) {
      return s.type === "final" && has(configuration, s);
    });
  }
  if (stateNode.type === "parallel") {
    return getChildren(stateNode).every(function(sn) {
      return isInFinalState(configuration, sn);
    });
  }
  return false;
}
function getMeta(configuration) {
  if (configuration === void 0) {
    configuration = [];
  }
  return configuration.reduce(function(acc, stateNode) {
    if (stateNode.meta !== void 0) {
      acc[stateNode.id] = stateNode.meta;
    }
    return acc;
  }, {});
}
function getTagsFromConfiguration(configuration) {
  return new Set(flatten(configuration.map(function(sn) {
    return sn.tags;
  })));
}

// node_modules/xstate/es/State.js
function stateValuesEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (a === void 0 || b === void 0) {
    return false;
  }
  if (isString(a) || isString(b)) {
    return a === b;
  }
  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  return aKeys.length === bKeys.length && aKeys.every(function(key) {
    return stateValuesEqual(a[key], b[key]);
  });
}
function isStateConfig(state) {
  if (typeof state !== "object" || state === null) {
    return false;
  }
  return "value" in state && "_event" in state;
}
function bindActionToState(action, state) {
  var exec = action.exec;
  var boundAction = __assign(__assign({}, action), {
    exec: exec !== void 0 ? function() {
      return exec(state.context, state.event, {
        action,
        state,
        _event: state._event
      });
    } : void 0
  });
  return boundAction;
}
var State = (
  /** @class */
  function() {
    function State2(config2) {
      var _this = this;
      var _a2;
      this.actions = [];
      this.activities = EMPTY_ACTIVITY_MAP;
      this.meta = {};
      this.events = [];
      this.value = config2.value;
      this.context = config2.context;
      this._event = config2._event;
      this._sessionid = config2._sessionid;
      this.event = this._event.data;
      this.historyValue = config2.historyValue;
      this.history = config2.history;
      this.actions = config2.actions || [];
      this.activities = config2.activities || EMPTY_ACTIVITY_MAP;
      this.meta = getMeta(config2.configuration);
      this.events = config2.events || [];
      this.matches = this.matches.bind(this);
      this.toStrings = this.toStrings.bind(this);
      this.configuration = config2.configuration;
      this.transitions = config2.transitions;
      this.children = config2.children;
      this.done = !!config2.done;
      this.tags = (_a2 = Array.isArray(config2.tags) ? new Set(config2.tags) : config2.tags) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ new Set();
      this.machine = config2.machine;
      Object.defineProperty(this, "nextEvents", {
        get: function() {
          return nextEvents(_this.configuration);
        }
      });
    }
    State2.from = function(stateValue, context2) {
      if (stateValue instanceof State2) {
        if (stateValue.context !== context2) {
          return new State2({
            value: stateValue.value,
            context: context2,
            _event: stateValue._event,
            _sessionid: null,
            historyValue: stateValue.historyValue,
            history: stateValue.history,
            actions: [],
            activities: stateValue.activities,
            meta: {},
            events: [],
            configuration: [],
            transitions: [],
            children: {}
          });
        }
        return stateValue;
      }
      var _event = initEvent;
      return new State2({
        value: stateValue,
        context: context2,
        _event,
        _sessionid: null,
        historyValue: void 0,
        history: void 0,
        actions: [],
        activities: void 0,
        meta: void 0,
        events: [],
        configuration: [],
        transitions: [],
        children: {}
      });
    };
    State2.create = function(config2) {
      return new State2(config2);
    };
    State2.inert = function(stateValue, context2) {
      if (stateValue instanceof State2) {
        if (!stateValue.actions.length) {
          return stateValue;
        }
        var _event = initEvent;
        return new State2({
          value: stateValue.value,
          context: context2,
          _event,
          _sessionid: null,
          historyValue: stateValue.historyValue,
          history: stateValue.history,
          activities: stateValue.activities,
          configuration: stateValue.configuration,
          transitions: [],
          children: {}
        });
      }
      return State2.from(stateValue, context2);
    };
    State2.prototype.toStrings = function(stateValue, delimiter) {
      var _this = this;
      if (stateValue === void 0) {
        stateValue = this.value;
      }
      if (delimiter === void 0) {
        delimiter = ".";
      }
      if (isString(stateValue)) {
        return [stateValue];
      }
      var valueKeys = Object.keys(stateValue);
      return valueKeys.concat.apply(valueKeys, __spreadArray([], __read(valueKeys.map(function(key) {
        return _this.toStrings(stateValue[key], delimiter).map(function(s) {
          return key + delimiter + s;
        });
      })), false));
    };
    State2.prototype.toJSON = function() {
      var _a2 = this;
      _a2.configuration;
      _a2.transitions;
      var tags = _a2.tags;
      _a2.machine;
      var jsonValues = __rest(_a2, ["configuration", "transitions", "tags", "machine"]);
      return __assign(__assign({}, jsonValues), {
        tags: Array.from(tags)
      });
    };
    State2.prototype.matches = function(parentStateValue) {
      return matchesState(parentStateValue, this.value);
    };
    State2.prototype.hasTag = function(tag) {
      return this.tags.has(tag);
    };
    State2.prototype.can = function(event2) {
      var _a2;
      if (IS_PRODUCTION) {
        warn(!!this.machine, "state.can(...) used outside of a machine-created State object; this will always return false.");
      }
      var transitionData = (_a2 = this.machine) === null || _a2 === void 0 ? void 0 : _a2.getTransitionData(this, event2);
      return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden
      transitionData.transitions.some(function(t2) {
        return t2.target !== void 0 || t2.actions.length;
      });
    };
    return State2;
  }()
);

// node_modules/xstate/es/scheduler.js
var defaultOptions = {
  deferEvents: false
};
var Scheduler = (
  /** @class */
  function() {
    function Scheduler3(options) {
      this.processingEvent = false;
      this.queue = [];
      this.initialized = false;
      this.options = __assign(__assign({}, defaultOptions), options);
    }
    Scheduler3.prototype.initialize = function(callback) {
      this.initialized = true;
      if (callback) {
        if (!this.options.deferEvents) {
          this.schedule(callback);
          return;
        }
        this.process(callback);
      }
      this.flushEvents();
    };
    Scheduler3.prototype.schedule = function(task) {
      if (!this.initialized || this.processingEvent) {
        this.queue.push(task);
        return;
      }
      if (this.queue.length !== 0) {
        throw new Error("Event queue should be empty when it is not processing events");
      }
      this.process(task);
      this.flushEvents();
    };
    Scheduler3.prototype.clear = function() {
      this.queue = [];
    };
    Scheduler3.prototype.flushEvents = function() {
      var nextCallback = this.queue.shift();
      while (nextCallback) {
        this.process(nextCallback);
        nextCallback = this.queue.shift();
      }
    };
    Scheduler3.prototype.process = function(callback) {
      this.processingEvent = true;
      try {
        callback();
      } catch (e) {
        this.clear();
        throw e;
      } finally {
        this.processingEvent = false;
      }
    };
    return Scheduler3;
  }()
);

// node_modules/xstate/es/registry.js
var children = /* @__PURE__ */ new Map();
var sessionIdIndex = 0;
var registry = {
  bookId: function() {
    return "x:".concat(sessionIdIndex++);
  },
  register: function(id, actor) {
    children.set(id, actor);
    return id;
  },
  get: function(id) {
    return children.get(id);
  },
  free: function(id) {
    children.delete(id);
  }
};

// node_modules/xstate/es/devTools.js
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (!IS_PRODUCTION) {
    console.warn("XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues");
  }
}
function getDevTools() {
  var global2 = getGlobal();
  if (global2 && "__xstate__" in global2) {
    return global2.__xstate__;
  }
  return void 0;
}
function registerService(service) {
  if (!getGlobal()) {
    return;
  }
  var devTools = getDevTools();
  if (devTools) {
    devTools.register(service);
  }
}

// node_modules/xstate/es/behaviors.js
function spawnBehavior(behavior, options) {
  if (options === void 0) {
    options = {};
  }
  var state = behavior.initialState;
  var observers = /* @__PURE__ */ new Set();
  var mailbox = [];
  var flushing = false;
  var flush = function() {
    if (flushing) {
      return;
    }
    flushing = true;
    while (mailbox.length > 0) {
      var event_1 = mailbox.shift();
      state = behavior.transition(state, event_1, actorCtx);
      observers.forEach(function(observer) {
        return observer.next(state);
      });
    }
    flushing = false;
  };
  var actor = toActorRef({
    id: options.id,
    send: function(event2) {
      mailbox.push(event2);
      flush();
    },
    getSnapshot: function() {
      return state;
    },
    subscribe: function(next, handleError, complete) {
      var observer = toObserver(next, handleError, complete);
      observers.add(observer);
      observer.next(state);
      return {
        unsubscribe: function() {
          observers.delete(observer);
        }
      };
    }
  });
  var actorCtx = {
    parent: options.parent,
    self: actor,
    id: options.id || "anonymous",
    observers
  };
  state = behavior.start ? behavior.start(actorCtx) : state;
  return actor;
}

// node_modules/xstate/es/interpreter.js
var DEFAULT_SPAWN_OPTIONS = {
  sync: false,
  autoForward: false
};
var InterpreterStatus;
(function(InterpreterStatus2) {
  InterpreterStatus2[InterpreterStatus2["NotStarted"] = 0] = "NotStarted";
  InterpreterStatus2[InterpreterStatus2["Running"] = 1] = "Running";
  InterpreterStatus2[InterpreterStatus2["Stopped"] = 2] = "Stopped";
})(InterpreterStatus || (InterpreterStatus = {}));
var Interpreter = (
  /** @class */
  function() {
    function Interpreter2(machine, options) {
      if (options === void 0) {
        options = Interpreter2.defaultOptions;
      }
      var _this = this;
      this.machine = machine;
      this.delayedEventsMap = {};
      this.listeners = /* @__PURE__ */ new Set();
      this.contextListeners = /* @__PURE__ */ new Set();
      this.stopListeners = /* @__PURE__ */ new Set();
      this.doneListeners = /* @__PURE__ */ new Set();
      this.eventListeners = /* @__PURE__ */ new Set();
      this.sendListeners = /* @__PURE__ */ new Set();
      this.initialized = false;
      this.status = InterpreterStatus.NotStarted;
      this.children = /* @__PURE__ */ new Map();
      this.forwardTo = /* @__PURE__ */ new Set();
      this._outgoingQueue = [];
      this.init = this.start;
      this.send = function(event2, payload) {
        if (isArray(event2)) {
          _this.batch(event2);
          return _this.state;
        }
        var _event = toSCXMLEvent(toEventObject(event2, payload));
        if (_this.status === InterpreterStatus.Stopped) {
          if (!IS_PRODUCTION) {
            warn(false, 'Event "'.concat(_event.name, '" was sent to stopped service "').concat(_this.machine.id, '". This service has already reached its final state, and will not transition.\nEvent: ').concat(JSON.stringify(_event.data)));
          }
          return _this.state;
        }
        if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {
          throw new Error('Event "'.concat(_event.name, '" was sent to uninitialized service "').concat(
            _this.machine.id,
            '". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\nEvent: '
          ).concat(JSON.stringify(_event.data)));
        }
        _this.scheduler.schedule(function() {
          _this.forward(_event);
          var nextState = _this._nextState(_event);
          _this.update(nextState, _event);
        });
        return _this._state;
      };
      this.sendTo = function(event2, to, immediate) {
        var isParent = _this.parent && (to === SpecialTargets.Parent || _this.parent.id === to);
        var target = isParent ? _this.parent : isString(to) ? to === SpecialTargets.Internal ? _this : _this.children.get(to) || registry.get(to) : isActor(to) ? to : void 0;
        if (!target) {
          if (!isParent) {
            throw new Error("Unable to send event to child '".concat(to, "' from service '").concat(_this.id, "'."));
          }
          if (!IS_PRODUCTION) {
            warn(false, "Service '".concat(_this.id, "' has no parent: unable to send event ").concat(event2.type));
          }
          return;
        }
        if ("machine" in target) {
          if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target || // we need to send events to the parent from exit handlers of a machine that reached its final state
          _this.state.done) {
            var scxmlEvent = __assign(__assign({}, event2), {
              name: event2.name === error ? "".concat(error2(_this.id)) : event2.name,
              origin: _this.sessionId
            });
            if (!immediate && _this.machine.config.predictableActionArguments) {
              _this._outgoingQueue.push([target, scxmlEvent]);
            } else {
              target.send(scxmlEvent);
            }
          }
        } else {
          if (!immediate && _this.machine.config.predictableActionArguments) {
            _this._outgoingQueue.push([target, event2.data]);
          } else {
            target.send(event2.data);
          }
        }
      };
      this._exec = function(action, context2, _event, actionFunctionMap) {
        if (actionFunctionMap === void 0) {
          actionFunctionMap = _this.machine.options.actions;
        }
        var actionOrExec = action.exec || getActionFunction(action.type, actionFunctionMap);
        var exec = isFunction(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;
        if (exec) {
          try {
            return exec(context2, _event.data, !_this.machine.config.predictableActionArguments ? {
              action,
              state: _this.state,
              _event
            } : {
              action,
              _event
            });
          } catch (err) {
            if (_this.parent) {
              _this.parent.send({
                type: "xstate.error",
                data: err
              });
            }
            throw err;
          }
        }
        switch (action.type) {
          case raise: {
            var sendAction_1 = action;
            _this.defer(sendAction_1);
            break;
          }
          case send:
            var sendAction = action;
            if (typeof sendAction.delay === "number") {
              _this.defer(sendAction);
              return;
            } else {
              if (sendAction.to) {
                _this.sendTo(sendAction._event, sendAction.to, _event === initEvent);
              } else {
                _this.send(sendAction._event);
              }
            }
            break;
          case cancel:
            _this.cancel(action.sendId);
            break;
          case start: {
            if (_this.status !== InterpreterStatus.Running) {
              return;
            }
            var activity = action.activity;
            if (
              // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state
              !_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]
            ) {
              break;
            }
            if (activity.type === ActionTypes.Invoke) {
              var invokeSource = toInvokeSource(activity.src);
              var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : void 0;
              var id2 = activity.id, data = activity.data;
              if (!IS_PRODUCTION) {
                warn(
                  !("forward" in activity),
                  // tslint:disable-next-line:max-line-length
                  "`forward` property is deprecated (found in invocation of '".concat(activity.src, "' in in machine '").concat(_this.machine.id, "'). ") + "Please use `autoForward` instead."
                );
              }
              var autoForward = "autoForward" in activity ? activity.autoForward : !!activity.forward;
              if (!serviceCreator) {
                if (!IS_PRODUCTION) {
                  warn(false, "No service found for invocation '".concat(activity.src, "' in machine '").concat(_this.machine.id, "'."));
                }
                return;
              }
              var resolvedData = data ? mapContext(data, context2, _event) : void 0;
              if (typeof serviceCreator === "string") {
                return;
              }
              var source = isFunction(serviceCreator) ? serviceCreator(context2, _event.data, {
                data: resolvedData,
                src: invokeSource,
                meta: activity.meta
              }) : serviceCreator;
              if (!source) {
                return;
              }
              var options2 = void 0;
              if (isMachine(source)) {
                source = resolvedData ? source.withContext(resolvedData) : source;
                options2 = {
                  autoForward
                };
              }
              _this.spawn(source, id2, options2);
            } else {
              _this.spawnActivity(activity);
            }
            break;
          }
          case stop: {
            _this.stopChild(action.activity.id);
            break;
          }
          case log:
            var _a2 = action, label = _a2.label, value = _a2.value;
            if (label) {
              _this.logger(label, value);
            } else {
              _this.logger(value);
            }
            break;
          default:
            if (!IS_PRODUCTION) {
              warn(false, "No implementation found for action type '".concat(action.type, "'"));
            }
            break;
        }
      };
      var resolvedOptions = __assign(__assign({}, Interpreter2.defaultOptions), options);
      var clock = resolvedOptions.clock, logger21 = resolvedOptions.logger, parent = resolvedOptions.parent, id = resolvedOptions.id;
      var resolvedId = id !== void 0 ? id : machine.id;
      this.id = resolvedId;
      this.logger = logger21;
      this.clock = clock;
      this.parent = parent;
      this.options = resolvedOptions;
      this.scheduler = new Scheduler({
        deferEvents: this.options.deferEvents
      });
      this.sessionId = registry.bookId();
    }
    Object.defineProperty(Interpreter2.prototype, "initialState", {
      get: function() {
        var _this = this;
        if (this._initialState) {
          return this._initialState;
        }
        return provide(this, function() {
          _this._initialState = _this.machine.initialState;
          return _this._initialState;
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Interpreter2.prototype, "state", {
      /**
       * @deprecated Use `.getSnapshot()` instead.
       */
      get: function() {
        if (!IS_PRODUCTION) {
          warn(this.status !== InterpreterStatus.NotStarted, "Attempted to read state from uninitialized service '".concat(this.id, "'. Make sure the service is started first."));
        }
        return this._state;
      },
      enumerable: false,
      configurable: true
    });
    Interpreter2.prototype.execute = function(state, actionsConfig) {
      var e_1, _a2;
      try {
        for (var _b = __values(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
          var action = _c.value;
          this.exec(action, state, actionsConfig);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    Interpreter2.prototype.update = function(state, _event) {
      var e_2, _a2, e_3, _b, e_4, _c, e_5, _d;
      var _this = this;
      state._sessionid = this.sessionId;
      this._state = state;
      if ((!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached
      // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns
      _event === initEvent) && this.options.execute) {
        this.execute(this.state);
      } else {
        var item = void 0;
        while (item = this._outgoingQueue.shift()) {
          item[0].send(item[1]);
        }
      }
      this.children.forEach(function(child) {
        _this.state.children[child.id] = child;
      });
      if (this.devTools) {
        this.devTools.send(_event.data, state);
      }
      if (state.event) {
        try {
          for (var _e = __values(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {
            var listener = _f.value;
            listener(state.event);
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_f && !_f.done && (_a2 = _e.return))
              _a2.call(_e);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      try {
        for (var _g = __values(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {
          var listener = _h.value;
          listener(state, state.event);
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_h && !_h.done && (_b = _g.return))
            _b.call(_g);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      try {
        for (var _j = __values(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {
          var contextListener = _k.value;
          contextListener(this.state.context, this.state.history ? this.state.history.context : void 0);
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (_k && !_k.done && (_c = _j.return))
            _c.call(_j);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      if (this.state.done) {
        var finalChildStateNode = state.configuration.find(function(sn) {
          return sn.type === "final" && sn.parent === _this.machine;
        });
        var doneData = finalChildStateNode && finalChildStateNode.doneData ? mapContext(finalChildStateNode.doneData, state.context, _event) : void 0;
        this._doneEvent = doneInvoke(this.id, doneData);
        try {
          for (var _l = __values(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {
            var listener = _m.value;
            listener(this._doneEvent);
          }
        } catch (e_5_1) {
          e_5 = {
            error: e_5_1
          };
        } finally {
          try {
            if (_m && !_m.done && (_d = _l.return))
              _d.call(_l);
          } finally {
            if (e_5)
              throw e_5.error;
          }
        }
        this._stop();
        this._stopChildren();
        registry.free(this.sessionId);
      }
    };
    Interpreter2.prototype.onTransition = function(listener) {
      this.listeners.add(listener);
      if (this.status === InterpreterStatus.Running) {
        listener(this.state, this.state.event);
      }
      return this;
    };
    Interpreter2.prototype.subscribe = function(nextListenerOrObserver, _, completeListener) {
      var _this = this;
      var observer = toObserver(nextListenerOrObserver, _, completeListener);
      this.listeners.add(observer.next);
      if (this.status !== InterpreterStatus.NotStarted) {
        observer.next(this.state);
      }
      var completeOnce = function() {
        _this.doneListeners.delete(completeOnce);
        _this.stopListeners.delete(completeOnce);
        observer.complete();
      };
      if (this.status === InterpreterStatus.Stopped) {
        observer.complete();
      } else {
        this.onDone(completeOnce);
        this.onStop(completeOnce);
      }
      return {
        unsubscribe: function() {
          _this.listeners.delete(observer.next);
          _this.doneListeners.delete(completeOnce);
          _this.stopListeners.delete(completeOnce);
        }
      };
    };
    Interpreter2.prototype.onEvent = function(listener) {
      this.eventListeners.add(listener);
      return this;
    };
    Interpreter2.prototype.onSend = function(listener) {
      this.sendListeners.add(listener);
      return this;
    };
    Interpreter2.prototype.onChange = function(listener) {
      this.contextListeners.add(listener);
      return this;
    };
    Interpreter2.prototype.onStop = function(listener) {
      this.stopListeners.add(listener);
      return this;
    };
    Interpreter2.prototype.onDone = function(listener) {
      if (this.status === InterpreterStatus.Stopped && this._doneEvent) {
        listener(this._doneEvent);
      } else {
        this.doneListeners.add(listener);
      }
      return this;
    };
    Interpreter2.prototype.off = function(listener) {
      this.listeners.delete(listener);
      this.eventListeners.delete(listener);
      this.sendListeners.delete(listener);
      this.stopListeners.delete(listener);
      this.doneListeners.delete(listener);
      this.contextListeners.delete(listener);
      return this;
    };
    Interpreter2.prototype.start = function(initialState) {
      var _this = this;
      if (this.status === InterpreterStatus.Running) {
        return this;
      }
      this.machine._init();
      registry.register(this.sessionId, this);
      this.initialized = true;
      this.status = InterpreterStatus.Running;
      var resolvedState = initialState === void 0 ? this.initialState : provide(this, function() {
        return isStateConfig(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(State.from(initialState, _this.machine.context));
      });
      if (this.options.devTools) {
        this.attachDev();
      }
      this.scheduler.initialize(function() {
        _this.update(resolvedState, initEvent);
      });
      return this;
    };
    Interpreter2.prototype._stopChildren = function() {
      this.children.forEach(function(child) {
        if (isFunction(child.stop)) {
          child.stop();
        }
      });
      this.children.clear();
    };
    Interpreter2.prototype._stop = function() {
      var e_6, _a2, e_7, _b, e_8, _c, e_9, _d, e_10, _e;
      try {
        for (var _f = __values(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {
          var listener = _g.value;
          this.listeners.delete(listener);
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (_g && !_g.done && (_a2 = _f.return))
            _a2.call(_f);
        } finally {
          if (e_6)
            throw e_6.error;
        }
      }
      try {
        for (var _h = __values(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {
          var listener = _j.value;
          listener();
          this.stopListeners.delete(listener);
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_j && !_j.done && (_b = _h.return))
            _b.call(_h);
        } finally {
          if (e_7)
            throw e_7.error;
        }
      }
      try {
        for (var _k = __values(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {
          var listener = _l.value;
          this.contextListeners.delete(listener);
        }
      } catch (e_8_1) {
        e_8 = {
          error: e_8_1
        };
      } finally {
        try {
          if (_l && !_l.done && (_c = _k.return))
            _c.call(_k);
        } finally {
          if (e_8)
            throw e_8.error;
        }
      }
      try {
        for (var _m = __values(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {
          var listener = _o.value;
          this.doneListeners.delete(listener);
        }
      } catch (e_9_1) {
        e_9 = {
          error: e_9_1
        };
      } finally {
        try {
          if (_o && !_o.done && (_d = _m.return))
            _d.call(_m);
        } finally {
          if (e_9)
            throw e_9.error;
        }
      }
      if (!this.initialized) {
        return this;
      }
      this.initialized = false;
      this.status = InterpreterStatus.Stopped;
      this._initialState = void 0;
      try {
        for (var _p = __values(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()) {
          var key = _q.value;
          this.clock.clearTimeout(this.delayedEventsMap[key]);
        }
      } catch (e_10_1) {
        e_10 = {
          error: e_10_1
        };
      } finally {
        try {
          if (_q && !_q.done && (_e = _p.return))
            _e.call(_p);
        } finally {
          if (e_10)
            throw e_10.error;
        }
      }
      this.scheduler.clear();
      this.scheduler = new Scheduler({
        deferEvents: this.options.deferEvents
      });
    };
    Interpreter2.prototype.stop = function() {
      var _this = this;
      var scheduler = this.scheduler;
      this._stop();
      scheduler.schedule(function() {
        var _a2;
        if ((_a2 = _this._state) === null || _a2 === void 0 ? void 0 : _a2.done) {
          return;
        }
        var _event = toSCXMLEvent({
          type: "xstate.stop"
        });
        var nextState = provide(_this, function() {
          var exitActions = flatten(__spreadArray([], __read(_this.state.configuration), false).sort(function(a, b) {
            return b.order - a.order;
          }).map(function(stateNode) {
            return toActionObjects(stateNode.onExit, _this.machine.options.actions);
          }));
          var _a3 = __read(resolveActions(_this.machine, _this.state, _this.state.context, _event, [{
            type: "exit",
            actions: exitActions
          }], _this.machine.config.predictableActionArguments ? _this._exec : void 0, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2), resolvedActions = _a3[0], updatedContext = _a3[1];
          var newState = new State({
            value: _this.state.value,
            context: updatedContext,
            _event,
            _sessionid: _this.sessionId,
            historyValue: void 0,
            history: _this.state,
            actions: resolvedActions.filter(function(action) {
              return !isRaisableAction(action);
            }),
            activities: {},
            events: [],
            configuration: [],
            transitions: [],
            children: {},
            done: _this.state.done,
            tags: _this.state.tags,
            machine: _this.machine
          });
          newState.changed = true;
          return newState;
        });
        _this.update(nextState, _event);
        _this._stopChildren();
        registry.free(_this.sessionId);
      });
      return this;
    };
    Interpreter2.prototype.batch = function(events) {
      var _this = this;
      if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {
        if (!IS_PRODUCTION) {
          warn(false, "".concat(events.length, ' event(s) were sent to uninitialized service "').concat(this.machine.id, '" and are deferred. Make sure .start() is called for this service.\nEvent: ').concat(JSON.stringify(event)));
        }
      } else if (this.status !== InterpreterStatus.Running) {
        throw new Error(
          // tslint:disable-next-line:max-line-length
          "".concat(events.length, ' event(s) were sent to uninitialized service "').concat(this.machine.id, '". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.')
        );
      }
      if (!events.length) {
        return;
      }
      var exec = !!this.machine.config.predictableActionArguments && this._exec;
      this.scheduler.schedule(function() {
        var e_11, _a2;
        var nextState = _this.state;
        var batchChanged = false;
        var batchedActions = [];
        var _loop_1 = function(event_12) {
          var _event = toSCXMLEvent(event_12);
          _this.forward(_event);
          nextState = provide(_this, function() {
            return _this.machine.transition(nextState, _event, void 0, exec || void 0);
          });
          batchedActions.push.apply(batchedActions, __spreadArray([], __read(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function(a) {
            return bindActionToState(a, nextState);
          })), false));
          batchChanged = batchChanged || !!nextState.changed;
        };
        try {
          for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
            var event_1 = events_1_1.value;
            _loop_1(event_1);
          }
        } catch (e_11_1) {
          e_11 = {
            error: e_11_1
          };
        } finally {
          try {
            if (events_1_1 && !events_1_1.done && (_a2 = events_1.return))
              _a2.call(events_1);
          } finally {
            if (e_11)
              throw e_11.error;
          }
        }
        nextState.changed = batchChanged;
        nextState.actions = batchedActions;
        _this.update(nextState, toSCXMLEvent(events[events.length - 1]));
      });
    };
    Interpreter2.prototype.sender = function(event2) {
      return this.send.bind(this, event2);
    };
    Interpreter2.prototype._nextState = function(event2, exec) {
      var _this = this;
      if (exec === void 0) {
        exec = !!this.machine.config.predictableActionArguments && this._exec;
      }
      var _event = toSCXMLEvent(event2);
      if (_event.name.indexOf(errorPlatform) === 0 && !this.state.nextEvents.some(function(nextEvent) {
        return nextEvent.indexOf(errorPlatform) === 0;
      })) {
        throw _event.data.data;
      }
      var nextState = provide(this, function() {
        return _this.machine.transition(_this.state, _event, void 0, exec || void 0);
      });
      return nextState;
    };
    Interpreter2.prototype.nextState = function(event2) {
      return this._nextState(event2, false);
    };
    Interpreter2.prototype.forward = function(event2) {
      var e_12, _a2;
      try {
        for (var _b = __values(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {
          var id = _c.value;
          var child = this.children.get(id);
          if (!child) {
            throw new Error("Unable to forward event '".concat(event2, "' from interpreter '").concat(this.id, "' to nonexistant child '").concat(id, "'."));
          }
          child.send(event2);
        }
      } catch (e_12_1) {
        e_12 = {
          error: e_12_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_12)
            throw e_12.error;
        }
      }
    };
    Interpreter2.prototype.defer = function(sendAction) {
      var _this = this;
      var timerId = this.clock.setTimeout(function() {
        if ("to" in sendAction && sendAction.to) {
          _this.sendTo(sendAction._event, sendAction.to, true);
        } else {
          _this.send(sendAction._event);
        }
      }, sendAction.delay);
      if (sendAction.id) {
        this.delayedEventsMap[sendAction.id] = timerId;
      }
    };
    Interpreter2.prototype.cancel = function(sendId) {
      this.clock.clearTimeout(this.delayedEventsMap[sendId]);
      delete this.delayedEventsMap[sendId];
    };
    Interpreter2.prototype.exec = function(action, state, actionFunctionMap) {
      if (actionFunctionMap === void 0) {
        actionFunctionMap = this.machine.options.actions;
      }
      this._exec(action, state.context, state._event, actionFunctionMap);
    };
    Interpreter2.prototype.removeChild = function(childId) {
      var _a2;
      this.children.delete(childId);
      this.forwardTo.delete(childId);
      (_a2 = this.state) === null || _a2 === void 0 ? true : delete _a2.children[childId];
    };
    Interpreter2.prototype.stopChild = function(childId) {
      var child = this.children.get(childId);
      if (!child) {
        return;
      }
      this.removeChild(childId);
      if (isFunction(child.stop)) {
        child.stop();
      }
    };
    Interpreter2.prototype.spawn = function(entity, name2, options) {
      if (this.status !== InterpreterStatus.Running) {
        return createDeferredActor(entity, name2);
      }
      if (isPromiseLike(entity)) {
        return this.spawnPromise(Promise.resolve(entity), name2);
      } else if (isFunction(entity)) {
        return this.spawnCallback(entity, name2);
      } else if (isSpawnedActor(entity)) {
        return this.spawnActor(entity, name2);
      } else if (isObservable(entity)) {
        return this.spawnObservable(entity, name2);
      } else if (isMachine(entity)) {
        return this.spawnMachine(entity, __assign(__assign({}, options), {
          id: name2
        }));
      } else if (isBehavior(entity)) {
        return this.spawnBehavior(entity, name2);
      } else {
        throw new Error('Unable to spawn entity "'.concat(name2, '" of type "').concat(typeof entity, '".'));
      }
    };
    Interpreter2.prototype.spawnMachine = function(machine, options) {
      var _this = this;
      if (options === void 0) {
        options = {};
      }
      var childService = new Interpreter2(machine, __assign(__assign({}, this.options), {
        parent: this,
        id: options.id || machine.id
      }));
      var resolvedOptions = __assign(__assign({}, DEFAULT_SPAWN_OPTIONS), options);
      if (resolvedOptions.sync) {
        childService.onTransition(function(state) {
          _this.send(update, {
            state,
            id: childService.id
          });
        });
      }
      var actor = childService;
      this.children.set(childService.id, actor);
      if (resolvedOptions.autoForward) {
        this.forwardTo.add(childService.id);
      }
      childService.onDone(function(doneEvent) {
        _this.removeChild(childService.id);
        _this.send(toSCXMLEvent(doneEvent, {
          origin: childService.id
        }));
      }).start();
      return actor;
    };
    Interpreter2.prototype.spawnBehavior = function(behavior, id) {
      var actorRef = spawnBehavior(behavior, {
        id,
        parent: this
      });
      this.children.set(id, actorRef);
      return actorRef;
    };
    Interpreter2.prototype.spawnPromise = function(promise, id) {
      var _a2;
      var _this = this;
      var canceled = false;
      var resolvedData;
      promise.then(function(response) {
        if (!canceled) {
          resolvedData = response;
          _this.removeChild(id);
          _this.send(toSCXMLEvent(doneInvoke(id, response), {
            origin: id
          }));
        }
      }, function(errorData) {
        if (!canceled) {
          _this.removeChild(id);
          var errorEvent = error2(id, errorData);
          try {
            _this.send(toSCXMLEvent(errorEvent, {
              origin: id
            }));
          } catch (error3) {
            reportUnhandledExceptionOnInvocation(errorData, error3, id);
            if (_this.devTools) {
              _this.devTools.send(errorEvent, _this.state);
            }
            if (_this.machine.strict) {
              _this.stop();
            }
          }
        }
      });
      var actor = (_a2 = {
        id,
        send: function() {
          return void 0;
        },
        subscribe: function(next, handleError, complete) {
          var observer = toObserver(next, handleError, complete);
          var unsubscribed = false;
          promise.then(function(response) {
            if (unsubscribed) {
              return;
            }
            observer.next(response);
            if (unsubscribed) {
              return;
            }
            observer.complete();
          }, function(err) {
            if (unsubscribed) {
              return;
            }
            observer.error(err);
          });
          return {
            unsubscribe: function() {
              return unsubscribed = true;
            }
          };
        },
        stop: function() {
          canceled = true;
        },
        toJSON: function() {
          return {
            id
          };
        },
        getSnapshot: function() {
          return resolvedData;
        }
      }, _a2[symbolObservable] = function() {
        return this;
      }, _a2);
      this.children.set(id, actor);
      return actor;
    };
    Interpreter2.prototype.spawnCallback = function(callback, id) {
      var _a2;
      var _this = this;
      var canceled = false;
      var receivers = /* @__PURE__ */ new Set();
      var listeners = /* @__PURE__ */ new Set();
      var emitted;
      var receive = function(e) {
        emitted = e;
        listeners.forEach(function(listener) {
          return listener(e);
        });
        if (canceled) {
          return;
        }
        _this.send(toSCXMLEvent(e, {
          origin: id
        }));
      };
      var callbackStop;
      try {
        callbackStop = callback(receive, function(newListener) {
          receivers.add(newListener);
        });
      } catch (err) {
        this.send(error2(id, err));
      }
      if (isPromiseLike(callbackStop)) {
        return this.spawnPromise(callbackStop, id);
      }
      var actor = (_a2 = {
        id,
        send: function(event2) {
          return receivers.forEach(function(receiver) {
            return receiver(event2);
          });
        },
        subscribe: function(next) {
          var observer = toObserver(next);
          listeners.add(observer.next);
          return {
            unsubscribe: function() {
              listeners.delete(observer.next);
            }
          };
        },
        stop: function() {
          canceled = true;
          if (isFunction(callbackStop)) {
            callbackStop();
          }
        },
        toJSON: function() {
          return {
            id
          };
        },
        getSnapshot: function() {
          return emitted;
        }
      }, _a2[symbolObservable] = function() {
        return this;
      }, _a2);
      this.children.set(id, actor);
      return actor;
    };
    Interpreter2.prototype.spawnObservable = function(source, id) {
      var _a2;
      var _this = this;
      var emitted;
      var subscription = source.subscribe(function(value) {
        emitted = value;
        _this.send(toSCXMLEvent(value, {
          origin: id
        }));
      }, function(err) {
        _this.removeChild(id);
        _this.send(toSCXMLEvent(error2(id, err), {
          origin: id
        }));
      }, function() {
        _this.removeChild(id);
        _this.send(toSCXMLEvent(doneInvoke(id), {
          origin: id
        }));
      });
      var actor = (_a2 = {
        id,
        send: function() {
          return void 0;
        },
        subscribe: function(next, handleError, complete) {
          return source.subscribe(next, handleError, complete);
        },
        stop: function() {
          return subscription.unsubscribe();
        },
        getSnapshot: function() {
          return emitted;
        },
        toJSON: function() {
          return {
            id
          };
        }
      }, _a2[symbolObservable] = function() {
        return this;
      }, _a2);
      this.children.set(id, actor);
      return actor;
    };
    Interpreter2.prototype.spawnActor = function(actor, name2) {
      this.children.set(name2, actor);
      return actor;
    };
    Interpreter2.prototype.spawnActivity = function(activity) {
      var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : void 0;
      if (!implementation) {
        if (!IS_PRODUCTION) {
          warn(false, "No implementation found for activity '".concat(activity.type, "'"));
        }
        return;
      }
      var dispose = implementation(this.state.context, activity);
      this.spawnEffect(activity.id, dispose);
    };
    Interpreter2.prototype.spawnEffect = function(id, dispose) {
      var _a2;
      this.children.set(id, (_a2 = {
        id,
        send: function() {
          return void 0;
        },
        subscribe: function() {
          return {
            unsubscribe: function() {
              return void 0;
            }
          };
        },
        stop: dispose || void 0,
        getSnapshot: function() {
          return void 0;
        },
        toJSON: function() {
          return {
            id
          };
        }
      }, _a2[symbolObservable] = function() {
        return this;
      }, _a2));
    };
    Interpreter2.prototype.attachDev = function() {
      var global2 = getGlobal();
      if (this.options.devTools && global2) {
        if (global2.__REDUX_DEVTOOLS_EXTENSION__) {
          var devToolsOptions = typeof this.options.devTools === "object" ? this.options.devTools : void 0;
          this.devTools = global2.__REDUX_DEVTOOLS_EXTENSION__.connect(__assign(__assign({
            name: this.id,
            autoPause: true,
            stateSanitizer: function(state) {
              return {
                value: state.value,
                context: state.context,
                actions: state.actions
              };
            }
          }, devToolsOptions), {
            features: __assign({
              jump: false,
              skip: false
            }, devToolsOptions ? devToolsOptions.features : void 0)
          }), this.machine);
          this.devTools.init(this.state);
        }
        registerService(this);
      }
    };
    Interpreter2.prototype.toJSON = function() {
      return {
        id: this.id
      };
    };
    Interpreter2.prototype[symbolObservable] = function() {
      return this;
    };
    Interpreter2.prototype.getSnapshot = function() {
      if (this.status === InterpreterStatus.NotStarted) {
        return this.initialState;
      }
      return this._state;
    };
    Interpreter2.defaultOptions = {
      execute: true,
      deferEvents: true,
      clock: {
        setTimeout: function(fn, ms) {
          return setTimeout(fn, ms);
        },
        clearTimeout: function(id) {
          return clearTimeout(id);
        }
      },
      logger: console.log.bind(console),
      devTools: false
    };
    Interpreter2.interpret = interpret;
    return Interpreter2;
  }()
);
var resolveSpawnOptions = function(nameOrOptions) {
  if (isString(nameOrOptions)) {
    return __assign(__assign({}, DEFAULT_SPAWN_OPTIONS), {
      name: nameOrOptions
    });
  }
  return __assign(__assign(__assign({}, DEFAULT_SPAWN_OPTIONS), {
    name: uniqueId()
  }), nameOrOptions);
};
function spawn(entity, nameOrOptions) {
  var resolvedOptions = resolveSpawnOptions(nameOrOptions);
  return consume(function(service) {
    if (!IS_PRODUCTION) {
      var isLazyEntity = isMachine(entity) || isFunction(entity);
      warn(!!service || isLazyEntity, 'Attempted to spawn an Actor (ID: "'.concat(isMachine(entity) ? entity.id : "undefined", '") outside of a service. This will have no effect.'));
    }
    if (service) {
      return service.spawn(entity, resolvedOptions.name, resolvedOptions);
    } else {
      return createDeferredActor(entity, resolvedOptions.name);
    }
  });
}
function interpret(machine, options) {
  var interpreter = new Interpreter(machine, options);
  return interpreter;
}

// node_modules/xstate/es/invokeUtils.js
function toInvokeSource2(src) {
  if (typeof src === "string") {
    var simpleSrc = {
      type: src
    };
    simpleSrc.toString = function() {
      return src;
    };
    return simpleSrc;
  }
  return src;
}
function toInvokeDefinition(invokeConfig) {
  return __assign(__assign({
    type: invoke
  }, invokeConfig), {
    toJSON: function() {
      invokeConfig.onDone;
      invokeConfig.onError;
      var invokeDef = __rest(invokeConfig, ["onDone", "onError"]);
      return __assign(__assign({}, invokeDef), {
        type: invoke,
        src: toInvokeSource2(invokeConfig.src)
      });
    }
  });
}

// node_modules/xstate/es/StateNode.js
var NULL_EVENT = "";
var STATE_IDENTIFIER = "#";
var WILDCARD = "*";
var EMPTY_OBJECT = {};
var isStateId = function(str) {
  return str[0] === STATE_IDENTIFIER;
};
var createDefaultOptions = function() {
  return {
    actions: {},
    guards: {},
    services: {},
    activities: {},
    delays: {}
  };
};
var validateArrayifiedTransitions = function(stateNode, event2, transitions) {
  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function(transition) {
    return !("cond" in transition) && !("in" in transition) && (isString(transition.target) || isMachine(transition.target));
  });
  var eventText = event2 === NULL_EVENT ? "the transient event" : "event '".concat(event2, "'");
  warn(!hasNonLastUnguardedTarget, "One or more transitions for ".concat(eventText, " on state '").concat(stateNode.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
};
var StateNode = (
  /** @class */
  function() {
    function StateNode2(config2, options, _context, _stateInfo) {
      if (_context === void 0) {
        _context = "context" in config2 ? config2.context : void 0;
      }
      var _this = this;
      var _a2;
      this.config = config2;
      this._context = _context;
      this.order = -1;
      this.__xstatenode = true;
      this.__cache = {
        events: void 0,
        relativeValue: /* @__PURE__ */ new Map(),
        initialStateValue: void 0,
        initialState: void 0,
        on: void 0,
        transitions: void 0,
        candidates: {},
        delayedTransitions: void 0
      };
      this.idMap = {};
      this.tags = [];
      this.options = Object.assign(createDefaultOptions(), options);
      this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;
      this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || "(machine)";
      this.machine = this.parent ? this.parent.machine : this;
      this.path = this.parent ? this.parent.path.concat(this.key) : [];
      this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);
      this.id = this.config.id || __spreadArray([this.machine.key], __read(this.path), false).join(this.delimiter);
      this.version = this.parent ? this.parent.version : this.config.version;
      this.type = this.config.type || (this.config.parallel ? "parallel" : this.config.states && Object.keys(this.config.states).length ? "compound" : this.config.history ? "history" : "atomic");
      this.schema = this.parent ? this.machine.schema : (_a2 = this.config.schema) !== null && _a2 !== void 0 ? _a2 : {};
      this.description = this.config.description;
      if (!IS_PRODUCTION) {
        warn(!("parallel" in this.config), 'The "parallel" property is deprecated and will be removed in version 4.1. '.concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead."));
      }
      this.initial = this.config.initial;
      this.states = this.config.states ? mapValues(this.config.states, function(stateConfig, key) {
        var _a3;
        var stateNode = new StateNode2(stateConfig, {}, void 0, {
          parent: _this,
          key
        });
        Object.assign(_this.idMap, __assign((_a3 = {}, _a3[stateNode.id] = stateNode, _a3), stateNode.idMap));
        return stateNode;
      }) : EMPTY_OBJECT;
      var order = 0;
      function dfs(stateNode) {
        var e_1, _a3;
        stateNode.order = order++;
        try {
          for (var _b = __values(getAllChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            dfs(child);
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (_c && !_c.done && (_a3 = _b.return))
              _a3.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
      dfs(this);
      this.history = this.config.history === true ? "shallow" : this.config.history || false;
      this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function(_a3) {
        var event2 = _a3.event;
        return event2 === NULL_EVENT;
      }) : NULL_EVENT in this.config.on);
      this.strict = !!this.config.strict;
      this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function(action) {
        return toActionObject(action);
      });
      this.onExit = toArray(this.config.exit || this.config.onExit).map(function(action) {
        return toActionObject(action);
      });
      this.meta = this.config.meta;
      this.doneData = this.type === "final" ? this.config.data : void 0;
      this.invoke = toArray(this.config.invoke).map(function(invokeConfig, i) {
        var _a3, _b;
        if (isMachine(invokeConfig)) {
          var invokeId = createInvokeId(_this.id, i);
          _this.machine.options.services = __assign((_a3 = {}, _a3[invokeId] = invokeConfig, _a3), _this.machine.options.services);
          return toInvokeDefinition({
            src: invokeId,
            id: invokeId
          });
        } else if (isString(invokeConfig.src)) {
          var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
          return toInvokeDefinition(__assign(__assign({}, invokeConfig), {
            id: invokeId,
            src: invokeConfig.src
          }));
        } else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {
          var invokeId = invokeConfig.id || createInvokeId(_this.id, i);
          _this.machine.options.services = __assign((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);
          return toInvokeDefinition(__assign(__assign({
            id: invokeId
          }, invokeConfig), {
            src: invokeId
          }));
        } else {
          var invokeSource = invokeConfig.src;
          return toInvokeDefinition(__assign(__assign({
            id: createInvokeId(_this.id, i)
          }, invokeConfig), {
            src: invokeSource
          }));
        }
      });
      this.activities = toArray(this.config.activities).concat(this.invoke).map(function(activity) {
        return toActivityDefinition(activity);
      });
      this.transition = this.transition.bind(this);
      this.tags = toArray(this.config.tags);
    }
    StateNode2.prototype._init = function() {
      if (this.__cache.transitions) {
        return;
      }
      getAllStateNodes(this).forEach(function(stateNode) {
        return stateNode.on;
      });
    };
    StateNode2.prototype.withConfig = function(options, context2) {
      var _a2 = this.options, actions = _a2.actions, activities = _a2.activities, guards = _a2.guards, services = _a2.services, delays = _a2.delays;
      return new StateNode2(this.config, {
        actions: __assign(__assign({}, actions), options.actions),
        activities: __assign(__assign({}, activities), options.activities),
        guards: __assign(__assign({}, guards), options.guards),
        services: __assign(__assign({}, services), options.services),
        delays: __assign(__assign({}, delays), options.delays)
      }, context2 !== null && context2 !== void 0 ? context2 : this.context);
    };
    StateNode2.prototype.withContext = function(context2) {
      return new StateNode2(this.config, this.options, context2);
    };
    Object.defineProperty(StateNode2.prototype, "context", {
      get: function() {
        return isFunction(this._context) ? this._context() : this._context;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "definition", {
      /**
       * The well-structured state node definition.
       */
      get: function() {
        return {
          id: this.id,
          key: this.key,
          version: this.version,
          context: this.context,
          type: this.type,
          initial: this.initial,
          history: this.history,
          states: mapValues(this.states, function(state) {
            return state.definition;
          }),
          on: this.on,
          transitions: this.transitions,
          entry: this.onEntry,
          exit: this.onExit,
          activities: this.activities || [],
          meta: this.meta,
          order: this.order || -1,
          data: this.doneData,
          invoke: this.invoke,
          description: this.description,
          tags: this.tags
        };
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.toJSON = function() {
      return this.definition;
    };
    Object.defineProperty(StateNode2.prototype, "on", {
      /**
       * The mapping of events to transitions.
       */
      get: function() {
        if (this.__cache.on) {
          return this.__cache.on;
        }
        var transitions = this.transitions;
        return this.__cache.on = transitions.reduce(function(map3, transition) {
          map3[transition.eventType] = map3[transition.eventType] || [];
          map3[transition.eventType].push(transition);
          return map3;
        }, {});
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "after", {
      get: function() {
        return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "transitions", {
      /**
       * All the transitions that can be taken from this state node.
       */
      get: function() {
        return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.getCandidates = function(eventName) {
      if (this.__cache.candidates[eventName]) {
        return this.__cache.candidates[eventName];
      }
      var transient = eventName === NULL_EVENT;
      var candidates = this.transitions.filter(function(transition) {
        var sameEventType = transition.eventType === eventName;
        return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;
      });
      this.__cache.candidates[eventName] = candidates;
      return candidates;
    };
    StateNode2.prototype.getDelayedTransitions = function() {
      var _this = this;
      var afterConfig = this.config.after;
      if (!afterConfig) {
        return [];
      }
      var mutateEntryExit = function(delay2, i) {
        var delayRef = isFunction(delay2) ? "".concat(_this.id, ":delay[").concat(i, "]") : delay2;
        var eventType = after2(delayRef, _this.id);
        _this.onEntry.push(send2(eventType, {
          delay: delay2
        }));
        _this.onExit.push(cancel2(eventType));
        return eventType;
      };
      var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function(transition, i) {
        var eventType = mutateEntryExit(transition.delay, i);
        return __assign(__assign({}, transition), {
          event: eventType
        });
      }) : flatten(Object.keys(afterConfig).map(function(delay2, i) {
        var configTransition = afterConfig[delay2];
        var resolvedTransition = isString(configTransition) ? {
          target: configTransition
        } : configTransition;
        var resolvedDelay = !isNaN(+delay2) ? +delay2 : delay2;
        var eventType = mutateEntryExit(resolvedDelay, i);
        return toArray(resolvedTransition).map(function(transition) {
          return __assign(__assign({}, transition), {
            event: eventType,
            delay: resolvedDelay
          });
        });
      }));
      return delayedTransitions.map(function(delayedTransition) {
        var delay2 = delayedTransition.delay;
        return __assign(__assign({}, _this.formatTransition(delayedTransition)), {
          delay: delay2
        });
      });
    };
    StateNode2.prototype.getStateNodes = function(state) {
      var _a2;
      var _this = this;
      if (!state) {
        return [];
      }
      var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);
      if (isString(stateValue)) {
        var initialStateValue = this.getStateNode(stateValue).initial;
        return initialStateValue !== void 0 ? this.getStateNodes((_a2 = {}, _a2[stateValue] = initialStateValue, _a2)) : [this, this.states[stateValue]];
      }
      var subStateKeys = Object.keys(stateValue);
      var subStateNodes = [this];
      subStateNodes.push.apply(subStateNodes, __spreadArray([], __read(flatten(subStateKeys.map(function(subStateKey) {
        return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
      }))), false));
      return subStateNodes;
    };
    StateNode2.prototype.handles = function(event2) {
      var eventType = getEventType(event2);
      return this.events.includes(eventType);
    };
    StateNode2.prototype.resolveState = function(state) {
      var stateFromConfig = state instanceof State ? state : State.create(state);
      var configuration = Array.from(getConfiguration([], this.getStateNodes(stateFromConfig.value)));
      return new State(__assign(__assign({}, stateFromConfig), {
        value: this.resolve(stateFromConfig.value),
        configuration,
        done: isInFinalState(configuration, this),
        tags: getTagsFromConfiguration(configuration),
        machine: this.machine
      }));
    };
    StateNode2.prototype.transitionLeafNode = function(stateValue, state, _event) {
      var stateNode = this.getStateNode(stateValue);
      var next = stateNode.next(state, _event);
      if (!next || !next.transitions.length) {
        return this.next(state, _event);
      }
      return next;
    };
    StateNode2.prototype.transitionCompoundNode = function(stateValue, state, _event) {
      var subStateKeys = Object.keys(stateValue);
      var stateNode = this.getStateNode(subStateKeys[0]);
      var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);
      if (!next || !next.transitions.length) {
        return this.next(state, _event);
      }
      return next;
    };
    StateNode2.prototype.transitionParallelNode = function(stateValue, state, _event) {
      var e_2, _a2;
      var transitionMap = {};
      try {
        for (var _b = __values(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var subStateKey = _c.value;
          var subStateValue = stateValue[subStateKey];
          if (!subStateValue) {
            continue;
          }
          var subStateNode = this.getStateNode(subStateKey);
          var next = subStateNode._transition(subStateValue, state, _event);
          if (next) {
            transitionMap[subStateKey] = next;
          }
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      var stateTransitions = Object.keys(transitionMap).map(function(key) {
        return transitionMap[key];
      });
      var enabledTransitions = flatten(stateTransitions.map(function(st) {
        return st.transitions;
      }));
      var willTransition = stateTransitions.some(function(st) {
        return st.transitions.length > 0;
      });
      if (!willTransition) {
        return this.next(state, _event);
      }
      var configuration = flatten(Object.keys(transitionMap).map(function(key) {
        return transitionMap[key].configuration;
      }));
      return {
        transitions: enabledTransitions,
        exitSet: flatten(stateTransitions.map(function(t2) {
          return t2.exitSet;
        })),
        configuration,
        source: state,
        actions: flatten(Object.keys(transitionMap).map(function(key) {
          return transitionMap[key].actions;
        }))
      };
    };
    StateNode2.prototype._transition = function(stateValue, state, _event) {
      if (isString(stateValue)) {
        return this.transitionLeafNode(stateValue, state, _event);
      }
      if (Object.keys(stateValue).length === 1) {
        return this.transitionCompoundNode(stateValue, state, _event);
      }
      return this.transitionParallelNode(stateValue, state, _event);
    };
    StateNode2.prototype.getTransitionData = function(state, event2) {
      return this._transition(state.value, state, toSCXMLEvent(event2));
    };
    StateNode2.prototype.next = function(state, _event) {
      var e_3, _a2;
      var _this = this;
      var eventName = _event.name;
      var actions = [];
      var nextStateNodes = [];
      var selectedTransition;
      try {
        for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var candidate = _c.value;
          var cond = candidate.cond, stateIn = candidate.in;
          var resolvedContext = state.context;
          var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? (
            // Check if in state by ID
            state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter))
          ) : (
            // Check if in state by relative grandparent
            matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value))
          ) : true;
          var guardPassed = false;
          try {
            guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);
          } catch (err) {
            throw new Error("Unable to evaluate guard '".concat(cond.name || cond.type, "' in transition for event '").concat(eventName, "' in state node '").concat(this.id, "':\n").concat(err.message));
          }
          if (guardPassed && isInState) {
            if (candidate.target !== void 0) {
              nextStateNodes = candidate.target;
            }
            actions.push.apply(actions, __spreadArray([], __read(candidate.actions), false));
            selectedTransition = candidate;
            break;
          }
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      if (!selectedTransition) {
        return void 0;
      }
      if (!nextStateNodes.length) {
        return {
          transitions: [selectedTransition],
          exitSet: [],
          configuration: state.value ? [this] : [],
          source: state,
          actions
        };
      }
      var allNextStateNodes = flatten(nextStateNodes.map(function(stateNode) {
        return _this.getRelativeStateNodes(stateNode, state.historyValue);
      }));
      var isInternal = !!selectedTransition.internal;
      return {
        transitions: [selectedTransition],
        exitSet: isInternal ? [] : flatten(nextStateNodes.map(function(targetNode) {
          return _this.getPotentiallyReenteringNodes(targetNode);
        })),
        configuration: allNextStateNodes,
        source: state,
        actions
      };
    };
    StateNode2.prototype.getPotentiallyReenteringNodes = function(targetNode) {
      if (this.order < targetNode.order) {
        return [this];
      }
      var nodes = [];
      var marker = this;
      var possibleAncestor = targetNode;
      while (marker && marker !== possibleAncestor) {
        nodes.push(marker);
        marker = marker.parent;
      }
      if (marker !== possibleAncestor) {
        return [];
      }
      nodes.push(possibleAncestor);
      return nodes;
    };
    StateNode2.prototype.getActions = function(resolvedConfig, isDone, transition, currentContext, _event, prevState, predictableExec) {
      var e_4, _a2, e_5, _b;
      var _this = this;
      var prevConfig = prevState ? getConfiguration([], this.getStateNodes(prevState.value)) : [];
      var entrySet = /* @__PURE__ */ new Set();
      try {
        for (var _c = __values(Array.from(resolvedConfig).sort(function(a, b) {
          return a.order - b.order;
        })), _d = _c.next(); !_d.done; _d = _c.next()) {
          var sn = _d.value;
          if (!has(prevConfig, sn) || has(transition.exitSet, sn) || sn.parent && entrySet.has(sn.parent)) {
            entrySet.add(sn);
          }
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (_d && !_d.done && (_a2 = _c.return))
            _a2.call(_c);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      try {
        for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {
          var sn = prevConfig_1_1.value;
          if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {
            transition.exitSet.push(sn);
          }
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return))
            _b.call(prevConfig_1);
        } finally {
          if (e_5)
            throw e_5.error;
        }
      }
      transition.exitSet.sort(function(a, b) {
        return b.order - a.order;
      });
      var entryStates = Array.from(entrySet).sort(function(a, b) {
        return a.order - b.order;
      });
      var exitStates = new Set(transition.exitSet);
      var doneEvents = flatten(entryStates.map(function(sn2) {
        var events = [];
        if (sn2.type !== "final") {
          return events;
        }
        var parent = sn2.parent;
        if (!parent.parent) {
          return events;
        }
        events.push(
          done(sn2.id, sn2.doneData),
          // TODO: deprecate - final states should not emit done events for their own state.
          done(parent.id, sn2.doneData ? mapContext(sn2.doneData, currentContext, _event) : void 0)
        );
        var grandparent = parent.parent;
        if (grandparent.type === "parallel") {
          if (getChildren(grandparent).every(function(parentNode) {
            return isInFinalState(transition.configuration, parentNode);
          })) {
            events.push(done(grandparent.id));
          }
        }
        return events;
      }));
      var entryActions = entryStates.map(function(stateNode) {
        var entryActions2 = stateNode.onEntry;
        var invokeActions = stateNode.activities.map(function(activity) {
          return start2(activity);
        });
        return {
          type: "entry",
          actions: toActionObjects(predictableExec ? __spreadArray(__spreadArray([], __read(entryActions2), false), __read(invokeActions), false) : __spreadArray(__spreadArray([], __read(invokeActions), false), __read(entryActions2), false), _this.machine.options.actions)
        };
      }).concat({
        type: "state_done",
        actions: doneEvents.map(function(event2) {
          return raise2(event2);
        })
      });
      var exitActions = Array.from(exitStates).map(function(stateNode) {
        return {
          type: "exit",
          actions: toActionObjects(__spreadArray(__spreadArray([], __read(stateNode.onExit), false), __read(stateNode.activities.map(function(activity) {
            return stop2(activity);
          })), false), _this.machine.options.actions)
        };
      });
      var actions = exitActions.concat({
        type: "transition",
        actions: toActionObjects(transition.actions, this.machine.options.actions)
      }).concat(entryActions);
      if (isDone) {
        var stopActions = toActionObjects(flatten(__spreadArray([], __read(resolvedConfig), false).sort(function(a, b) {
          return b.order - a.order;
        }).map(function(stateNode) {
          return stateNode.onExit;
        })), this.machine.options.actions).filter(function(action) {
          return !isRaisableAction(action);
        });
        return actions.concat({
          type: "stop",
          actions: stopActions
        });
      }
      return actions;
    };
    StateNode2.prototype.transition = function(state, event2, context2, exec) {
      if (state === void 0) {
        state = this.initialState;
      }
      var _event = toSCXMLEvent(event2);
      var currentState;
      if (state instanceof State) {
        currentState = context2 === void 0 ? state : this.resolveState(State.from(state, context2));
      } else {
        var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);
        var resolvedContext = context2 !== null && context2 !== void 0 ? context2 : this.machine.context;
        currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));
      }
      if (!IS_PRODUCTION && _event.name === WILDCARD) {
        throw new Error("An event cannot have the wildcard type ('".concat(WILDCARD, "')"));
      }
      if (this.strict) {
        if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {
          throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(_event.name, "'"));
        }
      }
      var stateTransition = this._transition(currentState.value, currentState, _event) || {
        transitions: [],
        configuration: [],
        exitSet: [],
        source: currentState,
        actions: []
      };
      var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));
      var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;
      stateTransition.configuration = __spreadArray([], __read(resolvedConfig), false);
      return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);
    };
    StateNode2.prototype.resolveRaisedTransition = function(state, _event, originalEvent, predictableExec) {
      var _a2;
      var currentActions = state.actions;
      state = this.transition(state, _event, void 0, predictableExec);
      state._event = originalEvent;
      state.event = originalEvent.data;
      (_a2 = state.actions).unshift.apply(_a2, __spreadArray([], __read(currentActions), false));
      return state;
    };
    StateNode2.prototype.resolveTransition = function(stateTransition, currentState, context2, predictableExec, _event) {
      var e_6, _a2, e_7, _b;
      var _this = this;
      if (_event === void 0) {
        _event = initEvent;
      }
      var configuration = stateTransition.configuration;
      var willTransition = !currentState || stateTransition.transitions.length > 0;
      var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];
      var isDone = isInFinalState(resolvedConfiguration, this);
      var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : void 0;
      var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : void 0 : void 0;
      var actionBlocks = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context2, _event, currentState, predictableExec);
      var activities = currentState ? __assign({}, currentState.activities) : {};
      try {
        for (var actionBlocks_1 = __values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {
          var block = actionBlocks_1_1.value;
          try {
            for (var _c = (e_7 = void 0, __values(block.actions)), _d = _c.next(); !_d.done; _d = _c.next()) {
              var action = _d.value;
              if (action.type === start) {
                activities[action.activity.id || action.activity.type] = action;
              } else if (action.type === stop) {
                activities[action.activity.id || action.activity.type] = false;
              }
            }
          } catch (e_7_1) {
            e_7 = {
              error: e_7_1
            };
          } finally {
            try {
              if (_d && !_d.done && (_b = _c.return))
                _b.call(_c);
            } finally {
              if (e_7)
                throw e_7.error;
            }
          }
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a2 = actionBlocks_1.return))
            _a2.call(actionBlocks_1);
        } finally {
          if (e_6)
            throw e_6.error;
        }
      }
      var _e = __read(resolveActions(this, currentState, context2, _event, actionBlocks, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2), resolvedActions = _e[0], updatedContext = _e[1];
      var _f = __read(partition(resolvedActions, isRaisableAction), 2), raisedEvents = _f[0], nonRaisedActions = _f[1];
      var invokeActions = resolvedActions.filter(function(action2) {
        var _a3;
        return action2.type === start && ((_a3 = action2.activity) === null || _a3 === void 0 ? void 0 : _a3.type) === invoke;
      });
      var children2 = invokeActions.reduce(function(acc, action2) {
        acc[action2.activity.id] = createInvocableActor(action2.activity, _this.machine, updatedContext, _event);
        return acc;
      }, currentState ? __assign({}, currentState.children) : {});
      var nextState = new State({
        value: resolvedStateValue || currentState.value,
        context: updatedContext,
        _event,
        // Persist _sessionid between states
        _sessionid: currentState ? currentState._sessionid : null,
        historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : void 0 : currentState ? currentState.historyValue : void 0,
        history: !resolvedStateValue || stateTransition.source ? currentState : void 0,
        actions: resolvedStateValue ? nonRaisedActions : [],
        activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
        events: [],
        configuration: resolvedConfiguration,
        transitions: stateTransition.transitions,
        children: children2,
        done: isDone,
        tags: getTagsFromConfiguration(resolvedConfiguration),
        machine: this
      });
      var didUpdateContext = context2 !== updatedContext;
      nextState.changed = _event.name === update || didUpdateContext;
      var history = nextState.history;
      if (history) {
        delete history.history;
      }
      var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function(stateNode) {
        return stateNode._transient;
      }));
      if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {
        return nextState;
      }
      var maybeNextState = nextState;
      if (!isDone) {
        if (hasAlwaysTransitions) {
          maybeNextState = this.resolveRaisedTransition(maybeNextState, {
            type: nullEvent
          }, _event, predictableExec);
        }
        while (raisedEvents.length) {
          var raisedEvent = raisedEvents.shift();
          maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);
        }
      }
      var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : void 0);
      maybeNextState.changed = changed;
      maybeNextState.history = history;
      return maybeNextState;
    };
    StateNode2.prototype.getStateNode = function(stateKey) {
      if (isStateId(stateKey)) {
        return this.machine.getStateNodeById(stateKey);
      }
      if (!this.states) {
        throw new Error("Unable to retrieve child state '".concat(stateKey, "' from '").concat(this.id, "'; no child states exist."));
      }
      var result = this.states[stateKey];
      if (!result) {
        throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
      }
      return result;
    };
    StateNode2.prototype.getStateNodeById = function(stateId) {
      var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;
      if (resolvedStateId === this.id) {
        return this;
      }
      var stateNode = this.machine.idMap[resolvedStateId];
      if (!stateNode) {
        throw new Error("Child state node '#".concat(resolvedStateId, "' does not exist on machine '").concat(this.id, "'"));
      }
      return stateNode;
    };
    StateNode2.prototype.getStateNodeByPath = function(statePath) {
      if (typeof statePath === "string" && isStateId(statePath)) {
        try {
          return this.getStateNodeById(statePath.slice(1));
        } catch (e) {
        }
      }
      var arrayStatePath = toStatePath(statePath, this.delimiter).slice();
      var currentStateNode = this;
      while (arrayStatePath.length) {
        var key = arrayStatePath.shift();
        if (!key.length) {
          break;
        }
        currentStateNode = currentStateNode.getStateNode(key);
      }
      return currentStateNode;
    };
    StateNode2.prototype.resolve = function(stateValue) {
      var _a2;
      var _this = this;
      if (!stateValue) {
        return this.initialStateValue || EMPTY_OBJECT;
      }
      switch (this.type) {
        case "parallel":
          return mapValues(this.initialStateValue, function(subStateValue, subStateKey) {
            return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;
          });
        case "compound":
          if (isString(stateValue)) {
            var subStateNode = this.getStateNode(stateValue);
            if (subStateNode.type === "parallel" || subStateNode.type === "compound") {
              return _a2 = {}, _a2[stateValue] = subStateNode.initialStateValue, _a2;
            }
            return stateValue;
          }
          if (!Object.keys(stateValue).length) {
            return this.initialStateValue || {};
          }
          return mapValues(stateValue, function(subStateValue, subStateKey) {
            return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;
          });
        default:
          return stateValue || EMPTY_OBJECT;
      }
    };
    StateNode2.prototype.getResolvedPath = function(stateIdentifier) {
      if (isStateId(stateIdentifier)) {
        var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];
        if (!stateNode) {
          throw new Error("Unable to find state node '".concat(stateIdentifier, "'"));
        }
        return stateNode.path;
      }
      return toStatePath(stateIdentifier, this.delimiter);
    };
    Object.defineProperty(StateNode2.prototype, "initialStateValue", {
      get: function() {
        var _a2;
        if (this.__cache.initialStateValue) {
          return this.__cache.initialStateValue;
        }
        var initialStateValue;
        if (this.type === "parallel") {
          initialStateValue = mapFilterValues(this.states, function(state) {
            return state.initialStateValue || EMPTY_OBJECT;
          }, function(stateNode) {
            return !(stateNode.type === "history");
          });
        } else if (this.initial !== void 0) {
          if (!this.states[this.initial]) {
            throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
          }
          initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a2 = {}, _a2[this.initial] = this.states[this.initial].initialStateValue, _a2);
        } else {
          initialStateValue = {};
        }
        this.__cache.initialStateValue = initialStateValue;
        return this.__cache.initialStateValue;
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.getInitialState = function(stateValue, context2) {
      this._init();
      var configuration = this.getStateNodes(stateValue);
      return this.resolveTransition({
        configuration,
        exitSet: [],
        transitions: [],
        source: void 0,
        actions: []
      }, void 0, context2 !== null && context2 !== void 0 ? context2 : this.machine.context, void 0);
    };
    Object.defineProperty(StateNode2.prototype, "initialState", {
      /**
       * The initial State instance, which includes all actions to be executed from
       * entering the initial state.
       */
      get: function() {
        var initialStateValue = this.initialStateValue;
        if (!initialStateValue) {
          throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
        }
        return this.getInitialState(initialStateValue);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "target", {
      /**
       * The target state value of the history state node, if it exists. This represents the
       * default state value to transition to if no history value exists yet.
       */
      get: function() {
        var target;
        if (this.type === "history") {
          var historyConfig = this.config;
          if (isString(historyConfig.target)) {
            target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;
          } else {
            target = historyConfig.target;
          }
        }
        return target;
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.getRelativeStateNodes = function(relativeStateId, historyValue, resolve) {
      if (resolve === void 0) {
        resolve = true;
      }
      return resolve ? relativeStateId.type === "history" ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];
    };
    Object.defineProperty(StateNode2.prototype, "initialStateNodes", {
      get: function() {
        var _this = this;
        if (isLeafNode(this)) {
          return [this];
        }
        if (this.type === "compound" && !this.initial) {
          if (!IS_PRODUCTION) {
            warn(false, "Compound state node '".concat(this.id, "' has no initial state."));
          }
          return [this];
        }
        var initialStateNodePaths = toStatePaths(this.initialStateValue);
        return flatten(initialStateNodePaths.map(function(initialPath) {
          return _this.getFromRelativePath(initialPath);
        }));
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.getFromRelativePath = function(relativePath) {
      if (!relativePath.length) {
        return [this];
      }
      var _a2 = __read(relativePath), stateKey = _a2[0], childStatePath = _a2.slice(1);
      if (!this.states) {
        throw new Error("Cannot retrieve subPath '".concat(stateKey, "' from node with no states"));
      }
      var childStateNode = this.getStateNode(stateKey);
      if (childStateNode.type === "history") {
        return childStateNode.resolveHistory();
      }
      if (!this.states[stateKey]) {
        throw new Error("Child state '".concat(stateKey, "' does not exist on '").concat(this.id, "'"));
      }
      return this.states[stateKey].getFromRelativePath(childStatePath);
    };
    StateNode2.prototype.historyValue = function(relativeStateValue) {
      if (!Object.keys(this.states).length) {
        return void 0;
      }
      return {
        current: relativeStateValue || this.initialStateValue,
        states: mapFilterValues(this.states, function(stateNode, key) {
          if (!relativeStateValue) {
            return stateNode.historyValue();
          }
          var subStateValue = isString(relativeStateValue) ? void 0 : relativeStateValue[key];
          return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
        }, function(stateNode) {
          return !stateNode.history;
        })
      };
    };
    StateNode2.prototype.resolveHistory = function(historyValue) {
      var _this = this;
      if (this.type !== "history") {
        return [this];
      }
      var parent = this.parent;
      if (!historyValue) {
        var historyTarget = this.target;
        return historyTarget ? flatten(toStatePaths(historyTarget).map(function(relativeChildPath) {
          return parent.getFromRelativePath(relativeChildPath);
        })) : parent.initialStateNodes;
      }
      var subHistoryValue = nestedPath(parent.path, "states")(historyValue).current;
      if (isString(subHistoryValue)) {
        return [parent.getStateNode(subHistoryValue)];
      }
      return flatten(toStatePaths(subHistoryValue).map(function(subStatePath) {
        return _this.history === "deep" ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];
      }));
    };
    Object.defineProperty(StateNode2.prototype, "stateIds", {
      /**
       * All the state node IDs of this state node and its descendant state nodes.
       */
      get: function() {
        var _this = this;
        var childStateIds = flatten(Object.keys(this.states).map(function(stateKey) {
          return _this.states[stateKey].stateIds;
        }));
        return [this.id].concat(childStateIds);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "events", {
      /**
       * All the event types accepted by this state node and its descendants.
       */
      get: function() {
        var e_8, _a2, e_9, _b;
        if (this.__cache.events) {
          return this.__cache.events;
        }
        var states = this.states;
        var events = new Set(this.ownEvents);
        if (states) {
          try {
            for (var _c = __values(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
              var stateId = _d.value;
              var state = states[stateId];
              if (state.states) {
                try {
                  for (var _e = (e_9 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var event_1 = _f.value;
                    events.add("".concat(event_1));
                  }
                } catch (e_9_1) {
                  e_9 = {
                    error: e_9_1
                  };
                } finally {
                  try {
                    if (_f && !_f.done && (_b = _e.return))
                      _b.call(_e);
                  } finally {
                    if (e_9)
                      throw e_9.error;
                  }
                }
              }
            }
          } catch (e_8_1) {
            e_8 = {
              error: e_8_1
            };
          } finally {
            try {
              if (_d && !_d.done && (_a2 = _c.return))
                _a2.call(_c);
            } finally {
              if (e_8)
                throw e_8.error;
            }
          }
        }
        return this.__cache.events = Array.from(events);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StateNode2.prototype, "ownEvents", {
      /**
       * All the events that have transitions directly from this state node.
       *
       * Excludes any inert events.
       */
      get: function() {
        var events = new Set(this.transitions.filter(function(transition) {
          return !(!transition.target && !transition.actions.length && transition.internal);
        }).map(function(transition) {
          return transition.eventType;
        }));
        return Array.from(events);
      },
      enumerable: false,
      configurable: true
    });
    StateNode2.prototype.resolveTarget = function(_target) {
      var _this = this;
      if (_target === void 0) {
        return void 0;
      }
      return _target.map(function(target) {
        if (!isString(target)) {
          return target;
        }
        var isInternalTarget = target[0] === _this.delimiter;
        if (isInternalTarget && !_this.parent) {
          return _this.getStateNodeByPath(target.slice(1));
        }
        var resolvedTarget = isInternalTarget ? _this.key + target : target;
        if (_this.parent) {
          try {
            var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);
            return targetStateNode;
          } catch (err) {
            throw new Error("Invalid transition definition for state node '".concat(_this.id, "':\n").concat(err.message));
          }
        } else {
          return _this.getStateNodeByPath(resolvedTarget);
        }
      });
    };
    StateNode2.prototype.formatTransition = function(transitionConfig) {
      var _this = this;
      var normalizedTarget = normalizeTarget(transitionConfig.target);
      var internal = "internal" in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function(_target) {
        return isString(_target) && _target[0] === _this.delimiter;
      }) : true;
      var guards = this.machine.options.guards;
      var target = this.resolveTarget(normalizedTarget);
      var transition = __assign(__assign({}, transitionConfig), {
        actions: toActionObjects(toArray(transitionConfig.actions)),
        cond: toGuard(transitionConfig.cond, guards),
        target,
        source: this,
        internal,
        eventType: transitionConfig.event,
        toJSON: function() {
          return __assign(__assign({}, transition), {
            target: transition.target ? transition.target.map(function(t2) {
              return "#".concat(t2.id);
            }) : void 0,
            source: "#".concat(_this.id)
          });
        }
      });
      return transition;
    };
    StateNode2.prototype.formatTransitions = function() {
      var e_10, _a2;
      var _this = this;
      var onConfig;
      if (!this.config.on) {
        onConfig = [];
      } else if (Array.isArray(this.config.on)) {
        onConfig = this.config.on;
      } else {
        var _b = this.config.on, _c = WILDCARD, _d = _b[_c], wildcardConfigs = _d === void 0 ? [] : _d, strictTransitionConfigs_1 = __rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);
        onConfig = flatten(Object.keys(strictTransitionConfigs_1).map(function(key) {
          if (!IS_PRODUCTION && key === NULL_EVENT) {
            warn(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + 'Please check the `on` configuration for "#'.concat(_this.id, '".'));
          }
          var transitionConfigArray = toTransitionConfigArray(key, strictTransitionConfigs_1[key]);
          if (!IS_PRODUCTION) {
            validateArrayifiedTransitions(_this, key, transitionConfigArray);
          }
          return transitionConfigArray;
        }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));
      }
      var eventlessConfig = this.config.always ? toTransitionConfigArray("", this.config.always) : [];
      var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];
      if (!IS_PRODUCTION) {
        warn(!(this.config.onDone && !this.parent), 'Root nodes cannot have an ".onDone" transition. Please check the config of "'.concat(this.id, '".'));
      }
      var invokeConfig = flatten(this.invoke.map(function(invokeDef) {
        var settleTransitions = [];
        if (invokeDef.onDone) {
          settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)), false));
        }
        if (invokeDef.onError) {
          settleTransitions.push.apply(settleTransitions, __spreadArray([], __read(toTransitionConfigArray(String(error2(invokeDef.id)), invokeDef.onError)), false));
        }
        return settleTransitions;
      }));
      var delayedTransitions = this.after;
      var formattedTransitions = flatten(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(doneConfig), false), __read(invokeConfig), false), __read(onConfig), false), __read(eventlessConfig), false).map(function(transitionConfig) {
        return toArray(transitionConfig).map(function(transition) {
          return _this.formatTransition(transition);
        });
      }));
      try {
        for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {
          var delayedTransition = delayedTransitions_1_1.value;
          formattedTransitions.push(delayedTransition);
        }
      } catch (e_10_1) {
        e_10 = {
          error: e_10_1
        };
      } finally {
        try {
          if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a2 = delayedTransitions_1.return))
            _a2.call(delayedTransitions_1);
        } finally {
          if (e_10)
            throw e_10.error;
        }
      }
      return formattedTransitions;
    };
    return StateNode2;
  }()
);

// node_modules/xstate/es/Machine.js
var warned = false;
function createMachine(config2, options) {
  if (!IS_PRODUCTION && !("predictableActionArguments" in config2) && !warned) {
    warned = true;
    console.warn("It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html");
  }
  return new StateNode(config2, options);
}

// node_modules/xstate/es/index.js
var assign3 = assign2;
var sendUpdate2 = sendUpdate;
var forwardTo2 = forwardTo;

// node_modules/@xstate/react/es/useInterpret.js
var import_react2 = __toESM(require_react());

// node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
var import_react = __toESM(require_react());
var index = import_react.useLayoutEffect;

// node_modules/@xstate/react/es/useConstant.js
var React = __toESM(require_react());
function useConstant(fn) {
  var ref = React.useRef();
  if (!ref.current) {
    ref.current = { v: fn() };
  }
  return ref.current.v;
}

// node_modules/@xstate/react/es/useInterpret.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t2[p] = s[p];
    }
    return t2;
  };
  return __assign2.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t2 = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
};
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error3) {
    e = { error: error3 };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function useIdleInterpreter(getMachine, options) {
  var machine = useConstant(function() {
    return typeof getMachine === "function" ? getMachine() : getMachine;
  });
  if (typeof getMachine !== "function") {
    var _a2 = __read2((0, import_react2.useState)(machine), 1), initialMachine = _a2[0];
    if (getMachine !== initialMachine) {
      console.warn("Machine given to `useMachine` has changed between renders. This is not supported and might lead to unexpected results.\nPlease make sure that you pass the same Machine as argument each time.");
    }
  }
  var context2 = options.context, guards = options.guards, actions = options.actions, activities = options.activities, services = options.services, delays = options.delays, rehydratedState = options.state, interpreterOptions = __rest2(options, ["context", "guards", "actions", "activities", "services", "delays", "state"]);
  var service = useConstant(function() {
    var machineConfig = {
      context: context2,
      guards,
      actions,
      activities,
      services,
      delays
    };
    var machineWithConfig = machine.withConfig(machineConfig, function() {
      return __assign2(__assign2({}, machine.context), context2);
    });
    return interpret(machineWithConfig, interpreterOptions);
  });
  index(function() {
    Object.assign(service.machine.options.actions, actions);
    Object.assign(service.machine.options.guards, guards);
    Object.assign(service.machine.options.activities, activities);
    Object.assign(service.machine.options.services, services);
    Object.assign(service.machine.options.delays, delays);
  }, [actions, guards, activities, services, delays]);
  return service;
}
function useInterpret(getMachine) {
  var _a2 = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    _a2[_i - 1] = arguments[_i];
  }
  var _b = __read2(_a2, 2), _c = _b[0], options = _c === void 0 ? {} : _c, observerOrListener = _b[1];
  var service = useIdleInterpreter(getMachine, options);
  (0, import_react2.useEffect)(function() {
    if (!observerOrListener) {
      return;
    }
    var sub = service.subscribe(toObserver(observerOrListener));
    return function() {
      sub.unsubscribe();
    };
  }, [observerOrListener]);
  (0, import_react2.useEffect)(function() {
    var rehydratedState = options.state;
    service.start(rehydratedState ? State.create(rehydratedState) : void 0);
    return function() {
      service.stop();
      service.status = InterpreterStatus.NotStarted;
    };
  }, []);
  return service;
}

// node_modules/@xstate/react/es/utils.js
function getServiceSnapshot(service) {
  return service.status !== 0 ? service.getSnapshot() : service.machine.initialState;
}
function isService(actor) {
  return "state" in actor && "machine" in actor;
}

// node_modules/@xstate/react/es/useActor.js
var import_react4 = __toESM(require_react());
var import_with_selector2 = __toESM(require_with_selector());
function isActorWithState(actorRef) {
  return "state" in actorRef;
}

// node_modules/@xstate/react/es/useSelector.js
var import_react5 = __toESM(require_react());
var import_with_selector3 = __toESM(require_with_selector());
var defaultCompare = function(a, b) {
  return a === b;
};
var defaultGetSnapshot = function(a, initialStateCacheRef) {
  if (isService(a)) {
    if (a.status === 0 && initialStateCacheRef.current) {
      return initialStateCacheRef.current;
    }
    var snapshot = getServiceSnapshot(a);
    initialStateCacheRef.current = a.status === 0 ? snapshot : null;
    return snapshot;
  }
  return isActorWithState(a) ? a.state : void 0;
};
function useSelector(actor, selector, compare, getSnapshot) {
  if (compare === void 0) {
    compare = defaultCompare;
  }
  var initialStateCacheRef = (0, import_react5.useRef)(null);
  var subscribe = (0, import_react5.useCallback)(function(handleStoreChange) {
    var unsubscribe = actor.subscribe(handleStoreChange).unsubscribe;
    return unsubscribe;
  }, [actor]);
  var boundGetSnapshot = (0, import_react5.useCallback)(function() {
    if (getSnapshot) {
      return getSnapshot(actor);
    }
    return defaultGetSnapshot(actor, initialStateCacheRef);
  }, [actor, getSnapshot]);
  var selectedSnapshot = (0, import_with_selector3.useSyncExternalStoreWithSelector)(subscribe, boundGetSnapshot, boundGetSnapshot, selector, compare);
  return selectedSnapshot;
}

// node_modules/@xstate/react/es/createActorContext.js
var React2 = __toESM(require_react());

// node_modules/@aws-amplify/core/dist/esm/constants.mjs
var AWS_CLOUDWATCH_CATEGORY = "Logging";
var USER_AGENT_HEADER = "x-amz-user-agent";
var NO_HUBCALLBACK_PROVIDED_EXCEPTION = "NoHubcallbackProvidedException";

// node_modules/@aws-amplify/core/dist/esm/Logger/types.mjs
var LogType;
(function(LogType2) {
  LogType2["DEBUG"] = "DEBUG";
  LogType2["ERROR"] = "ERROR";
  LogType2["INFO"] = "INFO";
  LogType2["WARN"] = "WARN";
  LogType2["VERBOSE"] = "VERBOSE";
  LogType2["NONE"] = "NONE";
})(LogType || (LogType = {}));

// node_modules/@aws-amplify/core/dist/esm/Logger/ConsoleLogger.mjs
var LOG_LEVELS = {
  VERBOSE: 1,
  DEBUG: 2,
  INFO: 3,
  WARN: 4,
  ERROR: 5,
  NONE: 6
};
var ConsoleLogger = class _ConsoleLogger {
  /**
   * @constructor
   * @param {string} name - Name of the logger
   */
  constructor(name2, level = LogType.WARN) {
    this.name = name2;
    this.level = level;
    this._pluggables = [];
  }
  _padding(n) {
    return n < 10 ? "0" + n : "" + n;
  }
  _ts() {
    const dt = /* @__PURE__ */ new Date();
    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(":") + "." + dt.getMilliseconds();
  }
  configure(config2) {
    if (!config2)
      return this._config;
    this._config = config2;
    return this._config;
  }
  /**
   * Write log
   * @method
   * @memeberof Logger
   * @param {LogType|string} type - log type, default INFO
   * @param {string|object} msg - Logging message or object
   */
  _log(type, ...msg) {
    let loggerLevelName = this.level;
    if (_ConsoleLogger.LOG_LEVEL) {
      loggerLevelName = _ConsoleLogger.LOG_LEVEL;
    }
    if (typeof window !== "undefined" && window.LOG_LEVEL) {
      loggerLevelName = window.LOG_LEVEL;
    }
    const loggerLevel = LOG_LEVELS[loggerLevelName];
    const typeLevel = LOG_LEVELS[type];
    if (!(typeLevel >= loggerLevel)) {
      return;
    }
    let log3 = console.log.bind(console);
    if (type === LogType.ERROR && console.error) {
      log3 = console.error.bind(console);
    }
    if (type === LogType.WARN && console.warn) {
      log3 = console.warn.bind(console);
    }
    if (_ConsoleLogger.BIND_ALL_LOG_LEVELS) {
      if (type === LogType.INFO && console.info) {
        log3 = console.info.bind(console);
      }
      if (type === LogType.DEBUG && console.debug) {
        log3 = console.debug.bind(console);
      }
    }
    const prefix = `[${type}] ${this._ts()} ${this.name}`;
    let message2 = "";
    if (msg.length === 1 && typeof msg[0] === "string") {
      message2 = `${prefix} - ${msg[0]}`;
      log3(message2);
    } else if (msg.length === 1) {
      message2 = `${prefix} ${msg[0]}`;
      log3(prefix, msg[0]);
    } else if (typeof msg[0] === "string") {
      let obj = msg.slice(1);
      if (obj.length === 1) {
        obj = obj[0];
      }
      message2 = `${prefix} - ${msg[0]} ${obj}`;
      log3(`${prefix} - ${msg[0]}`, obj);
    } else {
      message2 = `${prefix} ${msg}`;
      log3(prefix, msg);
    }
    for (const plugin of this._pluggables) {
      const logEvent = { message: message2, timestamp: Date.now() };
      plugin.pushLogs([logEvent]);
    }
  }
  /**
   * Write General log. Default to INFO
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  log(...msg) {
    this._log(LogType.INFO, ...msg);
  }
  /**
   * Write INFO log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  info(...msg) {
    this._log(LogType.INFO, ...msg);
  }
  /**
   * Write WARN log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  warn(...msg) {
    this._log(LogType.WARN, ...msg);
  }
  /**
   * Write ERROR log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  error(...msg) {
    this._log(LogType.ERROR, ...msg);
  }
  /**
   * Write DEBUG log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  debug(...msg) {
    this._log(LogType.DEBUG, ...msg);
  }
  /**
   * Write VERBOSE log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  verbose(...msg) {
    this._log(LogType.VERBOSE, ...msg);
  }
  addPluggable(pluggable) {
    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {
      this._pluggables.push(pluggable);
      pluggable.configure(this._config);
    }
  }
  listPluggables() {
    return this._pluggables;
  }
};
ConsoleLogger.LOG_LEVEL = null;
ConsoleLogger.BIND_ALL_LOG_LEVELS = false;

// node_modules/@aws-amplify/core/dist/esm/errors/AmplifyError.mjs
var AmplifyError = class _AmplifyError extends Error {
  /**
   *  Constructs an AmplifyError.
   *
   * @param message text that describes the main problem.
   * @param underlyingError the underlying cause of the error.
   * @param recoverySuggestion suggestion to recover from the error.
   *
   */
  constructor({ message: message2, name: name2, recoverySuggestion, underlyingError, metadata }) {
    super(message2);
    this.name = name2;
    this.underlyingError = underlyingError;
    this.recoverySuggestion = recoverySuggestion;
    if (metadata) {
      const { extendedRequestId, httpStatusCode, requestId } = metadata;
      this.metadata = { extendedRequestId, httpStatusCode, requestId };
    }
    this.constructor = _AmplifyError;
    Object.setPrototypeOf(this, _AmplifyError.prototype);
  }
};

// node_modules/@aws-amplify/core/dist/esm/types/errors.mjs
var AmplifyErrorCode;
(function(AmplifyErrorCode2) {
  AmplifyErrorCode2["NoEndpointId"] = "NoEndpointId";
  AmplifyErrorCode2["PlatformNotSupported"] = "PlatformNotSupported";
  AmplifyErrorCode2["Unknown"] = "Unknown";
  AmplifyErrorCode2["NetworkError"] = "NetworkError";
})(AmplifyErrorCode || (AmplifyErrorCode = {}));

// node_modules/@aws-amplify/core/dist/esm/errors/createAssertionFunction.mjs
var createAssertionFunction = (errorMap, AssertionError = AmplifyError) => (assertion, name2, additionalContext) => {
  const { message: message2, recoverySuggestion } = errorMap[name2];
  if (!assertion) {
    throw new AssertionError({
      name: name2,
      message: additionalContext ? `${message2} ${additionalContext}` : message2,
      recoverySuggestion
    });
  }
};

// node_modules/@aws-amplify/core/dist/esm/errors/errorHelpers.mjs
var amplifyErrorMap = {
  [AmplifyErrorCode.NoEndpointId]: {
    message: "Endpoint ID was not found and was unable to be created."
  },
  [AmplifyErrorCode.PlatformNotSupported]: {
    message: "Function not supported on current platform."
  },
  [AmplifyErrorCode.Unknown]: {
    message: "An unknown error occurred."
  },
  [AmplifyErrorCode.NetworkError]: {
    message: "A network error has occurred."
  }
};
var assert = createAssertionFunction(amplifyErrorMap);

// node_modules/@aws-amplify/core/dist/esm/Hub/index.mjs
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" ? Symbol("amplify_default") : "@@amplify_default";
var logger = new ConsoleLogger("Hub");
var HubClass = class {
  constructor(name2) {
    this.listeners = /* @__PURE__ */ new Map();
    this.protectedChannels = [
      "core",
      "auth",
      "api",
      "analytics",
      "interactions",
      "pubsub",
      "storage",
      "ui",
      "xr"
    ];
    this.name = name2;
  }
  /**
   * Used internally to remove a Hub listener.
   *
   * @remarks
   * This private method is for internal use only. Instead of calling Hub.remove, call the result of Hub.listen.
   */
  _remove(channel, listener) {
    const holder = this.listeners.get(channel);
    if (!holder) {
      logger.warn(`No listeners for ${channel}`);
      return;
    }
    this.listeners.set(channel, [
      ...holder.filter(({ callback }) => callback !== listener)
    ]);
  }
  dispatch(channel, payload, source, ampSymbol) {
    if (typeof channel === "string" && this.protectedChannels.indexOf(channel) > -1) {
      const hasAccess = ampSymbol === AMPLIFY_SYMBOL;
      if (!hasAccess) {
        logger.warn(`WARNING: ${channel} is protected and dispatching on it can have unintended consequences`);
      }
    }
    const capsule = {
      channel,
      payload: { ...payload },
      source,
      patternInfo: []
    };
    try {
      this._toListeners(capsule);
    } catch (e) {
      logger.error(e);
    }
  }
  listen(channel, callback, listenerName = "noname") {
    let cb;
    if (typeof callback !== "function") {
      throw new AmplifyError({
        name: NO_HUBCALLBACK_PROVIDED_EXCEPTION,
        message: "No callback supplied to Hub"
      });
    } else {
      cb = callback;
    }
    let holder = this.listeners.get(channel);
    if (!holder) {
      holder = [];
      this.listeners.set(channel, holder);
    }
    holder.push({
      name: listenerName,
      callback: cb
    });
    return () => {
      this._remove(channel, cb);
    };
  }
  _toListeners(capsule) {
    const { channel, payload } = capsule;
    const holder = this.listeners.get(channel);
    if (holder) {
      holder.forEach((listener) => {
        logger.debug(`Dispatching to ${channel} with `, payload);
        try {
          listener.callback(capsule);
        } catch (e) {
          logger.error(e);
        }
      });
    }
  }
};
var Hub = new HubClass("__default__");
var HubInternal = new HubClass("internal-hub");

// node_modules/@aws-amplify/core/dist/esm/utils/globalHelpers/index.mjs
var getCrypto = () => {
  if (typeof window === "object" && typeof window.crypto === "object") {
    return window.crypto;
  }
  if (typeof crypto === "object") {
    return crypto;
  }
  throw new AmplifyError({
    name: "MissingPolyfill",
    message: "Cannot resolve the `crypto` function from the environment."
  });
};
var getBtoa = () => {
  if (typeof window !== "undefined" && typeof window.btoa === "function") {
    return window.btoa;
  }
  if (typeof btoa === "function") {
    return btoa;
  }
  throw new AmplifyError({
    name: "Base64EncoderError",
    message: "Cannot resolve the `btoa` function from the environment."
  });
};
var getAtob = () => {
  if (typeof window !== "undefined" && typeof window.atob === "function") {
    return window.atob;
  }
  if (typeof atob === "function") {
    return atob;
  }
  throw new AmplifyError({
    name: "Base64EncoderError",
    message: "Cannot resolve the `atob` function from the environment."
  });
};

// node_modules/@aws-amplify/core/dist/esm/utils/convert/base64/base64Decoder.mjs
var base64Decoder = {
  convert(input2, options) {
    let inputStr = input2;
    if (options == null ? void 0 : options.urlSafe) {
      inputStr = inputStr.replace(/-/g, "+").replace(/_/g, "/");
    }
    return getAtob()(inputStr);
  }
};

// node_modules/@aws-amplify/core/dist/esm/singleton/Auth/utils/errorHelpers.mjs
var AuthConfigurationErrorCode;
(function(AuthConfigurationErrorCode2) {
  AuthConfigurationErrorCode2["AuthTokenConfigException"] = "AuthTokenConfigException";
  AuthConfigurationErrorCode2["AuthUserPoolAndIdentityPoolException"] = "AuthUserPoolAndIdentityPoolException";
  AuthConfigurationErrorCode2["AuthUserPoolException"] = "AuthUserPoolException";
  AuthConfigurationErrorCode2["InvalidIdentityPoolIdException"] = "InvalidIdentityPoolIdException";
  AuthConfigurationErrorCode2["OAuthNotConfigureException"] = "OAuthNotConfigureException";
})(AuthConfigurationErrorCode || (AuthConfigurationErrorCode = {}));
var authConfigurationErrorMap = {
  [AuthConfigurationErrorCode.AuthTokenConfigException]: {
    message: "Auth Token Provider not configured.",
    recoverySuggestion: "Make sure to call Amplify.configure in your app."
  },
  [AuthConfigurationErrorCode.AuthUserPoolAndIdentityPoolException]: {
    message: "Auth UserPool or IdentityPool not configured.",
    recoverySuggestion: "Make sure to call Amplify.configure in your app with UserPoolId and IdentityPoolId."
  },
  [AuthConfigurationErrorCode.AuthUserPoolException]: {
    message: "Auth UserPool not configured.",
    recoverySuggestion: "Make sure to call Amplify.configure in your app with userPoolId and userPoolClientId."
  },
  [AuthConfigurationErrorCode.InvalidIdentityPoolIdException]: {
    message: "Invalid identity pool id provided.",
    recoverySuggestion: "Make sure a valid identityPoolId is given in the config."
  },
  [AuthConfigurationErrorCode.OAuthNotConfigureException]: {
    message: "oauth param not configured.",
    recoverySuggestion: "Make sure to call Amplify.configure with oauth parameter in your app."
  }
};
var assert2 = createAssertionFunction(authConfigurationErrorMap);

// node_modules/@aws-amplify/core/dist/esm/singleton/Auth/utils/index.mjs
function assertTokenProviderConfig(cognitoConfig) {
  let assertionValid = true;
  if (!cognitoConfig) {
    assertionValid = false;
  } else {
    assertionValid = !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;
  }
  assert2(assertionValid, AuthConfigurationErrorCode.AuthUserPoolException);
}
function assertOAuthConfig(cognitoConfig) {
  var _a2, _b, _c, _d, _e, _f, _g, _h;
  const validOAuthConfig = !!((_b = (_a2 = cognitoConfig == null ? void 0 : cognitoConfig.loginWith) == null ? void 0 : _a2.oauth) == null ? void 0 : _b.domain) && !!((_d = (_c = cognitoConfig == null ? void 0 : cognitoConfig.loginWith) == null ? void 0 : _c.oauth) == null ? void 0 : _d.redirectSignOut) && !!((_f = (_e = cognitoConfig == null ? void 0 : cognitoConfig.loginWith) == null ? void 0 : _e.oauth) == null ? void 0 : _f.redirectSignIn) && !!((_h = (_g = cognitoConfig == null ? void 0 : cognitoConfig.loginWith) == null ? void 0 : _g.oauth) == null ? void 0 : _h.responseType);
  assert2(validOAuthConfig, AuthConfigurationErrorCode.OAuthNotConfigureException);
}
function assertIdentityPoolIdConfig(cognitoConfig) {
  const validConfig = !!(cognitoConfig == null ? void 0 : cognitoConfig.identityPoolId);
  assert2(validConfig, AuthConfigurationErrorCode.InvalidIdentityPoolIdException);
}
function decodeJWT(token) {
  const tokenParts = token.split(".");
  if (tokenParts.length !== 3) {
    throw new Error("Invalid token");
  }
  try {
    const base64WithUrlSafe = tokenParts[1];
    const base64 = base64WithUrlSafe.replace(/-/g, "+").replace(/_/g, "/");
    const jsonStr = decodeURIComponent(base64Decoder.convert(base64).split("").map((char) => `%${`00${char.charCodeAt(0).toString(16)}`.slice(-2)}`).join(""));
    const payload = JSON.parse(jsonStr);
    return {
      toString: () => token,
      payload
    };
  } catch (err) {
    throw new Error("Invalid token payload");
  }
}

// node_modules/@aws-amplify/core/dist/esm/utils/getClientInfo/getClientInfo.mjs
var logger2 = new ConsoleLogger("getClientInfo");

// node_modules/@aws-amplify/core/dist/esm/utils/retry/retry.mjs
var logger3 = new ConsoleLogger("retryUtil");

// node_modules/@aws-amplify/core/dist/esm/utils/deepFreeze.mjs
var deepFreeze = (object) => {
  const propNames = Reflect.ownKeys(object);
  for (const name2 of propNames) {
    const value = object[name2];
    if (value && typeof value === "object" || typeof value === "function") {
      deepFreeze(value);
    }
  }
  return Object.freeze(object);
};

// node_modules/@aws-amplify/core/dist/esm/parseAWSExports.mjs
var logger4 = new ConsoleLogger("parseAWSExports");
var authTypeMapping = {
  API_KEY: "apiKey",
  AWS_IAM: "iam",
  AMAZON_COGNITO_USER_POOLS: "userPool",
  OPENID_CONNECT: "oidc",
  NONE: "none",
  AWS_LAMBDA: "lambda",
  // `LAMBDA` is an incorrect value that was added during the v6 rewrite.
  // Keeping it as a valid value until v7 to prevent breaking customers who might
  // be relying on it as a workaround.
  // ref: https://github.com/aws-amplify/amplify-js/pull/12922
  // TODO: @v7 remove next line
  LAMBDA: "lambda"
};
var parseAWSExports = (config2 = {}) => {
  var _a2, _b, _c, _d, _e, _f;
  if (!Object.prototype.hasOwnProperty.call(config2, "aws_project_region")) {
    throw new AmplifyError({
      name: "InvalidParameterException",
      message: "Invalid config parameter.",
      recoverySuggestion: "Ensure passing the config object imported from  `amplifyconfiguration.json`."
    });
  }
  const { aws_appsync_apiKey, aws_appsync_authenticationType, aws_appsync_graphqlEndpoint, aws_appsync_region, aws_bots_config, aws_cognito_identity_pool_id, aws_cognito_sign_up_verification_method, aws_cognito_mfa_configuration, aws_cognito_mfa_types, aws_cognito_password_protection_settings, aws_cognito_verification_mechanisms, aws_cognito_signup_attributes, aws_cognito_social_providers, aws_cognito_username_attributes, aws_mandatory_sign_in, aws_mobile_analytics_app_id, aws_mobile_analytics_app_region, aws_user_files_s3_bucket, aws_user_files_s3_bucket_region, aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing, aws_user_pools_id, aws_user_pools_web_client_id, geo, oauth, predictions, aws_cloud_logic_custom, Notifications, modelIntrospection } = config2;
  const amplifyConfig = {};
  if (aws_mobile_analytics_app_id) {
    amplifyConfig.Analytics = {
      Pinpoint: {
        appId: aws_mobile_analytics_app_id,
        region: aws_mobile_analytics_app_region
      }
    };
  }
  const { InAppMessaging, Push } = Notifications ?? {};
  if ((InAppMessaging == null ? void 0 : InAppMessaging.AWSPinpoint) || (Push == null ? void 0 : Push.AWSPinpoint)) {
    if (InAppMessaging == null ? void 0 : InAppMessaging.AWSPinpoint) {
      const { appId, region } = InAppMessaging.AWSPinpoint;
      amplifyConfig.Notifications = {
        InAppMessaging: {
          Pinpoint: {
            appId,
            region
          }
        }
      };
    }
    if (Push == null ? void 0 : Push.AWSPinpoint) {
      const { appId, region } = Push.AWSPinpoint;
      amplifyConfig.Notifications = {
        ...amplifyConfig.Notifications,
        PushNotification: {
          Pinpoint: {
            appId,
            region
          }
        }
      };
    }
  }
  if (Array.isArray(aws_bots_config)) {
    amplifyConfig.Interactions = {
      LexV1: Object.fromEntries(aws_bots_config.map((bot) => [bot.name, bot]))
    };
  }
  if (aws_appsync_graphqlEndpoint) {
    const defaultAuthMode = authTypeMapping[aws_appsync_authenticationType];
    if (!defaultAuthMode) {
      logger4.debug(`Invalid authentication type ${aws_appsync_authenticationType}. Falling back to IAM.`);
    }
    amplifyConfig.API = {
      GraphQL: {
        endpoint: aws_appsync_graphqlEndpoint,
        apiKey: aws_appsync_apiKey,
        region: aws_appsync_region,
        defaultAuthMode: defaultAuthMode ?? "iam"
      }
    };
    if (modelIntrospection) {
      amplifyConfig.API.GraphQL.modelIntrospection = modelIntrospection;
    }
  }
  const mfaConfig = aws_cognito_mfa_configuration ? {
    status: aws_cognito_mfa_configuration && aws_cognito_mfa_configuration.toLowerCase(),
    totpEnabled: (aws_cognito_mfa_types == null ? void 0 : aws_cognito_mfa_types.includes("TOTP")) ?? false,
    smsEnabled: (aws_cognito_mfa_types == null ? void 0 : aws_cognito_mfa_types.includes("SMS")) ?? false
  } : void 0;
  const passwordFormatConfig = aws_cognito_password_protection_settings ? {
    minLength: aws_cognito_password_protection_settings.passwordPolicyMinLength,
    requireLowercase: ((_a2 = aws_cognito_password_protection_settings.passwordPolicyCharacters) == null ? void 0 : _a2.includes("REQUIRES_LOWERCASE")) ?? false,
    requireUppercase: ((_b = aws_cognito_password_protection_settings.passwordPolicyCharacters) == null ? void 0 : _b.includes("REQUIRES_UPPERCASE")) ?? false,
    requireNumbers: ((_c = aws_cognito_password_protection_settings.passwordPolicyCharacters) == null ? void 0 : _c.includes("REQUIRES_NUMBERS")) ?? false,
    requireSpecialCharacters: ((_d = aws_cognito_password_protection_settings.passwordPolicyCharacters) == null ? void 0 : _d.includes("REQUIRES_SYMBOLS")) ?? false
  } : void 0;
  const mergedUserAttributes = Array.from(/* @__PURE__ */ new Set([
    ...aws_cognito_verification_mechanisms ?? [],
    ...aws_cognito_signup_attributes ?? []
  ]));
  const userAttributes = mergedUserAttributes.reduce((attributes, key) => ({
    ...attributes,
    // All user attributes generated by the CLI are required
    [key.toLowerCase()]: { required: true }
  }), {});
  const loginWithEmailEnabled = (aws_cognito_username_attributes == null ? void 0 : aws_cognito_username_attributes.includes("EMAIL")) ?? false;
  const loginWithPhoneEnabled = (aws_cognito_username_attributes == null ? void 0 : aws_cognito_username_attributes.includes("PHONE_NUMBER")) ?? false;
  if (aws_cognito_identity_pool_id || aws_user_pools_id) {
    amplifyConfig.Auth = {
      Cognito: {
        identityPoolId: aws_cognito_identity_pool_id,
        allowGuestAccess: aws_mandatory_sign_in !== "enable",
        signUpVerificationMethod: aws_cognito_sign_up_verification_method,
        userAttributes,
        userPoolClientId: aws_user_pools_web_client_id,
        userPoolId: aws_user_pools_id,
        mfa: mfaConfig,
        passwordFormat: passwordFormatConfig,
        loginWith: {
          username: !(loginWithEmailEnabled || loginWithPhoneEnabled),
          email: loginWithEmailEnabled,
          phone: loginWithPhoneEnabled
        }
      }
    };
  }
  const hasOAuthConfig = oauth ? Object.keys(oauth).length > 0 : false;
  const hasSocialProviderConfig = aws_cognito_social_providers ? aws_cognito_social_providers.length > 0 : false;
  if (amplifyConfig.Auth && hasOAuthConfig) {
    amplifyConfig.Auth.Cognito.loginWith = {
      ...amplifyConfig.Auth.Cognito.loginWith,
      oauth: {
        ...getOAuthConfig(oauth),
        ...hasSocialProviderConfig && {
          providers: parseSocialProviders(aws_cognito_social_providers)
        }
      }
    };
  }
  if (aws_user_files_s3_bucket) {
    amplifyConfig.Storage = {
      S3: {
        bucket: aws_user_files_s3_bucket,
        region: aws_user_files_s3_bucket_region,
        dangerouslyConnectToHttpEndpointForTesting: aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing
      }
    };
  }
  if (geo) {
    const { amazon_location_service } = geo;
    amplifyConfig.Geo = {
      LocationService: {
        maps: amazon_location_service.maps,
        geofenceCollections: amazon_location_service.geofenceCollections,
        searchIndices: amazon_location_service.search_indices,
        region: amazon_location_service.region
      }
    };
  }
  if (aws_cloud_logic_custom) {
    amplifyConfig.API = {
      ...amplifyConfig.API,
      REST: aws_cloud_logic_custom.reduce((acc, api2) => {
        const { name: name2, endpoint, region, service } = api2;
        return {
          ...acc,
          [name2]: {
            endpoint,
            ...service ? { service } : void 0,
            ...region ? { region } : void 0
          }
        };
      }, {})
    };
  }
  if (predictions) {
    const { VoiceId: voiceId } = ((_f = (_e = predictions == null ? void 0 : predictions.convert) == null ? void 0 : _e.speechGenerator) == null ? void 0 : _f.defaults) ?? {};
    amplifyConfig.Predictions = voiceId ? {
      ...predictions,
      convert: {
        ...predictions.convert,
        speechGenerator: {
          ...predictions.convert.speechGenerator,
          defaults: { voiceId }
        }
      }
    } : predictions;
  }
  return amplifyConfig;
};
var getRedirectUrl = (redirectStr) => (redirectStr == null ? void 0 : redirectStr.split(",")) ?? [];
var getOAuthConfig = ({ domain, scope, redirectSignIn, redirectSignOut, responseType }) => ({
  domain,
  scopes: scope,
  redirectSignIn: getRedirectUrl(redirectSignIn),
  redirectSignOut: getRedirectUrl(redirectSignOut),
  responseType
});
var parseSocialProviders = (aws_cognito_social_providers) => {
  return aws_cognito_social_providers.map((provider) => {
    const updatedProvider = provider.toLowerCase();
    return updatedProvider.charAt(0).toUpperCase() + updatedProvider.slice(1);
  });
};

// node_modules/@aws-amplify/core/dist/esm/singleton/constants.mjs
var ADD_OAUTH_LISTENER = Symbol("oauth-listener");

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset4 = 0) {
  return byteToHex[arr[offset4 + 0]] + byteToHex[arr[offset4 + 1]] + byteToHex[arr[offset4 + 2]] + byteToHex[arr[offset4 + 3]] + "-" + byteToHex[arr[offset4 + 4]] + byteToHex[arr[offset4 + 5]] + "-" + byteToHex[arr[offset4 + 6]] + byteToHex[arr[offset4 + 7]] + "-" + byteToHex[arr[offset4 + 8]] + byteToHex[arr[offset4 + 9]] + "-" + byteToHex[arr[offset4 + 10]] + byteToHex[arr[offset4 + 11]] + byteToHex[arr[offset4 + 12]] + byteToHex[arr[offset4 + 13]] + byteToHex[arr[offset4 + 14]] + byteToHex[arr[offset4 + 15]];
}

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name2, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset4) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset4 = offset4 || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset4 + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name2;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (let i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input2) {
  const output = [];
  const length32 = input2.length * 32;
  const hexTab = "0123456789abcdef";
  for (let i = 0; i < length32; i += 8) {
    const x = input2[i >> 5] >>> i % 32 & 255;
    const hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;
  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input2) {
  if (input2.length === 0) {
    return [];
  }
  const length8 = input2.length * 8;
  const output = new Uint32Array(getOutputLength(length8));
  for (let i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input2[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  const lsw = (x & 65535) + (y & 65535);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t2) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t2)), s), b);
}
function md5ff(a, b, c, d, x, s, t2) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t2);
}
function md5gg(a, b, c, d, x, s, t2) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t2);
}
function md5hh(a, b, c, d, x, s, t2) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t2);
}
function md5ii(a, b, c, d, x, s, t2) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t2);
}
var md5_default = md5;

// node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35("v3", 48, md5_default);

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset4) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset4 = offset4 || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset4 + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t2 = 0; t2 < 16; ++t2) {
      W[t2] = M[i][t2];
    }
    for (let t2 = 16; t2 < 80; ++t2) {
      W[t2] = ROTL(W[t2 - 3] ^ W[t2 - 8] ^ W[t2 - 14] ^ W[t2 - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];
    for (let t2 = 0; t2 < 80; ++t2) {
      const s = Math.floor(t2 / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);

// node_modules/@aws-amplify/core/dist/esm/parseAmplifyOutputs.mjs
function isAmplifyOutputs(config2) {
  const { version: version2 } = config2;
  if (!version2) {
    return false;
  }
  return version2.startsWith("1");
}
function parseStorage(amplifyOutputsStorageProperties) {
  if (!amplifyOutputsStorageProperties) {
    return void 0;
  }
  const { bucket_name, aws_region, buckets } = amplifyOutputsStorageProperties;
  return {
    S3: {
      bucket: bucket_name,
      region: aws_region,
      buckets: buckets && createBucketInfoMap(buckets)
    }
  };
}
function parseAuth(amplifyOutputsAuthProperties) {
  if (!amplifyOutputsAuthProperties) {
    return void 0;
  }
  const { user_pool_id, user_pool_client_id, identity_pool_id, password_policy, mfa_configuration, mfa_methods, unauthenticated_identities_enabled, oauth, username_attributes, standard_required_attributes, groups } = amplifyOutputsAuthProperties;
  const authConfig = {
    Cognito: {
      userPoolId: user_pool_id,
      userPoolClientId: user_pool_client_id,
      groups
    }
  };
  if (identity_pool_id) {
    authConfig.Cognito = {
      ...authConfig.Cognito,
      identityPoolId: identity_pool_id
    };
  }
  if (password_policy) {
    authConfig.Cognito.passwordFormat = {
      requireLowercase: password_policy.require_lowercase,
      requireNumbers: password_policy.require_numbers,
      requireUppercase: password_policy.require_uppercase,
      requireSpecialCharacters: password_policy.require_symbols,
      minLength: password_policy.min_length ?? 6
    };
  }
  if (mfa_configuration) {
    authConfig.Cognito.mfa = {
      status: getMfaStatus(mfa_configuration),
      smsEnabled: mfa_methods == null ? void 0 : mfa_methods.includes("SMS"),
      totpEnabled: mfa_methods == null ? void 0 : mfa_methods.includes("TOTP")
    };
  }
  if (unauthenticated_identities_enabled) {
    authConfig.Cognito.allowGuestAccess = unauthenticated_identities_enabled;
  }
  if (oauth) {
    authConfig.Cognito.loginWith = {
      oauth: {
        domain: oauth.domain,
        redirectSignIn: oauth.redirect_sign_in_uri,
        redirectSignOut: oauth.redirect_sign_out_uri,
        responseType: oauth.response_type === "token" ? "token" : "code",
        scopes: oauth.scopes,
        providers: getOAuthProviders(oauth.identity_providers)
      }
    };
  }
  if (username_attributes) {
    authConfig.Cognito.loginWith = {
      ...authConfig.Cognito.loginWith,
      email: username_attributes.includes("email"),
      phone: username_attributes.includes("phone_number"),
      // Signing in with a username is not currently supported in Gen2, this should always evaluate to false
      username: username_attributes.includes("username")
    };
  }
  if (standard_required_attributes) {
    authConfig.Cognito.userAttributes = standard_required_attributes.reduce((acc, curr) => ({ ...acc, [curr]: { required: true } }), {});
  }
  return authConfig;
}
function parseAnalytics(amplifyOutputsAnalyticsProperties) {
  if (!(amplifyOutputsAnalyticsProperties == null ? void 0 : amplifyOutputsAnalyticsProperties.amazon_pinpoint)) {
    return void 0;
  }
  const { amazon_pinpoint } = amplifyOutputsAnalyticsProperties;
  return {
    Pinpoint: {
      appId: amazon_pinpoint.app_id,
      region: amazon_pinpoint.aws_region
    }
  };
}
function parseGeo(amplifyOutputsAnalyticsProperties) {
  if (!amplifyOutputsAnalyticsProperties) {
    return void 0;
  }
  const { aws_region, geofence_collections, maps, search_indices } = amplifyOutputsAnalyticsProperties;
  return {
    LocationService: {
      region: aws_region,
      searchIndices: search_indices,
      geofenceCollections: geofence_collections,
      maps
    }
  };
}
function parseData(amplifyOutputsDataProperties) {
  if (!amplifyOutputsDataProperties) {
    return void 0;
  }
  const { aws_region, default_authorization_type, url, api_key, model_introspection } = amplifyOutputsDataProperties;
  const GraphQL = {
    endpoint: url,
    defaultAuthMode: getGraphQLAuthMode(default_authorization_type),
    region: aws_region,
    apiKey: api_key,
    modelIntrospection: model_introspection
  };
  return {
    GraphQL
  };
}
function parseCustom(amplifyOutputsCustomProperties) {
  if (!(amplifyOutputsCustomProperties == null ? void 0 : amplifyOutputsCustomProperties.events)) {
    return void 0;
  }
  const { url, aws_region, api_key, default_authorization_type } = amplifyOutputsCustomProperties.events;
  const Events = {
    endpoint: url,
    defaultAuthMode: getGraphQLAuthMode(default_authorization_type),
    region: aws_region,
    apiKey: api_key
  };
  return {
    Events
  };
}
function parseNotifications(amplifyOutputsNotificationsProperties) {
  if (!amplifyOutputsNotificationsProperties) {
    return void 0;
  }
  const { aws_region, channels, amazon_pinpoint_app_id } = amplifyOutputsNotificationsProperties;
  const hasInAppMessaging = channels.includes("IN_APP_MESSAGING");
  const hasPushNotification = channels.includes("APNS") || channels.includes("FCM");
  if (!(hasInAppMessaging || hasPushNotification)) {
    return void 0;
  }
  const notificationsConfig = {};
  if (hasInAppMessaging) {
    notificationsConfig.InAppMessaging = {
      Pinpoint: {
        appId: amazon_pinpoint_app_id,
        region: aws_region
      }
    };
  }
  if (hasPushNotification) {
    notificationsConfig.PushNotification = {
      Pinpoint: {
        appId: amazon_pinpoint_app_id,
        region: aws_region
      }
    };
  }
  return notificationsConfig;
}
function parseAmplifyOutputs(amplifyOutputs) {
  const resourcesConfig = {};
  if (amplifyOutputs.storage) {
    resourcesConfig.Storage = parseStorage(amplifyOutputs.storage);
  }
  if (amplifyOutputs.auth) {
    resourcesConfig.Auth = parseAuth(amplifyOutputs.auth);
  }
  if (amplifyOutputs.analytics) {
    resourcesConfig.Analytics = parseAnalytics(amplifyOutputs.analytics);
  }
  if (amplifyOutputs.geo) {
    resourcesConfig.Geo = parseGeo(amplifyOutputs.geo);
  }
  if (amplifyOutputs.data) {
    resourcesConfig.API = parseData(amplifyOutputs.data);
  }
  if (amplifyOutputs.custom) {
    const customConfig = parseCustom(amplifyOutputs.custom);
    if (customConfig && "Events" in customConfig) {
      resourcesConfig.API = { ...resourcesConfig.API, ...customConfig };
    }
  }
  if (amplifyOutputs.notifications) {
    resourcesConfig.Notifications = parseNotifications(amplifyOutputs.notifications);
  }
  return resourcesConfig;
}
var authModeNames = {
  AMAZON_COGNITO_USER_POOLS: "userPool",
  API_KEY: "apiKey",
  AWS_IAM: "iam",
  AWS_LAMBDA: "lambda",
  OPENID_CONNECT: "oidc"
};
function getGraphQLAuthMode(authType) {
  return authModeNames[authType];
}
var providerNames = {
  GOOGLE: "Google",
  LOGIN_WITH_AMAZON: "Amazon",
  FACEBOOK: "Facebook",
  SIGN_IN_WITH_APPLE: "Apple"
};
function getOAuthProviders(providers = []) {
  return providers.reduce((oAuthProviders, provider) => {
    if (providerNames[provider] !== void 0) {
      oAuthProviders.push(providerNames[provider]);
    }
    return oAuthProviders;
  }, []);
}
function getMfaStatus(mfaConfiguration) {
  if (mfaConfiguration === "OPTIONAL")
    return "optional";
  if (mfaConfiguration === "REQUIRED")
    return "on";
  return "off";
}
function createBucketInfoMap(buckets) {
  const mappedBuckets = {};
  buckets.forEach(({ name: name2, bucket_name: bucketName, aws_region: region, paths }) => {
    if (name2 in mappedBuckets) {
      throw new Error(`Duplicate friendly name found: ${name2}. Name must be unique.`);
    }
    const sanitizedPaths = paths ? Object.entries(paths).reduce((acc, [key, value]) => {
      if (value !== void 0) {
        acc[key] = value;
      }
      return acc;
    }, {}) : void 0;
    mappedBuckets[name2] = {
      bucketName,
      region,
      paths: sanitizedPaths
    };
  });
  return mappedBuckets;
}

// node_modules/@aws-amplify/core/dist/esm/utils/parseAmplifyConfig.mjs
var parseAmplifyConfig = (amplifyConfig) => {
  if (Object.keys(amplifyConfig).some((key) => key.startsWith("aws_"))) {
    return parseAWSExports(amplifyConfig);
  } else if (isAmplifyOutputs(amplifyConfig)) {
    return parseAmplifyOutputs(amplifyConfig);
  } else {
    return amplifyConfig;
  }
};

// node_modules/tslib/tslib.es6.mjs
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign3 = function() {
  __assign3 = Object.assign || function __assign4(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t2[p] = s[p];
    }
    return t2;
  };
  return __assign3.apply(this, arguments);
};
function __rest3(s, e) {
  var t2 = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f2, y, t2, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f2 = 1, y && (t2 = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t2 = y["return"]) && t2.call(y), 0) : y.next) && !(t2 = t2.call(y, op[1])).done)
          return t2;
        if (y = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t2 = _.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t2[1]) {
              _.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _.label < t2[2]) {
              _.label = t2[2];
              _.ops.push(op);
              break;
            }
            if (t2[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f2 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values2(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read3(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error3) {
    e = { error: error3 };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray2(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f2) {
    return function(v) {
      return Promise.resolve(v).then(f2, reject);
    };
  }
  function verb(n, f2) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f2)
        i[n] = f2(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v) {
    if (f2(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}

// node_modules/@aws-crypto/sha256-js/build/module/constants.js
var BLOCK_SIZE = 64;
var DIGEST_LENGTH = 32;
var KEY = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var INIT = [
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
];
var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

// node_modules/@aws-crypto/sha256-js/build/module/RawSha256.js
var RawSha256 = (
  /** @class */
  function() {
    function RawSha2562() {
      this.state = Int32Array.from(INIT);
      this.temp = new Int32Array(64);
      this.buffer = new Uint8Array(64);
      this.bufferLength = 0;
      this.bytesHashed = 0;
      this.finished = false;
    }
    RawSha2562.prototype.update = function(data) {
      if (this.finished) {
        throw new Error("Attempted to update an already finished hash.");
      }
      var position = 0;
      var byteLength2 = data.byteLength;
      this.bytesHashed += byteLength2;
      if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {
        throw new Error("Cannot hash more than 2^53 - 1 bits");
      }
      while (byteLength2 > 0) {
        this.buffer[this.bufferLength++] = data[position++];
        byteLength2--;
        if (this.bufferLength === BLOCK_SIZE) {
          this.hashBuffer();
          this.bufferLength = 0;
        }
      }
    };
    RawSha2562.prototype.digest = function() {
      if (!this.finished) {
        var bitsHashed = this.bytesHashed * 8;
        var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
        var undecoratedLength = this.bufferLength;
        bufferView.setUint8(this.bufferLength++, 128);
        if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
          for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
            bufferView.setUint8(i, 0);
          }
          this.hashBuffer();
          this.bufferLength = 0;
        }
        for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
          bufferView.setUint8(i, 0);
        }
        bufferView.setUint32(BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
        bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);
        this.hashBuffer();
        this.finished = true;
      }
      var out = new Uint8Array(DIGEST_LENGTH);
      for (var i = 0; i < 8; i++) {
        out[i * 4] = this.state[i] >>> 24 & 255;
        out[i * 4 + 1] = this.state[i] >>> 16 & 255;
        out[i * 4 + 2] = this.state[i] >>> 8 & 255;
        out[i * 4 + 3] = this.state[i] >>> 0 & 255;
      }
      return out;
    };
    RawSha2562.prototype.hashBuffer = function() {
      var _a2 = this, buffer2 = _a2.buffer, state = _a2.state;
      var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
      for (var i = 0; i < BLOCK_SIZE; i++) {
        if (i < 16) {
          this.temp[i] = (buffer2[i * 4] & 255) << 24 | (buffer2[i * 4 + 1] & 255) << 16 | (buffer2[i * 4 + 2] & 255) << 8 | buffer2[i * 4 + 3] & 255;
        } else {
          var u = this.temp[i - 2];
          var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
          u = this.temp[i - 15];
          var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
          this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
        }
        var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (KEY[i] + this.temp[i] | 0) | 0) | 0;
        var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
        state7 = state6;
        state6 = state5;
        state5 = state4;
        state4 = state3 + t1 | 0;
        state3 = state2;
        state2 = state1;
        state1 = state0;
        state0 = t1 + t2 | 0;
      }
      state[0] += state0;
      state[1] += state1;
      state[2] += state2;
      state[3] += state3;
      state[4] += state4;
      state[5] += state5;
      state[6] += state6;
      state[7] += state7;
    };
    return RawSha2562;
  }()
);

// node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js
var fromUtf8 = (input2) => new TextEncoder().encode(input2);

// node_modules/@aws-crypto/util/build/module/convertToBuffer.js
var fromUtf82 = typeof Buffer !== "undefined" && Buffer.from ? function(input2) {
  return Buffer.from(input2, "utf8");
} : fromUtf8;
function convertToBuffer(data) {
  if (data instanceof Uint8Array)
    return data;
  if (typeof data === "string") {
    return fromUtf82(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }
  return new Uint8Array(data);
}

// node_modules/@aws-crypto/util/build/module/isEmptyData.js
function isEmptyData(data) {
  if (typeof data === "string") {
    return data.length === 0;
  }
  return data.byteLength === 0;
}

// node_modules/@aws-crypto/sha256-js/build/module/jsSha256.js
var Sha256 = (
  /** @class */
  function() {
    function Sha2562(secret) {
      this.secret = secret;
      this.hash = new RawSha256();
      this.reset();
    }
    Sha2562.prototype.update = function(toHash) {
      if (isEmptyData(toHash) || this.error) {
        return;
      }
      try {
        this.hash.update(convertToBuffer(toHash));
      } catch (e) {
        this.error = e;
      }
    };
    Sha2562.prototype.digestSync = function() {
      if (this.error) {
        throw this.error;
      }
      if (this.outer) {
        if (!this.outer.finished) {
          this.outer.update(this.hash.digest());
        }
        return this.outer.digest();
      }
      return this.hash.digest();
    };
    Sha2562.prototype.digest = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          return [2, this.digestSync()];
        });
      });
    };
    Sha2562.prototype.reset = function() {
      this.hash = new RawSha256();
      if (this.secret) {
        this.outer = new RawSha256();
        var inner = bufferFromSecret(this.secret);
        var outer = new Uint8Array(BLOCK_SIZE);
        outer.set(inner);
        for (var i = 0; i < BLOCK_SIZE; i++) {
          inner[i] ^= 54;
          outer[i] ^= 92;
        }
        this.hash.update(inner);
        this.outer.update(outer);
        for (var i = 0; i < inner.byteLength; i++) {
          inner[i] = 0;
        }
      }
    };
    return Sha2562;
  }()
);
function bufferFromSecret(secret) {
  var input2 = convertToBuffer(secret);
  if (input2.byteLength > BLOCK_SIZE) {
    var bufferHash = new RawSha256();
    bufferHash.update(input2);
    input2 = bufferHash.digest();
  }
  var buffer2 = new Uint8Array(BLOCK_SIZE);
  buffer2.set(input2);
  return buffer2;
}

// node_modules/@smithy/util-hex-encoding/dist-es/index.js
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for (let i = 0; i < 256; i++) {
  let encodedByte = i.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = `0${encodedByte}`;
  }
  SHORT_TO_HEX[i] = encodedByte;
  HEX_TO_SHORT[encodedByte] = i;
}
function toHex(bytes) {
  let out = "";
  for (let i = 0; i < bytes.byteLength; i++) {
    out += SHORT_TO_HEX[bytes[i]];
  }
  return out;
}

// node_modules/@aws-amplify/core/dist/esm/Platform/types.mjs
var Framework;
(function(Framework2) {
  Framework2["WebUnknown"] = "0";
  Framework2["React"] = "1";
  Framework2["NextJs"] = "2";
  Framework2["Angular"] = "3";
  Framework2["VueJs"] = "4";
  Framework2["Nuxt"] = "5";
  Framework2["Svelte"] = "6";
  Framework2["ServerSideUnknown"] = "100";
  Framework2["ReactSSR"] = "101";
  Framework2["NextJsSSR"] = "102";
  Framework2["AngularSSR"] = "103";
  Framework2["VueJsSSR"] = "104";
  Framework2["NuxtSSR"] = "105";
  Framework2["SvelteSSR"] = "106";
  Framework2["ReactNative"] = "201";
  Framework2["Expo"] = "202";
})(Framework || (Framework = {}));
var Category;
(function(Category2) {
  Category2["AI"] = "ai";
  Category2["API"] = "api";
  Category2["Auth"] = "auth";
  Category2["Analytics"] = "analytics";
  Category2["DataStore"] = "datastore";
  Category2["Geo"] = "geo";
  Category2["InAppMessaging"] = "inappmessaging";
  Category2["Interactions"] = "interactions";
  Category2["Predictions"] = "predictions";
  Category2["PubSub"] = "pubsub";
  Category2["PushNotification"] = "pushnotification";
  Category2["Storage"] = "storage";
})(Category || (Category = {}));
var AiAction;
(function(AiAction2) {
  AiAction2["CreateConversation"] = "1";
  AiAction2["GetConversation"] = "2";
  AiAction2["ListConversations"] = "3";
  AiAction2["DeleteConversation"] = "4";
  AiAction2["SendMessage"] = "5";
  AiAction2["ListMessages"] = "6";
  AiAction2["OnMessage"] = "7";
  AiAction2["Generation"] = "8";
  AiAction2["UpdateConversation"] = "9";
})(AiAction || (AiAction = {}));
var AnalyticsAction;
(function(AnalyticsAction2) {
  AnalyticsAction2["Record"] = "1";
  AnalyticsAction2["IdentifyUser"] = "2";
})(AnalyticsAction || (AnalyticsAction = {}));
var ApiAction;
(function(ApiAction2) {
  ApiAction2["GraphQl"] = "1";
  ApiAction2["Get"] = "2";
  ApiAction2["Post"] = "3";
  ApiAction2["Put"] = "4";
  ApiAction2["Patch"] = "5";
  ApiAction2["Del"] = "6";
  ApiAction2["Head"] = "7";
})(ApiAction || (ApiAction = {}));
var AuthAction;
(function(AuthAction2) {
  AuthAction2["SignUp"] = "1";
  AuthAction2["ConfirmSignUp"] = "2";
  AuthAction2["ResendSignUpCode"] = "3";
  AuthAction2["SignIn"] = "4";
  AuthAction2["FetchMFAPreference"] = "6";
  AuthAction2["UpdateMFAPreference"] = "7";
  AuthAction2["SetUpTOTP"] = "10";
  AuthAction2["VerifyTOTPSetup"] = "11";
  AuthAction2["ConfirmSignIn"] = "12";
  AuthAction2["DeleteUserAttributes"] = "15";
  AuthAction2["DeleteUser"] = "16";
  AuthAction2["UpdateUserAttributes"] = "17";
  AuthAction2["FetchUserAttributes"] = "18";
  AuthAction2["ConfirmUserAttribute"] = "22";
  AuthAction2["SignOut"] = "26";
  AuthAction2["UpdatePassword"] = "27";
  AuthAction2["ResetPassword"] = "28";
  AuthAction2["ConfirmResetPassword"] = "29";
  AuthAction2["FederatedSignIn"] = "30";
  AuthAction2["RememberDevice"] = "32";
  AuthAction2["ForgetDevice"] = "33";
  AuthAction2["FetchDevices"] = "34";
  AuthAction2["SendUserAttributeVerificationCode"] = "35";
  AuthAction2["SignInWithRedirect"] = "36";
  AuthAction2["StartWebAuthnRegistration"] = "37";
  AuthAction2["CompleteWebAuthnRegistration"] = "38";
  AuthAction2["ListWebAuthnCredentials"] = "39";
  AuthAction2["DeleteWebAuthnCredential"] = "40";
})(AuthAction || (AuthAction = {}));
var DataStoreAction;
(function(DataStoreAction2) {
  DataStoreAction2["Subscribe"] = "1";
  DataStoreAction2["GraphQl"] = "2";
})(DataStoreAction || (DataStoreAction = {}));
var GeoAction;
(function(GeoAction2) {
  GeoAction2["SearchByText"] = "0";
  GeoAction2["SearchByCoordinates"] = "1";
  GeoAction2["SearchForSuggestions"] = "2";
  GeoAction2["SearchByPlaceId"] = "3";
  GeoAction2["SaveGeofences"] = "4";
  GeoAction2["GetGeofence"] = "5";
  GeoAction2["ListGeofences"] = "6";
  GeoAction2["DeleteGeofences"] = "7";
})(GeoAction || (GeoAction = {}));
var InAppMessagingAction;
(function(InAppMessagingAction2) {
  InAppMessagingAction2["SyncMessages"] = "1";
  InAppMessagingAction2["IdentifyUser"] = "2";
  InAppMessagingAction2["NotifyMessageInteraction"] = "3";
})(InAppMessagingAction || (InAppMessagingAction = {}));
var InteractionsAction;
(function(InteractionsAction2) {
  InteractionsAction2["None"] = "0";
})(InteractionsAction || (InteractionsAction = {}));
var PredictionsAction;
(function(PredictionsAction2) {
  PredictionsAction2["Convert"] = "1";
  PredictionsAction2["Identify"] = "2";
  PredictionsAction2["Interpret"] = "3";
})(PredictionsAction || (PredictionsAction = {}));
var PubSubAction;
(function(PubSubAction2) {
  PubSubAction2["Subscribe"] = "1";
})(PubSubAction || (PubSubAction = {}));
var PushNotificationAction;
(function(PushNotificationAction2) {
  PushNotificationAction2["InitializePushNotifications"] = "1";
  PushNotificationAction2["IdentifyUser"] = "2";
})(PushNotificationAction || (PushNotificationAction = {}));
var StorageAction;
(function(StorageAction2) {
  StorageAction2["UploadData"] = "1";
  StorageAction2["DownloadData"] = "2";
  StorageAction2["List"] = "3";
  StorageAction2["Copy"] = "4";
  StorageAction2["Remove"] = "5";
  StorageAction2["GetProperties"] = "6";
  StorageAction2["GetUrl"] = "7";
  StorageAction2["GetDataAccess"] = "8";
  StorageAction2["ListCallerAccessGrants"] = "9";
})(StorageAction || (StorageAction = {}));

// node_modules/@aws-amplify/core/dist/esm/Platform/version.mjs
var version = "6.14.3";

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/helpers.mjs
var globalExists = () => {
  return typeof global !== "undefined";
};
var windowExists = () => {
  return typeof window !== "undefined";
};
var documentExists = () => {
  return typeof document !== "undefined";
};
var processExists = () => {
  return typeof process !== "undefined";
};
var keyPrefixMatch = (object, prefix) => {
  return !!Object.keys(object).find((key) => key.startsWith(prefix));
};

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/React.mjs
function reactWebDetect() {
  const elementKeyPrefixedWithReact = (key) => {
    return key.startsWith("_react") || key.startsWith("__react");
  };
  const elementIsReactEnabled = (element) => {
    return Object.keys(element).find(elementKeyPrefixedWithReact);
  };
  const allElementsWithId = () => Array.from(document.querySelectorAll("[id]"));
  return documentExists() && allElementsWithId().some(elementIsReactEnabled);
}
function reactSSRDetect() {
  return processExists() && typeof process.env !== "undefined" && !!Object.keys(process.env).find((key) => key.includes("react"));
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/Vue.mjs
function vueWebDetect() {
  return windowExists() && keyPrefixMatch(window, "__VUE");
}
function vueSSRDetect() {
  return globalExists() && keyPrefixMatch(global, "__VUE");
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/Svelte.mjs
function svelteWebDetect() {
  return windowExists() && keyPrefixMatch(window, "__SVELTE");
}
function svelteSSRDetect() {
  return processExists() && typeof process.env !== "undefined" && !!Object.keys(process.env).find((key) => key.includes("svelte"));
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/Next.mjs
function nextWebDetect() {
  return windowExists() && window.next && typeof window.next === "object";
}
function nextSSRDetect() {
  return globalExists() && (keyPrefixMatch(global, "__next") || keyPrefixMatch(global, "__NEXT"));
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/Nuxt.mjs
function nuxtWebDetect() {
  return windowExists() && (window.__NUXT__ !== void 0 || window.$nuxt !== void 0);
}
function nuxtSSRDetect() {
  return globalExists() && typeof global.__NUXT_PATHS__ !== "undefined";
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/Angular.mjs
function angularWebDetect() {
  const angularVersionSetInDocument = Boolean(documentExists() && document.querySelector("[ng-version]"));
  const angularContentSetInWindow = Boolean(windowExists() && typeof window.ng !== "undefined");
  return angularVersionSetInDocument || angularContentSetInWindow;
}
function angularSSRDetect() {
  var _a2;
  return processExists() && typeof process.env === "object" && ((_a2 = process.env.npm_lifecycle_script) == null ? void 0 : _a2.startsWith("ng ")) || false;
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/ReactNative.mjs
function reactNativeDetect() {
  return typeof navigator !== "undefined" && typeof navigator.product !== "undefined" && navigator.product === "ReactNative";
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/Expo.mjs
function expoDetect() {
  return globalExists() && typeof global.expo !== "undefined";
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/Web.mjs
function webDetect() {
  return windowExists();
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detection/index.mjs
var detectionMap = [
  // First, detect mobile
  { platform: Framework.Expo, detectionMethod: expoDetect },
  { platform: Framework.ReactNative, detectionMethod: reactNativeDetect },
  // Next, detect web frameworks
  { platform: Framework.NextJs, detectionMethod: nextWebDetect },
  { platform: Framework.Nuxt, detectionMethod: nuxtWebDetect },
  { platform: Framework.Angular, detectionMethod: angularWebDetect },
  { platform: Framework.React, detectionMethod: reactWebDetect },
  { platform: Framework.VueJs, detectionMethod: vueWebDetect },
  { platform: Framework.Svelte, detectionMethod: svelteWebDetect },
  { platform: Framework.WebUnknown, detectionMethod: webDetect },
  // Last, detect ssr frameworks
  { platform: Framework.NextJsSSR, detectionMethod: nextSSRDetect },
  { platform: Framework.NuxtSSR, detectionMethod: nuxtSSRDetect },
  { platform: Framework.ReactSSR, detectionMethod: reactSSRDetect },
  { platform: Framework.VueJsSSR, detectionMethod: vueSSRDetect },
  { platform: Framework.AngularSSR, detectionMethod: angularSSRDetect },
  { platform: Framework.SvelteSSR, detectionMethod: svelteSSRDetect }
];
function detect() {
  var _a2;
  return ((_a2 = detectionMap.find((detectionEntry) => detectionEntry.detectionMethod())) == null ? void 0 : _a2.platform) || Framework.ServerSideUnknown;
}

// node_modules/@aws-amplify/core/dist/esm/Platform/detectFramework.mjs
var frameworkCache;
var frameworkChangeObservers = [];
var resetTriggered = false;
var SSR_RESET_TIMEOUT = 10;
var WEB_RESET_TIMEOUT = 10;
var PRIME_FRAMEWORK_DELAY = 1e3;
var detectFramework = () => {
  var _a2;
  if (!frameworkCache) {
    frameworkCache = detect();
    if (resetTriggered) {
      while (frameworkChangeObservers.length) {
        (_a2 = frameworkChangeObservers.pop()) == null ? void 0 : _a2();
      }
    } else {
      frameworkChangeObservers.forEach((fcn) => {
        fcn();
      });
    }
    resetTimeout(Framework.ServerSideUnknown, SSR_RESET_TIMEOUT);
    resetTimeout(Framework.WebUnknown, WEB_RESET_TIMEOUT);
  }
  return frameworkCache;
};
var observeFrameworkChanges = (fcn) => {
  if (resetTriggered) {
    return;
  }
  frameworkChangeObservers.push(fcn);
};
function clearCache() {
  frameworkCache = void 0;
}
function resetTimeout(framework, delay2) {
  if (frameworkCache === framework && !resetTriggered) {
    setTimeout(() => {
      clearCache();
      resetTriggered = true;
      setTimeout(detectFramework, PRIME_FRAMEWORK_DELAY);
    }, delay2);
  }
}

// node_modules/@aws-amplify/core/dist/esm/Platform/customUserAgent.mjs
var customUserAgentState = {};
var setCustomUserAgent = (input2) => {
  customUserAgentState[input2.category] = input2.apis.reduce((acc, api2) => {
    var _a2;
    return {
      ...acc,
      [api2]: {
        refCount: ((_a2 = acc[api2]) == null ? void 0 : _a2.refCount) ? acc[api2].refCount + 1 : 1,
        additionalDetails: input2.additionalDetails
      }
    };
  }, customUserAgentState[input2.category] ?? {});
  let cleanUpCallbackCalled = false;
  const cleanUpCallback = () => {
    if (cleanUpCallbackCalled) {
      return;
    }
    cleanUpCallbackCalled = true;
    input2.apis.forEach((api2) => {
      const apiRefCount = customUserAgentState[input2.category][api2].refCount;
      if (apiRefCount > 1) {
        customUserAgentState[input2.category][api2].refCount = apiRefCount - 1;
      } else {
        delete customUserAgentState[input2.category][api2];
        if (!Object.keys(customUserAgentState[input2.category]).length) {
          delete customUserAgentState[input2.category];
        }
      }
    });
  };
  return cleanUpCallback;
};
var getCustomUserAgent = (category, api2) => {
  var _a2, _b;
  return (_b = (_a2 = customUserAgentState[category]) == null ? void 0 : _a2[api2]) == null ? void 0 : _b.additionalDetails;
};

// node_modules/@aws-amplify/core/dist/esm/Platform/index.mjs
var BASE_USER_AGENT = `aws-amplify`;
var sanitizeAmplifyVersion = (amplifyVersion) => amplifyVersion.replace(/\+.*/, "");
var PlatformBuilder = class {
  constructor() {
    this.userAgent = `${BASE_USER_AGENT}/${sanitizeAmplifyVersion(version)}`;
  }
  get framework() {
    return detectFramework();
  }
  get isReactNative() {
    return this.framework === Framework.ReactNative || this.framework === Framework.Expo;
  }
  observeFrameworkChanges(fcn) {
    observeFrameworkChanges(fcn);
  }
};
var Platform = new PlatformBuilder();
var getAmplifyUserAgentObject = ({ category, action } = {}) => {
  const userAgent = [
    [BASE_USER_AGENT, sanitizeAmplifyVersion(version)]
  ];
  if (category) {
    userAgent.push([category, action]);
  }
  userAgent.push(["framework", detectFramework()]);
  if (category && action) {
    const customState = getCustomUserAgent(category, action);
    if (customState) {
      customState.forEach((state) => {
        userAgent.push(state);
      });
    }
  }
  return userAgent;
};
var getAmplifyUserAgent = (customUserAgentDetails) => {
  const userAgent = getAmplifyUserAgentObject(customUserAgentDetails);
  const userAgentString = userAgent.map(([agentKey, agentValue]) => agentKey && agentValue ? `${agentKey}/${agentValue}` : agentKey).join(" ");
  return userAgentString;
};

// node_modules/@aws-amplify/core/dist/esm/BackgroundProcessManager/types.mjs
var BackgroundProcessManagerState;
(function(BackgroundProcessManagerState2) {
  BackgroundProcessManagerState2["Open"] = "Open";
  BackgroundProcessManagerState2["Closing"] = "Closing";
  BackgroundProcessManagerState2["Closed"] = "Closed";
})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));

// node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction2(value) {
  return typeof value === "function";
}

// node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index3 = arr.indexOf(item);
    0 <= index3 && arr.splice(index3, 1);
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a2, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values2(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a2 = _parentage_1.return))
                _a2.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction2(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values2(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray2(__spreadArray2([], __read3(errors)), __read3(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a2;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a2 = this._finalizers) !== null && _a2 !== void 0 ? _a2 : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty2 = new Subscription2();
    empty2.closed = true;
    return empty2;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction2(value.remove) && isFunction2(value.add) && isFunction2(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction2(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/rxjs/dist/esm5/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray2([handler, timeout2], __read3(args)));
    }
    return setTimeout.apply(void 0, __spreadArray2([handler, timeout2], __read3(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop() {
}

// node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error3) {
  return createNotification("E", void 0, error3);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error3) {
  return {
    kind,
    value,
    error: error3
  };
}

// node_modules/rxjs/dist/esm5/internal/util/errorContext.js
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      var _a2 = context, errorThrown = _a2.errorThrown, error3 = _a2.error;
      context = null;
      if (errorThrown) {
        throw error3;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error3, complete) {
    return new SafeSubscriber(next, error3, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error3) {
        handleUnhandledError(error3);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error3) {
        handleUnhandledError(error3);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error3) {
        handleUnhandledError(error3);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error3, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction2(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error3 !== null && error3 !== void 0 ? error3 : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error3) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error3);
  } else {
    reportUnhandledError(error3);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

// node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity(x) {
  return x;
}

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input2) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input2);
  };
}

// node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error3, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error3, complete);
    errorContext(function() {
      var _a2 = _this, operator = _a2.operator, source = _a2.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a2;
    return (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a2;
  return (_a2 = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a2 !== void 0 ? _a2 : Promise;
}
function isObserver(value) {
  return value && isFunction2(value.next) && isFunction2(value.error) && isFunction2(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/rxjs/dist/esm5/internal/util/lift.js
function hasLift(source) {
  return isFunction2(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init3) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init3(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a2;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a2 = this.onFinalize) === null || _a2 === void 0 ? void 0 : _a2.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);

// node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var ConnectableObservable = function(_super) {
  __extends(ConnectableObservable2, _super);
  function ConnectableObservable2(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;
    if (hasLift(source)) {
      _this.lift = source.lift;
    }
    return _this;
  }
  ConnectableObservable2.prototype._subscribe = function(subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable2.prototype.getSubject = function() {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable2.prototype._teardown = function() {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };
  ConnectableObservable2.prototype.connect = function() {
    var _this = this;
    var connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
        _this._teardown();
        subject_1.complete();
      }, function(err) {
        _this._teardown();
        subject_1.error(err);
      }, function() {
        return _this._teardown();
      })));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable2.prototype.refCount = function() {
    return refCount()(this);
  };
  return ConnectableObservable2;
}(Observable);

// node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js
var performanceTimestampProvider = {
  now: function() {
    return (performanceTimestampProvider.delegate || performance).now();
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js
var animationFrameProvider = {
  schedule: function(callback) {
    var request = requestAnimationFrame;
    var cancel3 = cancelAnimationFrame;
    var delegate = animationFrameProvider.delegate;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel3 = delegate.cancelAnimationFrame;
    }
    var handle = request(function(timestamp2) {
      cancel3 = void 0;
      callback(timestamp2);
    });
    return new Subscription(function() {
      return cancel3 === null || cancel3 === void 0 ? void 0 : cancel3(handle);
    });
  },
  requestAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray2([], __read3(args)));
  },
  cancelAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray2([], __read3(args)));
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
function animationFramesFactory(timestampProvider) {
  return new Observable(function(subscriber) {
    var provider = timestampProvider || performanceTimestampProvider;
    var start3 = provider.now();
    var id = 0;
    var run = function() {
      if (!subscriber.closed) {
        id = animationFrameProvider.requestAnimationFrame(function(timestamp2) {
          id = 0;
          var now = provider.now();
          subscriber.next({
            timestamp: timestampProvider ? now : timestamp2,
            elapsed: now - start3
          });
          run();
        });
      }
    };
    run();
    return function() {
      if (id) {
        animationFrameProvider.cancelAnimationFrame(id);
      }
    };
  });
}
var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

// node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});

// node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a2;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values2(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return))
              _a2.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a2;
      return ((_a2 = this.observers) === null || _a2 === void 0 ? void 0 : _a2.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a2 = this, hasError = _a2.hasError, isStopped = _a2.isStopped, observers = _a2.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, isStopped = _a2.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a2, _b;
    (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.next) === null || _b === void 0 ? void 0 : _b.call(_a2, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a2, _b;
    (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b === void 0 ? void 0 : _b.call(_a2, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a2, _b;
    (_b = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.complete) === null || _b === void 0 ? void 0 : _b.call(_a2);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a2, _b;
    return (_b = (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, _value = _a2._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = {
  now: function() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var ReplaySubject = function(_super) {
  __extends(ReplaySubject2, _super);
  function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject2.prototype.next = function(value) {
    var _a2 = this, isStopped = _a2.isStopped, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow, _timestampProvider = _a2._timestampProvider, _windowTime = _a2._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a2 = this, _infiniteTimeWindow = _a2._infiniteTimeWindow, _buffer = _a2._buffer;
    var copy4 = _buffer.slice();
    for (var i = 0; i < copy4.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy4[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject2.prototype._trimBuffer = function() {
    var _a2 = this, _bufferSize = _a2._bufferSize, _timestampProvider = _a2._timestampProvider, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now = _timestampProvider.now();
      var last3 = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last3 = i;
      }
      last3 && _buffer.splice(0, last3 + 1);
    }
  };
  return ReplaySubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/AsyncSubject.js
var AsyncSubject = function(_super) {
  __extends(AsyncSubject2, _super);
  function AsyncSubject2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._value = null;
    _this._hasValue = false;
    _this._isComplete = false;
    return _this;
  }
  AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a2 = this, hasError = _a2.hasError, _hasValue = _a2._hasValue, _value = _a2._value, thrownError = _a2.thrownError, isStopped = _a2.isStopped, _isComplete = _a2._isComplete;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped || _isComplete) {
      _hasValue && subscriber.next(_value);
      subscriber.complete();
    }
  };
  AsyncSubject2.prototype.next = function(value) {
    if (!this.isStopped) {
      this._value = value;
      this._hasValue = true;
    }
  };
  AsyncSubject2.prototype.complete = function() {
    var _a2 = this, _hasValue = _a2._hasValue, _value = _a2._value, _isComplete = _a2._isComplete;
    if (!_isComplete) {
      this._isComplete = true;
      _hasValue && _super.prototype.next.call(this, _value);
      _super.prototype.complete.call(this);
    }
  };
  return AsyncSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
var Action = function(_super) {
  __extends(Action2, _super);
  function Action2(scheduler, work) {
    return _super.call(this) || this;
  }
  Action2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return this;
  };
  return Action2;
}(Subscription);

// node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
var intervalProvider = {
  setInterval: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray2([handler, timeout2], __read3(args)));
    }
    return setInterval.apply(void 0, __spreadArray2([handler, timeout2], __read3(args)));
  },
  clearInterval: function(handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var AsyncAction = function(_super) {
  __extends(AsyncAction2, _super);
  function AsyncAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction2.prototype.schedule = function(state, delay2) {
    var _a2;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay2);
    }
    this.pending = true;
    this.delay = delay2;
    this.id = (_a2 = this.id) !== null && _a2 !== void 0 ? _a2 : this.requestAsyncId(scheduler, this.id, delay2);
    return this;
  };
  AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
  };
  AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && this.delay === delay2 && this.pending === false) {
      return id;
    }
    if (id != null) {
      intervalProvider.clearInterval(id);
    }
    return void 0;
  };
  AsyncAction2.prototype.execute = function(state, delay2) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    var error3 = this._execute(state, delay2);
    if (error3) {
      return error3;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction2.prototype._execute = function(state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction2.prototype.unsubscribe = function() {
    if (!this.closed) {
      var _a2 = this, id = _a2.id, scheduler = _a2.scheduler;
      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction2;
}(Action);

// node_modules/rxjs/dist/esm5/internal/util/Immediate.js
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function() {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function(handle) {
    findAndClearHandle(handle);
  }
};

// node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var setImmediate = Immediate.setImmediate;
var clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray2([], __read3(args)));
  },
  clearImmediate: function(handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var AsapAction = function(_super) {
  __extends(AsapAction2, _super);
  function AsapAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
  };
  AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    var _a2;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null ? delay2 > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    var actions = scheduler.actions;
    if (id != null && ((_a2 = actions[actions.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.id) !== id) {
      immediateProvider.clearImmediate(id);
      if (scheduler._scheduled === id) {
        scheduler._scheduled = void 0;
      }
    }
    return void 0;
  };
  return AsapAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/Scheduler.js
var Scheduler2 = function() {
  function Scheduler3(schedulerActionCtor, now) {
    if (now === void 0) {
      now = Scheduler3.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  Scheduler3.prototype.schedule = function(work, delay2, state) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay2);
  };
  Scheduler3.now = dateTimestampProvider.now;
  return Scheduler3;
}();

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var AsyncScheduler = function(_super) {
  __extends(AsyncScheduler2, _super);
  function AsyncScheduler2(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler2.now;
    }
    var _this = _super.call(this, SchedulerAction, now) || this;
    _this.actions = [];
    _this._active = false;
    return _this;
  }
  AsyncScheduler2.prototype.flush = function(action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error3;
    this._active = true;
    do {
      if (error3 = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error3) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error3;
    }
  };
  return AsyncScheduler2;
}(Scheduler2);

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var AsapScheduler = function(_super) {
  __extends(AsapScheduler2, _super);
  function AsapScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error3;
    action = action || actions.shift();
    do {
      if (error3 = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error3) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error3;
    }
  };
  return AsapScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var asapScheduler = new AsapScheduler(AsapAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/async.js
var asyncScheduler = new AsyncScheduler(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js
var QueueAction = function(_super) {
  __extends(QueueAction2, _super);
  function QueueAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  QueueAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 > 0) {
      return _super.prototype.schedule.call(this, state, delay2);
    }
    this.delay = delay2;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction2.prototype.execute = function(state, delay2) {
    return delay2 > 0 || this.closed ? _super.prototype.execute.call(this, state, delay2) : this._execute(state, delay2);
  };
  QueueAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.flush(this);
    return 0;
  };
  return QueueAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js
var QueueScheduler = function(_super) {
  __extends(QueueScheduler2, _super);
  function QueueScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return QueueScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
var queueScheduler = new QueueScheduler(QueueAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js
var AnimationFrameAction = function(_super) {
  __extends(AnimationFrameAction2, _super);
  function AnimationFrameAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function() {
      return scheduler.flush(void 0);
    }));
  };
  AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    var _a2;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null ? delay2 > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    var actions = scheduler.actions;
    if (id != null && id === scheduler._scheduled && ((_a2 = actions[actions.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.id) !== id) {
      animationFrameProvider.cancelAnimationFrame(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AnimationFrameAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js
var AnimationFrameScheduler = function(_super) {
  __extends(AnimationFrameScheduler2, _super);
  function AnimationFrameScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnimationFrameScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId;
    if (action) {
      flushId = action.id;
    } else {
      flushId = this._scheduled;
      this._scheduled = void 0;
    }
    var actions = this.actions;
    var error3;
    action = action || actions.shift();
    do {
      if (error3 = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error3) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error3;
    }
  };
  return AnimationFrameScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);

// node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js
var VirtualTimeScheduler = function(_super) {
  __extends(VirtualTimeScheduler2, _super);
  function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
    if (schedulerActionCtor === void 0) {
      schedulerActionCtor = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Infinity;
    }
    var _this = _super.call(this, schedulerActionCtor, function() {
      return _this.frame;
    }) || this;
    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }
  VirtualTimeScheduler2.prototype.flush = function() {
    var _a2 = this, actions = _a2.actions, maxFrames = _a2.maxFrames;
    var error3;
    var action;
    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;
      if (error3 = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error3) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error3;
    }
  };
  VirtualTimeScheduler2.frameTimeFactor = 10;
  return VirtualTimeScheduler2;
}(AsyncScheduler);
var VirtualAction = function(_super) {
  __extends(VirtualAction2, _super);
  function VirtualAction2(scheduler, work, index3) {
    if (index3 === void 0) {
      index3 = scheduler.index += 1;
    }
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index3;
    _this.active = true;
    _this.index = scheduler.index = index3;
    return _this;
  }
  VirtualAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (Number.isFinite(delay2)) {
      if (!this.id) {
        return _super.prototype.schedule.call(this, state, delay2);
      }
      this.active = false;
      var action = new VirtualAction2(this.scheduler, this.work);
      this.add(action);
      return action.schedule(state, delay2);
    } else {
      return Subscription.EMPTY;
    }
  };
  VirtualAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    this.delay = scheduler.frame + delay2;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction2.sortActions);
    return 1;
  };
  VirtualAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return void 0;
  };
  VirtualAction2.prototype._execute = function(state, delay2) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay2);
    }
  };
  VirtualAction2.sortActions = function(a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/observable/empty.js
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});

// node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction2(value.schedule);
}

// node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var isArrayLike = function(x) {
  return x && typeof x.length === "number" && typeof x !== "function";
};

// node_modules/rxjs/dist/esm5/internal/util/isPromise.js
function isPromise(value) {
  return isFunction2(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
function isInteropObservable(input2) {
  return isFunction2(input2[observable]);
}

// node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction2(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input2) {
  return new TypeError("You provided " + (input2 !== null && typeof input2 === "object" ? "an invalid object" : "'" + input2 + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

// node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input2) {
  return isFunction2(input2 === null || input2 === void 0 ? void 0 : input2[iterator]);
}

// node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a2, value, done2;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          if (false)
            return [3, 8];
          return [4, __await(reader.read())];
        case 3:
          _a2 = _b.sent(), value = _a2.value, done2 = _a2.done;
          if (!done2)
            return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction2(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input2) {
  if (input2 instanceof Observable) {
    return input2;
  }
  if (input2 != null) {
    if (isInteropObservable(input2)) {
      return fromInteropObservable(input2);
    }
    if (isArrayLike(input2)) {
      return fromArrayLike(input2);
    }
    if (isPromise(input2)) {
      return fromPromise(input2);
    }
    if (isAsyncIterable(input2)) {
      return fromAsyncIterable(input2);
    }
    if (isIterable(input2)) {
      return fromIterable(input2);
    }
    if (isReadableStreamLike(input2)) {
      return fromReadableStreamLike(input2);
    }
  }
  throw createInvalidObservableTypeError(input2);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction2(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a2;
    try {
      for (var iterable_1 = __values2(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a2 = iterable_1.return))
          _a2.call(iterable_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process2(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process2(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a2;
  return __awaiter(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
            return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a2 = asyncIterable_1.return)))
            return [3, 8];
          return [4, _a2.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2)
            throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay2, repeat2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (repeat2 === void 0) {
    repeat2 = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat2) {
      parentSubscription.add(this.schedule(null, delay2));
    } else {
      this.unsubscribe();
    }
  }, delay2);
  parentSubscription.add(scheduleSubscription);
  if (!repeat2) {
    return scheduleSubscription;
  }
}

// node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay2);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay2);
    }, function(err) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err);
      }, delay2);
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay2));
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input2, scheduler) {
  return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
function schedulePromise(input2, scheduler) {
  return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
function scheduleArray(input2, scheduler) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler.schedule(function() {
      if (i === input2.length) {
        subscriber.complete();
      } else {
        subscriber.next(input2[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
function scheduleIterable(input2, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input2[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a2;
        var value;
        var done2;
        try {
          _a2 = iterator2.next(), value = _a2.value, done2 = _a2.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done2) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction2(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input2, scheduler) {
  if (!input2) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input2[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input2, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input2), scheduler);
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input2, scheduler) {
  if (input2 != null) {
    if (isInteropObservable(input2)) {
      return scheduleObservable(input2, scheduler);
    }
    if (isArrayLike(input2)) {
      return scheduleArray(input2, scheduler);
    }
    if (isPromise(input2)) {
      return schedulePromise(input2, scheduler);
    }
    if (isAsyncIterable(input2)) {
      return scheduleAsyncIterable(input2, scheduler);
    }
    if (isIterable(input2)) {
      return scheduleIterable(input2, scheduler);
    }
    if (isReadableStreamLike(input2)) {
      return scheduleReadableStreamLike(input2, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input2);
}

// node_modules/rxjs/dist/esm5/internal/observable/from.js
function from(input2, scheduler) {
  return scheduler ? scheduled(input2, scheduler) : innerFrom(input2);
}

// node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/rxjs/dist/esm5/internal/observable/throwError.js
function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction2(errorOrErrorFactory) ? errorOrErrorFactory : function() {
    return errorOrErrorFactory;
  };
  var init3 = function(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable(scheduler ? function(subscriber) {
    return scheduler.schedule(init3, 0, subscriber);
  } : init3);
}

// node_modules/rxjs/dist/esm5/internal/Notification.js
var NotificationKind;
(function(NotificationKind2) {
  NotificationKind2["NEXT"] = "N";
  NotificationKind2["ERROR"] = "E";
  NotificationKind2["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
var Notification = function() {
  function Notification2(kind, value, error3) {
    this.kind = kind;
    this.value = value;
    this.error = error3;
    this.hasValue = kind === "N";
  }
  Notification2.prototype.observe = function(observer) {
    return observeNotification(this, observer);
  };
  Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
    var _a2 = this, kind = _a2.kind, value = _a2.value, error3 = _a2.error;
    return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error3) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
  };
  Notification2.prototype.accept = function(nextOrObserver, error3, complete) {
    var _a2;
    return isFunction2((_a2 = nextOrObserver) === null || _a2 === void 0 ? void 0 : _a2.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error3, complete);
  };
  Notification2.prototype.toObservable = function() {
    var _a2 = this, kind = _a2.kind, value = _a2.value, error3 = _a2.error;
    var result = kind === "N" ? of(value) : kind === "E" ? throwError(function() {
      return error3;
    }) : kind === "C" ? EMPTY : 0;
    if (!result) {
      throw new TypeError("Unexpected notification kind " + kind);
    }
    return result;
  };
  Notification2.createNext = function(value) {
    return new Notification2("N", value);
  };
  Notification2.createError = function(err) {
    return new Notification2("E", void 0, err);
  };
  Notification2.createComplete = function() {
    return Notification2.completeNotification;
  };
  Notification2.completeNotification = new Notification2("C");
  return Notification2;
}();
function observeNotification(notification, observer) {
  var _a2, _b, _c;
  var _d = notification, kind = _d.kind, value = _d.value, error3 = _d.error;
  if (typeof kind !== "string") {
    throw new TypeError('Invalid notification, missing "kind"');
  }
  kind === "N" ? (_a2 = observer.next) === null || _a2 === void 0 ? void 0 : _a2.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error3) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}

// node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});

// node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js
var ArgumentOutOfRangeError = createErrorClass(function(_super) {
  return function ArgumentOutOfRangeErrorImpl() {
    _super(this);
    this.name = "ArgumentOutOfRangeError";
    this.message = "argument out of range";
  };
});

// node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js
var NotFoundError = createErrorClass(function(_super) {
  return function NotFoundErrorImpl(message2) {
    _super(this);
    this.name = "NotFoundError";
    this.message = message2;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/SequenceError.js
var SequenceError = createErrorClass(function(_super) {
  return function SequenceErrorImpl(message2) {
    _super(this);
    this.name = "SequenceError";
    this.message = message2;
  };
});

// node_modules/rxjs/dist/esm5/internal/operators/timeout.js
var TimeoutError = createErrorClass(function(_super) {
  return function TimeoutErrorImpl(info) {
    if (info === void 0) {
      info = null;
    }
    _super(this);
    this.message = "Timeout has occurred";
    this.name = "TimeoutError";
    this.info = info;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
var isArray2 = Array.isArray;

// node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
var isArray3 = Array.isArray;
var objectProto = Object.prototype;

// node_modules/rxjs/dist/esm5/internal/observable/never.js
var NEVER = new Observable(noop);

// node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
var isArray4 = Array.isArray;

// node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js
var TimeInterval = function() {
  function TimeInterval2(value, interval2) {
    this.value = value;
    this.interval = interval2;
  }
  return TimeInterval2;
}();

// node_modules/@aws-amplify/core/dist/esm/utils/isWebWorker.mjs
var isWebWorker = () => {
  if (typeof self === "undefined") {
    return false;
  }
  const selfContext = self;
  return typeof selfContext.WorkerGlobalScope !== "undefined" && self instanceof selfContext.WorkerGlobalScope;
};

// node_modules/@aws-amplify/core/dist/esm/Reachability/Reachability.mjs
var Reachability = class _Reachability {
  networkMonitor(_) {
    const globalObj = isWebWorker() ? self : typeof window !== "undefined" && window;
    if (!globalObj) {
      return from([{ online: true }]);
    }
    return new Observable((observer) => {
      observer.next({ online: globalObj.navigator.onLine });
      const notifyOnline = () => {
        observer.next({ online: true });
      };
      const notifyOffline = () => {
        observer.next({ online: false });
      };
      globalObj.addEventListener("online", notifyOnline);
      globalObj.addEventListener("offline", notifyOffline);
      _Reachability._observers.push(observer);
      return () => {
        globalObj.removeEventListener("online", notifyOnline);
        globalObj.removeEventListener("offline", notifyOffline);
        _Reachability._observers = _Reachability._observers.filter((_observer) => _observer !== observer);
      };
    });
  }
  // expose observers to simulate offline mode for integration testing
  static _observerOverride(status) {
    for (const observer of this._observers) {
      if (observer.closed) {
        this._observers = this._observers.filter((_observer) => _observer !== observer);
        continue;
      }
      (observer == null ? void 0 : observer.next) && observer.next(status);
    }
  }
};
Reachability._observers = [];

// node_modules/@aws-amplify/core/dist/esm/utils/isBrowser.mjs
var isBrowser = () => typeof window !== "undefined" && typeof window.document !== "undefined";

// node_modules/@aws-amplify/core/dist/esm/utils/sessionListener/SessionListener.mjs
var stateChangeListeners = /* @__PURE__ */ new Set();
var SessionListener = class {
  constructor() {
    this.listenerActive = false;
    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
    if (isBrowser()) {
      document.addEventListener("visibilitychange", this.handleVisibilityChange, false);
      this.listenerActive = true;
    }
  }
  addStateChangeListener(listener, notifyOnAdd = false) {
    if (!this.listenerActive) {
      return;
    }
    stateChangeListeners.add(listener);
    if (notifyOnAdd) {
      listener(this.getSessionState());
    }
  }
  removeStateChangeListener(handler) {
    if (!this.listenerActive) {
      return;
    }
    stateChangeListeners.delete(handler);
  }
  handleVisibilityChange() {
    this.notifyHandlers();
  }
  notifyHandlers() {
    const sessionState = this.getSessionState();
    stateChangeListeners.forEach((listener) => {
      listener(sessionState);
    });
  }
  getSessionState() {
    if (isBrowser() && document.visibilityState !== "hidden") {
      return "started";
    }
    return "ended";
  }
};

// node_modules/@aws-amplify/core/dist/esm/utils/sessionListener/index.mjs
var sessionListener = new SessionListener();

// node_modules/@aws-amplify/core/dist/esm/singleton/Auth/index.mjs
var AuthClass = class {
  /**
   * Configure Auth category
   *
   * @internal
   *
   * @param authResourcesConfig - Resources configurations required by Auth providers.
   * @param authOptions - Client options used by library
   *
   * @returns void
   */
  configure(authResourcesConfig, authOptions) {
    this.authConfig = authResourcesConfig;
    this.authOptions = authOptions;
  }
  /**
   * Fetch the auth tokens, and the temporary AWS credentials and identity if they are configured. By default it
   * does not refresh the auth tokens or credentials if they are loaded in storage already. You can force a refresh
   * with `{ forceRefresh: true }` input.
   *
   * @param options - Options configuring the fetch behavior.
   *
   * @returns Promise of current auth session {@link AuthSession}.
   */
  async fetchAuthSession(options = {}) {
    var _a2, _b, _c, _d, _e, _f;
    let credentialsAndIdentityId;
    let userSub;
    const tokens2 = await this.getTokens(options);
    if (tokens2) {
      userSub = (_b = (_a2 = tokens2.accessToken) == null ? void 0 : _a2.payload) == null ? void 0 : _b.sub;
      credentialsAndIdentityId = await ((_d = (_c = this.authOptions) == null ? void 0 : _c.credentialsProvider) == null ? void 0 : _d.getCredentialsAndIdentityId({
        authConfig: this.authConfig,
        tokens: tokens2,
        authenticated: true,
        forceRefresh: options.forceRefresh
      }));
    } else {
      credentialsAndIdentityId = await ((_f = (_e = this.authOptions) == null ? void 0 : _e.credentialsProvider) == null ? void 0 : _f.getCredentialsAndIdentityId({
        authConfig: this.authConfig,
        authenticated: false,
        forceRefresh: options.forceRefresh
      }));
    }
    return {
      tokens: tokens2,
      credentials: credentialsAndIdentityId == null ? void 0 : credentialsAndIdentityId.credentials,
      identityId: credentialsAndIdentityId == null ? void 0 : credentialsAndIdentityId.identityId,
      userSub
    };
  }
  async clearCredentials() {
    var _a2, _b;
    await ((_b = (_a2 = this.authOptions) == null ? void 0 : _a2.credentialsProvider) == null ? void 0 : _b.clearCredentialsAndIdentityId());
  }
  async getTokens(options) {
    var _a2, _b;
    return await ((_b = (_a2 = this.authOptions) == null ? void 0 : _a2.tokenProvider) == null ? void 0 : _b.getTokens(options)) ?? void 0;
  }
};

// node_modules/@aws-amplify/core/dist/esm/singleton/Amplify.mjs
var AmplifyClass = class {
  constructor() {
    this.oAuthListener = void 0;
    this.resourcesConfig = {};
    this.libraryOptions = {};
    this.Auth = new AuthClass();
  }
  /**
   * Configures Amplify for use with your back-end resources.
   *
   * @remarks
   * This API does not perform any merging of either `resourcesConfig` or `libraryOptions`. The most recently
   * provided values will be used after configuration.
   *
   * @remarks
   * `configure` can be used to specify additional library options where available for supported categories.
   *
   * @param resourceConfig - Back-end resource configuration. Typically provided via the `aws-exports.js` file.
   * @param libraryOptions - Additional options for customizing the behavior of the library.
   */
  configure(resourcesConfig, libraryOptions) {
    const resolvedResourceConfig = parseAmplifyConfig(resourcesConfig);
    this.resourcesConfig = resolvedResourceConfig;
    if (libraryOptions) {
      this.libraryOptions = libraryOptions;
    }
    this.resourcesConfig = deepFreeze(this.resourcesConfig);
    this.Auth.configure(this.resourcesConfig.Auth, this.libraryOptions.Auth);
    Hub.dispatch("core", {
      event: "configure",
      data: this.resourcesConfig
    }, "Configure", AMPLIFY_SYMBOL);
    this.notifyOAuthListener();
  }
  /**
   * Provides access to the current back-end resource configuration for the Library.
   *
   * @returns Returns the immutable back-end resource configuration.
   */
  getConfig() {
    return this.resourcesConfig;
  }
  /** @internal */
  [ADD_OAUTH_LISTENER](listener) {
    var _a2, _b, _c;
    if ((_b = (_a2 = this.resourcesConfig.Auth) == null ? void 0 : _a2.Cognito.loginWith) == null ? void 0 : _b.oauth) {
      listener((_c = this.resourcesConfig.Auth) == null ? void 0 : _c.Cognito);
    } else {
      this.oAuthListener = listener;
    }
  }
  notifyOAuthListener() {
    var _a2, _b, _c;
    if (!((_b = (_a2 = this.resourcesConfig.Auth) == null ? void 0 : _a2.Cognito.loginWith) == null ? void 0 : _b.oauth) || !this.oAuthListener) {
      return;
    }
    this.oAuthListener((_c = this.resourcesConfig.Auth) == null ? void 0 : _c.Cognito);
    this.oAuthListener = void 0;
  }
};
var Amplify = new AmplifyClass();

// node_modules/@aws-amplify/core/dist/esm/singleton/apis/internal/fetchAuthSession.mjs
var fetchAuthSession = (amplify, options) => {
  return amplify.Auth.fetchAuthSession(options);
};

// node_modules/@aws-amplify/core/dist/esm/singleton/apis/fetchAuthSession.mjs
var fetchAuthSession2 = (options) => {
  return fetchAuthSession(Amplify, options);
};

// node_modules/@aws-amplify/core/dist/esm/singleton/apis/clearCredentials.mjs
function clearCredentials() {
  return Amplify.Auth.clearCredentials();
}

// node_modules/@aws-amplify/core/dist/esm/clients/serde/responseInfo.mjs
var parseMetadata = (response) => {
  const { headers, statusCode } = response;
  return {
    ...isMetadataBearer(response) ? response.$metadata : {},
    httpStatusCode: statusCode,
    requestId: headers["x-amzn-requestid"] ?? headers["x-amzn-request-id"] ?? headers["x-amz-request-id"],
    extendedRequestId: headers["x-amz-id-2"],
    cfId: headers["x-amz-cf-id"]
  };
};
var isMetadataBearer = (response) => typeof (response == null ? void 0 : response.$metadata) === "object";

// node_modules/@aws-amplify/core/dist/esm/clients/serde/json.mjs
var parseJsonError = async (response) => {
  if (!response || response.statusCode < 300) {
    return;
  }
  const body = await parseJsonBody(response);
  const sanitizeErrorCode = (rawValue) => {
    const [cleanValue] = rawValue.toString().split(/[,:]+/);
    if (cleanValue.includes("#")) {
      return cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const code = sanitizeErrorCode(response.headers["x-amzn-errortype"] ?? body.code ?? body.__type ?? "UnknownError");
  const message2 = body.message ?? body.Message ?? "Unknown error";
  const error3 = new Error(message2);
  return Object.assign(error3, {
    name: code,
    $metadata: parseMetadata(response)
  });
};
var parseJsonBody = async (response) => {
  if (!response.body) {
    throw new Error("Missing response payload");
  }
  const output = await response.body.json();
  return Object.assign(output, {
    $metadata: parseMetadata(response)
  });
};

// node_modules/@aws-amplify/core/dist/esm/clients/internal/composeServiceApi.mjs
var composeServiceApi = (transferHandler, serializer, deserializer, defaultConfig5) => {
  return async (config2, input2) => {
    const resolvedConfig = {
      ...defaultConfig5,
      ...config2
    };
    const endpoint = await resolvedConfig.endpointResolver(resolvedConfig, input2);
    const request = await serializer(input2, endpoint);
    const response = await transferHandler(request, {
      ...resolvedConfig
    });
    return deserializer(response);
  };
};

// node_modules/@aws-amplify/core/dist/esm/clients/endpoints/partitions.mjs
var defaultPartition = {
  id: "aws",
  outputs: {
    dnsSuffix: "amazonaws.com"
  },
  regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
  regions: ["aws-global"]
};
var partitionsInfo = {
  partitions: [
    defaultPartition,
    {
      id: "aws-cn",
      outputs: {
        dnsSuffix: "amazonaws.com.cn"
      },
      regionRegex: "^cn\\-\\w+\\-\\d+$",
      regions: ["aws-cn-global"]
    }
  ]
};

// node_modules/@aws-amplify/core/dist/esm/clients/endpoints/getDnsSuffix.mjs
var getDnsSuffix = (region) => {
  const { partitions } = partitionsInfo;
  for (const { regions, outputs, regionRegex } of partitions) {
    const regex = new RegExp(regionRegex);
    if (regions.includes(region) || regex.test(region)) {
      return outputs.dnsSuffix;
    }
  }
  return defaultPartition.outputs.dnsSuffix;
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/constants.mjs
var DEFAULT_RETRY_ATTEMPTS = 3;
var AMZ_SDK_INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var AMZ_SDK_REQUEST_HEADER = "amz-sdk-request";
var DEFAULT_MAX_DELAY_MS = 5 * 60 * 1e3;

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/retryMiddleware.mjs
var retryMiddlewareFactory = ({ maxAttempts = DEFAULT_RETRY_ATTEMPTS, retryDecider: retryDecider2, computeDelay, abortSignal }) => {
  if (maxAttempts < 1) {
    throw new Error("maxAttempts must be greater than 0");
  }
  return (next, context2) => async function retryMiddleware(request) {
    let error3;
    let attemptsCount = context2.attemptsCount ?? 0;
    let response;
    const handleTerminalErrorOrResponse = () => {
      if (response) {
        addOrIncrementMetadataAttempts(response, attemptsCount);
        return response;
      } else {
        addOrIncrementMetadataAttempts(error3, attemptsCount);
        throw error3;
      }
    };
    while (!(abortSignal == null ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts) {
      try {
        response = await next(request);
        error3 = void 0;
      } catch (e) {
        error3 = e;
        response = void 0;
      }
      attemptsCount = (context2.attemptsCount ?? 0) > attemptsCount ? context2.attemptsCount ?? 0 : attemptsCount + 1;
      context2.attemptsCount = attemptsCount;
      const { isCredentialsExpiredError: isCredentialsExpiredError2, retryable } = await retryDecider2(response, error3, context2);
      if (retryable) {
        context2.isCredentialsExpired = !!isCredentialsExpiredError2;
        if (!(abortSignal == null ? void 0 : abortSignal.aborted) && attemptsCount < maxAttempts) {
          const delay2 = computeDelay(attemptsCount);
          await cancellableSleep(delay2, abortSignal);
        }
        continue;
      } else {
        return handleTerminalErrorOrResponse();
      }
    }
    if (abortSignal == null ? void 0 : abortSignal.aborted) {
      throw new Error("Request aborted.");
    } else {
      return handleTerminalErrorOrResponse();
    }
  };
};
var cancellableSleep = (timeoutMs, abortSignal) => {
  if (abortSignal == null ? void 0 : abortSignal.aborted) {
    return Promise.resolve();
  }
  let timeoutId;
  let sleepPromiseResolveFn;
  const sleepPromise = new Promise((resolve) => {
    sleepPromiseResolveFn = resolve;
    timeoutId = setTimeout(resolve, timeoutMs);
  });
  abortSignal == null ? void 0 : abortSignal.addEventListener("abort", function cancelSleep(_) {
    clearTimeout(timeoutId);
    abortSignal == null ? void 0 : abortSignal.removeEventListener("abort", cancelSleep);
    sleepPromiseResolveFn();
  });
  return sleepPromise;
};
var addOrIncrementMetadataAttempts = (nextHandlerOutput, attempts) => {
  if (Object.prototype.toString.call(nextHandlerOutput) !== "[object Object]") {
    return;
  }
  nextHandlerOutput.$metadata = {
    ...nextHandlerOutput.$metadata ?? {},
    attempts
  };
};

// node_modules/@aws-amplify/core/dist/esm/utils/amplifyUuid/index.mjs
var amplifyUuid = v4_default;

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/amzSdkInvocationIdHeaderMiddleware.mjs
var amzSdkInvocationIdHeaderMiddlewareFactory = () => (next) => {
  return async function amzSdkInvocationIdHeaderMiddleware(request) {
    if (!request.headers[AMZ_SDK_INVOCATION_ID_HEADER]) {
      request.headers[AMZ_SDK_INVOCATION_ID_HEADER] = amplifyUuid();
    }
    return next(request);
  };
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/amzSdkRequestHeaderMiddleware.mjs
var amzSdkRequestHeaderMiddlewareFactory = ({ maxAttempts = DEFAULT_RETRY_ATTEMPTS }) => (next, context2) => {
  return async function amzSdkRequestHeaderMiddleware(request) {
    const attemptsCount = context2.attemptsCount ?? 0;
    request.headers[AMZ_SDK_REQUEST_HEADER] = `attempt=${attemptsCount + 1}; max=${maxAttempts}`;
    return next(request);
  };
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/userAgent/middleware.mjs
var userAgentMiddlewareFactory = ({ userAgentHeader = "x-amz-user-agent", userAgentValue = "" }) => (next) => {
  return async function userAgentMiddleware(request) {
    if (userAgentValue.trim().length === 0) {
      const result = await next(request);
      return result;
    } else {
      const headerName = userAgentHeader.toLowerCase();
      request.headers[headerName] = request.headers[headerName] ? `${request.headers[headerName]} ${userAgentValue}` : userAgentValue;
      const response = await next(request);
      return response;
    }
  };
};

// node_modules/@aws-amplify/core/dist/esm/clients/internal/composeTransferHandler.mjs
var composeTransferHandler = (coreHandler, middleware) => (request, options) => {
  const context2 = {};
  let composedHandler = (composeHandlerRequest) => coreHandler(composeHandlerRequest, options);
  for (let i = middleware.length - 1; i >= 0; i--) {
    const m = middleware[i];
    const resolvedMiddleware = m(options);
    composedHandler = resolvedMiddleware(composedHandler, context2);
  }
  return composedHandler(request);
};

// node_modules/@aws-amplify/core/dist/esm/clients/utils/memoization.mjs
var withMemoization = (payloadAccessor) => {
  let cached;
  return () => {
    if (!cached) {
      cached = payloadAccessor();
    }
    return cached;
  };
};

// node_modules/@aws-amplify/core/dist/esm/clients/handlers/fetch.mjs
var shouldSendBody = (method) => !["HEAD", "GET", "DELETE"].includes(method.toUpperCase());
var fetchTransferHandler = async ({ url, method, headers, body }, { abortSignal, cache, withCrossDomainCredentials }) => {
  var _a2;
  let resp;
  try {
    resp = await fetch(url, {
      method,
      headers,
      body: shouldSendBody(method) ? body : void 0,
      signal: abortSignal,
      cache,
      credentials: withCrossDomainCredentials ? "include" : "same-origin"
    });
  } catch (e) {
    if (e instanceof TypeError) {
      throw new AmplifyError({
        name: AmplifyErrorCode.NetworkError,
        message: "A network error has occurred.",
        underlyingError: e
      });
    }
    throw e;
  }
  const responseHeaders = {};
  (_a2 = resp.headers) == null ? void 0 : _a2.forEach((value, key) => {
    responseHeaders[key.toLowerCase()] = value;
  });
  const httpResponse = {
    statusCode: resp.status,
    headers: responseHeaders,
    body: null
  };
  const bodyWithMixin = Object.assign(resp.body ?? {}, {
    text: withMemoization(() => resp.text()),
    blob: withMemoization(() => resp.blob()),
    json: withMemoization(() => resp.json())
  });
  return {
    ...httpResponse,
    body: bodyWithMixin
  };
};

// node_modules/@aws-amplify/core/dist/esm/clients/handlers/aws/unauthenticated.mjs
var unauthenticatedHandler = composeTransferHandler(fetchTransferHandler, [
  userAgentMiddlewareFactory,
  amzSdkInvocationIdHeaderMiddlewareFactory,
  retryMiddlewareFactory,
  amzSdkRequestHeaderMiddlewareFactory
]);

// node_modules/@aws-amplify/core/dist/esm/utils/retry/constants.mjs
var MAX_DELAY_MS = 5 * 60 * 1e3;

// node_modules/@aws-amplify/core/dist/esm/utils/retry/jitteredBackoff.mjs
function jitteredBackoff(maxDelayMs = MAX_DELAY_MS) {
  const BASE_TIME_MS = 100;
  const JITTER_FACTOR = 100;
  return (attempt) => {
    const delay2 = 2 ** attempt * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay2 > maxDelayMs ? false : delay2;
  };
}

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/jitteredBackoff.mjs
var jitteredBackoff2 = (attempt) => {
  const delayFunction = jitteredBackoff(DEFAULT_MAX_DELAY_MS);
  const delay2 = delayFunction(attempt);
  return delay2 === false ? DEFAULT_MAX_DELAY_MS : delay2;
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/isClockSkewError.mjs
var CLOCK_SKEW_ERROR_CODES = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch",
  "BadRequestException"
  // API Gateway
];
var isClockSkewError = (errorCode) => !!errorCode && CLOCK_SKEW_ERROR_CODES.includes(errorCode);

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/defaultRetryDecider.mjs
var getRetryDecider = (errorParser) => async (response, error3) => {
  const parsedError = error3 ?? await errorParser(response) ?? void 0;
  const errorCode = (parsedError == null ? void 0 : parsedError.code) || (parsedError == null ? void 0 : parsedError.name);
  const statusCode = response == null ? void 0 : response.statusCode;
  const isRetryable = isConnectionError(error3) || isThrottlingError(statusCode, errorCode) || isClockSkewError(errorCode) || isServerSideError(statusCode, errorCode);
  return {
    retryable: isRetryable
  };
};
var THROTTLING_ERROR_CODES = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException"
];
var TIMEOUT_ERROR_CODES = [
  "TimeoutError",
  "RequestTimeout",
  "RequestTimeoutException"
];
var isThrottlingError = (statusCode, errorCode) => statusCode === 429 || !!errorCode && THROTTLING_ERROR_CODES.includes(errorCode);
var isConnectionError = (error3) => [
  AmplifyErrorCode.NetworkError,
  // TODO(vNext): unify the error code `ERR_NETWORK` used by the Storage XHR handler
  "ERR_NETWORK"
].includes(error3 == null ? void 0 : error3.name);
var isServerSideError = (statusCode, errorCode) => !!statusCode && [500, 502, 503, 504].includes(statusCode) || !!errorCode && TIMEOUT_ERROR_CODES.includes(errorCode);

// node_modules/@aws-amplify/core/dist/esm/utils/amplifyUrl/index.mjs
var AmplifyUrl = URL;
var AmplifyUrlSearchParams = URLSearchParams;

// node_modules/@aws-amplify/core/dist/esm/awsClients/cognitoIdentity/base.mjs
var SERVICE_NAME = "cognito-identity";
var endpointResolver = ({ region }) => ({
  url: new AmplifyUrl(`https://cognito-identity.${region}.${getDnsSuffix(region)}`)
});
var disableCacheMiddlewareFactory = () => (next) => async function disableCacheMiddleware(request) {
  request.headers["cache-control"] = "no-store";
  return next(request);
};
var cognitoIdentityTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddlewareFactory]);
var defaultConfig = {
  service: SERVICE_NAME,
  endpointResolver,
  retryDecider: getRetryDecider(parseJsonError),
  computeDelay: jitteredBackoff2,
  userAgentValue: getAmplifyUserAgent(),
  cache: "no-store"
};
observeFrameworkChanges(() => {
  defaultConfig.userAgentValue = getAmplifyUserAgent();
});
var getSharedHeaders = (operation) => ({
  "content-type": "application/x-amz-json-1.1",
  "x-amz-target": `AWSCognitoIdentityService.${operation}`
});
var buildHttpRpcRequest = ({ url }, headers, body) => ({
  headers,
  url,
  body,
  method: "POST"
});

// node_modules/@aws-amplify/core/dist/esm/awsClients/cognitoIdentity/getId.mjs
var getIdSerializer = (input2, endpoint) => {
  const headers = getSharedHeaders("GetId");
  const body = JSON.stringify(input2);
  return buildHttpRpcRequest(endpoint, headers, body);
};
var getIdDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    const error3 = await parseJsonError(response);
    throw error3;
  } else {
    const body = await parseJsonBody(response);
    return {
      IdentityId: body.IdentityId,
      $metadata: parseMetadata(response)
    };
  }
};
var getId = composeServiceApi(cognitoIdentityTransferHandler, getIdSerializer, getIdDeserializer, defaultConfig);

// node_modules/@aws-amplify/core/dist/esm/awsClients/cognitoIdentity/getCredentialsForIdentity.mjs
var getCredentialsForIdentitySerializer = (input2, endpoint) => {
  const headers = getSharedHeaders("GetCredentialsForIdentity");
  const body = JSON.stringify(input2);
  return buildHttpRpcRequest(endpoint, headers, body);
};
var getCredentialsForIdentityDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    const error3 = await parseJsonError(response);
    throw error3;
  } else {
    const body = await parseJsonBody(response);
    return {
      IdentityId: body.IdentityId,
      Credentials: deserializeCredentials(body.Credentials),
      $metadata: parseMetadata(response)
    };
  }
};
var deserializeCredentials = ({ AccessKeyId, SecretKey, SessionToken, Expiration } = {}) => {
  return {
    AccessKeyId,
    SecretKey,
    SessionToken,
    Expiration: Expiration && new Date(Expiration * 1e3)
  };
};
var getCredentialsForIdentity = composeServiceApi(cognitoIdentityTransferHandler, getCredentialsForIdentitySerializer, getCredentialsForIdentityDeserializer, defaultConfig);

// node_modules/@aws-amplify/core/dist/esm/errors/PlatformNotSupportedError.mjs
var PlatformNotSupportedError = class extends AmplifyError {
  constructor() {
    super({
      name: AmplifyErrorCode.PlatformNotSupported,
      message: "Function not supported on current platform"
    });
  }
};

// node_modules/@aws-amplify/core/dist/esm/storage/KeyValueStorage.mjs
var KeyValueStorage = class {
  constructor(storage) {
    this.storage = storage;
  }
  /**
   * This is used to set a specific item in storage
   * @param {string} key - the key for the item
   * @param {object} value - the value
   * @returns {string} value that was set
   */
  async setItem(key, value) {
    if (!this.storage)
      throw new PlatformNotSupportedError();
    this.storage.setItem(key, value);
  }
  /**
   * This is used to get a specific key from storage
   * @param {string} key - the key for the item
   * This is used to clear the storage
   * @returns {string} the data item
   */
  async getItem(key) {
    if (!this.storage)
      throw new PlatformNotSupportedError();
    return this.storage.getItem(key);
  }
  /**
   * This is used to remove an item from storage
   * @param {string} key - the key being set
   * @returns {string} value - value that was deleted
   */
  async removeItem(key) {
    if (!this.storage)
      throw new PlatformNotSupportedError();
    this.storage.removeItem(key);
  }
  /**
   * This is used to clear the storage
   * @returns {string} nothing
   */
  async clear() {
    if (!this.storage)
      throw new PlatformNotSupportedError();
    this.storage.clear();
  }
};

// node_modules/@aws-amplify/core/dist/esm/storage/InMemoryStorage.mjs
var InMemoryStorage = class {
  constructor() {
    this.storage = /* @__PURE__ */ new Map();
  }
  get length() {
    return this.storage.size;
  }
  key(index3) {
    if (index3 > this.length - 1) {
      return null;
    }
    return Array.from(this.storage.keys())[index3];
  }
  setItem(key, value) {
    this.storage.set(key, value);
  }
  getItem(key) {
    return this.storage.get(key) ?? null;
  }
  removeItem(key) {
    this.storage.delete(key);
  }
  clear() {
    this.storage.clear();
  }
};

// node_modules/@aws-amplify/core/dist/esm/storage/utils.mjs
var logger5 = new ConsoleLogger("CoreStorageUtils");
var getLocalStorageWithFallback = () => {
  try {
    if (typeof window !== "undefined" && window.localStorage) {
      return window.localStorage;
    }
  } catch (e) {
    logger5.info("localStorage not found. InMemoryStorage is used as a fallback.");
  }
  return new InMemoryStorage();
};
var getSessionStorageWithFallback = () => {
  try {
    if (typeof window !== "undefined" && window.sessionStorage) {
      window.sessionStorage.getItem("test");
      return window.sessionStorage;
    }
    throw new Error("sessionStorage is not defined");
  } catch (e) {
    logger5.info("sessionStorage not found. InMemoryStorage is used as a fallback.");
    return new InMemoryStorage();
  }
};

// node_modules/@aws-amplify/core/dist/esm/storage/DefaultStorage.mjs
var DefaultStorage = class extends KeyValueStorage {
  constructor() {
    super(getLocalStorageWithFallback());
  }
};

// node_modules/@aws-amplify/core/dist/esm/storage/SessionStorage.mjs
var SessionStorage = class extends KeyValueStorage {
  constructor() {
    super(getSessionStorageWithFallback());
  }
};

// node_modules/@aws-amplify/core/dist/esm/storage/SyncKeyValueStorage.mjs
var SyncKeyValueStorage = class {
  constructor(storage) {
    this._storage = storage;
  }
  get storage() {
    if (!this._storage)
      throw new PlatformNotSupportedError();
    return this._storage;
  }
  /**
   * This is used to set a specific item in storage
   * @param {string} key - the key for the item
   * @param {object} value - the value
   * @returns {string} value that was set
   */
  setItem(key, value) {
    this.storage.setItem(key, value);
  }
  /**
   * This is used to get a specific key from storage
   * @param {string} key - the key for the item
   * This is used to clear the storage
   * @returns {string} the data item
   */
  getItem(key) {
    return this.storage.getItem(key);
  }
  /**
   * This is used to remove an item from storage
   * @param {string} key - the key being set
   * @returns {string} value - value that was deleted
   */
  removeItem(key) {
    this.storage.removeItem(key);
  }
  /**
   * This is used to clear the storage
   * @returns {string} nothing
   */
  clear() {
    this.storage.clear();
  }
};

// node_modules/@aws-amplify/core/dist/esm/storage/SyncSessionStorage.mjs
var SyncSessionStorage = class extends SyncKeyValueStorage {
  constructor() {
    super(getSessionStorageWithFallback());
  }
};

// node_modules/js-cookie/dist/js.cookie.mjs
function assign4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target;
}
var defaultConverter = {
  read: function(value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
  },
  write: function(value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    );
  }
};
function init2(converter, defaultAttributes) {
  function set2(name2, value, attributes) {
    if (typeof document === "undefined") {
      return;
    }
    attributes = assign4({}, defaultAttributes, attributes);
    if (typeof attributes.expires === "number") {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }
    name2 = encodeURIComponent(name2).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
    var stringifiedAttributes = "";
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue;
      }
      stringifiedAttributes += "; " + attributeName;
      if (attributes[attributeName] === true) {
        continue;
      }
      stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
    }
    return document.cookie = name2 + "=" + converter.write(value, name2) + stringifiedAttributes;
  }
  function get2(name2) {
    if (typeof document === "undefined" || arguments.length && !name2) {
      return;
    }
    var cookies = document.cookie ? document.cookie.split("; ") : [];
    var jar = {};
    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split("=");
      var value = parts.slice(1).join("=");
      try {
        var found = decodeURIComponent(parts[0]);
        jar[found] = converter.read(value, found);
        if (name2 === found) {
          break;
        }
      } catch (e) {
      }
    }
    return name2 ? jar[name2] : jar;
  }
  return Object.create(
    {
      set: set2,
      get: get2,
      remove: function(name2, attributes) {
        set2(
          name2,
          "",
          assign4({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function(attributes) {
        return init2(this.converter, assign4({}, this.attributes, attributes));
      },
      withConverter: function(converter2) {
        return init2(assign4({}, this.converter, converter2), this.attributes);
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  );
}
var api = init2(defaultConverter, { path: "/" });

// node_modules/@aws-amplify/core/dist/esm/storage/CookieStorage.mjs
var CookieStorage = class {
  constructor(data = {}) {
    const { path: path2, domain, expires, sameSite, secure } = data;
    this.domain = domain;
    this.path = path2 || "/";
    this.expires = Object.prototype.hasOwnProperty.call(data, "expires") ? expires : 365;
    this.secure = Object.prototype.hasOwnProperty.call(data, "secure") ? secure : true;
    if (Object.prototype.hasOwnProperty.call(data, "sameSite")) {
      if (!sameSite || !["strict", "lax", "none"].includes(sameSite)) {
        throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
      }
      if (sameSite === "none" && !this.secure) {
        throw new Error("sameSite = None requires the Secure attribute in latest browser versions.");
      }
      this.sameSite = sameSite;
    }
  }
  async setItem(key, value) {
    api.set(key, value, this.getData());
  }
  async getItem(key) {
    const item = api.get(key);
    return item ?? null;
  }
  async removeItem(key) {
    api.remove(key, this.getData());
  }
  async clear() {
    const cookie = api.get();
    const promises = Object.keys(cookie).map((key) => this.removeItem(key));
    await Promise.all(promises);
  }
  getData() {
    return {
      path: this.path,
      expires: this.expires,
      domain: this.domain,
      secure: this.secure,
      ...this.sameSite && { sameSite: this.sameSite }
    };
  }
};

// node_modules/@aws-amplify/core/dist/esm/storage/index.mjs
var defaultStorage = new DefaultStorage();
var sessionStorage = new SessionStorage();
var syncSessionStorage = new SyncSessionStorage();
var sharedInMemoryStorage = new KeyValueStorage(new InMemoryStorage());

// node_modules/@aws-amplify/core/dist/esm/Cache/constants.mjs
var defaultConfig2 = {
  keyPrefix: "aws-amplify-cache",
  capacityInBytes: 1048576,
  itemMaxSize: 21e4,
  defaultTTL: 2592e5,
  defaultPriority: 5,
  warningThreshold: 0.8
};
var currentSizeKey = "CurSize";

// node_modules/@aws-amplify/core/dist/esm/Cache/utils/cacheHelpers.mjs
function getByteLength(str) {
  let ret = 0;
  ret = str.length;
  for (let i = str.length; i >= 0; i -= 1) {
    const charCode = str.charCodeAt(i);
    if (charCode > 127 && charCode <= 2047) {
      ret += 1;
    } else if (charCode > 2047 && charCode <= 65535) {
      ret += 2;
    }
    if (charCode >= 56320 && charCode <= 57343) {
      i -= 1;
    }
  }
  return ret;
}
function getCurrentTime() {
  const currentTime = /* @__PURE__ */ new Date();
  return currentTime.getTime();
}
var getCurrentSizeKey = (keyPrefix) => `${keyPrefix}${currentSizeKey}`;

// node_modules/@aws-amplify/core/dist/esm/Cache/utils/errorHelpers.mjs
var CacheErrorCode;
(function(CacheErrorCode2) {
  CacheErrorCode2["NoCacheItem"] = "NoCacheItem";
  CacheErrorCode2["NullNextNode"] = "NullNextNode";
  CacheErrorCode2["NullPreviousNode"] = "NullPreviousNode";
})(CacheErrorCode || (CacheErrorCode = {}));
var cacheErrorMap = {
  [CacheErrorCode.NoCacheItem]: {
    message: "Item not found in the cache storage."
  },
  [CacheErrorCode.NullNextNode]: {
    message: "Next node is null."
  },
  [CacheErrorCode.NullPreviousNode]: {
    message: "Previous node is null."
  }
};
var assert3 = createAssertionFunction(cacheErrorMap);

// node_modules/@aws-amplify/core/dist/esm/Cache/StorageCacheCommon.mjs
var logger6 = new ConsoleLogger("StorageCache");
var StorageCacheCommon = class {
  /**
   * Initialize the cache
   *
   * @param config - Custom configuration for this instance.
   */
  constructor({ config: config2, keyValueStorage }) {
    this.config = {
      ...defaultConfig2,
      ...config2
    };
    this.keyValueStorage = keyValueStorage;
    this.sanitizeConfig();
  }
  getModuleName() {
    return "Cache";
  }
  /**
   * Set custom configuration for the cache instance.
   *
   * @param config - customized configuration (without keyPrefix, which can't be changed)
   *
   * @return - the current configuration
   */
  configure(config2) {
    if (config2) {
      if (config2.keyPrefix) {
        logger6.warn("keyPrefix can not be re-configured on an existing Cache instance.");
      }
      this.config = {
        ...this.config,
        ...config2
      };
    }
    this.sanitizeConfig();
    return this.config;
  }
  /**
   * return the current size of the cache
   * @return {Promise}
   */
  async getCurrentCacheSize() {
    let size4 = await this.getStorage().getItem(getCurrentSizeKey(this.config.keyPrefix));
    if (!size4) {
      await this.getStorage().setItem(getCurrentSizeKey(this.config.keyPrefix), "0");
      size4 = "0";
    }
    return Number(size4);
  }
  /**
   * Set item into cache. You can put number, string, boolean or object.
   * The cache will first check whether has the same key.
   * If it has, it will delete the old item and then put the new item in
   * The cache will pop out items if it is full
   * You can specify the cache item options. The cache will abort and output a warning:
   * If the key is invalid
   * If the size of the item exceeds itemMaxSize.
   * If the value is undefined
   * If incorrect cache item configuration
   * If error happened with browser storage
   *
   * @param {String} key - the key of the item
   * @param {Object} value - the value of the item
   * @param {Object} [options] - optional, the specified meta-data
   *
   * @return {Promise}
   */
  async setItem(key, value, options) {
    logger6.debug(`Set item: key is ${key}, value is ${value} with options: ${options}`);
    if (!key || key === currentSizeKey) {
      logger6.warn(`Invalid key: should not be empty or reserved key: '${currentSizeKey}'`);
      return;
    }
    if (typeof value === "undefined") {
      logger6.warn(`The value of item should not be undefined!`);
      return;
    }
    const cacheItemOptions = {
      priority: (options == null ? void 0 : options.priority) !== void 0 ? options.priority : this.config.defaultPriority,
      expires: (options == null ? void 0 : options.expires) !== void 0 ? options.expires : this.config.defaultTTL + getCurrentTime()
    };
    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {
      logger6.warn(`Invalid parameter: priority due to out or range. It should be within 1 and 5.`);
      return;
    }
    const prefixedKey = `${this.config.keyPrefix}${key}`;
    const item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);
    if (item.byteSize > this.config.itemMaxSize) {
      logger6.warn(`Item with key: ${key} you are trying to put into is too big!`);
      return;
    }
    try {
      const val = await this.getStorage().getItem(prefixedKey);
      if (val) {
        await this.removeCacheItem(prefixedKey, JSON.parse(val).byteSize);
      }
      if (await this.isCacheFull(item.byteSize)) {
        const validKeys = await this.clearInvalidAndGetRemainingKeys();
        if (await this.isCacheFull(item.byteSize)) {
          const sizeToPop = await this.sizeToPop(item.byteSize);
          await this.popOutItems(validKeys, sizeToPop);
        }
      }
      return this.setCacheItem(prefixedKey, item);
    } catch (e) {
      logger6.warn(`setItem failed! ${e}`);
    }
  }
  /**
   * Get item from cache. It will return null if item doesn’t exist or it has been expired.
   * If you specified callback function in the options,
   * then the function will be executed if no such item in the cache
   * and finally put the return value into cache.
   * Please make sure the callback function will return the value you want to put into the cache.
   * The cache will abort output a warning:
   * If the key is invalid
   * If error happened with AsyncStorage
   *
   * @param {String} key - the key of the item
   * @param {Object} [options] - the options of callback function
   *
   * @return {Promise} - return a promise resolves to be the value of the item
   */
  async getItem(key, options) {
    logger6.debug(`Get item: key is ${key} with options ${options}`);
    let cached;
    if (!key || key === currentSizeKey) {
      logger6.warn(`Invalid key: should not be empty or reserved key: '${currentSizeKey}'`);
      return null;
    }
    const prefixedKey = `${this.config.keyPrefix}${key}`;
    try {
      cached = await this.getStorage().getItem(prefixedKey);
      if (cached != null) {
        if (await this.isExpired(prefixedKey)) {
          await this.removeCacheItem(prefixedKey, JSON.parse(cached).byteSize);
        } else {
          const item = await this.updateVisitedTime(JSON.parse(cached), prefixedKey);
          return item.data;
        }
      }
      if (options == null ? void 0 : options.callback) {
        const val = options.callback();
        if (val !== null) {
          await this.setItem(key, val, options);
        }
        return val;
      }
      return null;
    } catch (e) {
      logger6.warn(`getItem failed! ${e}`);
      return null;
    }
  }
  /**
   * remove item from the cache
   * The cache will abort output a warning:
   * If error happened with AsyncStorage
   * @param {String} key - the key of the item
   * @return {Promise}
   */
  async removeItem(key) {
    logger6.debug(`Remove item: key is ${key}`);
    if (!key || key === currentSizeKey) {
      logger6.warn(`Invalid key: should not be empty or reserved key: '${currentSizeKey}'`);
      return;
    }
    const prefixedKey = `${this.config.keyPrefix}${key}`;
    try {
      const val = await this.getStorage().getItem(prefixedKey);
      if (val) {
        await this.removeCacheItem(prefixedKey, JSON.parse(val).byteSize);
      }
    } catch (e) {
      logger6.warn(`removeItem failed! ${e}`);
    }
  }
  /**
   * Return all the keys owned by this cache.
   * Will return an empty array if error occurred.
   *
   * @return {Promise}
   */
  async getAllKeys() {
    try {
      return await this.getAllCacheKeys();
    } catch (e) {
      logger6.warn(`getAllkeys failed! ${e}`);
      return [];
    }
  }
  getStorage() {
    return this.keyValueStorage;
  }
  /**
   * check whether item is expired
   *
   * @param key - the key of the item
   *
   * @return true if the item is expired.
   */
  async isExpired(key) {
    const text2 = await this.getStorage().getItem(key);
    assert3(text2 !== null, CacheErrorCode.NoCacheItem, `Key: ${key}`);
    const item = JSON.parse(text2);
    if (getCurrentTime() >= item.expires) {
      return true;
    }
    return false;
  }
  /**
   * delete item from cache
   *
   * @param prefixedKey - the key of the item
   * @param size - optional, the byte size of the item
   */
  async removeCacheItem(prefixedKey, size4) {
    const item = await this.getStorage().getItem(prefixedKey);
    assert3(item !== null, CacheErrorCode.NoCacheItem, `Key: ${prefixedKey}`);
    const itemSize = size4 ?? JSON.parse(item).byteSize;
    await this.decreaseCurrentSizeInBytes(itemSize);
    try {
      await this.getStorage().removeItem(prefixedKey);
    } catch (removeItemError) {
      await this.increaseCurrentSizeInBytes(itemSize);
      logger6.error(`Failed to remove item: ${removeItemError}`);
    }
  }
  /**
   * produce a JSON object with meta-data and data value
   * @param value - the value of the item
   * @param options - optional, the specified meta-data
   *
   * @return - the item which has the meta-data and the value
   */
  fillCacheItem(key, value, options) {
    const item = {
      key,
      data: value,
      timestamp: getCurrentTime(),
      visitedTime: getCurrentTime(),
      priority: options.priority ?? 0,
      expires: options.expires ?? 0,
      type: typeof value,
      byteSize: 0
    };
    item.byteSize = getByteLength(JSON.stringify(item));
    item.byteSize = getByteLength(JSON.stringify(item));
    return item;
  }
  sanitizeConfig() {
    if (this.config.itemMaxSize > this.config.capacityInBytes) {
      logger6.error("Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.");
      this.config.itemMaxSize = defaultConfig2.itemMaxSize;
    }
    if (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {
      logger6.error("Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.");
      this.config.defaultPriority = defaultConfig2.defaultPriority;
    }
    if (Number(this.config.warningThreshold) > 1 || Number(this.config.warningThreshold) < 0) {
      logger6.error("Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.");
      this.config.warningThreshold = defaultConfig2.warningThreshold;
    }
    const cacheLimit = 5 * 1024 * 1024;
    if (this.config.capacityInBytes > cacheLimit) {
      logger6.error("Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.");
      this.config.capacityInBytes = defaultConfig2.capacityInBytes;
    }
  }
  /**
   * increase current size of the cache
   *
   * @param amount - the amount of the cache szie which need to be increased
   */
  async increaseCurrentSizeInBytes(amount) {
    const size4 = await this.getCurrentCacheSize();
    await this.getStorage().setItem(getCurrentSizeKey(this.config.keyPrefix), (size4 + amount).toString());
  }
  /**
   * decrease current size of the cache
   *
   * @param amount - the amount of the cache size which needs to be decreased
   */
  async decreaseCurrentSizeInBytes(amount) {
    const size4 = await this.getCurrentCacheSize();
    await this.getStorage().setItem(getCurrentSizeKey(this.config.keyPrefix), (size4 - amount).toString());
  }
  /**
   * update the visited time if item has been visited
   *
   * @param item - the item which need to be updated
   * @param prefixedKey - the key of the item
   *
   * @return the updated item
   */
  async updateVisitedTime(item, prefixedKey) {
    item.visitedTime = getCurrentTime();
    await this.getStorage().setItem(prefixedKey, JSON.stringify(item));
    return item;
  }
  /**
   * put item into cache
   *
   * @param prefixedKey - the key of the item
   * @param itemData - the value of the item
   * @param itemSizeInBytes - the byte size of the item
   */
  async setCacheItem(prefixedKey, item) {
    await this.increaseCurrentSizeInBytes(item.byteSize);
    try {
      await this.getStorage().setItem(prefixedKey, JSON.stringify(item));
    } catch (setItemErr) {
      await this.decreaseCurrentSizeInBytes(item.byteSize);
      logger6.error(`Failed to set item ${setItemErr}`);
    }
  }
  /**
   * total space needed when poping out items
   *
   * @param itemSize
   *
   * @return total space needed
   */
  async sizeToPop(itemSize) {
    const cur = await this.getCurrentCacheSize();
    const spaceItemNeed = cur + itemSize - this.config.capacityInBytes;
    const cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;
    return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;
  }
  /**
   * see whether cache is full
   *
   * @param itemSize
   *
   * @return true if cache is full
   */
  async isCacheFull(itemSize) {
    const cur = await this.getCurrentCacheSize();
    return itemSize + cur > this.config.capacityInBytes;
  }
  /**
   * get all the items we have, sort them by their priority,
   * if priority is same, sort them by their last visited time
   * pop out items from the low priority (5 is the lowest)
   * @private
   * @param keys - all the keys in this cache
   * @param sizeToPop - the total size of the items which needed to be poped out
   */
  async popOutItems(keys, sizeToPop) {
    const items = [];
    let remainedSize = sizeToPop;
    for (const key of keys) {
      const val = await this.getStorage().getItem(key);
      if (val != null) {
        const item = JSON.parse(val);
        items.push(item);
      }
    }
    items.sort((a, b) => {
      if (a.priority > b.priority) {
        return -1;
      } else if (a.priority < b.priority) {
        return 1;
      } else {
        if (a.visitedTime < b.visitedTime) {
          return -1;
        } else
          return 1;
      }
    });
    for (const item of items) {
      await this.removeCacheItem(item.key, item.byteSize);
      remainedSize -= item.byteSize;
      if (remainedSize <= 0) {
        return;
      }
    }
  }
  /**
   * Scan the storage and combine the following operations for efficiency
   *   1. Clear out all expired keys owned by this cache, not including the size key.
   *   2. Return the remaining keys.
   *
   * @return The remaining valid keys
   */
  async clearInvalidAndGetRemainingKeys() {
    const remainingKeys = [];
    const keys = await this.getAllCacheKeys({
      omitSizeKey: true
    });
    for (const key of keys) {
      if (await this.isExpired(key)) {
        await this.removeCacheItem(key);
      } else {
        remainingKeys.push(key);
      }
    }
    return remainingKeys;
  }
  /**
   * clear the entire cache
   * The cache will abort and output a warning if error occurs
   * @return {Promise}
   */
  async clear() {
    logger6.debug(`Clear Cache`);
    try {
      const keys = await this.getAllKeys();
      for (const key of keys) {
        const prefixedKey = `${this.config.keyPrefix}${key}`;
        await this.getStorage().removeItem(prefixedKey);
      }
    } catch (e) {
      logger6.warn(`clear failed! ${e}`);
    }
  }
};

// node_modules/@aws-amplify/core/dist/esm/Cache/StorageCache.mjs
var logger7 = new ConsoleLogger("StorageCache");
var StorageCache = class _StorageCache extends StorageCacheCommon {
  /**
   * initialize the cache
   * @param config - the configuration of the cache
   */
  constructor(config2) {
    const storage = getLocalStorageWithFallback();
    super({ config: config2, keyValueStorage: new KeyValueStorage(storage) });
    this.storage = storage;
    this.getItem = this.getItem.bind(this);
    this.setItem = this.setItem.bind(this);
    this.removeItem = this.removeItem.bind(this);
  }
  async getAllCacheKeys(options) {
    const { omitSizeKey } = options ?? {};
    const keys = [];
    for (let i = 0; i < this.storage.length; i++) {
      const key = this.storage.key(i);
      if (omitSizeKey && key === getCurrentSizeKey(this.config.keyPrefix)) {
        continue;
      }
      if (key == null ? void 0 : key.startsWith(this.config.keyPrefix)) {
        keys.push(key.substring(this.config.keyPrefix.length));
      }
    }
    return keys;
  }
  /**
   * Return a new instance of cache with customized configuration.
   * @param {Object} config - the customized configuration
   * @return {Object} - the new instance of Cache
   */
  createInstance(config2) {
    if (!config2.keyPrefix || config2.keyPrefix === defaultConfig2.keyPrefix) {
      logger7.error("invalid keyPrefix, setting keyPrefix with timeStamp");
      config2.keyPrefix = getCurrentTime.toString();
    }
    return new _StorageCache(config2);
  }
};

// node_modules/@aws-amplify/core/dist/esm/Cache/index.mjs
var Cache = new StorageCache();

// node_modules/@aws-amplify/core/dist/esm/I18n/I18n.mjs
var logger8 = new ConsoleLogger("I18n");
var I18n$1 = class I18n {
  constructor() {
    this._options = null;
    this._lang = null;
    this._dict = {};
  }
  /**
   * Sets the default language from the configuration when required.
   */
  setDefaultLanguage() {
    if (!this._lang && typeof window !== "undefined" && window && window.navigator) {
      this._lang = window.navigator.language;
    }
    logger8.debug(this._lang);
  }
  /**
   * @method
   * Explicitly setting language
   * @param {String} lang
   */
  setLanguage(lang) {
    this._lang = lang;
  }
  /**
   * @method
   * Get value
   * @param {String} key
   * @param {String} defVal - Default value
   */
  get(key, defVal = void 0) {
    this.setDefaultLanguage();
    if (!this._lang) {
      return typeof defVal !== "undefined" ? defVal : key;
    }
    const lang = this._lang;
    let val = this.getByLanguage(key, lang);
    if (val) {
      return val;
    }
    if (lang.indexOf("-") > 0) {
      val = this.getByLanguage(key, lang.split("-")[0]);
    }
    if (val) {
      return val;
    }
    return typeof defVal !== "undefined" ? defVal : key;
  }
  /**
   * @method
   * Get value according to specified language
   * @param {String} key
   * @param {String} language - Specified langurage to be used
   * @param {String} defVal - Default value
   */
  getByLanguage(key, language, defVal = null) {
    if (!language) {
      return defVal;
    }
    const langDict = this._dict[language];
    if (!langDict) {
      return defVal;
    }
    return langDict[key];
  }
  /**
   * @method
   * Add vocabularies for one language
   * @param {String} language - Language of the dictionary
   * @param {Object} vocabularies - Object that has key-value as dictionary entry
   */
  putVocabulariesForLanguage(language, vocabularies) {
    let langDict = this._dict[language];
    if (!langDict) {
      langDict = this._dict[language] = {};
    }
    this._dict[language] = { ...langDict, ...vocabularies };
  }
  /**
   * @method
   * Add vocabularies for one language
   * @param {Object} vocabularies - Object that has language as key,
   *                                vocabularies of each language as value
   */
  putVocabularies(vocabularies) {
    Object.keys(vocabularies).forEach((key) => {
      this.putVocabulariesForLanguage(key, vocabularies[key]);
    });
  }
};

// node_modules/@aws-amplify/core/dist/esm/I18n/errorHelpers.mjs
var I18nErrorCode;
(function(I18nErrorCode2) {
  I18nErrorCode2["NotConfigured"] = "NotConfigured";
})(I18nErrorCode || (I18nErrorCode = {}));
var i18nErrorMap = {
  [I18nErrorCode.NotConfigured]: {
    message: "i18n is not configured."
  }
};
var assert4 = createAssertionFunction(i18nErrorMap);

// node_modules/@aws-amplify/core/dist/esm/I18n/index.mjs
var logger9 = new ConsoleLogger("I18n");
var _config = { language: null };
var _i18n = null;
var I18n2 = class _I18n {
  /**
   * @static
   * @method
   * Configure I18n part
   * @param {Object} config - Configuration of the I18n
   */
  static configure(config2) {
    logger9.debug("configure I18n");
    if (!config2) {
      return _config;
    }
    _config = Object.assign({}, _config, config2.I18n || config2);
    _I18n.createInstance();
    return _config;
  }
  static getModuleName() {
    return "I18n";
  }
  /**
   * @static
   * @method
   * Create an instance of I18n for the library
   */
  static createInstance() {
    logger9.debug("create I18n instance");
    if (_i18n) {
      return;
    }
    _i18n = new I18n$1();
  }
  /**
   * @static @method
   * Explicitly setting language
   * @param {String} lang
   */
  static setLanguage(lang) {
    _I18n.checkConfig();
    assert4(!!_i18n, I18nErrorCode.NotConfigured);
    _i18n.setLanguage(lang);
  }
  /**
   * @static @method
   * Get value
   * @param {String} key
   * @param {String} defVal - Default value
   */
  static get(key, defVal) {
    if (!_I18n.checkConfig()) {
      return typeof defVal === "undefined" ? key : defVal;
    }
    assert4(!!_i18n, I18nErrorCode.NotConfigured);
    return _i18n.get(key, defVal);
  }
  /**
   * @static
   * @method
   * Add vocabularies for one language
   * @param {String} language - Language of the dictionary
   * @param {Object} vocabularies - Object that has key-value as dictionary entry
   */
  static putVocabulariesForLanguage(language, vocabularies) {
    _I18n.checkConfig();
    assert4(!!_i18n, I18nErrorCode.NotConfigured);
    _i18n.putVocabulariesForLanguage(language, vocabularies);
  }
  /**
   * @static
   * @method
   * Add vocabularies for one language
   * @param {Object} vocabularies - Object that has language as key,
   *                                vocabularies of each language as value
   */
  static putVocabularies(vocabularies) {
    _I18n.checkConfig();
    assert4(!!_i18n, I18nErrorCode.NotConfigured);
    _i18n.putVocabularies(vocabularies);
  }
  static checkConfig() {
    if (!_i18n) {
      _I18n.createInstance();
    }
    return true;
  }
};
I18n2.createInstance();

// node_modules/@aws-amplify/core/dist/esm/awsClients/pinpoint/base.mjs
var SERVICE_NAME2 = "mobiletargeting";
var endpointResolver2 = ({ region }) => ({
  url: new AmplifyUrl(`https://pinpoint.${region}.${getDnsSuffix(region)}`)
});
var defaultConfig3 = {
  service: SERVICE_NAME2,
  endpointResolver: endpointResolver2,
  retryDecider: getRetryDecider(parseJsonError),
  computeDelay: jitteredBackoff2,
  userAgentValue: getAmplifyUserAgent()
};
var getSharedHeaders2 = () => ({
  "content-type": "application/json"
});

// node_modules/@aws-amplify/core/dist/esm/awsClients/pinpoint/errorHelpers.mjs
var PinpointValidationErrorCode;
(function(PinpointValidationErrorCode2) {
  PinpointValidationErrorCode2["NoAppId"] = "NoAppId";
})(PinpointValidationErrorCode || (PinpointValidationErrorCode = {}));
var pinpointValidationErrorMap = {
  [PinpointValidationErrorCode.NoAppId]: {
    message: "Missing application id."
  }
};
var assert5 = createAssertionFunction(pinpointValidationErrorMap);

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getSignedHeaders.mjs
var getSignedHeaders = (headers) => Object.keys(headers).map((key) => key.toLowerCase()).sort().join(";");

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/constants.mjs
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var HOST_HEADER = "host";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var KEY_TYPE_IDENTIFIER = "aws4_request";
var SHA256_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var SIGNATURE_IDENTIFIER = "AWS4";
var EMPTY_HASH = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCredentialScope.mjs
var getCredentialScope = (date, region, service) => `${date}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getFormattedDates.mjs
var getFormattedDates = (date) => {
  const longDate = date.toISOString().replace(/[:-]|\.\d{3}/g, "");
  return {
    longDate,
    shortDate: longDate.slice(0, 8)
  };
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getSigningValues.mjs
var getSigningValues = ({ credentials, signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService, uriEscapePath = true }) => {
  const { accessKeyId, secretAccessKey, sessionToken } = credentials;
  const { longDate, shortDate } = getFormattedDates(signingDate);
  const credentialScope = getCredentialScope(shortDate, signingRegion, signingService);
  return {
    accessKeyId,
    credentialScope,
    longDate,
    secretAccessKey,
    sessionToken,
    shortDate,
    signingRegion,
    signingService,
    uriEscapePath
  };
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/dataHashHelpers.mjs
var getHashedData = (key, data) => {
  const sha256 = new Sha256(key ?? void 0);
  sha256.update(data);
  const hashedData = sha256.digestSync();
  return hashedData;
};
var getHashedDataAsHex = (key, data) => {
  const hashedData = getHashedData(key, data);
  return toHex(hashedData);
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalHeaders.mjs
var getCanonicalHeaders = (headers) => Object.entries(headers).map(([key, value]) => ({
  key: key.toLowerCase(),
  value: (value == null ? void 0 : value.trim().replace(/\s+/g, " ")) ?? ""
})).sort((a, b) => a.key < b.key ? -1 : 1).map((entry) => `${entry.key}:${entry.value}
`).join("");

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalQueryString.mjs
var getCanonicalQueryString = (searchParams) => Array.from(searchParams).sort(([keyA, valA], [keyB, valB]) => {
  if (keyA === keyB) {
    return valA < valB ? -1 : 1;
  }
  return keyA < keyB ? -1 : 1;
}).map(([key, val]) => `${escapeUri(key)}=${escapeUri(val)}`).join("&");
var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalUri.mjs
var getCanonicalUri = (pathname, uriEscapePath = true) => pathname ? uriEscapePath ? encodeURIComponent(pathname).replace(/%2F/g, "/") : pathname : "/";

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getHashedPayload.mjs
var getHashedPayload = (body) => {
  if (body == null) {
    return EMPTY_HASH;
  }
  if (isSourceData(body)) {
    const hashedData = getHashedDataAsHex(null, body);
    return hashedData;
  }
  return UNSIGNED_PAYLOAD;
};
var isSourceData = (body) => typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body);
var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalRequest.mjs
var getCanonicalRequest = ({ body, headers, method, url }, uriEscapePath = true) => [
  method,
  getCanonicalUri(url.pathname, uriEscapePath),
  getCanonicalQueryString(url.searchParams),
  getCanonicalHeaders(headers),
  getSignedHeaders(headers),
  getHashedPayload(body)
].join("\n");

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getSigningKey.mjs
var getSigningKey = (secretAccessKey, date, region, service) => {
  const key = `${SIGNATURE_IDENTIFIER}${secretAccessKey}`;
  const dateKey = getHashedData(key, date);
  const regionKey = getHashedData(dateKey, region);
  const serviceKey = getHashedData(regionKey, service);
  const signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);
  return signingKey;
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getStringToSign.mjs
var getStringToSign = (date, credentialScope, hashedRequest) => [SHA256_ALGORITHM_IDENTIFIER, date, credentialScope, hashedRequest].join("\n");

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getSignature.mjs
var getSignature = (request, { credentialScope, longDate, secretAccessKey, shortDate, signingRegion, signingService, uriEscapePath }) => {
  const canonicalRequest = getCanonicalRequest(request, uriEscapePath);
  const hashedRequest = getHashedDataAsHex(null, canonicalRequest);
  const stringToSign = getStringToSign(longDate, credentialScope, hashedRequest);
  const signature = getHashedDataAsHex(getSigningKey(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);
  return signature;
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/signRequest.mjs
var signRequest = (request, options) => {
  const signingValues = getSigningValues(options);
  const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;
  const headers = { ...request.headers };
  headers[HOST_HEADER] = request.url.host;
  headers[AMZ_DATE_HEADER] = longDate;
  if (sessionToken) {
    headers[TOKEN_HEADER] = sessionToken;
  }
  const requestToSign = { ...request, headers };
  const signature = getSignature(requestToSign, signingValues);
  const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;
  const signedHeadersEntry = `SignedHeaders=${getSignedHeaders(headers)}`;
  const signatureEntry = `Signature=${signature}`;
  headers[AUTH_HEADER] = `${SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;
  return requestToSign;
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/utils/getSkewCorrectedDate.mjs
var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/utils/isClockSkewed.mjs
var SKEW_WINDOW = 5 * 60 * 1e3;
var isClockSkewed = (clockTimeInMilliseconds, clockOffsetInMilliseconds) => Math.abs(getSkewCorrectedDate(clockOffsetInMilliseconds).getTime() - clockTimeInMilliseconds) >= SKEW_WINDOW;

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/utils/getUpdatedSystemClockOffset.mjs
var getUpdatedSystemClockOffset = (clockTimeInMilliseconds, currentSystemClockOffset) => {
  if (isClockSkewed(clockTimeInMilliseconds, currentSystemClockOffset)) {
    return clockTimeInMilliseconds - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/middleware.mjs
var signingMiddlewareFactory = ({ credentials, region, service, uriEscapePath = true }) => {
  let currentSystemClockOffset;
  return (next, context2) => async function signingMiddleware(request) {
    currentSystemClockOffset = currentSystemClockOffset ?? 0;
    const signRequestOptions = {
      credentials: typeof credentials === "function" ? await credentials({
        forceRefresh: !!(context2 == null ? void 0 : context2.isCredentialsExpired)
      }) : credentials,
      signingDate: getSkewCorrectedDate(currentSystemClockOffset),
      signingRegion: region,
      signingService: service,
      uriEscapePath
    };
    const signedRequest = await signRequest(request, signRequestOptions);
    const response = await next(signedRequest);
    const dateString = getDateHeader(response);
    if (dateString) {
      currentSystemClockOffset = getUpdatedSystemClockOffset(Date.parse(dateString), currentSystemClockOffset);
    }
    return response;
  };
};
var getDateHeader = ({ headers } = {}) => (headers == null ? void 0 : headers.date) ?? (headers == null ? void 0 : headers.Date) ?? (headers == null ? void 0 : headers["x-amz-date"]);

// node_modules/@aws-amplify/core/dist/esm/clients/handlers/aws/authenticated.mjs
var authenticatedHandler = composeTransferHandler(fetchTransferHandler, [
  userAgentMiddlewareFactory,
  amzSdkInvocationIdHeaderMiddlewareFactory,
  retryMiddlewareFactory,
  amzSdkRequestHeaderMiddlewareFactory,
  signingMiddlewareFactory
]);

// node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/utils/extendedEncodeURIComponent.mjs
var extendedEncodeURIComponent = (uri) => {
  const extendedCharacters = /[!'()*]/g;
  return encodeURIComponent(uri).replace(extendedCharacters, hexEncode2);
};
var hexEncode2 = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;

// node_modules/@aws-amplify/core/dist/esm/awsClients/pinpoint/updateEndpoint.mjs
var updateEndpointSerializer = ({ ApplicationId = "", EndpointId = "", EndpointRequest }, endpoint) => {
  const headers = getSharedHeaders2();
  const url = new AmplifyUrl(endpoint.url);
  url.pathname = `v1/apps/${extendedEncodeURIComponent(ApplicationId)}/endpoints/${extendedEncodeURIComponent(EndpointId)}`;
  const body = JSON.stringify(EndpointRequest);
  return { method: "PUT", headers, url, body };
};
var updateEndpointDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    const error3 = await parseJsonError(response);
    throw error3;
  } else {
    const { Message: Message2, RequestID } = await parseJsonBody(response);
    return {
      MessageBody: {
        Message: Message2,
        RequestID
      },
      $metadata: parseMetadata(response)
    };
  }
};
var updateEndpoint = composeServiceApi(authenticatedHandler, updateEndpointSerializer, updateEndpointDeserializer, defaultConfig3);

// node_modules/@aws-amplify/core/dist/esm/providers/pinpoint/utils/constants.mjs
var FLUSH_INTERVAL = 5 * 1e3;

// node_modules/@aws-amplify/core/dist/esm/awsClients/pinpoint/putEvents.mjs
var putEventsSerializer = ({ ApplicationId, EventsRequest }, endpoint) => {
  assert5(!!ApplicationId, PinpointValidationErrorCode.NoAppId);
  const headers = getSharedHeaders2();
  const url = new AmplifyUrl(endpoint.url);
  url.pathname = `v1/apps/${extendedEncodeURIComponent(ApplicationId)}/events`;
  const body = JSON.stringify(EventsRequest ?? {});
  return { method: "POST", headers, url, body };
};
var putEventsDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    const error3 = await parseJsonError(response);
    throw error3;
  } else {
    const { Results } = await parseJsonBody(response);
    return {
      EventsResponse: { Results },
      $metadata: parseMetadata(response)
    };
  }
};
var putEvents = composeServiceApi(authenticatedHandler, putEventsSerializer, putEventsDeserializer, defaultConfig3);

// node_modules/@aws-amplify/core/dist/esm/providers/pinpoint/utils/PinpointEventBuffer.mjs
var logger10 = new ConsoleLogger("PinpointEventBuffer");

// node_modules/@aws-amplify/core/dist/esm/providers/pinpoint/types/errors.mjs
var UpdateEndpointException;
(function(UpdateEndpointException2) {
  UpdateEndpointException2["BadRequestException"] = "BadRequestException";
  UpdateEndpointException2["ForbiddenException"] = "ForbiddenException";
  UpdateEndpointException2["InternalServerErrorException"] = "InternalServerErrorException";
  UpdateEndpointException2["MethodNotAllowedException"] = "MethodNotAllowedException";
  UpdateEndpointException2["NotFoundException"] = "NotFoundException";
  UpdateEndpointException2["PayloadTooLargeException"] = "PayloadTooLargeException";
  UpdateEndpointException2["TooManyRequestsException"] = "TooManyRequestsException";
})(UpdateEndpointException || (UpdateEndpointException = {}));

// node_modules/@aws-amplify/core/dist/esm/ServiceWorker/errorHelpers.mjs
var ServiceWorkerErrorCode;
(function(ServiceWorkerErrorCode2) {
  ServiceWorkerErrorCode2["UndefinedInstance"] = "UndefinedInstance";
  ServiceWorkerErrorCode2["UndefinedRegistration"] = "UndefinedRegistration";
  ServiceWorkerErrorCode2["Unavailable"] = "Unavailable";
})(ServiceWorkerErrorCode || (ServiceWorkerErrorCode = {}));
var serviceWorkerErrorMap = {
  [ServiceWorkerErrorCode.UndefinedInstance]: {
    message: "Service Worker instance is undefined."
  },
  [ServiceWorkerErrorCode.UndefinedRegistration]: {
    message: "Service Worker registration is undefined."
  },
  [ServiceWorkerErrorCode.Unavailable]: {
    message: "Service Worker not available."
  }
};
var assert6 = createAssertionFunction(serviceWorkerErrorMap);

// node_modules/@aws-amplify/core/dist/esm/utils/generateRandomString.mjs
var generateRandomString = (length) => {
  const STATE_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  const result = [];
  const randomNums = new Uint8Array(length);
  getCrypto().getRandomValues(randomNums);
  for (const num of randomNums) {
    result.push(STATE_CHARSET[num % STATE_CHARSET.length]);
  }
  return result.join("");
};

// node_modules/@aws-amplify/core/dist/esm/utils/urlSafeDecode.mjs
function urlSafeDecode(hex) {
  const matchArr = hex.match(/.{2}/g) || [];
  return matchArr.map((char) => String.fromCharCode(parseInt(char, 16))).join("");
}

// node_modules/@aws-amplify/core/dist/esm/utils/urlSafeEncode.mjs
function urlSafeEncode(str) {
  return str.split("").map((char) => char.charCodeAt(0).toString(16).padStart(2, "0")).join("");
}

// node_modules/@aws-amplify/core/dist/esm/utils/deDupeAsyncFunction.mjs
var deDupeAsyncFunction = (asyncFunction) => {
  let inflightPromise;
  return async (...args) => {
    if (inflightPromise)
      return inflightPromise;
    inflightPromise = new Promise((resolve, reject) => {
      asyncFunction(...args).then((result) => {
        resolve(result);
      }).catch((error3) => {
        reject(error3);
      }).finally(() => {
        inflightPromise = void 0;
      });
    });
    return inflightPromise;
  };
};

// node_modules/@aws-amplify/core/dist/esm/utils/isTokenExpired.mjs
function isTokenExpired({ expiresAt, clockDrift, tolerance = 5e3 }) {
  const currentTime = Date.now();
  return currentTime + clockDrift + tolerance > expiresAt;
}

// node_modules/@aws-amplify/core/dist/esm/utils/deviceName/getDeviceName.mjs
var getDeviceName = async () => {
  const { userAgentData } = navigator;
  if (!userAgentData)
    return navigator.userAgent;
  const { platform: platform2 = "", platformVersion = "", model = "", architecture = "", fullVersionList = [] } = await userAgentData.getHighEntropyValues([
    "platform",
    "platformVersion",
    "architecture",
    "model",
    "fullVersionList"
  ]);
  const versionList = fullVersionList.map((v) => `${v.brand}/${v.version}`).join(";");
  const deviceName = [
    platform2,
    platformVersion,
    architecture,
    model,
    platform2,
    versionList
  ].filter((value) => value).join(" ");
  return deviceName || navigator.userAgent;
};

// node_modules/@aws-amplify/core/dist/esm/Signer/DateUtils.mjs
var FIVE_MINUTES_IN_MS = 1e3 * 60 * 5;

// node_modules/@aws-amplify/core/dist/esm/utils/convert/base64/bytesToString.mjs
function bytesToString(input2) {
  return Array.from(input2, (byte) => String.fromCodePoint(byte)).join("");
}

// node_modules/@aws-amplify/core/dist/esm/utils/convert/base64/base64Encoder.mjs
var base64Encoder = {
  /**
   * Convert input to base64-encoded string
   * @param input - string to convert to base64
   * @param options - encoding options that can optionally produce a base64url string
   * @returns base64-encoded string
   */
  convert(input2, options = {
    urlSafe: false,
    skipPadding: false
  }) {
    const inputStr = typeof input2 === "string" ? input2 : bytesToString(input2);
    let encodedStr = getBtoa()(inputStr);
    if (options.urlSafe) {
      encodedStr = encodedStr.replace(/\+/g, "-").replace(/\//g, "_");
    }
    if (options.skipPadding) {
      encodedStr = encodedStr.replace(/=/g, "");
    }
    return encodedStr;
  }
};

// node_modules/@aws-amplify/core/dist/esm/utils/cryptoSecureRandomInt.mjs
function cryptoSecureRandomInt() {
  const crypto2 = getCrypto();
  const randomResult = crypto2.getRandomValues(new Uint32Array(1))[0];
  return randomResult;
}

// node_modules/@aws-amplify/core/dist/esm/utils/WordArray.mjs
function hexStringify(wordArray) {
  const { words } = wordArray;
  const { sigBytes } = wordArray;
  const hexChars = [];
  for (let i = 0; i < sigBytes; i++) {
    const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
    hexChars.push((bite >>> 4).toString(16));
    hexChars.push((bite & 15).toString(16));
  }
  return hexChars.join("");
}
var WordArray = class _WordArray {
  constructor(words, sigBytes) {
    this.words = [];
    let Words = words;
    Words = this.words = Words || [];
    if (sigBytes !== void 0) {
      this.sigBytes = sigBytes;
    } else {
      this.sigBytes = Words.length * 4;
    }
  }
  random(nBytes) {
    const words = [];
    for (let i = 0; i < nBytes; i += 4) {
      words.push(cryptoSecureRandomInt());
    }
    return new _WordArray(words, nBytes);
  }
  toString() {
    return hexStringify(this);
  }
};

// node_modules/@aws-amplify/auth/dist/esm/errors/types/validation.mjs
var AuthValidationErrorCode;
(function(AuthValidationErrorCode2) {
  AuthValidationErrorCode2["EmptySignInUsername"] = "EmptySignInUsername";
  AuthValidationErrorCode2["EmptySignInPassword"] = "EmptySignInPassword";
  AuthValidationErrorCode2["CustomAuthSignInPassword"] = "CustomAuthSignInPassword";
  AuthValidationErrorCode2["EmptySignUpUsername"] = "EmptySignUpUsername";
  AuthValidationErrorCode2["EmptySignUpPassword"] = "EmptySignUpPassword";
  AuthValidationErrorCode2["EmptyConfirmSignUpUsername"] = "EmptyConfirmSignUpUsername";
  AuthValidationErrorCode2["EmptyConfirmSignUpCode"] = "EmptyConfirmSignUpCode";
  AuthValidationErrorCode2["EmptyResendSignUpCodeUsername"] = "EmptyresendSignUpCodeUsername";
  AuthValidationErrorCode2["EmptyChallengeResponse"] = "EmptyChallengeResponse";
  AuthValidationErrorCode2["EmptyConfirmResetPasswordUsername"] = "EmptyConfirmResetPasswordUsername";
  AuthValidationErrorCode2["EmptyConfirmResetPasswordNewPassword"] = "EmptyConfirmResetPasswordNewPassword";
  AuthValidationErrorCode2["EmptyConfirmResetPasswordConfirmationCode"] = "EmptyConfirmResetPasswordConfirmationCode";
  AuthValidationErrorCode2["EmptyResetPasswordUsername"] = "EmptyResetPasswordUsername";
  AuthValidationErrorCode2["EmptyVerifyTOTPSetupCode"] = "EmptyVerifyTOTPSetupCode";
  AuthValidationErrorCode2["EmptyConfirmUserAttributeCode"] = "EmptyConfirmUserAttributeCode";
  AuthValidationErrorCode2["IncorrectMFAMethod"] = "IncorrectMFAMethod";
  AuthValidationErrorCode2["EmptyUpdatePassword"] = "EmptyUpdatePassword";
})(AuthValidationErrorCode || (AuthValidationErrorCode = {}));

// node_modules/@aws-amplify/auth/dist/esm/common/AuthErrorStrings.mjs
var validationErrorMap = {
  [AuthValidationErrorCode.EmptyChallengeResponse]: {
    message: "challengeResponse is required to confirmSignIn"
  },
  [AuthValidationErrorCode.EmptyConfirmResetPasswordUsername]: {
    message: "username is required to confirmResetPassword"
  },
  [AuthValidationErrorCode.EmptyConfirmSignUpCode]: {
    message: "code is required to confirmSignUp"
  },
  [AuthValidationErrorCode.EmptyConfirmSignUpUsername]: {
    message: "username is required to confirmSignUp"
  },
  [AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode]: {
    message: "confirmationCode is required to confirmResetPassword"
  },
  [AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword]: {
    message: "newPassword is required to confirmResetPassword"
  },
  [AuthValidationErrorCode.EmptyResendSignUpCodeUsername]: {
    message: "username is required to confirmSignUp"
  },
  [AuthValidationErrorCode.EmptyResetPasswordUsername]: {
    message: "username is required to resetPassword"
  },
  [AuthValidationErrorCode.EmptySignInPassword]: {
    message: "password is required to signIn"
  },
  [AuthValidationErrorCode.EmptySignInUsername]: {
    message: "username is required to signIn"
  },
  [AuthValidationErrorCode.EmptySignUpPassword]: {
    message: "password is required to signUp"
  },
  [AuthValidationErrorCode.EmptySignUpUsername]: {
    message: "username is required to signUp"
  },
  [AuthValidationErrorCode.CustomAuthSignInPassword]: {
    message: "A password is not needed when signing in with CUSTOM_WITHOUT_SRP",
    recoverySuggestion: "Do not include a password in your signIn call."
  },
  [AuthValidationErrorCode.IncorrectMFAMethod]: {
    message: "Incorrect MFA method was chosen. It should be either SMS, TOTP, or EMAIL",
    recoverySuggestion: "Try to pass SMS, TOTP, or EMAIL as the challengeResponse"
  },
  [AuthValidationErrorCode.EmptyVerifyTOTPSetupCode]: {
    message: "code is required to verifyTotpSetup"
  },
  [AuthValidationErrorCode.EmptyUpdatePassword]: {
    message: "oldPassword and newPassword are required to changePassword"
  },
  [AuthValidationErrorCode.EmptyConfirmUserAttributeCode]: {
    message: "confirmation code is required to confirmUserAttribute"
  }
};
var AuthErrorStrings;
(function(AuthErrorStrings2) {
  AuthErrorStrings2["DEFAULT_MSG"] = "Authentication Error";
  AuthErrorStrings2["EMPTY_EMAIL"] = "Email cannot be empty";
  AuthErrorStrings2["EMPTY_PHONE"] = "Phone number cannot be empty";
  AuthErrorStrings2["EMPTY_USERNAME"] = "Username cannot be empty";
  AuthErrorStrings2["INVALID_USERNAME"] = "The username should either be a string or one of the sign in types";
  AuthErrorStrings2["EMPTY_PASSWORD"] = "Password cannot be empty";
  AuthErrorStrings2["EMPTY_CODE"] = "Confirmation code cannot be empty";
  AuthErrorStrings2["SIGN_UP_ERROR"] = "Error creating account";
  AuthErrorStrings2["NO_MFA"] = "No valid MFA method provided";
  AuthErrorStrings2["INVALID_MFA"] = "Invalid MFA type";
  AuthErrorStrings2["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
  AuthErrorStrings2["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
  AuthErrorStrings2["NETWORK_ERROR"] = "Network Error";
  AuthErrorStrings2["DEVICE_CONFIG"] = "Device tracking has not been configured in this User Pool";
  AuthErrorStrings2["AUTOSIGNIN_ERROR"] = "Please use your credentials to sign in";
  AuthErrorStrings2["OAUTH_ERROR"] = "Couldn't finish OAuth flow, check your User Pool HostedUI settings";
})(AuthErrorStrings || (AuthErrorStrings = {}));
var AuthErrorCodes;
(function(AuthErrorCodes2) {
  AuthErrorCodes2["SignInException"] = "SignInException";
  AuthErrorCodes2["OAuthSignInError"] = "OAuthSignInException";
})(AuthErrorCodes || (AuthErrorCodes = {}));

// node_modules/@aws-amplify/auth/dist/esm/errors/AuthError.mjs
var AuthError = class _AuthError extends AmplifyError {
  constructor(params) {
    super(params);
    this.constructor = _AuthError;
    Object.setPrototypeOf(this, _AuthError.prototype);
  }
};

// node_modules/@aws-amplify/auth/dist/esm/errors/utils/assertValidationError.mjs
function assertValidationError(assertion, name2) {
  const { message: message2, recoverySuggestion } = validationErrorMap[name2];
  if (!assertion) {
    throw new AuthError({ name: name2, message: message2, recoverySuggestion });
  }
}

// node_modules/@aws-amplify/auth/dist/esm/foundation/parsers/regionParsers.mjs
function getRegionFromUserPoolId(userPoolId) {
  const region = userPoolId == null ? void 0 : userPoolId.split("_")[0];
  if (!userPoolId || userPoolId.indexOf("_") < 0 || !region || typeof region !== "string")
    throw new AuthError({
      name: "InvalidUserPoolId",
      message: "Invalid user pool id provided."
    });
  return region;
}
function getRegionFromIdentityPoolId(identityPoolId) {
  if (!identityPoolId || !identityPoolId.includes(":")) {
    throw new AuthError({
      name: "InvalidIdentityPoolIdException",
      message: "Invalid identity pool id provided.",
      recoverySuggestion: "Make sure a valid identityPoolId is given in the config."
    });
  }
  return identityPoolId.split(":")[0];
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/apiHelpers.mjs
function toAttributeType(attributes) {
  return Object.entries(attributes).map(([key, value]) => ({
    Name: key,
    Value: value
  }));
}
function toAuthUserAttribute(attributes) {
  const userAttributes = {};
  attributes == null ? void 0 : attributes.forEach((attribute) => {
    if (attribute.Name)
      userAttributes[attribute.Name] = attribute.Value;
  });
  return userAttributes;
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/types/errors.mjs
var AssociateSoftwareTokenException;
(function(AssociateSoftwareTokenException2) {
  AssociateSoftwareTokenException2["ConcurrentModificationException"] = "ConcurrentModificationException";
  AssociateSoftwareTokenException2["ForbiddenException"] = "ForbiddenException";
  AssociateSoftwareTokenException2["InternalErrorException"] = "InternalErrorException";
  AssociateSoftwareTokenException2["InvalidParameterException"] = "InvalidParameterException";
  AssociateSoftwareTokenException2["NotAuthorizedException"] = "NotAuthorizedException";
  AssociateSoftwareTokenException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  AssociateSoftwareTokenException2["SoftwareTokenMFANotFoundException"] = "SoftwareTokenMFANotFoundException";
})(AssociateSoftwareTokenException || (AssociateSoftwareTokenException = {}));
var ChangePasswordException;
(function(ChangePasswordException2) {
  ChangePasswordException2["ForbiddenException"] = "ForbiddenException";
  ChangePasswordException2["InternalErrorException"] = "InternalErrorException";
  ChangePasswordException2["InvalidParameterException"] = "InvalidParameterException";
  ChangePasswordException2["InvalidPasswordException"] = "InvalidPasswordException";
  ChangePasswordException2["LimitExceededException"] = "LimitExceededException";
  ChangePasswordException2["NotAuthorizedException"] = "NotAuthorizedException";
  ChangePasswordException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  ChangePasswordException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ChangePasswordException2["TooManyRequestsException"] = "TooManyRequestsException";
  ChangePasswordException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ChangePasswordException2["UserNotFoundException"] = "UserNotFoundException";
})(ChangePasswordException || (ChangePasswordException = {}));
var ConfirmDeviceException;
(function(ConfirmDeviceException2) {
  ConfirmDeviceException2["ForbiddenException"] = "ForbiddenException";
  ConfirmDeviceException2["InternalErrorException"] = "InternalErrorException";
  ConfirmDeviceException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ConfirmDeviceException2["InvalidParameterException"] = "InvalidParameterException";
  ConfirmDeviceException2["InvalidPasswordException"] = "InvalidPasswordException";
  ConfirmDeviceException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  ConfirmDeviceException2["NotAuthorizedException"] = "NotAuthorizedException";
  ConfirmDeviceException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  ConfirmDeviceException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ConfirmDeviceException2["TooManyRequestsException"] = "TooManyRequestsException";
  ConfirmDeviceException2["UsernameExistsException"] = "UsernameExistsException";
  ConfirmDeviceException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ConfirmDeviceException2["UserNotFoundException"] = "UserNotFoundException";
})(ConfirmDeviceException || (ConfirmDeviceException = {}));
var ConfirmForgotPasswordException;
(function(ConfirmForgotPasswordException2) {
  ConfirmForgotPasswordException2["CodeMismatchException"] = "CodeMismatchException";
  ConfirmForgotPasswordException2["ExpiredCodeException"] = "ExpiredCodeException";
  ConfirmForgotPasswordException2["ForbiddenException"] = "ForbiddenException";
  ConfirmForgotPasswordException2["InternalErrorException"] = "InternalErrorException";
  ConfirmForgotPasswordException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ConfirmForgotPasswordException2["InvalidParameterException"] = "InvalidParameterException";
  ConfirmForgotPasswordException2["InvalidPasswordException"] = "InvalidPasswordException";
  ConfirmForgotPasswordException2["LimitExceededException"] = "LimitExceededException";
  ConfirmForgotPasswordException2["NotAuthorizedException"] = "NotAuthorizedException";
  ConfirmForgotPasswordException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ConfirmForgotPasswordException2["TooManyFailedAttemptsException"] = "TooManyFailedAttemptsException";
  ConfirmForgotPasswordException2["TooManyRequestsException"] = "TooManyRequestsException";
  ConfirmForgotPasswordException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  ConfirmForgotPasswordException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  ConfirmForgotPasswordException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ConfirmForgotPasswordException2["UserNotFoundException"] = "UserNotFoundException";
})(ConfirmForgotPasswordException || (ConfirmForgotPasswordException = {}));
var ConfirmSignUpException;
(function(ConfirmSignUpException2) {
  ConfirmSignUpException2["AliasExistsException"] = "AliasExistsException";
  ConfirmSignUpException2["CodeMismatchException"] = "CodeMismatchException";
  ConfirmSignUpException2["ExpiredCodeException"] = "ExpiredCodeException";
  ConfirmSignUpException2["ForbiddenException"] = "ForbiddenException";
  ConfirmSignUpException2["InternalErrorException"] = "InternalErrorException";
  ConfirmSignUpException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ConfirmSignUpException2["InvalidParameterException"] = "InvalidParameterException";
  ConfirmSignUpException2["LimitExceededException"] = "LimitExceededException";
  ConfirmSignUpException2["NotAuthorizedException"] = "NotAuthorizedException";
  ConfirmSignUpException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ConfirmSignUpException2["TooManyFailedAttemptsException"] = "TooManyFailedAttemptsException";
  ConfirmSignUpException2["TooManyRequestsException"] = "TooManyRequestsException";
  ConfirmSignUpException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  ConfirmSignUpException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  ConfirmSignUpException2["UserNotFoundException"] = "UserNotFoundException";
})(ConfirmSignUpException || (ConfirmSignUpException = {}));
var DeleteUserAttributesException;
(function(DeleteUserAttributesException2) {
  DeleteUserAttributesException2["ForbiddenException"] = "ForbiddenException";
  DeleteUserAttributesException2["InternalErrorException"] = "InternalErrorException";
  DeleteUserAttributesException2["InvalidParameterException"] = "InvalidParameterException";
  DeleteUserAttributesException2["NotAuthorizedException"] = "NotAuthorizedException";
  DeleteUserAttributesException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  DeleteUserAttributesException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  DeleteUserAttributesException2["TooManyRequestsException"] = "TooManyRequestsException";
  DeleteUserAttributesException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  DeleteUserAttributesException2["UserNotFoundException"] = "UserNotFoundException";
})(DeleteUserAttributesException || (DeleteUserAttributesException = {}));
var DeleteUserException;
(function(DeleteUserException2) {
  DeleteUserException2["ForbiddenException"] = "ForbiddenException";
  DeleteUserException2["InternalErrorException"] = "InternalErrorException";
  DeleteUserException2["InvalidParameterException"] = "InvalidParameterException";
  DeleteUserException2["NotAuthorizedException"] = "NotAuthorizedException";
  DeleteUserException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  DeleteUserException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  DeleteUserException2["TooManyRequestsException"] = "TooManyRequestsException";
  DeleteUserException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  DeleteUserException2["UserNotFoundException"] = "UserNotFoundException";
})(DeleteUserException || (DeleteUserException = {}));
var ForgetDeviceException;
(function(ForgetDeviceException2) {
  ForgetDeviceException2["ForbiddenException"] = "ForbiddenException";
  ForgetDeviceException2["InternalErrorException"] = "InternalErrorException";
  ForgetDeviceException2["InvalidParameterException"] = "InvalidParameterException";
  ForgetDeviceException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  ForgetDeviceException2["NotAuthorizedException"] = "NotAuthorizedException";
  ForgetDeviceException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  ForgetDeviceException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ForgetDeviceException2["TooManyRequestsException"] = "TooManyRequestsException";
  ForgetDeviceException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ForgetDeviceException2["UserNotFoundException"] = "UserNotFoundException";
})(ForgetDeviceException || (ForgetDeviceException = {}));
var ForgotPasswordException;
(function(ForgotPasswordException2) {
  ForgotPasswordException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  ForgotPasswordException2["ForbiddenException"] = "ForbiddenException";
  ForgotPasswordException2["InternalErrorException"] = "InternalErrorException";
  ForgotPasswordException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  ForgotPasswordException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ForgotPasswordException2["InvalidParameterException"] = "InvalidParameterException";
  ForgotPasswordException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  ForgotPasswordException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  ForgotPasswordException2["LimitExceededException"] = "LimitExceededException";
  ForgotPasswordException2["NotAuthorizedException"] = "NotAuthorizedException";
  ForgotPasswordException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ForgotPasswordException2["TooManyRequestsException"] = "TooManyRequestsException";
  ForgotPasswordException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  ForgotPasswordException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  ForgotPasswordException2["UserNotFoundException"] = "UserNotFoundException";
})(ForgotPasswordException || (ForgotPasswordException = {}));
var GetUserException;
(function(GetUserException2) {
  GetUserException2["ForbiddenException"] = "ForbiddenException";
  GetUserException2["InternalErrorException"] = "InternalErrorException";
  GetUserException2["InvalidParameterException"] = "InvalidParameterException";
  GetUserException2["NotAuthorizedException"] = "NotAuthorizedException";
  GetUserException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  GetUserException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GetUserException2["TooManyRequestsException"] = "TooManyRequestsException";
  GetUserException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  GetUserException2["UserNotFoundException"] = "UserNotFoundException";
})(GetUserException || (GetUserException = {}));
var GetIdException;
(function(GetIdException2) {
  GetIdException2["ExternalServiceException"] = "ExternalServiceException";
  GetIdException2["InternalErrorException"] = "InternalErrorException";
  GetIdException2["InvalidParameterException"] = "InvalidParameterException";
  GetIdException2["LimitExceededException"] = "LimitExceededException";
  GetIdException2["NotAuthorizedException"] = "NotAuthorizedException";
  GetIdException2["ResourceConflictException"] = "ResourceConflictException";
  GetIdException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GetIdException2["TooManyRequestsException"] = "TooManyRequestsException";
})(GetIdException || (GetIdException = {}));
var GetCredentialsForIdentityException;
(function(GetCredentialsForIdentityException2) {
  GetCredentialsForIdentityException2["ExternalServiceException"] = "ExternalServiceException";
  GetCredentialsForIdentityException2["InternalErrorException"] = "InternalErrorException";
  GetCredentialsForIdentityException2["InvalidIdentityPoolConfigurationException"] = "InvalidIdentityPoolConfigurationException";
  GetCredentialsForIdentityException2["InvalidParameterException"] = "InvalidParameterException";
  GetCredentialsForIdentityException2["NotAuthorizedException"] = "NotAuthorizedException";
  GetCredentialsForIdentityException2["ResourceConflictException"] = "ResourceConflictException";
  GetCredentialsForIdentityException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GetCredentialsForIdentityException2["TooManyRequestsException"] = "TooManyRequestsException";
})(GetCredentialsForIdentityException || (GetCredentialsForIdentityException = {}));
var GetUserAttributeVerificationException;
(function(GetUserAttributeVerificationException2) {
  GetUserAttributeVerificationException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  GetUserAttributeVerificationException2["ForbiddenException"] = "ForbiddenException";
  GetUserAttributeVerificationException2["InternalErrorException"] = "InternalErrorException";
  GetUserAttributeVerificationException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  GetUserAttributeVerificationException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  GetUserAttributeVerificationException2["InvalidParameterException"] = "InvalidParameterException";
  GetUserAttributeVerificationException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  GetUserAttributeVerificationException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  GetUserAttributeVerificationException2["LimitExceededException"] = "LimitExceededException";
  GetUserAttributeVerificationException2["NotAuthorizedException"] = "NotAuthorizedException";
  GetUserAttributeVerificationException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  GetUserAttributeVerificationException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GetUserAttributeVerificationException2["TooManyRequestsException"] = "TooManyRequestsException";
  GetUserAttributeVerificationException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  GetUserAttributeVerificationException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  GetUserAttributeVerificationException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  GetUserAttributeVerificationException2["UserNotFoundException"] = "UserNotFoundException";
})(GetUserAttributeVerificationException || (GetUserAttributeVerificationException = {}));
var GlobalSignOutException;
(function(GlobalSignOutException2) {
  GlobalSignOutException2["ForbiddenException"] = "ForbiddenException";
  GlobalSignOutException2["InternalErrorException"] = "InternalErrorException";
  GlobalSignOutException2["InvalidParameterException"] = "InvalidParameterException";
  GlobalSignOutException2["NotAuthorizedException"] = "NotAuthorizedException";
  GlobalSignOutException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  GlobalSignOutException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GlobalSignOutException2["TooManyRequestsException"] = "TooManyRequestsException";
  GlobalSignOutException2["UserNotConfirmedException"] = "UserNotConfirmedException";
})(GlobalSignOutException || (GlobalSignOutException = {}));
var InitiateAuthException;
(function(InitiateAuthException2) {
  InitiateAuthException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  InitiateAuthException2["ForbiddenException"] = "ForbiddenException";
  InitiateAuthException2["InternalErrorException"] = "InternalErrorException";
  InitiateAuthException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  InitiateAuthException2["InvalidParameterException"] = "InvalidParameterException";
  InitiateAuthException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  InitiateAuthException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  InitiateAuthException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  InitiateAuthException2["NotAuthorizedException"] = "NotAuthorizedException";
  InitiateAuthException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  InitiateAuthException2["TooManyRequestsException"] = "TooManyRequestsException";
  InitiateAuthException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  InitiateAuthException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  InitiateAuthException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  InitiateAuthException2["UserNotFoundException"] = "UserNotFoundException";
})(InitiateAuthException || (InitiateAuthException = {}));
var ResendConfirmationException;
(function(ResendConfirmationException2) {
  ResendConfirmationException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  ResendConfirmationException2["ForbiddenException"] = "ForbiddenException";
  ResendConfirmationException2["InternalErrorException"] = "InternalErrorException";
  ResendConfirmationException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  ResendConfirmationException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ResendConfirmationException2["InvalidParameterException"] = "InvalidParameterException";
  ResendConfirmationException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  ResendConfirmationException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  ResendConfirmationException2["LimitExceededException"] = "LimitExceededException";
  ResendConfirmationException2["NotAuthorizedException"] = "NotAuthorizedException";
  ResendConfirmationException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ResendConfirmationException2["TooManyRequestsException"] = "TooManyRequestsException";
  ResendConfirmationException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  ResendConfirmationException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  ResendConfirmationException2["UserNotFoundException"] = "UserNotFoundException";
})(ResendConfirmationException || (ResendConfirmationException = {}));
var RespondToAuthChallengeException;
(function(RespondToAuthChallengeException2) {
  RespondToAuthChallengeException2["AliasExistsException"] = "AliasExistsException";
  RespondToAuthChallengeException2["CodeMismatchException"] = "CodeMismatchException";
  RespondToAuthChallengeException2["ExpiredCodeException"] = "ExpiredCodeException";
  RespondToAuthChallengeException2["ForbiddenException"] = "ForbiddenException";
  RespondToAuthChallengeException2["InternalErrorException"] = "InternalErrorException";
  RespondToAuthChallengeException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  RespondToAuthChallengeException2["InvalidParameterException"] = "InvalidParameterException";
  RespondToAuthChallengeException2["InvalidPasswordException"] = "InvalidPasswordException";
  RespondToAuthChallengeException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  RespondToAuthChallengeException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  RespondToAuthChallengeException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  RespondToAuthChallengeException2["MFAMethodNotFoundException"] = "MFAMethodNotFoundException";
  RespondToAuthChallengeException2["NotAuthorizedException"] = "NotAuthorizedException";
  RespondToAuthChallengeException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  RespondToAuthChallengeException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  RespondToAuthChallengeException2["SoftwareTokenMFANotFoundException"] = "SoftwareTokenMFANotFoundException";
  RespondToAuthChallengeException2["TooManyRequestsException"] = "TooManyRequestsException";
  RespondToAuthChallengeException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  RespondToAuthChallengeException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  RespondToAuthChallengeException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  RespondToAuthChallengeException2["UserNotFoundException"] = "UserNotFoundException";
})(RespondToAuthChallengeException || (RespondToAuthChallengeException = {}));
var SetUserMFAPreferenceException;
(function(SetUserMFAPreferenceException2) {
  SetUserMFAPreferenceException2["ForbiddenException"] = "ForbiddenException";
  SetUserMFAPreferenceException2["InternalErrorException"] = "InternalErrorException";
  SetUserMFAPreferenceException2["InvalidParameterException"] = "InvalidParameterException";
  SetUserMFAPreferenceException2["NotAuthorizedException"] = "NotAuthorizedException";
  SetUserMFAPreferenceException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  SetUserMFAPreferenceException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  SetUserMFAPreferenceException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  SetUserMFAPreferenceException2["UserNotFoundException"] = "UserNotFoundException";
})(SetUserMFAPreferenceException || (SetUserMFAPreferenceException = {}));
var SignUpException;
(function(SignUpException2) {
  SignUpException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  SignUpException2["InternalErrorException"] = "InternalErrorException";
  SignUpException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  SignUpException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  SignUpException2["InvalidParameterException"] = "InvalidParameterException";
  SignUpException2["InvalidPasswordException"] = "InvalidPasswordException";
  SignUpException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  SignUpException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  SignUpException2["NotAuthorizedException"] = "NotAuthorizedException";
  SignUpException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  SignUpException2["TooManyRequestsException"] = "TooManyRequestsException";
  SignUpException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  SignUpException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  SignUpException2["UsernameExistsException"] = "UsernameExistsException";
})(SignUpException || (SignUpException = {}));
var UpdateUserAttributesException;
(function(UpdateUserAttributesException2) {
  UpdateUserAttributesException2["AliasExistsException"] = "AliasExistsException";
  UpdateUserAttributesException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  UpdateUserAttributesException2["CodeMismatchException"] = "CodeMismatchException";
  UpdateUserAttributesException2["ExpiredCodeException"] = "ExpiredCodeException";
  UpdateUserAttributesException2["ForbiddenException"] = "ForbiddenException";
  UpdateUserAttributesException2["InternalErrorException"] = "InternalErrorException";
  UpdateUserAttributesException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  UpdateUserAttributesException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  UpdateUserAttributesException2["InvalidParameterException"] = "InvalidParameterException";
  UpdateUserAttributesException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  UpdateUserAttributesException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  UpdateUserAttributesException2["NotAuthorizedException"] = "NotAuthorizedException";
  UpdateUserAttributesException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  UpdateUserAttributesException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  UpdateUserAttributesException2["TooManyRequestsException"] = "TooManyRequestsException";
  UpdateUserAttributesException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  UpdateUserAttributesException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  UpdateUserAttributesException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  UpdateUserAttributesException2["UserNotFoundException"] = "UserNotFoundException";
})(UpdateUserAttributesException || (UpdateUserAttributesException = {}));
var VerifySoftwareTokenException;
(function(VerifySoftwareTokenException2) {
  VerifySoftwareTokenException2["CodeMismatchException"] = "CodeMismatchException";
  VerifySoftwareTokenException2["EnableSoftwareTokenMFAException"] = "EnableSoftwareTokenMFAException";
  VerifySoftwareTokenException2["ForbiddenException"] = "ForbiddenException";
  VerifySoftwareTokenException2["InternalErrorException"] = "InternalErrorException";
  VerifySoftwareTokenException2["InvalidParameterException"] = "InvalidParameterException";
  VerifySoftwareTokenException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  VerifySoftwareTokenException2["NotAuthorizedException"] = "NotAuthorizedException";
  VerifySoftwareTokenException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  VerifySoftwareTokenException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  VerifySoftwareTokenException2["SoftwareTokenMFANotFoundException"] = "SoftwareTokenMFANotFoundException";
  VerifySoftwareTokenException2["TooManyRequestsException"] = "TooManyRequestsException";
  VerifySoftwareTokenException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  VerifySoftwareTokenException2["UserNotFoundException"] = "UserNotFoundException";
})(VerifySoftwareTokenException || (VerifySoftwareTokenException = {}));
var VerifyUserAttributeException;
(function(VerifyUserAttributeException2) {
  VerifyUserAttributeException2["AliasExistsException"] = "AliasExistsException";
  VerifyUserAttributeException2["CodeMismatchException"] = "CodeMismatchException";
  VerifyUserAttributeException2["ExpiredCodeException"] = "ExpiredCodeException";
  VerifyUserAttributeException2["ForbiddenException"] = "ForbiddenException";
  VerifyUserAttributeException2["InternalErrorException"] = "InternalErrorException";
  VerifyUserAttributeException2["InvalidParameterException"] = "InvalidParameterException";
  VerifyUserAttributeException2["LimitExceededException"] = "LimitExceededException";
  VerifyUserAttributeException2["NotAuthorizedException"] = "NotAuthorizedException";
  VerifyUserAttributeException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  VerifyUserAttributeException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  VerifyUserAttributeException2["TooManyRequestsException"] = "TooManyRequestsException";
  VerifyUserAttributeException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  VerifyUserAttributeException2["UserNotFoundException"] = "UserNotFoundException";
})(VerifyUserAttributeException || (VerifyUserAttributeException = {}));
var UpdateDeviceStatusException;
(function(UpdateDeviceStatusException2) {
  UpdateDeviceStatusException2["ForbiddenException"] = "ForbiddenException";
  UpdateDeviceStatusException2["InternalErrorException"] = "InternalErrorException";
  UpdateDeviceStatusException2["InvalidParameterException"] = "InvalidParameterException";
  UpdateDeviceStatusException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  UpdateDeviceStatusException2["NotAuthorizedException"] = "NotAuthorizedException";
  UpdateDeviceStatusException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  UpdateDeviceStatusException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  UpdateDeviceStatusException2["TooManyRequestsException"] = "TooManyRequestsException";
  UpdateDeviceStatusException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  UpdateDeviceStatusException2["UserNotFoundException"] = "UserNotFoundException";
})(UpdateDeviceStatusException || (UpdateDeviceStatusException = {}));
var ListDevicesException;
(function(ListDevicesException2) {
  ListDevicesException2["ForbiddenException"] = "ForbiddenException";
  ListDevicesException2["InternalErrorException"] = "InternalErrorException";
  ListDevicesException2["InvalidParameterException"] = "InvalidParameterException";
  ListDevicesException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  ListDevicesException2["NotAuthorizedException"] = "NotAuthorizedException";
  ListDevicesException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  ListDevicesException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ListDevicesException2["TooManyRequestsException"] = "TooManyRequestsException";
  ListDevicesException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ListDevicesException2["UserNotFoundException"] = "UserNotFoundException";
})(ListDevicesException || (ListDevicesException = {}));

// node_modules/@aws-amplify/auth/dist/esm/errors/constants.mjs
var USER_UNAUTHENTICATED_EXCEPTION = "UserUnAuthenticatedException";
var USER_ALREADY_AUTHENTICATED_EXCEPTION = "UserAlreadyAuthenticatedException";
var DEVICE_METADATA_NOT_FOUND_EXCEPTION = "DeviceMetadataNotFoundException";
var AUTO_SIGN_IN_EXCEPTION = "AutoSignInException";
var INVALID_REDIRECT_EXCEPTION = "InvalidRedirectException";
var INVALID_APP_SCHEME_EXCEPTION = "InvalidAppSchemeException";
var INVALID_PREFERRED_REDIRECT_EXCEPTION = "InvalidPreferredRedirectUrlException";
var invalidRedirectException = new AuthError({
  name: INVALID_REDIRECT_EXCEPTION,
  message: "signInRedirect or signOutRedirect had an invalid format or was not found.",
  recoverySuggestion: "Please make sure the signIn/Out redirect in your oauth config is valid."
});
var invalidAppSchemeException = new AuthError({
  name: INVALID_APP_SCHEME_EXCEPTION,
  message: "A valid non-http app scheme was not found in the config.",
  recoverySuggestion: "Please make sure a valid custom app scheme is present in the config."
});
var invalidPreferredRedirectUrlException = new AuthError({
  name: INVALID_PREFERRED_REDIRECT_EXCEPTION,
  message: "The given preferredRedirectUrl does not match any items in the redirectSignOutUrls array from the config.",
  recoverySuggestion: "Please make sure a matching preferredRedirectUrl is provided."
});
var INVALID_ORIGIN_EXCEPTION = "InvalidOriginException";
var invalidOriginException = new AuthError({
  name: INVALID_ORIGIN_EXCEPTION,
  message: "redirect is coming from a different origin. The oauth flow needs to be initiated from the same origin",
  recoverySuggestion: "Please call signInWithRedirect from the same origin."
});
var OAUTH_SIGNOUT_EXCEPTION = "OAuthSignOutException";
var TOKEN_REFRESH_EXCEPTION = "TokenRefreshException";
var UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION = "UnexpectedSignInInterruptionException";

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/types.mjs
function assertAuthTokens(tokens2) {
  if (!tokens2 || !tokens2.accessToken) {
    throw new AuthError({
      name: USER_UNAUTHENTICATED_EXCEPTION,
      message: "User needs to be authenticated to call this API.",
      recoverySuggestion: "Sign in before calling this API again."
    });
  }
}
function assertIdTokenInAuthTokens(tokens2) {
  if (!tokens2 || !tokens2.idToken) {
    throw new AuthError({
      name: USER_UNAUTHENTICATED_EXCEPTION,
      message: "User needs to be authenticated to call this API.",
      recoverySuggestion: "Sign in before calling this API again."
    });
  }
}
var oAuthTokenRefreshException = new AuthError({
  name: TOKEN_REFRESH_EXCEPTION,
  message: `Token refresh is not supported when authenticated with the 'implicit grant' (token) oauth flow. 
	Please change your oauth configuration to use 'code grant' flow.`,
  recoverySuggestion: `Please logout and change your Amplify configuration to use "code grant" flow. 
	E.g { responseType: 'code' }`
});
var tokenRefreshException = new AuthError({
  name: USER_UNAUTHENTICATED_EXCEPTION,
  message: "User needs to be authenticated to call this API.",
  recoverySuggestion: "Sign in before calling this API again."
});
function assertAuthTokensWithRefreshToken(tokens2) {
  if (isAuthenticatedWithImplicitOauthFlow(tokens2)) {
    throw oAuthTokenRefreshException;
  }
  if (!isAuthenticatedWithRefreshToken(tokens2)) {
    throw tokenRefreshException;
  }
}
function assertDeviceMetadata(deviceMetadata) {
  if (!deviceMetadata || !deviceMetadata.deviceKey || !deviceMetadata.deviceGroupKey || !deviceMetadata.randomPassword) {
    throw new AuthError({
      name: DEVICE_METADATA_NOT_FOUND_EXCEPTION,
      message: "Either deviceKey, deviceGroupKey or secretPassword were not found during the sign-in process.",
      recoverySuggestion: "Make sure to not clear storage after calling the signIn API."
    });
  }
}
var OAuthStorageKeys = {
  inflightOAuth: "inflightOAuth",
  oauthSignIn: "oauthSignIn",
  oauthPKCE: "oauthPKCE",
  oauthState: "oauthState"
};
function isAuthenticated(tokens2) {
  return (tokens2 == null ? void 0 : tokens2.accessToken) || (tokens2 == null ? void 0 : tokens2.idToken);
}
function isAuthenticatedWithRefreshToken(tokens2) {
  return isAuthenticated(tokens2) && (tokens2 == null ? void 0 : tokens2.refreshToken);
}
function isAuthenticatedWithImplicitOauthFlow(tokens2) {
  return isAuthenticated(tokens2) && !(tokens2 == null ? void 0 : tokens2.refreshToken);
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/internal/getCurrentUser.mjs
var getCurrentUser = async (amplify) => {
  var _a2, _b;
  const authConfig = (_a2 = amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const tokens2 = await amplify.Auth.getTokens({ forceRefresh: false });
  assertAuthTokens(tokens2);
  const { "cognito:username": username, sub } = ((_b = tokens2.idToken) == null ? void 0 : _b.payload) ?? {};
  const authUser = {
    username,
    userId: sub
  };
  const signInDetails = getSignInDetailsFromTokens(tokens2);
  if (signInDetails) {
    authUser.signInDetails = signInDetails;
  }
  return authUser;
};
function getSignInDetailsFromTokens(tokens2) {
  return tokens2 == null ? void 0 : tokens2.signInDetails;
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/getCurrentUser.mjs
var getCurrentUser2 = async () => {
  return getCurrentUser(Amplify);
};

// node_modules/@aws-amplify/auth/dist/esm/utils/getAuthUserAgentValue.mjs
var getAuthUserAgentValue = (action, customUserAgentDetails) => getAmplifyUserAgent({
  category: Category.Auth,
  action,
  ...customUserAgentDetails
});

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolSerializer.mjs
var createUserPoolSerializer = (operation) => (input2, endpoint) => {
  const headers = getSharedHeaders3(operation);
  const body = JSON.stringify(input2);
  return buildHttpRpcRequest2(endpoint, headers, body);
};
var getSharedHeaders3 = (operation) => ({
  "content-type": "application/x-amz-json-1.1",
  "x-amz-target": `AWSCognitoIdentityProviderService.${operation}`
});
var buildHttpRpcRequest2 = ({ url }, headers, body) => ({
  headers,
  url,
  body,
  method: "POST"
});

// node_modules/@aws-amplify/auth/dist/esm/errors/utils/assertServiceError.mjs
function assertServiceError(error3) {
  if (!error3 || error3.name === "Error" || error3 instanceof TypeError) {
    throw new AuthError({
      name: AmplifyErrorCode.Unknown,
      message: "An unknown error has occurred.",
      underlyingError: error3
    });
  }
}

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolDeserializer.mjs
var createUserPoolDeserializer = () => async (response) => {
  if (response.statusCode >= 300) {
    const error3 = await parseJsonError(response);
    assertServiceError(error3);
    throw new AuthError({
      name: error3.name,
      message: error3.message,
      metadata: error3.$metadata
    });
  }
  return parseJsonBody(response);
};

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs
var disableCacheMiddlewareFactory2 = () => (next, _) => async function disableCacheMiddleware(request) {
  request.headers["cache-control"] = "no-store";
  return next(request);
};
var cognitoUserPoolTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddlewareFactory2]);

// node_modules/@aws-amplify/auth/dist/esm/foundation/constants.mjs
var COGNITO_IDP_SERVICE_NAME = "cognito-idp";

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs
var DEFAULT_SERVICE_CLIENT_API_CONFIG = {
  service: COGNITO_IDP_SERVICE_NAME,
  retryDecider: getRetryDecider(parseJsonError),
  computeDelay: jitteredBackoff2,
  userAgentValue: getAmplifyUserAgent(),
  cache: "no-store"
};

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs
var createInitiateAuthClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("InitiateAuth"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs
var createRespondToAuthChallengeClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("RespondToAuthChallenge"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs
var createVerifySoftwareTokenClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("VerifySoftwareToken"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs
var createAssociateSoftwareTokenClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("AssociateSoftwareToken"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/foundation/cognitoUserPoolEndpointResolver.mjs
var cognitoUserPoolEndpointResolver = ({ region }) => ({
  url: new AmplifyUrl(`https://${COGNITO_IDP_SERVICE_NAME}.${region}.${getDnsSuffix(region)}`)
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs
var createCognitoUserPoolEndpointResolver = ({ endpointOverride }) => (input2) => {
  if (endpointOverride) {
    return { url: new AmplifyUrl(endpointOverride) };
  }
  return cognitoUserPoolEndpointResolver(input2);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/userContextData.mjs
function getUserContextData({ username, userPoolId, userPoolClientId }) {
  if (typeof window === "undefined") {
    return void 0;
  }
  const amazonCognitoAdvancedSecurityData = window.AmazonCognitoAdvancedSecurityData;
  if (typeof amazonCognitoAdvancedSecurityData === "undefined") {
    return void 0;
  }
  const advancedSecurityData = amazonCognitoAdvancedSecurityData.getData(username, userPoolId, userPoolClientId);
  if (advancedSecurityData) {
    const userContextData = {
      EncodedData: advancedSecurityData
    };
    return userContextData;
  }
  return {};
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/refreshAuthTokens.mjs
var refreshAuthTokensFunction = async ({ tokens: tokens2, authConfig, username }) => {
  var _a2;
  assertTokenProviderConfig(authConfig == null ? void 0 : authConfig.Cognito);
  const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig.Cognito;
  const region = getRegionFromUserPoolId(userPoolId);
  assertAuthTokensWithRefreshToken(tokens2);
  const refreshTokenString = tokens2.refreshToken;
  const AuthParameters = {
    REFRESH_TOKEN: refreshTokenString
  };
  if ((_a2 = tokens2.deviceMetadata) == null ? void 0 : _a2.deviceKey) {
    AuthParameters.DEVICE_KEY = tokens2.deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { AuthenticationResult } = await initiateAuth({ region }, {
    ClientId: userPoolClientId,
    AuthFlow: "REFRESH_TOKEN_AUTH",
    AuthParameters,
    UserContextData
  });
  const accessToken = decodeJWT((AuthenticationResult == null ? void 0 : AuthenticationResult.AccessToken) ?? "");
  const idToken = (AuthenticationResult == null ? void 0 : AuthenticationResult.IdToken) ? decodeJWT(AuthenticationResult.IdToken) : void 0;
  const { iat } = accessToken.payload;
  if (!iat) {
    throw new AuthError({
      name: "iatNotFoundException",
      message: "iat not found in access token"
    });
  }
  const clockDrift = iat * 1e3 - (/* @__PURE__ */ new Date()).getTime();
  return {
    accessToken,
    idToken,
    clockDrift,
    refreshToken: refreshTokenString,
    username
  };
};
var refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/types.mjs
var AuthTokenStorageKeys = {
  accessToken: "accessToken",
  idToken: "idToken",
  oidcProvider: "oidcProvider",
  clockDrift: "clockDrift",
  refreshToken: "refreshToken",
  deviceKey: "deviceKey",
  randomPasswordKey: "randomPasswordKey",
  deviceGroupKey: "deviceGroupKey",
  signInDetails: "signInDetails",
  oauthMetadata: "oauthMetadata"
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/errorHelpers.mjs
var TokenProviderErrorCode;
(function(TokenProviderErrorCode2) {
  TokenProviderErrorCode2["InvalidAuthTokens"] = "InvalidAuthTokens";
})(TokenProviderErrorCode || (TokenProviderErrorCode = {}));
var tokenValidationErrorMap = {
  [TokenProviderErrorCode.InvalidAuthTokens]: {
    message: "Invalid tokens.",
    recoverySuggestion: "Make sure the tokens are valid."
  }
};
var assert7 = createAssertionFunction(tokenValidationErrorMap);

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/constants.mjs
var AUTH_KEY_PREFIX = "CognitoIdentityServiceProvider";

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/TokenStore.mjs
var DefaultTokenStore = class {
  getKeyValueStorage() {
    if (!this.keyValueStorage) {
      throw new AuthError({
        name: "KeyValueStorageNotFoundException",
        message: "KeyValueStorage was not found in TokenStore"
      });
    }
    return this.keyValueStorage;
  }
  setKeyValueStorage(keyValueStorage) {
    this.keyValueStorage = keyValueStorage;
  }
  setAuthConfig(authConfig) {
    this.authConfig = authConfig;
  }
  async loadTokens() {
    try {
      const authKeys = await this.getAuthKeys();
      const accessTokenString = await this.getKeyValueStorage().getItem(authKeys.accessToken);
      if (!accessTokenString) {
        throw new AuthError({
          name: "NoSessionFoundException",
          message: "Auth session was not found. Make sure to call signIn."
        });
      }
      const accessToken = decodeJWT(accessTokenString);
      const itString = await this.getKeyValueStorage().getItem(authKeys.idToken);
      const idToken = itString ? decodeJWT(itString) : void 0;
      const refreshToken = await this.getKeyValueStorage().getItem(authKeys.refreshToken) ?? void 0;
      const clockDriftString = await this.getKeyValueStorage().getItem(authKeys.clockDrift) ?? "0";
      const clockDrift = Number.parseInt(clockDriftString);
      const signInDetails = await this.getKeyValueStorage().getItem(authKeys.signInDetails);
      const tokens2 = {
        accessToken,
        idToken,
        refreshToken,
        deviceMetadata: await this.getDeviceMetadata() ?? void 0,
        clockDrift,
        username: await this.getLastAuthUser()
      };
      if (signInDetails) {
        tokens2.signInDetails = JSON.parse(signInDetails);
      }
      return tokens2;
    } catch (err) {
      return null;
    }
  }
  async storeTokens(tokens2) {
    assert7(tokens2 !== void 0, TokenProviderErrorCode.InvalidAuthTokens);
    const lastAuthUser = tokens2.username;
    await this.getKeyValueStorage().setItem(this.getLastAuthUserKey(), lastAuthUser);
    const authKeys = await this.getAuthKeys();
    await this.getKeyValueStorage().setItem(authKeys.accessToken, tokens2.accessToken.toString());
    if (tokens2.idToken) {
      await this.getKeyValueStorage().setItem(authKeys.idToken, tokens2.idToken.toString());
    } else {
      await this.getKeyValueStorage().removeItem(authKeys.idToken);
    }
    if (tokens2.refreshToken) {
      await this.getKeyValueStorage().setItem(authKeys.refreshToken, tokens2.refreshToken);
    } else {
      await this.getKeyValueStorage().removeItem(authKeys.refreshToken);
    }
    if (tokens2.deviceMetadata) {
      if (tokens2.deviceMetadata.deviceKey) {
        await this.getKeyValueStorage().setItem(authKeys.deviceKey, tokens2.deviceMetadata.deviceKey);
      }
      if (tokens2.deviceMetadata.deviceGroupKey) {
        await this.getKeyValueStorage().setItem(authKeys.deviceGroupKey, tokens2.deviceMetadata.deviceGroupKey);
      }
      await this.getKeyValueStorage().setItem(authKeys.randomPasswordKey, tokens2.deviceMetadata.randomPassword);
    }
    if (tokens2.signInDetails) {
      await this.getKeyValueStorage().setItem(authKeys.signInDetails, JSON.stringify(tokens2.signInDetails));
    } else {
      await this.getKeyValueStorage().removeItem(authKeys.signInDetails);
    }
    await this.getKeyValueStorage().setItem(authKeys.clockDrift, `${tokens2.clockDrift}`);
  }
  async clearTokens() {
    const authKeys = await this.getAuthKeys();
    await Promise.all([
      this.getKeyValueStorage().removeItem(authKeys.accessToken),
      this.getKeyValueStorage().removeItem(authKeys.idToken),
      this.getKeyValueStorage().removeItem(authKeys.clockDrift),
      this.getKeyValueStorage().removeItem(authKeys.refreshToken),
      this.getKeyValueStorage().removeItem(authKeys.signInDetails),
      this.getKeyValueStorage().removeItem(this.getLastAuthUserKey()),
      this.getKeyValueStorage().removeItem(authKeys.oauthMetadata)
    ]);
  }
  async getDeviceMetadata(username) {
    const authKeys = await this.getAuthKeys(username);
    const deviceKey = await this.getKeyValueStorage().getItem(authKeys.deviceKey);
    const deviceGroupKey = await this.getKeyValueStorage().getItem(authKeys.deviceGroupKey);
    const randomPassword = await this.getKeyValueStorage().getItem(authKeys.randomPasswordKey);
    return randomPassword && deviceGroupKey && deviceKey ? {
      deviceKey,
      deviceGroupKey,
      randomPassword
    } : null;
  }
  async clearDeviceMetadata(username) {
    const authKeys = await this.getAuthKeys(username);
    await Promise.all([
      this.getKeyValueStorage().removeItem(authKeys.deviceKey),
      this.getKeyValueStorage().removeItem(authKeys.deviceGroupKey),
      this.getKeyValueStorage().removeItem(authKeys.randomPasswordKey)
    ]);
  }
  async getAuthKeys(username) {
    var _a2;
    assertTokenProviderConfig((_a2 = this.authConfig) == null ? void 0 : _a2.Cognito);
    const lastAuthUser = username ?? await this.getLastAuthUser();
    return createKeysForAuthStorage(AUTH_KEY_PREFIX, `${this.authConfig.Cognito.userPoolClientId}.${lastAuthUser}`);
  }
  getLastAuthUserKey() {
    var _a2;
    assertTokenProviderConfig((_a2 = this.authConfig) == null ? void 0 : _a2.Cognito);
    const identifier = this.authConfig.Cognito.userPoolClientId;
    return `${AUTH_KEY_PREFIX}.${identifier}.LastAuthUser`;
  }
  async getLastAuthUser() {
    const lastAuthUser = await this.getKeyValueStorage().getItem(this.getLastAuthUserKey()) ?? "username";
    return lastAuthUser;
  }
  async setOAuthMetadata(metadata) {
    const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();
    await this.getKeyValueStorage().setItem(oauthMetadataKey, JSON.stringify(metadata));
  }
  async getOAuthMetadata() {
    const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();
    const oauthMetadata = await this.getKeyValueStorage().getItem(oauthMetadataKey);
    return oauthMetadata && JSON.parse(oauthMetadata);
  }
};
var createKeysForAuthStorage = (provider, identifier) => {
  return getAuthStorageKeys(AuthTokenStorageKeys)(`${provider}`, identifier);
};
function getAuthStorageKeys(authKeys) {
  const keys = Object.values({ ...authKeys });
  return (prefix, identifier) => keys.reduce((acc, authKey) => ({
    ...acc,
    [authKey]: `${prefix}.${identifier}.${authKey}`
  }), {});
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signInWithRedirectStore.mjs
var V5_HOSTED_UI_KEY = "amplify-signin-with-hostedUI";
var name = "CognitoIdentityServiceProvider";
var DefaultOAuthStore = class {
  constructor(keyValueStorage) {
    this.keyValueStorage = keyValueStorage;
  }
  async clearOAuthInflightData() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    await Promise.all([
      this.keyValueStorage.removeItem(authKeys.inflightOAuth),
      this.keyValueStorage.removeItem(authKeys.oauthPKCE),
      this.keyValueStorage.removeItem(authKeys.oauthState)
    ]);
  }
  async clearOAuthData() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    await this.clearOAuthInflightData();
    await this.keyValueStorage.removeItem(V5_HOSTED_UI_KEY);
    return this.keyValueStorage.removeItem(authKeys.oauthSignIn);
  }
  loadOAuthState() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return this.keyValueStorage.getItem(authKeys.oauthState);
  }
  storeOAuthState(state) {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return this.keyValueStorage.setItem(authKeys.oauthState, state);
  }
  loadPKCE() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return this.keyValueStorage.getItem(authKeys.oauthPKCE);
  }
  storePKCE(pkce) {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return this.keyValueStorage.setItem(authKeys.oauthPKCE, pkce);
  }
  setAuthConfig(authConfigParam) {
    this.cognitoConfig = authConfigParam;
  }
  async loadOAuthInFlight() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return await this.keyValueStorage.getItem(authKeys.inflightOAuth) === "true";
  }
  async storeOAuthInFlight(inflight) {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    await this.keyValueStorage.setItem(authKeys.inflightOAuth, `${inflight}`);
  }
  async loadOAuthSignIn() {
    var _a2;
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    const isLegacyHostedUISignIn = await this.keyValueStorage.getItem(V5_HOSTED_UI_KEY);
    const [isOAuthSignIn, preferPrivateSession] = ((_a2 = await this.keyValueStorage.getItem(authKeys.oauthSignIn)) == null ? void 0 : _a2.split(",")) ?? [];
    return {
      isOAuthSignIn: isOAuthSignIn === "true" || isLegacyHostedUISignIn === "true",
      preferPrivateSession: preferPrivateSession === "true"
    };
  }
  async storeOAuthSignIn(oauthSignIn2, preferPrivateSession = false) {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    await this.keyValueStorage.setItem(authKeys.oauthSignIn, `${oauthSignIn2},${preferPrivateSession}`);
  }
};
var createKeysForAuthStorage2 = (provider, identifier) => {
  return getAuthStorageKeys(OAuthStorageKeys)(provider, identifier);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/oAuthStore.mjs
var oAuthStore = new DefaultOAuthStore(defaultStorage);

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/inflightPromise.mjs
var inflightPromises = [];
var addInflightPromise = (resolver) => {
  inflightPromises.push(resolver);
};
var resolveAndClearInflightPromises = () => {
  var _a2;
  while (inflightPromises.length) {
    (_a2 = inflightPromises.pop()) == null ? void 0 : _a2();
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/TokenOrchestrator.mjs
var TokenOrchestrator = class {
  constructor() {
    this.waitForInflightOAuth = isBrowser() ? async () => {
      if (!await oAuthStore.loadOAuthInFlight()) {
        return;
      }
      if (this.inflightPromise) {
        return this.inflightPromise;
      }
      this.inflightPromise = new Promise((resolve, _reject) => {
        addInflightPromise(resolve);
      });
      return this.inflightPromise;
    } : async () => {
    };
  }
  setAuthConfig(authConfig) {
    oAuthStore.setAuthConfig(authConfig.Cognito);
    this.authConfig = authConfig;
  }
  setTokenRefresher(tokenRefresher) {
    this.tokenRefresher = tokenRefresher;
  }
  setAuthTokenStore(tokenStore) {
    this.tokenStore = tokenStore;
  }
  getTokenStore() {
    if (!this.tokenStore) {
      throw new AuthError({
        name: "EmptyTokenStoreException",
        message: "TokenStore not set"
      });
    }
    return this.tokenStore;
  }
  getTokenRefresher() {
    if (!this.tokenRefresher) {
      throw new AuthError({
        name: "EmptyTokenRefresherException",
        message: "TokenRefresher not set"
      });
    }
    return this.tokenRefresher;
  }
  async getTokens(options) {
    var _a2, _b, _c, _d, _e;
    let tokens2;
    try {
      assertTokenProviderConfig((_a2 = this.authConfig) == null ? void 0 : _a2.Cognito);
    } catch (_err) {
      return null;
    }
    await this.waitForInflightOAuth();
    this.inflightPromise = void 0;
    tokens2 = await this.getTokenStore().loadTokens();
    const username = await this.getTokenStore().getLastAuthUser();
    if (tokens2 === null) {
      return null;
    }
    const idTokenExpired = !!(tokens2 == null ? void 0 : tokens2.idToken) && isTokenExpired({
      expiresAt: (((_c = (_b = tokens2.idToken) == null ? void 0 : _b.payload) == null ? void 0 : _c.exp) ?? 0) * 1e3,
      clockDrift: tokens2.clockDrift ?? 0
    });
    const accessTokenExpired = isTokenExpired({
      expiresAt: (((_e = (_d = tokens2.accessToken) == null ? void 0 : _d.payload) == null ? void 0 : _e.exp) ?? 0) * 1e3,
      clockDrift: tokens2.clockDrift ?? 0
    });
    if ((options == null ? void 0 : options.forceRefresh) || idTokenExpired || accessTokenExpired) {
      tokens2 = await this.refreshTokens({
        tokens: tokens2,
        username
      });
      if (tokens2 === null) {
        return null;
      }
    }
    return {
      accessToken: tokens2 == null ? void 0 : tokens2.accessToken,
      idToken: tokens2 == null ? void 0 : tokens2.idToken,
      signInDetails: tokens2 == null ? void 0 : tokens2.signInDetails
    };
  }
  async refreshTokens({ tokens: tokens2, username }) {
    try {
      const { signInDetails } = tokens2;
      const newTokens = await this.getTokenRefresher()({
        tokens: tokens2,
        authConfig: this.authConfig,
        username
      });
      newTokens.signInDetails = signInDetails;
      await this.setTokens({ tokens: newTokens });
      Hub.dispatch("auth", { event: "tokenRefresh" }, "Auth", AMPLIFY_SYMBOL);
      return newTokens;
    } catch (err) {
      return this.handleErrors(err);
    }
  }
  handleErrors(err) {
    assertServiceError(err);
    if (err.name !== AmplifyErrorCode.NetworkError) {
      this.clearTokens();
    }
    Hub.dispatch("auth", {
      event: "tokenRefresh_failure",
      data: { error: err }
    }, "Auth", AMPLIFY_SYMBOL);
    if (err.name.startsWith("NotAuthorizedException")) {
      return null;
    }
    throw err;
  }
  async setTokens({ tokens: tokens2 }) {
    return this.getTokenStore().storeTokens(tokens2);
  }
  async clearTokens() {
    return this.getTokenStore().clearTokens();
  }
  getDeviceMetadata(username) {
    return this.getTokenStore().getDeviceMetadata(username);
  }
  clearDeviceMetadata(username) {
    return this.getTokenStore().clearDeviceMetadata(username);
  }
  setOAuthMetadata(metadata) {
    return this.getTokenStore().setOAuthMetadata(metadata);
  }
  getOAuthMetadata() {
    return this.getTokenStore().getOAuthMetadata();
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/CognitoUserPoolsTokenProvider.mjs
var CognitoUserPoolsTokenProvider = class {
  constructor() {
    this.authTokenStore = new DefaultTokenStore();
    this.authTokenStore.setKeyValueStorage(defaultStorage);
    this.tokenOrchestrator = new TokenOrchestrator();
    this.tokenOrchestrator.setAuthTokenStore(this.authTokenStore);
    this.tokenOrchestrator.setTokenRefresher(refreshAuthTokens);
  }
  getTokens({ forceRefresh } = { forceRefresh: false }) {
    return this.tokenOrchestrator.getTokens({ forceRefresh });
  }
  setKeyValueStorage(keyValueStorage) {
    this.authTokenStore.setKeyValueStorage(keyValueStorage);
  }
  setAuthConfig(authConfig) {
    this.authTokenStore.setAuthConfig(authConfig);
    this.tokenOrchestrator.setAuthConfig(authConfig);
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/tokenProvider.mjs
var cognitoUserPoolsTokenProvider = new CognitoUserPoolsTokenProvider();
var { tokenOrchestrator } = cognitoUserPoolsTokenProvider;

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/cacheTokens.mjs
async function cacheCognitoTokens(AuthenticationResult) {
  if (AuthenticationResult.AccessToken) {
    const accessToken = decodeJWT(AuthenticationResult.AccessToken);
    const accessTokenIssuedAtInMillis = (accessToken.payload.iat || 0) * 1e3;
    const currentTime = (/* @__PURE__ */ new Date()).getTime();
    const clockDrift = accessTokenIssuedAtInMillis > 0 ? accessTokenIssuedAtInMillis - currentTime : 0;
    let idToken;
    let refreshToken;
    let deviceMetadata;
    if (AuthenticationResult.RefreshToken) {
      refreshToken = AuthenticationResult.RefreshToken;
    }
    if (AuthenticationResult.IdToken) {
      idToken = decodeJWT(AuthenticationResult.IdToken);
    }
    if (AuthenticationResult == null ? void 0 : AuthenticationResult.NewDeviceMetadata) {
      deviceMetadata = AuthenticationResult.NewDeviceMetadata;
    }
    const tokens2 = {
      accessToken,
      idToken,
      refreshToken,
      clockDrift,
      deviceMetadata,
      username: AuthenticationResult.username
    };
    if (AuthenticationResult == null ? void 0 : AuthenticationResult.signInDetails) {
      tokens2.signInDetails = AuthenticationResult.signInDetails;
    }
    await tokenOrchestrator.setTokens({
      tokens: tokens2
    });
  } else {
    throw new AmplifyError({
      message: "Invalid tokens",
      name: "InvalidTokens",
      recoverySuggestion: "Check Cognito UserPool settings"
    });
  }
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/dispatchSignedInHubEvent.mjs
var ERROR_MESSAGE = "Unable to get user session following successful sign-in.";
var dispatchSignedInHubEvent = async () => {
  try {
    Hub.dispatch("auth", {
      event: "signedIn",
      data: await getCurrentUser2()
    }, "Auth", AMPLIFY_SYMBOL);
  } catch (error3) {
    if (error3.name === USER_UNAUTHENTICATED_EXCEPTION) {
      throw new AuthError({
        name: UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION,
        message: ERROR_MESSAGE,
        recoverySuggestion: "This most likely is due to auth tokens not being persisted. If you are using cookie store, please ensure cookies can be correctly set from your server."
      });
    }
    throw error3;
  }
};

// node_modules/@aws-amplify/auth/dist/esm/client/utils/store/autoSignInStore.mjs
function defaultState() {
  return {
    active: false
  };
}
var autoSignInReducer = (state, action) => {
  switch (action.type) {
    case "SET_USERNAME":
      return {
        ...state,
        username: action.value
      };
    case "SET_SESSION":
      return {
        ...state,
        session: action.value
      };
    case "START":
      return {
        ...state,
        active: true
      };
    case "RESET":
      return defaultState();
    default:
      return state;
  }
};
var createAutoSignInStore = (reducer) => {
  let currentState = reducer(defaultState(), { type: "RESET" });
  return {
    getState: () => currentState,
    dispatch: (action) => {
      currentState = reducer(currentState, action);
    }
  };
};
var autoSignInStore = createAutoSignInStore(autoSignInReducer);

// node_modules/@aws-amplify/auth/dist/esm/client/utils/store/signInStore.mjs
var MS_TO_EXPIRY = 3 * 60 * 1e3;
var TGT_STATE = "CognitoSignInState";
var SIGN_IN_STATE_KEYS = {
  username: `${TGT_STATE}.username`,
  challengeName: `${TGT_STATE}.challengeName`,
  signInSession: `${TGT_STATE}.signInSession`,
  expiry: `${TGT_STATE}.expiry`
};
var signInReducer = (state, action) => {
  switch (action.type) {
    case "SET_SIGN_IN_SESSION":
      persistSignInState({ signInSession: action.value });
      return {
        ...state,
        signInSession: action.value
      };
    case "SET_SIGN_IN_STATE":
      persistSignInState(action.value);
      return {
        ...action.value
      };
    case "SET_CHALLENGE_NAME":
      persistSignInState({ challengeName: action.value });
      return {
        ...state,
        challengeName: action.value
      };
    case "SET_USERNAME":
      persistSignInState({ username: action.value });
      return {
        ...state,
        username: action.value
      };
    case "SET_INITIAL_STATE":
      return getInitialState();
    case "RESET_STATE":
      clearPersistedSignInState();
      return getDefaultState();
    default:
      return state;
  }
};
var isExpired = (expiryDate) => {
  const expiryTimestamp = Number(expiryDate);
  const currentTimestamp = Date.now();
  return expiryTimestamp <= currentTimestamp;
};
var resetActiveSignInState = () => {
  signInStore.dispatch({ type: "RESET_STATE" });
};
var clearPersistedSignInState = () => {
  for (const stateKey of Object.values(SIGN_IN_STATE_KEYS)) {
    syncSessionStorage.removeItem(stateKey);
  }
};
var getDefaultState = () => ({
  username: void 0,
  challengeName: void 0,
  signInSession: void 0
});
var getInitialState = () => {
  const expiry = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.expiry);
  if (!expiry || isExpired(expiry)) {
    clearPersistedSignInState();
    return getDefaultState();
  }
  const username = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.username) ?? void 0;
  const challengeName = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.challengeName) ?? void 0;
  const signInSession = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.signInSession) ?? void 0;
  return {
    username,
    challengeName,
    signInSession
  };
};
var createStore = (reducer) => {
  let currentState = reducer(getDefaultState(), { type: "SET_INITIAL_STATE" });
  return {
    getState: () => currentState,
    dispatch: (action) => {
      currentState = reducer(currentState, action);
    }
  };
};
var signInStore = createStore(signInReducer);
function setActiveSignInState(state) {
  signInStore.dispatch({
    type: "SET_SIGN_IN_STATE",
    value: state
  });
}
var persistSignInState = ({ challengeName, signInSession, username }) => {
  username && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.username, username);
  challengeName && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);
  if (signInSession) {
    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);
    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));
  }
};

// node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/errors.mjs
var PasskeyError = class _PasskeyError extends AmplifyError {
  constructor(params) {
    super(params);
    this.constructor = _PasskeyError;
    Object.setPrototypeOf(this, _PasskeyError.prototype);
  }
};
var PasskeyErrorCode;
(function(PasskeyErrorCode2) {
  PasskeyErrorCode2["PasskeyNotSupported"] = "PasskeyNotSupported";
  PasskeyErrorCode2["PasskeyAlreadyExists"] = "PasskeyAlreadyExists";
  PasskeyErrorCode2["InvalidPasskeyRegistrationOptions"] = "InvalidPasskeyRegistrationOptions";
  PasskeyErrorCode2["InvalidPasskeyAuthenticationOptions"] = "InvalidPasskeyAuthenticationOptions";
  PasskeyErrorCode2["RelyingPartyMismatch"] = "RelyingPartyMismatch";
  PasskeyErrorCode2["PasskeyRegistrationFailed"] = "PasskeyRegistrationFailed";
  PasskeyErrorCode2["PasskeyRetrievalFailed"] = "PasskeyRetrievalFailed";
  PasskeyErrorCode2["PasskeyRegistrationCanceled"] = "PasskeyRegistrationCanceled";
  PasskeyErrorCode2["PasskeyAuthenticationCanceled"] = "PasskeyAuthenticationCanceled";
  PasskeyErrorCode2["PasskeyOperationAborted"] = "PasskeyOperationAborted";
})(PasskeyErrorCode || (PasskeyErrorCode = {}));
var notSupportedRecoverySuggestion = "Passkeys may not be supported on this device. Ensure your application is running in a secure context (HTTPS) and Web Authentication API is supported.";
var abortOrCancelRecoverySuggestion = "User may have canceled the ceremony or another interruption has occurred. Check underlying error for details.";
var misconfigurationRecoverySuggestion = "Ensure your user pool is configured to support the WEB_AUTHN as an authentication factor.";
var passkeyErrorMap = {
  [PasskeyErrorCode.PasskeyNotSupported]: {
    message: "Passkeys may not be supported on this device.",
    recoverySuggestion: notSupportedRecoverySuggestion
  },
  [PasskeyErrorCode.InvalidPasskeyRegistrationOptions]: {
    message: "Invalid passkey registration options.",
    recoverySuggestion: misconfigurationRecoverySuggestion
  },
  [PasskeyErrorCode.InvalidPasskeyAuthenticationOptions]: {
    message: "Invalid passkey authentication options.",
    recoverySuggestion: misconfigurationRecoverySuggestion
  },
  [PasskeyErrorCode.PasskeyRegistrationFailed]: {
    message: "Device failed to create passkey.",
    recoverySuggestion: notSupportedRecoverySuggestion
  },
  [PasskeyErrorCode.PasskeyRetrievalFailed]: {
    message: "Device failed to retrieve passkey.",
    recoverySuggestion: "Passkeys may not be available on this device. Try an alternative authentication factor like PASSWORD, EMAIL_OTP, or SMS_OTP."
  },
  [PasskeyErrorCode.PasskeyAlreadyExists]: {
    message: "Passkey already exists in authenticator.",
    recoverySuggestion: "Proceed with existing passkey or try again after deleting the credential."
  },
  [PasskeyErrorCode.PasskeyRegistrationCanceled]: {
    message: "Passkey registration ceremony has been canceled.",
    recoverySuggestion: abortOrCancelRecoverySuggestion
  },
  [PasskeyErrorCode.PasskeyAuthenticationCanceled]: {
    message: "Passkey authentication ceremony has been canceled.",
    recoverySuggestion: abortOrCancelRecoverySuggestion
  },
  [PasskeyErrorCode.PasskeyOperationAborted]: {
    message: "Passkey operation has been aborted.",
    recoverySuggestion: abortOrCancelRecoverySuggestion
  },
  [PasskeyErrorCode.RelyingPartyMismatch]: {
    message: "Relying party does not match current domain.",
    recoverySuggestion: "Ensure relying party identifier matches current domain."
  }
};
var assertPasskeyError = createAssertionFunction(passkeyErrorMap, PasskeyError);
var handlePasskeyAuthenticationError = (err) => {
  if (err instanceof PasskeyError) {
    return err;
  }
  if (err instanceof Error) {
    if (err.name === "NotAllowedError") {
      const { message: message2, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyAuthenticationCanceled];
      return new PasskeyError({
        name: PasskeyErrorCode.PasskeyAuthenticationCanceled,
        message: message2,
        recoverySuggestion,
        underlyingError: err
      });
    }
  }
  return handlePasskeyError(err);
};
var handlePasskeyError = (err) => {
  if (err instanceof Error) {
    if (err.name === "AbortError") {
      const { message: message2, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyOperationAborted];
      return new PasskeyError({
        name: PasskeyErrorCode.PasskeyOperationAborted,
        message: message2,
        recoverySuggestion,
        underlyingError: err
      });
    }
    if (err.name === "SecurityError") {
      const { message: message2, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.RelyingPartyMismatch];
      return new PasskeyError({
        name: PasskeyErrorCode.RelyingPartyMismatch,
        message: message2,
        recoverySuggestion,
        underlyingError: err
      });
    }
  }
  return new PasskeyError({
    name: AmplifyErrorCode.Unknown,
    message: "An unknown error has occurred.",
    underlyingError: err
  });
};

// node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/getIsPasskeySupported.mjs
var getIsPasskeySupported = () => {
  return isBrowser() && window.isSecureContext && "credentials" in navigator && typeof window.PublicKeyCredential === "function";
};

// node_modules/@aws-amplify/auth/dist/esm/foundation/convert/base64url/convertArrayBufferToBase64Url.mjs
var convertArrayBufferToBase64Url = (buffer2) => {
  return base64Encoder.convert(new Uint8Array(buffer2), {
    urlSafe: true,
    skipPadding: true
  });
};

// node_modules/@aws-amplify/auth/dist/esm/foundation/convert/base64url/convertBase64UrlToArrayBuffer.mjs
var convertBase64UrlToArrayBuffer = (base64url) => {
  return Uint8Array.from(base64Decoder.convert(base64url, { urlSafe: true }), (x) => x.charCodeAt(0)).buffer;
};

// node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/serde.mjs
var deserializeJsonToPkcGetOptions = (input2) => {
  const challengeBuffer = convertBase64UrlToArrayBuffer(input2.challenge);
  const allowedCredentialsWithBuffer = (input2.allowCredentials || []).map((allowedCred) => ({
    ...allowedCred,
    id: convertBase64UrlToArrayBuffer(allowedCred.id)
  }));
  return {
    ...input2,
    challenge: challengeBuffer,
    allowCredentials: allowedCredentialsWithBuffer
  };
};
var serializePkcWithAssertionToJson = (input2) => {
  const response = {
    clientDataJSON: convertArrayBufferToBase64Url(input2.response.clientDataJSON),
    authenticatorData: convertArrayBufferToBase64Url(input2.response.authenticatorData),
    signature: convertArrayBufferToBase64Url(input2.response.signature)
  };
  if (input2.response.userHandle) {
    response.userHandle = convertArrayBufferToBase64Url(input2.response.userHandle);
  }
  const resultJson = {
    id: input2.id,
    rawId: convertArrayBufferToBase64Url(input2.rawId),
    type: input2.type,
    clientExtensionResults: input2.getClientExtensionResults(),
    response
  };
  if (input2.authenticatorAttachment) {
    resultJson.authenticatorAttachment = input2.authenticatorAttachment;
  }
  return resultJson;
};

// node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/types/index.mjs
function assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential) {
  assertPasskeyError(credential && credential instanceof PublicKeyCredential && credential.response instanceof AuthenticatorAssertionResponse, PasskeyErrorCode.PasskeyRetrievalFailed);
}

// node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/getPasskey.mjs
var getPasskey = async (input2) => {
  try {
    const isPasskeySupported = getIsPasskeySupported();
    assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);
    const passkeyGetOptions = deserializeJsonToPkcGetOptions(input2);
    const credential = await navigator.credentials.get({
      publicKey: passkeyGetOptions
    });
    assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential);
    return serializePkcWithAssertionToJson(credential);
  } catch (err) {
    throw handlePasskeyAuthenticationError(err);
  }
};

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmDeviceClient.mjs
var createConfirmDeviceClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ConfirmDevice"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/textEncoder/index.mjs
var textEncoder = {
  convert(input2) {
    return new TextEncoder().encode(input2);
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/BigInteger/BigInteger.mjs
function BigInteger(a, b) {
  if (a != null)
    this.fromString(a, b);
}
function nbi() {
  return new BigInteger(null, null);
}
var dbits;
var canary = 244837814094590;
var j_lm = (canary & 16777215) === 15715070;
function am1(i, x, w, j, c, n) {
  while (--n >= 0) {
    const v = x * this[i++] + w[j] + c;
    c = Math.floor(v / 67108864);
    w[j++] = v & 67108863;
  }
  return c;
}
function am2(i, x, w, j, c, n) {
  const xl = x & 32767;
  const xh = x >> 15;
  while (--n >= 0) {
    let l = this[i] & 32767;
    const h = this[i++] >> 15;
    const m = xh * l + h * xl;
    l = xl * l + ((m & 32767) << 15) + w[j] + (c & 1073741823);
    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
    w[j++] = l & 1073741823;
  }
  return c;
}
function am3(i, x, w, j, c, n) {
  const xl = x & 16383;
  const xh = x >> 14;
  while (--n >= 0) {
    let l = this[i] & 16383;
    const h = this[i++] >> 14;
    const m = xh * l + h * xl;
    l = xl * l + ((m & 16383) << 14) + w[j] + c;
    c = (l >> 28) + (m >> 14) + xh * h;
    w[j++] = l & 268435455;
  }
  return c;
}
var inBrowser = typeof navigator !== "undefined";
if (inBrowser && j_lm && navigator.appName === "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
} else if (inBrowser && j_lm && navigator.appName !== "Netscape") {
  BigInteger.prototype.am = am1;
  dbits = 26;
} else {
  BigInteger.prototype.am = am3;
  dbits = 28;
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = [];
var rr;
var vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv)
  BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
  BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
  BI_RC[rr++] = vv;
function int2char(n) {
  return BI_RM.charAt(n);
}
function intAt(s, i) {
  const c = BI_RC[s.charCodeAt(i)];
  return c == null ? -1 : c;
}
function bnpCopyTo(r) {
  for (let i = this.t - 1; i >= 0; --i)
    r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
}
function bnpFromInt(x) {
  this.t = 1;
  this.s = x < 0 ? -1 : 0;
  if (x > 0)
    this[0] = x;
  else if (x < -1)
    this[0] = x + this.DV;
  else
    this.t = 0;
}
function nbv(i) {
  const r = nbi();
  r.fromInt(i);
  return r;
}
function bnpFromString(s, b) {
  let k;
  if (b === 16)
    k = 4;
  else if (b === 8)
    k = 3;
  else if (b === 2)
    k = 1;
  else if (b === 32)
    k = 5;
  else if (b === 4)
    k = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  this.t = 0;
  this.s = 0;
  let i = s.length;
  let mi = false;
  let sh = 0;
  while (--i >= 0) {
    const x = intAt(s, i);
    if (x < 0) {
      if (s.charAt(i) === "-")
        mi = true;
      continue;
    }
    mi = false;
    if (sh === 0)
      this[this.t++] = x;
    else if (sh + k > this.DB) {
      this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
      this[this.t++] = x >> this.DB - sh;
    } else
      this[this.t - 1] |= x << sh;
    sh += k;
    if (sh >= this.DB)
      sh -= this.DB;
  }
  this.clamp();
  if (mi)
    BigInteger.ZERO.subTo(this, this);
}
function bnpClamp() {
  const c = this.s & this.DM;
  while (this.t > 0 && this[this.t - 1] == c)
    --this.t;
}
function bnToString(b) {
  if (this.s < 0)
    return "-" + this.negate().toString(b);
  let k;
  if (b == 16)
    k = 4;
  else if (b === 8)
    k = 3;
  else if (b === 2)
    k = 1;
  else if (b === 32)
    k = 5;
  else if (b === 4)
    k = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  const km = (1 << k) - 1;
  let d;
  let m = false;
  let r = "";
  let i = this.t;
  let p = this.DB - i * this.DB % k;
  if (i-- > 0) {
    if (p < this.DB && (d = this[i] >> p) > 0) {
      m = true;
      r = int2char(d);
    }
    while (i >= 0) {
      if (p < k) {
        d = (this[i] & (1 << p) - 1) << k - p;
        d |= this[--i] >> (p += this.DB - k);
      } else {
        d = this[i] >> (p -= k) & km;
        if (p <= 0) {
          p += this.DB;
          --i;
        }
      }
      if (d > 0)
        m = true;
      if (m)
        r += int2char(d);
    }
  }
  return m ? r : "0";
}
function bnNegate() {
  const r = nbi();
  BigInteger.ZERO.subTo(this, r);
  return r;
}
function bnAbs() {
  return this.s < 0 ? this.negate() : this;
}
function bnCompareTo(a) {
  let r = this.s - a.s;
  if (r != 0)
    return r;
  let i = this.t;
  r = i - a.t;
  if (r != 0)
    return this.s < 0 ? -r : r;
  while (--i >= 0)
    if ((r = this[i] - a[i]) != 0)
      return r;
  return 0;
}
function nbits(x) {
  let r = 1;
  let t2;
  if ((t2 = x >>> 16) !== 0) {
    x = t2;
    r += 16;
  }
  if ((t2 = x >> 8) !== 0) {
    x = t2;
    r += 8;
  }
  if ((t2 = x >> 4) !== 0) {
    x = t2;
    r += 4;
  }
  if ((t2 = x >> 2) !== 0) {
    x = t2;
    r += 2;
  }
  if ((t2 = x >> 1) !== 0) {
    x = t2;
    r += 1;
  }
  return r;
}
function bnBitLength() {
  if (this.t <= 0)
    return 0;
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}
function bnpDLShiftTo(n, r) {
  let i;
  for (i = this.t - 1; i >= 0; --i)
    r[i + n] = this[i];
  for (i = n - 1; i >= 0; --i)
    r[i] = 0;
  r.t = this.t + n;
  r.s = this.s;
}
function bnpDRShiftTo(n, r) {
  for (let i = n; i < this.t; ++i)
    r[i - n] = this[i];
  r.t = Math.max(this.t - n, 0);
  r.s = this.s;
}
function bnpLShiftTo(n, r) {
  const bs = n % this.DB;
  const cbs = this.DB - bs;
  const bm = (1 << cbs) - 1;
  const ds = Math.floor(n / this.DB);
  let c = this.s << bs & this.DM;
  let i;
  for (i = this.t - 1; i >= 0; --i) {
    r[i + ds + 1] = this[i] >> cbs | c;
    c = (this[i] & bm) << bs;
  }
  for (i = ds - 1; i >= 0; --i)
    r[i] = 0;
  r[ds] = c;
  r.t = this.t + ds + 1;
  r.s = this.s;
  r.clamp();
}
function bnpRShiftTo(n, r) {
  r.s = this.s;
  const ds = Math.floor(n / this.DB);
  if (ds >= this.t) {
    r.t = 0;
    return;
  }
  const bs = n % this.DB;
  const cbs = this.DB - bs;
  const bm = (1 << bs) - 1;
  r[0] = this[ds] >> bs;
  for (let i = ds + 1; i < this.t; ++i) {
    r[i - ds - 1] |= (this[i] & bm) << cbs;
    r[i - ds] = this[i] >> bs;
  }
  if (bs > 0)
    r[this.t - ds - 1] |= (this.s & bm) << cbs;
  r.t = this.t - ds;
  r.clamp();
}
function bnpSubTo(a, r) {
  let i = 0;
  let c = 0;
  const m = Math.min(a.t, this.t);
  while (i < m) {
    c += this[i] - a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
  }
  if (a.t < this.t) {
    c -= a.s;
    while (i < this.t) {
      c += this[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c += this.s;
  } else {
    c += this.s;
    while (i < a.t) {
      c -= a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c -= a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c < -1)
    r[i++] = this.DV + c;
  else if (c > 0)
    r[i++] = c;
  r.t = i;
  r.clamp();
}
function bnpMultiplyTo(a, r) {
  const x = this.abs();
  const y = a.abs();
  let i = x.t;
  r.t = i + y.t;
  while (--i >= 0)
    r[i] = 0;
  for (i = 0; i < y.t; ++i)
    r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
  r.s = 0;
  r.clamp();
  if (this.s !== a.s)
    BigInteger.ZERO.subTo(r, r);
}
function bnpSquareTo(r) {
  const x = this.abs();
  let i = r.t = 2 * x.t;
  while (--i >= 0)
    r[i] = 0;
  for (i = 0; i < x.t - 1; ++i) {
    const c = x.am(i, x[i], r, 2 * i, 0, 1);
    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
      r[i + x.t] -= x.DV;
      r[i + x.t + 1] = 1;
    }
  }
  if (r.t > 0)
    r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
  r.s = 0;
  r.clamp();
}
function bnpDivRemTo(m, q, r) {
  const pm = m.abs();
  if (pm.t <= 0)
    return;
  const pt = this.abs();
  if (pt.t < pm.t) {
    if (q != null)
      q.fromInt(0);
    if (r != null)
      this.copyTo(r);
    return;
  }
  if (r === null)
    r = nbi();
  const y = nbi();
  const ts = this.s;
  const ms = m.s;
  const nsh = this.DB - nbits(pm[pm.t - 1]);
  if (nsh > 0) {
    pm.lShiftTo(nsh, y);
    pt.lShiftTo(nsh, r);
  } else {
    pm.copyTo(y);
    pt.copyTo(r);
  }
  const ys = y.t;
  const y0 = y[ys - 1];
  if (y0 === 0)
    return;
  const yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
  const d1 = this.FV / yt;
  const d2 = (1 << this.F1) / yt;
  const e = 1 << this.F2;
  let i = r.t;
  let j = i - ys;
  const t2 = q === null ? nbi() : q;
  y.dlShiftTo(j, t2);
  if (r.compareTo(t2) >= 0) {
    r[r.t++] = 1;
    r.subTo(t2, r);
  }
  BigInteger.ONE.dlShiftTo(ys, t2);
  t2.subTo(y, y);
  while (y.t < ys)
    y[y.t++] = 0;
  while (--j >= 0) {
    let qd = r[--i] === y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
      y.dlShiftTo(j, t2);
      r.subTo(t2, r);
      while (r[i] < --qd)
        r.subTo(t2, r);
    }
  }
  if (q !== null) {
    r.drShiftTo(ys, q);
    if (ts !== ms)
      BigInteger.ZERO.subTo(q, q);
  }
  r.t = ys;
  r.clamp();
  if (nsh > 0)
    r.rShiftTo(nsh, r);
  if (ts < 0)
    BigInteger.ZERO.subTo(r, r);
}
function bnMod(a) {
  const r = nbi();
  this.abs().divRemTo(a, null, r);
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
    a.subTo(r, r);
  return r;
}
function bnpInvDigit() {
  if (this.t < 1)
    return 0;
  const x = this[0];
  if ((x & 1) === 0)
    return 0;
  let y = x & 3;
  y = y * (2 - (x & 15) * y) & 15;
  y = y * (2 - (x & 255) * y) & 255;
  y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
  y = y * (2 - x * y % this.DV) % this.DV;
  return y > 0 ? this.DV - y : -y;
}
function bnEquals(a) {
  return this.compareTo(a) === 0;
}
function bnpAddTo(a, r) {
  let i = 0;
  let c = 0;
  const m = Math.min(a.t, this.t);
  while (i < m) {
    c += this[i] + a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
  }
  if (a.t < this.t) {
    c += a.s;
    while (i < this.t) {
      c += this[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c += this.s;
  } else {
    c += this.s;
    while (i < a.t) {
      c += a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c += a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c > 0)
    r[i++] = c;
  else if (c < -1)
    r[i++] = this.DV + c;
  r.t = i;
  r.clamp();
}
function bnAdd(a) {
  const r = nbi();
  this.addTo(a, r);
  return r;
}
function bnSubtract(a) {
  const r = nbi();
  this.subTo(a, r);
  return r;
}
function bnMultiply(a) {
  const r = nbi();
  this.multiplyTo(a, r);
  return r;
}
function bnDivide(a) {
  const r = nbi();
  this.divRemTo(a, r, null);
  return r;
}
function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp & 32767;
  this.mph = this.mp >> 15;
  this.um = (1 << m.DB - 15) - 1;
  this.mt2 = 2 * m.t;
}
function montConvert(x) {
  const r = nbi();
  x.abs().dlShiftTo(this.m.t, r);
  r.divRemTo(this.m, null, r);
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
    this.m.subTo(r, r);
  return r;
}
function montRevert(x) {
  const r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
}
function montReduce(x) {
  while (x.t <= this.mt2)
    x[x.t++] = 0;
  for (let i = 0; i < this.m.t; ++i) {
    let j = x[i] & 32767;
    const u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
    j = i + this.m.t;
    x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
    while (x[j] >= x.DV) {
      x[j] -= x.DV;
      x[++j]++;
    }
  }
  x.clamp();
  x.drShiftTo(this.m.t, x);
  if (x.compareTo(this.m) >= 0)
    x.subTo(this.m, x);
}
function montSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
}
function montMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
function bnModPow(e, m, callback) {
  let i = e.bitLength();
  let k;
  let r = nbv(1);
  const z = new Montgomery(m);
  if (i <= 0)
    return r;
  else if (i < 18)
    k = 1;
  else if (i < 48)
    k = 3;
  else if (i < 144)
    k = 4;
  else if (i < 768)
    k = 5;
  else
    k = 6;
  const g = [];
  let n = 3;
  const k1 = k - 1;
  const km = (1 << k) - 1;
  g[1] = z.convert(this);
  if (k > 1) {
    const g2 = nbi();
    z.sqrTo(g[1], g2);
    while (n <= km) {
      g[n] = nbi();
      z.mulTo(g2, g[n - 2], g[n]);
      n += 2;
    }
  }
  let j = e.t - 1;
  let w;
  let is1 = true;
  let r2 = nbi();
  let t2;
  i = nbits(e[j]) - 1;
  while (j >= 0) {
    if (i >= k1)
      w = e[j] >> i - k1 & km;
    else {
      w = (e[j] & (1 << i + 1) - 1) << k1 - i;
      if (j > 0)
        w |= e[j - 1] >> this.DB + i - k1;
    }
    n = k;
    while ((w & 1) === 0) {
      w >>= 1;
      --n;
    }
    if ((i -= n) < 0) {
      i += this.DB;
      --j;
    }
    if (is1) {
      g[w].copyTo(r);
      is1 = false;
    } else {
      while (n > 1) {
        z.sqrTo(r, r2);
        z.sqrTo(r2, r);
        n -= 2;
      }
      if (n > 0)
        z.sqrTo(r, r2);
      else {
        t2 = r;
        r = r2;
        r2 = t2;
      }
      z.mulTo(r2, g[w], r);
    }
    while (j >= 0 && (e[j] & 1 << i) === 0) {
      z.sqrTo(r, r2);
      t2 = r;
      r = r2;
      r2 = t2;
      if (--i < 0) {
        i = this.DB - 1;
        --j;
      }
    }
  }
  const result = z.revert(r);
  callback(null, result);
  return result;
}
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.modPow = bnModPow;
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/calculate/calculateS.mjs
var calculateS = async ({ a, g, k, x, B, N, U }) => {
  return new Promise((resolve, reject) => {
    g.modPow(x, N, (outerErr, outerResult) => {
      if (outerErr) {
        reject(outerErr);
        return;
      }
      B.subtract(k.multiply(outerResult)).modPow(a.add(U.multiply(x)), N, (innerErr, innerResult) => {
        if (innerErr) {
          reject(innerErr);
          return;
        }
        resolve(innerResult.mod(N));
      });
    });
  });
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/constants.mjs
var
var SHORT_TO_HEX2 = {};
var HEX_TO_SHORT2 = {};
for (let i = 0; i < 256; i++) {
  let encodedByte = i.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = `0${encodedByte}`;
  }
  SHORT_TO_HEX2[i] = encodedByte;
  HEX_TO_SHORT2[encodedByte] = i;
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getBytesFromHex.mjs
var getBytesFromHex = (encoded) => {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  const out = new Uint8Array(encoded.length / 2);
  for (let i = 0; i < encoded.length; i += 2) {
    const encodedByte = encoded.slice(i, i + 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT2) {
      out[i / 2] = HEX_TO_SHORT2[encodedByte];
    } else {
      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
  }
  return out;
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHexFromBytes.mjs
var getHexFromBytes = (bytes) => {
  let out = "";
  for (let i = 0; i < bytes.byteLength; i++) {
    out += SHORT_TO_HEX2[bytes[i]];
  }
  return out;
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHashFromData.mjs
var getHashFromData = (data) => {
  const sha256 = new Sha256();
  sha256.update(data);
  const hashedData = sha256.digestSync();
  const hashHexFromUint8 = getHexFromBytes(hashedData);
  return new Array(64 - hashHexFromUint8.length).join("0") + hashHexFromUint8;
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHashFromHex.mjs
var getHashFromHex = (hexStr) => getHashFromData(getBytesFromHex(hexStr));

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getPaddedHex.mjs
var HEX_MSB_REGEX = /^[89a-f]/i;
var getPaddedHex = (bigInt) => {
  if (!(bigInt instanceof BigInteger)) {
    throw new Error("Not a BigInteger");
  }
  const isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;
  let hexStr = bigInt.abs().toString(16);
  hexStr = hexStr.length % 2 !== 0 ? `0${hexStr}` : hexStr;
  hexStr = HEX_MSB_REGEX.test(hexStr) ? `00${hexStr}` : hexStr;
  if (isNegative) {
    const invertedNibbles = hexStr.split("").map((x) => {
      const invertedNibble = ~parseInt(x, 16) & 15;
      return "0123456789ABCDEF".charAt(invertedNibble);
    }).join("");
    const flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);
    hexStr = flippedBitsBI.toString(16);
    if (hexStr.toUpperCase().startsWith("FF8")) {
      hexStr = hexStr.substring(2);
    }
  }
  return hexStr;
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/calculate/calculateU.mjs
var calculateU = ({ A, B }) => {
  const U = new BigInteger(getHashFromHex(getPaddedHex(A) + getPaddedHex(B)), 16);
  if (U.equals(BigInteger.ZERO)) {
    throw new Error("U cannot be zero.");
  }
  return U;
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHkdfKey.mjs
var getHkdfKey = (ikm, salt, info) => {
  const awsCryptoHash = new Sha256(salt);
  awsCryptoHash.update(ikm);
  const resultFromAWSCryptoPrk = awsCryptoHash.digestSync();
  const awsCryptoHashHmac = new Sha256(resultFromAWSCryptoPrk);
  awsCryptoHashHmac.update(info);
  const resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();
  const hashHexFromAWSCrypto = resultFromAWSCryptoHmac;
  return hashHexFromAWSCrypto.slice(0, 16);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getRandomBytes.mjs
var getRandomBytes = (nBytes) => {
  const str = new WordArray().random(nBytes).toString();
  return getBytesFromHex(str);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getRandomString.mjs
var getRandomString = () => base64Encoder.convert(getRandomBytes(40));

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/AuthenticationHelper/AuthenticationHelper.mjs
var AuthenticationHelper = class {
  constructor({ userPoolName, a, g, A, N }) {
    this.encoder = textEncoder;
    this.userPoolName = userPoolName;
    this.a = a;
    this.g = g;
    this.A = A;
    this.N = N;
    this.k = new BigInteger(getHashFromHex(`${getPaddedHex(N)}${getPaddedHex(g)}`), 16);
  }
  /**
   * @returns {string} Generated random value included in password hash.
   */
  getRandomPassword() {
    if (!this.randomPassword) {
      throw new AuthError({
        name: "EmptyBigIntegerRandomPassword",
        message: "random password is empty"
      });
    }
    return this.randomPassword;
  }
  /**
   * @returns {string} Generated random value included in devices hash.
   */
  getSaltToHashDevices() {
    if (!this.saltToHashDevices) {
      throw new AuthError({
        name: "EmptyBigIntegersaltToHashDevices",
        message: "saltToHashDevices is empty"
      });
    }
    return this.saltToHashDevices;
  }
  /**
   * @returns {string} Value used to verify devices.
   */
  getVerifierDevices() {
    if (!this.verifierDevices) {
      throw new AuthError({
        name: "EmptyBigIntegerVerifierDevices",
        message: "verifyDevices is empty"
      });
    }
    return this.verifierDevices;
  }
  /**
   * Generate salts and compute verifier.
   *
   * @param {string} deviceGroupKey Devices to generate verifier for.
   * @param {string} username User to generate verifier for.
   *
   * @returns {Promise<void>}
   */
  async generateHashDevice(deviceGroupKey, username) {
    this.randomPassword = getRandomString();
    const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;
    const hashedString = getHashFromData(combinedString);
    const hexRandom = getHexFromBytes(getRandomBytes(16));
    this.saltToHashDevices = getPaddedHex(new BigInteger(hexRandom, 16));
    return new Promise((resolve, reject) => {
      this.g.modPow(new BigInteger(getHashFromHex(this.saltToHashDevices + hashedString), 16), this.N, (err, result) => {
        if (err) {
          reject(err);
          return;
        }
        this.verifierDevices = getPaddedHex(result);
        resolve();
      });
    });
  }
  /**
   * Calculates the final HKDF key based on computed S value, computed U value and the key
   *
   * @param {String} username Username.
   * @param {String} password Password.
   * @param {AuthBigInteger} B Server B value.
   * @param {AuthBigInteger} salt Generated salt.
   */
  async getPasswordAuthenticationKey({ username, password, serverBValue, salt }) {
    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {
      throw new Error("B cannot be zero.");
    }
    const U = calculateU({
      A: this.A,
      B: serverBValue
    });
    const usernamePassword = `${this.userPoolName}${username}:${password}`;
    const usernamePasswordHash = getHashFromData(usernamePassword);
    const x = new BigInteger(getHashFromHex(getPaddedHex(salt) + usernamePasswordHash), 16);
    const S = await calculateS({
      a: this.a,
      g: this.g,
      k: this.k,
      x,
      B: serverBValue,
      N: this.N,
      U
    });
    const context2 = this.encoder.convert("Caldera Derived Key");
    const spacer = this.encoder.convert(String.fromCharCode(1));
    const info = new Uint8Array(context2.byteLength + spacer.byteLength);
    info.set(context2, 0);
    info.set(spacer, context2.byteLength);
    const hkdfKey = getHkdfKey(getBytesFromHex(getPaddedHex(S)), getBytesFromHex(getPaddedHex(U)), info);
    return hkdfKey;
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/calculate/calculateA.mjs
var calculateA = async ({ a, g, N }) => {
  return new Promise((resolve, reject) => {
    g.modPow(a, N, (err, A) => {
      if (err) {
        reject(err);
        return;
      }
      if (A.mod(N).equals(BigInteger.ZERO)) {
        reject(new Error("Illegal parameter. A mod N cannot be 0."));
        return;
      }
      resolve(A);
    });
  });
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getAuthenticationHelper.mjs
var getAuthenticationHelper = async (userPoolName) => {
  const N = new BigInteger(INIT_N, 16);
  const g = new BigInteger("2", 16);
  const a = generateRandomBigInteger();
  const A = await calculateA({ a, g, N });
  return new AuthenticationHelper({ userPoolName, a, g, A, N });
};
var generateRandomBigInteger = () => {
  const hexRandom = getHexFromBytes(getRandomBytes(128));
  return new BigInteger(hexRandom, 16);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/getNewDeviceMetadata.mjs
async function getNewDeviceMetadata({ userPoolId, userPoolEndpoint, newDeviceMetadata, accessToken }) {
  if (!newDeviceMetadata)
    return void 0;
  const userPoolName = userPoolId.split("_")[1] || "";
  const authenticationHelper = await getAuthenticationHelper(userPoolName);
  const deviceKey = newDeviceMetadata == null ? void 0 : newDeviceMetadata.DeviceKey;
  const deviceGroupKey = newDeviceMetadata == null ? void 0 : newDeviceMetadata.DeviceGroupKey;
  try {
    await authenticationHelper.generateHashDevice(deviceGroupKey ?? "", deviceKey ?? "");
  } catch (errGenHash) {
    return void 0;
  }
  const deviceSecretVerifierConfig = {
    Salt: base64Encoder.convert(getBytesFromHex(authenticationHelper.getSaltToHashDevices())),
    PasswordVerifier: base64Encoder.convert(getBytesFromHex(authenticationHelper.getVerifierDevices()))
  };
  const randomPassword = authenticationHelper.getRandomPassword();
  try {
    const confirmDevice = createConfirmDeviceClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    await confirmDevice({ region: getRegionFromUserPoolId(userPoolId) }, {
      AccessToken: accessToken,
      DeviceName: await getDeviceName(),
      DeviceKey: newDeviceMetadata == null ? void 0 : newDeviceMetadata.DeviceKey,
      DeviceSecretVerifierConfig: deviceSecretVerifierConfig
    });
    return {
      deviceKey,
      deviceGroupKey,
      randomPassword
    };
  } catch (error3) {
    return void 0;
  }
}

// node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleWebAuthnSignInResult.mjs
async function handleWebAuthnSignInResult(challengeParameters) {
  var _a2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { username, signInSession, signInDetails, challengeName } = signInStore.getState();
  if (challengeName !== "WEB_AUTHN" || !username) {
    throw new AuthError({
      name: AuthErrorCodes.SignInException,
      message: "Unable to proceed due to invalid sign in state."
    });
  }
  const { CREDENTIAL_REQUEST_OPTIONS: credentialRequestOptions } = challengeParameters;
  assertPasskeyError(!!credentialRequestOptions, PasskeyErrorCode.InvalidPasskeyAuthenticationOptions);
  const cred = await getPasskey(JSON.parse(credentialRequestOptions));
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: authConfig.userPoolEndpoint
    })
  });
  const { ChallengeName: nextChallengeName, ChallengeParameters: nextChallengeParameters, AuthenticationResult: authenticationResult, Session: nextSession } = await respondToAuthChallenge({
    region: getRegionFromUserPoolId(authConfig.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, {
    ChallengeName: "WEB_AUTHN",
    ChallengeResponses: {
      USERNAME: username,
      CREDENTIAL: JSON.stringify(cred)
    },
    ClientId: authConfig.userPoolClientId,
    Session: signInSession
  });
  setActiveSignInState({
    signInSession: nextSession,
    username,
    challengeName: nextChallengeName,
    signInDetails
  });
  if (authenticationResult) {
    await cacheCognitoTokens({
      ...authenticationResult,
      username,
      NewDeviceMetadata: await getNewDeviceMetadata({
        userPoolId: authConfig.userPoolId,
        userPoolEndpoint: authConfig.userPoolEndpoint,
        newDeviceMetadata: authenticationResult.NewDeviceMetadata,
        accessToken: authenticationResult.AccessToken
      }),
      signInDetails
    });
    signInStore.dispatch({ type: "RESET_STATE" });
    await dispatchSignedInHubEvent();
    return {
      isSignedIn: true,
      nextStep: { signInStep: "DONE" }
    };
  }
  if (nextChallengeName === "WEB_AUTHN") {
    throw new AuthError({
      name: AuthErrorCodes.SignInException,
      message: "Sequential WEB_AUTHN challenges returned from underlying service cannot be handled."
    });
  }
  return {
    challengeName: nextChallengeName,
    challengeParameters: nextChallengeParameters
  };
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getNowString.mjs
var MONTH_NAMES = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
var WEEK_NAMES = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var getNowString = () => {
  const now = /* @__PURE__ */ new Date();
  const weekDay = WEEK_NAMES[now.getUTCDay()];
  const month = MONTH_NAMES[now.getUTCMonth()];
  const day = now.getUTCDate();
  let hours = now.getUTCHours();
  if (hours < 10) {
    hours = `0${hours}`;
  }
  let minutes = now.getUTCMinutes();
  if (minutes < 10) {
    minutes = `0${minutes}`;
  }
  let seconds = now.getUTCSeconds();
  if (seconds < 10) {
    seconds = `0${seconds}`;
  }
  const year = now.getUTCFullYear();
  const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;
  return dateNow;
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getSignatureString.mjs
var getSignatureString = ({ userPoolName, username, challengeParameters, dateNow, hkdf }) => {
  const bufUPIDaToB = textEncoder.convert(userPoolName);
  const bufUNaToB = textEncoder.convert(username);
  const bufSBaToB = urlB64ToUint8Array(challengeParameters.SECRET_BLOCK);
  const bufDNaToB = textEncoder.convert(dateNow);
  const bufConcat = new Uint8Array(bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength + bufDNaToB.byteLength);
  bufConcat.set(bufUPIDaToB, 0);
  bufConcat.set(bufUNaToB, bufUPIDaToB.byteLength);
  bufConcat.set(bufSBaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength);
  bufConcat.set(bufDNaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength);
  const awsCryptoHash = new Sha256(hkdf);
  awsCryptoHash.update(bufConcat);
  const resultFromAWSCrypto = awsCryptoHash.digestSync();
  const signatureString = base64Encoder.convert(resultFromAWSCrypto);
  return signatureString;
};
var urlB64ToUint8Array = (base64String) => {
  const padding = "=".repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");
  const rawData = base64Decoder.convert(base64);
  const outputArray = new Uint8Array(rawData.length);
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/handleDeviceSRPAuth.mjs
async function handleDeviceSRPAuth({ username, config: config2, clientMetadata, session, tokenOrchestrator: tokenOrchestrator2 }) {
  const { userPoolId, userPoolEndpoint } = config2;
  const clientId = config2.userPoolClientId;
  const deviceMetadata = await (tokenOrchestrator2 == null ? void 0 : tokenOrchestrator2.getDeviceMetadata(username));
  assertDeviceMetadata(deviceMetadata);
  const authenticationHelper = await getAuthenticationHelper(deviceMetadata.deviceGroupKey);
  const challengeResponses = {
    USERNAME: username,
    SRP_A: authenticationHelper.A.toString(16),
    DEVICE_KEY: deviceMetadata.deviceKey
  };
  const jsonReqResponseChallenge = {
    ChallengeName: "DEVICE_SRP_AUTH",
    ClientId: clientId,
    ChallengeResponses: challengeResponses,
    ClientMetadata: clientMetadata,
    Session: session
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { ChallengeParameters: respondedChallengeParameters, Session } = await respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);
  return handleDevicePasswordVerifier(username, respondedChallengeParameters, clientMetadata, Session, authenticationHelper, config2, tokenOrchestrator2);
}
async function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, { userPoolId, userPoolClientId, userPoolEndpoint }, tokenOrchestrator2) {
  const deviceMetadata = await (tokenOrchestrator2 == null ? void 0 : tokenOrchestrator2.getDeviceMetadata(username));
  assertDeviceMetadata(deviceMetadata);
  const serverBValue = new BigInteger(challengeParameters == null ? void 0 : challengeParameters.SRP_B, 16);
  const salt = new BigInteger(challengeParameters == null ? void 0 : challengeParameters.SALT, 16);
  const { deviceKey } = deviceMetadata;
  const { deviceGroupKey } = deviceMetadata;
  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({
    username: deviceMetadata.deviceKey,
    password: deviceMetadata.randomPassword,
    serverBValue,
    salt
  });
  const dateNow = getNowString();
  const challengeResponses = {
    USERNAME: (challengeParameters == null ? void 0 : challengeParameters.USERNAME) ?? username,
    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters == null ? void 0 : challengeParameters.SECRET_BLOCK,
    TIMESTAMP: dateNow,
    PASSWORD_CLAIM_SIGNATURE: getSignatureString({
      username: deviceKey,
      userPoolName: deviceGroupKey,
      challengeParameters,
      dateNow,
      hkdf
    }),
    DEVICE_KEY: deviceKey
  };
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReqResponseChallenge = {
    ChallengeName: "DEVICE_PASSWORD_VERIFIER",
    ClientId: userPoolClientId,
    ChallengeResponses: challengeResponses,
    Session: session,
    ClientMetadata: clientMetadata,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  return respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/handlePasswordVerifierChallenge.mjs
async function handlePasswordVerifierChallenge(password, challengeParameters, clientMetadata, session, authenticationHelper, config2, tokenOrchestrator2) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const userPoolName = (userPoolId == null ? void 0 : userPoolId.split("_")[1]) || "";
  const serverBValue = new BigInteger(challengeParameters == null ? void 0 : challengeParameters.SRP_B, 16);
  const salt = new BigInteger(challengeParameters == null ? void 0 : challengeParameters.SALT, 16);
  const username = challengeParameters == null ? void 0 : challengeParameters.USER_ID_FOR_SRP;
  if (!username)
    throw new AuthError({
      name: "EmptyUserIdForSRPException",
      message: "USER_ID_FOR_SRP was not found in challengeParameters"
    });
  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({
    username,
    password,
    serverBValue,
    salt
  });
  const dateNow = getNowString();
  const challengeResponses = {
    USERNAME: username,
    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters == null ? void 0 : challengeParameters.SECRET_BLOCK,
    TIMESTAMP: dateNow,
    PASSWORD_CLAIM_SIGNATURE: getSignatureString({
      username,
      userPoolName,
      challengeParameters,
      dateNow,
      hkdf
    })
  };
  const deviceMetadata = await tokenOrchestrator2.getDeviceMetadata(username);
  if (deviceMetadata && deviceMetadata.deviceKey) {
    challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReqResponseChallenge = {
    ChallengeName: "PASSWORD_VERIFIER",
    ChallengeResponses: challengeResponses,
    ClientMetadata: clientMetadata,
    Session: session,
    ClientId: userPoolClientId,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);
  if (response.ChallengeName === "DEVICE_SRP_AUTH")
    return handleDeviceSRPAuth({
      username,
      config: config2,
      clientMetadata,
      session: response.Session,
      tokenOrchestrator: tokenOrchestrator2
    });
  return response;
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/retryOnResourceNotFoundException.mjs
async function retryOnResourceNotFoundException(func, args, username, tokenOrchestrator2) {
  try {
    return await func(...args);
  } catch (error3) {
    if (error3 instanceof AuthError && error3.name === "ResourceNotFoundException" && error3.message.includes("Device does not exist.")) {
      await tokenOrchestrator2.clearDeviceMetadata(username);
      return func(...args);
    }
    throw error3;
  }
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/setActiveSignInUsername.mjs
function setActiveSignInUsername(username) {
  const { dispatch } = signInStore;
  dispatch({ type: "SET_USERNAME", value: username });
}

// node_modules/@aws-amplify/auth/dist/esm/client/flows/shared/handlePasswordSRP.mjs
async function handlePasswordSRP({ username, password, clientMetadata, config: config2, tokenOrchestrator: tokenOrchestrator2, authFlow, preferredChallenge }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const userPoolName = (userPoolId == null ? void 0 : userPoolId.split("_")[1]) || "";
  const authenticationHelper = await getAuthenticationHelper(userPoolName);
  const authParameters = {
    USERNAME: username,
    SRP_A: authenticationHelper.A.toString(16)
  };
  if (authFlow === "USER_AUTH" && preferredChallenge) {
    authParameters.PREFERRED_CHALLENGE = preferredChallenge;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    AuthFlow: authFlow,
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const resp = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  const { ChallengeParameters: challengeParameters, Session: session } = resp;
  const activeUsername = (challengeParameters == null ? void 0 : challengeParameters.USERNAME) ?? username;
  setActiveSignInUsername(activeUsername);
  if (resp.ChallengeName === "PASSWORD_VERIFIER") {
    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [
      password,
      challengeParameters,
      clientMetadata,
      session,
      authenticationHelper,
      config2,
      tokenOrchestrator2
    ], activeUsername, tokenOrchestrator2);
  }
  return resp;
}

// node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleSelectChallenge.mjs
async function initiateSelectedChallenge({ username, session, selectedChallenge, config: config2, clientMetadata }) {
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: config2.userPoolEndpoint
    })
  });
  return respondToAuthChallenge({
    region: getRegionFromUserPoolId(config2.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, {
    ChallengeName: "SELECT_CHALLENGE",
    ChallengeResponses: {
      USERNAME: username,
      ANSWER: selectedChallenge
    },
    ClientId: config2.userPoolClientId,
    Session: session,
    ClientMetadata: clientMetadata
  });
}

// node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleSelectChallengeWithPassword.mjs
async function handleSelectChallengeWithPassword(username, password, clientMetadata, config2, session) {
  var _a2;
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const authParameters = {
    ANSWER: "PASSWORD",
    USERNAME: username,
    PASSWORD: password
  };
  const userContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, {
    ChallengeName: "SELECT_CHALLENGE",
    ChallengeResponses: authParameters,
    ClientId: userPoolClientId,
    ClientMetadata: clientMetadata,
    Session: session,
    UserContextData: userContextData
  });
  const activeUsername = ((_a2 = response.ChallengeParameters) == null ? void 0 : _a2.USERNAME) ?? username;
  setActiveSignInUsername(activeUsername);
  return response;
}

// node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleSelectChallengeWithPasswordSRP.mjs
async function handleSelectChallengeWithPasswordSRP(username, password, clientMetadata, config2, session, tokenOrchestrator2) {
  var _a2;
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const userPoolName = userPoolId.split("_")[1] || "";
  const authenticationHelper = await getAuthenticationHelper(userPoolName);
  const authParameters = {
    ANSWER: "PASSWORD_SRP",
    USERNAME: username,
    SRP_A: authenticationHelper.A.toString(16)
  };
  const userContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, {
    ChallengeName: "SELECT_CHALLENGE",
    ChallengeResponses: authParameters,
    ClientId: userPoolClientId,
    ClientMetadata: clientMetadata,
    Session: session,
    UserContextData: userContextData
  });
  const activeUsername = ((_a2 = response.ChallengeParameters) == null ? void 0 : _a2.USERNAME) ?? username;
  setActiveSignInUsername(activeUsername);
  if (response.ChallengeName === "PASSWORD_VERIFIER") {
    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [
      password,
      response.ChallengeParameters,
      clientMetadata,
      response.Session,
      authenticationHelper,
      config2,
      tokenOrchestrator2
    ], activeUsername, tokenOrchestrator2);
  }
  return response;
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signInHelpers.mjs
var USER_ATTRIBUTES = "userAttributes.";
function isWebAuthnResultAuthSignInOutput(result) {
  return "isSignedIn" in result && "nextStep" in result;
}
async function handleCustomChallenge({ challengeResponse, clientMetadata, session, username, config: config2, tokenOrchestrator: tokenOrchestrator2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const challengeResponses = {
    USERNAME: username,
    ANSWER: challengeResponse
  };
  const deviceMetadata = await (tokenOrchestrator2 == null ? void 0 : tokenOrchestrator2.getDeviceMetadata(username));
  if (deviceMetadata && deviceMetadata.deviceKey) {
    challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    ChallengeName: "CUSTOM_CHALLENGE",
    ChallengeResponses: challengeResponses,
    Session: session,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, jsonReq);
  if (response.ChallengeName === "DEVICE_SRP_AUTH") {
    return handleDeviceSRPAuth({
      username,
      config: config2,
      clientMetadata,
      session: response.Session,
      tokenOrchestrator: tokenOrchestrator2
    });
  }
  return response;
}
async function handleMFASetupChallenge({ challengeResponse, username, clientMetadata, session, deviceName, config: config2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  if (challengeResponse === "EMAIL") {
    return {
      ChallengeName: "MFA_SETUP",
      Session: session,
      ChallengeParameters: {
        MFAS_CAN_SETUP: '["EMAIL_OTP"]'
      },
      $metadata: {}
    };
  }
  if (challengeResponse === "TOTP") {
    return {
      ChallengeName: "MFA_SETUP",
      Session: session,
      ChallengeParameters: {
        MFAS_CAN_SETUP: '["SOFTWARE_TOKEN_MFA"]'
      },
      $metadata: {}
    };
  }
  const challengeResponses = {
    USERNAME: username
  };
  const isTOTPCode = /^\d+$/.test(challengeResponse);
  if (isTOTPCode) {
    const verifySoftwareToken = createVerifySoftwareTokenClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    const { Session } = await verifySoftwareToken({
      region: getRegionFromUserPoolId(userPoolId),
      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
    }, {
      UserCode: challengeResponse,
      Session: session,
      FriendlyDeviceName: deviceName
    });
    signInStore.dispatch({
      type: "SET_SIGN_IN_SESSION",
      value: Session
    });
    const jsonReq = {
      ChallengeName: "MFA_SETUP",
      ChallengeResponses: challengeResponses,
      Session,
      ClientMetadata: clientMetadata,
      ClientId: userPoolClientId
    };
    const respondToAuthChallenge = createRespondToAuthChallengeClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    return respondToAuthChallenge({
      region: getRegionFromUserPoolId(userPoolId),
      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
    }, jsonReq);
  }
  const isEmail = challengeResponse.includes("@");
  if (isEmail) {
    challengeResponses.EMAIL = challengeResponse;
    const jsonReq = {
      ChallengeName: "MFA_SETUP",
      ChallengeResponses: challengeResponses,
      Session: session,
      ClientMetadata: clientMetadata,
      ClientId: userPoolClientId
    };
    const respondToAuthChallenge = createRespondToAuthChallengeClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    return respondToAuthChallenge({
      region: getRegionFromUserPoolId(userPoolId),
      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
    }, jsonReq);
  }
  throw new AuthError({
    name: AuthErrorCodes.SignInException,
    message: `Cannot proceed with MFA setup using challengeResponse: ${challengeResponse}`,
    recoverySuggestion: 'Try passing "EMAIL", "TOTP", a valid email, or OTP code as the challengeResponse.'
  });
}
async function handleSelectMFATypeChallenge({ challengeResponse, username, clientMetadata, session, config: config2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  assertValidationError(challengeResponse === "TOTP" || challengeResponse === "SMS" || challengeResponse === "EMAIL", AuthValidationErrorCode.IncorrectMFAMethod);
  const challengeResponses = {
    USERNAME: username,
    ANSWER: mapMfaType(challengeResponse)
  };
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    ChallengeName: "SELECT_MFA_TYPE",
    ChallengeResponses: challengeResponses,
    Session: session,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  return respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, jsonReq);
}
async function handleCompleteNewPasswordChallenge({ challengeResponse, clientMetadata, session, username, requiredAttributes, config: config2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const challengeResponses = {
    ...createAttributes(requiredAttributes),
    NEW_PASSWORD: challengeResponse,
    USERNAME: username
  };
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    ChallengeName: "NEW_PASSWORD_REQUIRED",
    ChallengeResponses: challengeResponses,
    ClientMetadata: clientMetadata,
    Session: session,
    ClientId: userPoolClientId,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  return respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, jsonReq);
}
async function handleUserPasswordAuthFlow(username, password, clientMetadata, config2, tokenOrchestrator2) {
  var _a2, _b;
  const { userPoolClientId, userPoolId, userPoolEndpoint } = config2;
  const authParameters = {
    USERNAME: username,
    PASSWORD: password
  };
  const deviceMetadata = await tokenOrchestrator2.getDeviceMetadata(username);
  if (deviceMetadata && deviceMetadata.deviceKey) {
    authParameters.DEVICE_KEY = deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    AuthFlow: "USER_PASSWORD_AUTH",
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  const activeUsername = ((_a2 = response.ChallengeParameters) == null ? void 0 : _a2.USERNAME) ?? ((_b = response.ChallengeParameters) == null ? void 0 : _b.USER_ID_FOR_SRP) ?? username;
  setActiveSignInUsername(activeUsername);
  if (response.ChallengeName === "DEVICE_SRP_AUTH")
    return handleDeviceSRPAuth({
      username: activeUsername,
      config: config2,
      clientMetadata,
      session: response.Session,
      tokenOrchestrator: tokenOrchestrator2
    });
  return response;
}
async function handleUserSRPAuthFlow(username, password, clientMetadata, config2, tokenOrchestrator2) {
  return handlePasswordSRP({
    username,
    password,
    clientMetadata,
    config: config2,
    tokenOrchestrator: tokenOrchestrator2,
    authFlow: "USER_SRP_AUTH"
  });
}
async function handleCustomAuthFlowWithoutSRP(username, clientMetadata, config2, tokenOrchestrator2) {
  var _a2;
  const { userPoolClientId, userPoolId, userPoolEndpoint } = config2;
  const authParameters = {
    USERNAME: username
  };
  const deviceMetadata = await tokenOrchestrator2.getDeviceMetadata(username);
  if (deviceMetadata && deviceMetadata.deviceKey) {
    authParameters.DEVICE_KEY = deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    AuthFlow: "CUSTOM_AUTH",
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  const activeUsername = ((_a2 = response.ChallengeParameters) == null ? void 0 : _a2.USERNAME) ?? username;
  setActiveSignInUsername(activeUsername);
  if (response.ChallengeName === "DEVICE_SRP_AUTH")
    return handleDeviceSRPAuth({
      username: activeUsername,
      config: config2,
      clientMetadata,
      session: response.Session,
      tokenOrchestrator: tokenOrchestrator2
    });
  return response;
}
async function handleCustomSRPAuthFlow(username, password, clientMetadata, config2, tokenOrchestrator2) {
  assertTokenProviderConfig(config2);
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const userPoolName = (userPoolId == null ? void 0 : userPoolId.split("_")[1]) || "";
  const authenticationHelper = await getAuthenticationHelper(userPoolName);
  const authParameters = {
    USERNAME: username,
    SRP_A: authenticationHelper.A.toString(16),
    CHALLENGE_NAME: "SRP_A"
  };
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    AuthFlow: "CUSTOM_AUTH",
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { ChallengeParameters: challengeParameters, Session: session } = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  const activeUsername = (challengeParameters == null ? void 0 : challengeParameters.USERNAME) ?? username;
  setActiveSignInUsername(activeUsername);
  return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [
    password,
    challengeParameters,
    clientMetadata,
    session,
    authenticationHelper,
    config2,
    tokenOrchestrator2
  ], activeUsername, tokenOrchestrator2);
}
async function getSignInResult(params) {
  var _a2;
  const { challengeName, challengeParameters, availableChallenges } = params;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  switch (challengeName) {
    case "CUSTOM_CHALLENGE":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE",
          additionalInfo: challengeParameters
        }
      };
    case "MFA_SETUP": {
      const { signInSession, username } = signInStore.getState();
      const mfaSetupTypes = getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_SETUP)) || [];
      const allowedMfaSetupTypes = getAllowedMfaSetupTypes(mfaSetupTypes);
      const isTotpMfaSetupAvailable = allowedMfaSetupTypes.includes("TOTP");
      const isEmailMfaSetupAvailable = allowedMfaSetupTypes.includes("EMAIL");
      if (isTotpMfaSetupAvailable && isEmailMfaSetupAvailable) {
        return {
          isSignedIn: false,
          nextStep: {
            signInStep: "CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION",
            allowedMFATypes: allowedMfaSetupTypes
          }
        };
      }
      if (isEmailMfaSetupAvailable) {
        return {
          isSignedIn: false,
          nextStep: {
            signInStep: "CONTINUE_SIGN_IN_WITH_EMAIL_SETUP"
          }
        };
      }
      if (isTotpMfaSetupAvailable) {
        const associateSoftwareToken = createAssociateSoftwareTokenClient({
          endpointResolver: createCognitoUserPoolEndpointResolver({
            endpointOverride: authConfig.userPoolEndpoint
          })
        });
        const { Session, SecretCode: secretCode } = await associateSoftwareToken({ region: getRegionFromUserPoolId(authConfig.userPoolId) }, {
          Session: signInSession
        });
        signInStore.dispatch({
          type: "SET_SIGN_IN_SESSION",
          value: Session
        });
        return {
          isSignedIn: false,
          nextStep: {
            signInStep: "CONTINUE_SIGN_IN_WITH_TOTP_SETUP",
            totpSetupDetails: getTOTPSetupDetails(secretCode, username)
          }
        };
      }
      throw new AuthError({
        name: AuthErrorCodes.SignInException,
        message: `Cannot initiate MFA setup from available types: ${mfaSetupTypes}`
      });
    }
    case "NEW_PASSWORD_REQUIRED":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED",
          missingAttributes: parseAttributes(challengeParameters.requiredAttributes)
        }
      };
    case "SELECT_MFA_TYPE":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONTINUE_SIGN_IN_WITH_MFA_SELECTION",
          allowedMFATypes: getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_CHOOSE))
        }
      };
    case "SMS_OTP":
    case "SMS_MFA":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_SMS_CODE",
          codeDeliveryDetails: {
            deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,
            destination: challengeParameters.CODE_DELIVERY_DESTINATION
          }
        }
      };
    case "SOFTWARE_TOKEN_MFA":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_TOTP_CODE"
        }
      };
    case "EMAIL_OTP":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_EMAIL_CODE",
          codeDeliveryDetails: {
            deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,
            destination: challengeParameters.CODE_DELIVERY_DESTINATION
          }
        }
      };
    case "WEB_AUTHN": {
      const result = await handleWebAuthnSignInResult(challengeParameters);
      if (isWebAuthnResultAuthSignInOutput(result)) {
        return result;
      }
      return getSignInResult(result);
    }
    case "PASSWORD":
    case "PASSWORD_SRP":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_PASSWORD"
        }
      };
    case "SELECT_CHALLENGE":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONTINUE_SIGN_IN_WITH_FIRST_FACTOR_SELECTION",
          availableChallenges
        }
      };
  }
  throw new AuthError({
    name: AuthErrorCodes.SignInException,
    message: `An error occurred during the sign in process. ${challengeName} challengeName returned by the underlying service was not addressed.`
  });
}
function getTOTPSetupDetails(secretCode, username) {
  return {
    sharedSecret: secretCode,
    getSetupUri: (appName, accountName) => {
      const totpUri = `otpauth://totp/${appName}:${accountName ?? username}?secret=${secretCode}&issuer=${appName}`;
      return new AmplifyUrl(totpUri);
    }
  };
}
function getSignInResultFromError(errorName) {
  if (errorName === InitiateAuthException.PasswordResetRequiredException) {
    return {
      isSignedIn: false,
      nextStep: { signInStep: "RESET_PASSWORD" }
    };
  } else if (errorName === InitiateAuthException.UserNotConfirmedException) {
    return {
      isSignedIn: false,
      nextStep: { signInStep: "CONFIRM_SIGN_UP" }
    };
  }
}
function parseAttributes(attributes) {
  if (!attributes)
    return [];
  const parsedAttributes = JSON.parse(attributes).map((att) => att.includes(USER_ATTRIBUTES) ? att.replace(USER_ATTRIBUTES, "") : att);
  return parsedAttributes;
}
function createAttributes(attributes) {
  if (!attributes)
    return {};
  const newAttributes = {};
  Object.entries(attributes).forEach(([key, value]) => {
    if (value)
      newAttributes[`${USER_ATTRIBUTES}${key}`] = value;
  });
  return newAttributes;
}
async function handleChallengeName(username, challengeName, session, challengeResponse, config2, tokenOrchestrator2, clientMetadata, options) {
  const userAttributes = options == null ? void 0 : options.userAttributes;
  const deviceName = options == null ? void 0 : options.friendlyDeviceName;
  switch (challengeName) {
    case "WEB_AUTHN":
    case "SELECT_CHALLENGE":
      if (challengeResponse === "PASSWORD_SRP" || challengeResponse === "PASSWORD") {
        return {
          ChallengeName: challengeResponse,
          Session: session,
          $metadata: {}
        };
      }
      return initiateSelectedChallenge({
        username,
        session,
        selectedChallenge: challengeResponse,
        config: config2,
        clientMetadata
      });
    case "SELECT_MFA_TYPE":
      return handleSelectMFATypeChallenge({
        challengeResponse,
        clientMetadata,
        session,
        username,
        config: config2
      });
    case "MFA_SETUP":
      return handleMFASetupChallenge({
        challengeResponse,
        clientMetadata,
        session,
        username,
        deviceName,
        config: config2
      });
    case "NEW_PASSWORD_REQUIRED":
      return handleCompleteNewPasswordChallenge({
        challengeResponse,
        clientMetadata,
        session,
        username,
        requiredAttributes: userAttributes,
        config: config2
      });
    case "CUSTOM_CHALLENGE":
      return retryOnResourceNotFoundException(handleCustomChallenge, [
        {
          challengeResponse,
          clientMetadata,
          session,
          username,
          config: config2,
          tokenOrchestrator: tokenOrchestrator2
        }
      ], username, tokenOrchestrator2);
    case "SMS_MFA":
    case "SOFTWARE_TOKEN_MFA":
    case "SMS_OTP":
    case "EMAIL_OTP":
      return handleMFAChallenge({
        challengeName,
        challengeResponse,
        clientMetadata,
        session,
        username,
        config: config2
      });
    case "PASSWORD":
      return handleSelectChallengeWithPassword(username, challengeResponse, clientMetadata, config2, session);
    case "PASSWORD_SRP":
      return handleSelectChallengeWithPasswordSRP(
        username,
        challengeResponse,
        // This is the actual password
        clientMetadata,
        config2,
        session,
        tokenOrchestrator2
      );
  }
  throw new AuthError({
    name: AuthErrorCodes.SignInException,
    message: `An error occurred during the sign in process.
		${challengeName} challengeName returned by the underlying service was not addressed.`
  });
}
function mapMfaType(mfa) {
  let mfaType = "SMS_MFA";
  if (mfa === "TOTP")
    mfaType = "SOFTWARE_TOKEN_MFA";
  if (mfa === "EMAIL")
    mfaType = "EMAIL_OTP";
  return mfaType;
}
function getMFAType(type) {
  if (type === "SMS_MFA")
    return "SMS";
  if (type === "SOFTWARE_TOKEN_MFA")
    return "TOTP";
  if (type === "EMAIL_OTP")
    return "EMAIL";
}
function getMFATypes(types) {
  if (!types)
    return void 0;
  return types.map(getMFAType).filter(Boolean);
}
function parseMFATypes(mfa) {
  if (!mfa)
    return [];
  return JSON.parse(mfa);
}
function getAllowedMfaSetupTypes(availableMfaSetupTypes) {
  return availableMfaSetupTypes.filter((authMfaType) => authMfaType === "EMAIL" || authMfaType === "TOTP");
}
async function assertUserNotAuthenticated() {
  let authUser;
  try {
    authUser = await getCurrentUser2();
  } catch (error3) {
  }
  if (authUser && authUser.userId && authUser.username) {
    throw new AuthError({
      name: USER_ALREADY_AUTHENTICATED_EXCEPTION,
      message: "There is already a signed in user.",
      recoverySuggestion: "Call signOut before calling signIn again."
    });
  }
}
function getActiveSignInUsername(username) {
  const state = signInStore.getState();
  return state.username ?? username;
}
async function handleMFAChallenge({ challengeName, challengeResponse, clientMetadata, session, username, config: config2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const challengeResponses = {
    USERNAME: username
  };
  if (challengeName === "EMAIL_OTP") {
    challengeResponses.EMAIL_OTP_CODE = challengeResponse;
  }
  if (challengeName === "SMS_MFA") {
    challengeResponses.SMS_MFA_CODE = challengeResponse;
  }
  if (challengeName === "SMS_OTP") {
    challengeResponses.SMS_OTP_CODE = challengeResponse;
  }
  if (challengeName === "SOFTWARE_TOKEN_MFA") {
    challengeResponses.SOFTWARE_TOKEN_MFA_CODE = challengeResponse;
  }
  const userContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    ChallengeName: challengeName,
    ChallengeResponses: challengeResponses,
    Session: session,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData: userContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  return respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, jsonReq);
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithCustomAuth.mjs
async function signInWithCustomAuth(input2) {
  var _a2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { username, password, options } = input2;
  const signInDetails = {
    loginId: username,
    authFlowType: "CUSTOM_WITHOUT_SRP"
  };
  const metadata = options == null ? void 0 : options.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  assertValidationError(!password, AuthValidationErrorCode.CustomAuthSignInPassword);
  try {
    const { ChallengeName: retriedChallengeName, ChallengeParameters: retiredChallengeParameters, AuthenticationResult, Session } = await retryOnResourceNotFoundException(handleCustomAuthFlowWithoutSRP, [username, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: Session,
      username: activeUsername,
      challengeName: retriedChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        username: activeUsername,
        ...AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: retriedChallengeName,
      challengeParameters: retiredChallengeParameters
    });
  } catch (error3) {
    resetActiveSignInState();
    assertServiceError(error3);
    const result = getSignInResultFromError(error3.name);
    if (result)
      return result;
    throw error3;
  }
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithCustomSRPAuth.mjs
async function signInWithCustomSRPAuth(input2) {
  var _a2;
  const { username, password, options } = input2;
  const signInDetails = {
    loginId: username,
    authFlowType: "CUSTOM_WITH_SRP"
  };
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const metadata = options == null ? void 0 : options.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
  try {
    const { ChallengeName: handledChallengeName, ChallengeParameters: handledChallengeParameters, AuthenticationResult, Session } = await handleCustomSRPAuthFlow(username, password, metadata, authConfig, tokenOrchestrator);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: Session,
      username: activeUsername,
      challengeName: handledChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        username: activeUsername,
        ...AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: handledChallengeName,
      challengeParameters: handledChallengeParameters
    });
  } catch (error3) {
    resetActiveSignInState();
    assertServiceError(error3);
    const result = getSignInResultFromError(error3.name);
    if (result)
      return result;
    throw error3;
  }
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/autoSignIn.mjs
var initialAutoSignIn = async () => {
  throw new AuthError({
    name: AUTO_SIGN_IN_EXCEPTION,
    message: "The autoSignIn flow has not started, or has been cancelled/completed.",
    recoverySuggestion: "Please try to use the signIn API or log out before starting a new autoSignIn flow."
  });
};
var autoSignIn = initialAutoSignIn;
function setAutoSignIn(callback) {
  autoSignIn = callback;
}
function resetAutoSignIn(resetCallback = true) {
  if (resetCallback) {
    autoSignIn = initialAutoSignIn;
  }
  autoSignInStore.dispatch({ type: "RESET" });
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithSRP.mjs
async function signInWithSRP(input2) {
  var _a2, _b;
  const { username, password } = input2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  const signInDetails = {
    loginId: username,
    authFlowType: "USER_SRP_AUTH"
  };
  assertTokenProviderConfig(authConfig);
  const clientMetaData = (_b = input2.options) == null ? void 0 : _b.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
  try {
    const { ChallengeName: handledChallengeName, ChallengeParameters: handledChallengeParameters, AuthenticationResult, Session } = await handleUserSRPAuthFlow(username, password, clientMetaData, authConfig, tokenOrchestrator);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: Session,
      username: activeUsername,
      challengeName: handledChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        username: activeUsername,
        ...AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      resetAutoSignIn();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: handledChallengeName,
      challengeParameters: handledChallengeParameters
    });
  } catch (error3) {
    resetActiveSignInState();
    resetAutoSignIn();
    assertServiceError(error3);
    const result = getSignInResultFromError(error3.name);
    if (result)
      return result;
    throw error3;
  }
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithUserPassword.mjs
async function signInWithUserPassword(input2) {
  var _a2;
  const { username, password, options } = input2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  const signInDetails = {
    loginId: username,
    authFlowType: "USER_PASSWORD_AUTH"
  };
  assertTokenProviderConfig(authConfig);
  const metadata = options == null ? void 0 : options.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
  try {
    const { ChallengeName: retiredChallengeName, ChallengeParameters: retriedChallengeParameters, AuthenticationResult, Session } = await retryOnResourceNotFoundException(handleUserPasswordAuthFlow, [username, password, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: Session,
      username: activeUsername,
      challengeName: retiredChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        ...AuthenticationResult,
        username: activeUsername,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      resetAutoSignIn();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: retiredChallengeName,
      challengeParameters: retriedChallengeParameters
    });
  } catch (error3) {
    resetActiveSignInState();
    resetAutoSignIn();
    assertServiceError(error3);
    const result = getSignInResultFromError(error3.name);
    if (result)
      return result;
    throw error3;
  }
}

// node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleUserAuthFlow.mjs
async function handleUserAuthFlow({ username, clientMetadata, config: config2, tokenOrchestrator: tokenOrchestrator2, preferredChallenge, password, session }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const authParameters = { USERNAME: username };
  if (preferredChallenge) {
    if (preferredChallenge === "PASSWORD_SRP") {
      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
      return handlePasswordSRP({
        username,
        password,
        clientMetadata,
        config: config2,
        tokenOrchestrator: tokenOrchestrator2,
        authFlow: "USER_AUTH",
        preferredChallenge
      });
    }
    if (preferredChallenge === "PASSWORD") {
      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
      authParameters.PASSWORD = password;
    }
    authParameters.PREFERRED_CHALLENGE = preferredChallenge;
  }
  const jsonReq = {
    AuthFlow: "USER_AUTH",
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  if (session) {
    jsonReq.Session = session;
  }
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  setActiveSignInUsername(username);
  return response;
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithUserAuth.mjs
async function signInWithUserAuth(input2) {
  var _a2;
  const { username, password, options } = input2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  const signInDetails = {
    loginId: username,
    authFlowType: "USER_AUTH"
  };
  assertTokenProviderConfig(authConfig);
  const clientMetaData = options == null ? void 0 : options.clientMetadata;
  const preferredChallenge = options == null ? void 0 : options.preferredChallenge;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  try {
    const handleUserAuthFlowInput = {
      username,
      config: authConfig,
      tokenOrchestrator,
      clientMetadata: clientMetaData,
      preferredChallenge,
      password
    };
    const autoSignInStoreState = autoSignInStore.getState();
    if (autoSignInStoreState.active && autoSignInStoreState.username === username) {
      handleUserAuthFlowInput.session = autoSignInStoreState.session;
    }
    const response = await handleUserAuthFlow(handleUserAuthFlowInput);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: response.Session,
      username: activeUsername,
      challengeName: response.ChallengeName,
      signInDetails
    });
    if (response.AuthenticationResult) {
      await cacheCognitoTokens({
        username: activeUsername,
        ...response.AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: response.AuthenticationResult.NewDeviceMetadata,
          accessToken: response.AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      resetAutoSignIn();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: response.ChallengeName,
      challengeParameters: response.ChallengeParameters,
      availableChallenges: "AvailableChallenges" in response ? response.AvailableChallenges : void 0
    });
  } catch (error3) {
    resetActiveSignInState();
    resetAutoSignIn();
    assertServiceError(error3);
    const result = getSignInResultFromError(error3.name);
    if (result)
      return result;
    throw error3;
  }
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signIn.mjs
async function signIn(input2) {
  var _a2;
  resetAutoSignIn(false);
  const authFlowType = (_a2 = input2.options) == null ? void 0 : _a2.authFlowType;
  await assertUserNotAuthenticated();
  switch (authFlowType) {
    case "USER_SRP_AUTH":
      return signInWithSRP(input2);
    case "USER_PASSWORD_AUTH":
      return signInWithUserPassword(input2);
    case "CUSTOM_WITHOUT_SRP":
      return signInWithCustomAuth(input2);
    case "CUSTOM_WITH_SRP":
      return signInWithCustomSRPAuth(input2);
    case "USER_AUTH":
      return signInWithUserAuth(input2);
    default:
      return signInWithSRP(input2);
  }
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signUpHelpers.mjs
var MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1e3;
function handleCodeAutoSignIn(signInInput) {
  const stopHubListener = HubInternal.listen("auth-internal", async ({ payload }) => {
    switch (payload.event) {
      case "confirmSignUp": {
        const response = payload.data;
        if (response == null ? void 0 : response.isSignUpComplete) {
          HubInternal.dispatch("auth-internal", {
            event: "autoSignIn"
          });
          setAutoSignIn(autoSignInWithCode(signInInput));
          stopHubListener();
        }
      }
    }
  });
  const timeOutId = setTimeout(() => {
    stopHubListener();
    clearTimeout(timeOutId);
    resetAutoSignIn();
  }, MAX_AUTOSIGNIN_POLLING_MS);
}
function debounce2(fun, delay2) {
  let timer2;
  return (args) => {
    if (!timer2) {
      fun(...args);
    }
    clearTimeout(timer2);
    timer2 = setTimeout(() => {
      timer2 = void 0;
    }, delay2);
  };
}
function handleAutoSignInWithLink(signInInput, resolve, reject) {
  const start3 = Date.now();
  const autoSignInPollingIntervalId = setInterval(async () => {
    const elapsedTime = Date.now() - start3;
    const maxTime = MAX_AUTOSIGNIN_POLLING_MS;
    if (elapsedTime > maxTime) {
      clearInterval(autoSignInPollingIntervalId);
      reject(new AuthError({
        name: AUTO_SIGN_IN_EXCEPTION,
        message: "The account was not confirmed on time.",
        recoverySuggestion: "Try to verify your account by clicking the link sent your email or phone and then login manually."
      }));
      resetAutoSignIn();
    } else {
      try {
        const signInOutput = await signIn(signInInput);
        if (signInOutput.nextStep.signInStep !== "CONFIRM_SIGN_UP") {
          resolve(signInOutput);
          clearInterval(autoSignInPollingIntervalId);
          resetAutoSignIn();
        }
      } catch (error3) {
        clearInterval(autoSignInPollingIntervalId);
        reject(error3);
        resetAutoSignIn();
      }
    }
  }, 5e3);
}
var debouncedAutoSignInWithLink = debounce2(handleAutoSignInWithLink, 300);
var debouncedAutoSignWithCodeOrUserConfirmed = debounce2(handleAutoSignInWithCodeOrUserConfirmed, 300);
function autoSignInWhenUserIsConfirmedWithLink(signInInput) {
  return async () => {
    return new Promise((resolve, reject) => {
      debouncedAutoSignInWithLink([signInInput, resolve, reject]);
    });
  };
}
async function handleAutoSignInWithCodeOrUserConfirmed(signInInput, resolve, reject) {
  var _a2;
  try {
    const output = ((_a2 = signInInput == null ? void 0 : signInInput.options) == null ? void 0 : _a2.authFlowType) === "USER_AUTH" ? await signInWithUserAuth(signInInput) : await signIn(signInInput);
    resolve(output);
    resetAutoSignIn();
  } catch (error3) {
    reject(error3);
    resetAutoSignIn();
  }
}
function autoSignInWithCode(signInInput) {
  return async () => {
    return new Promise((resolve, reject) => {
      debouncedAutoSignWithCodeOrUserConfirmed([signInInput, resolve, reject]);
    });
  };
}
var autoSignInUserConfirmed = autoSignInWithCode;

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createSignUpClient.mjs
var createSignUpClientDeserializer = () => async (response) => {
  if (response.statusCode >= 300) {
    const error3 = await parseJsonError(response);
    assertServiceError(error3);
    if (
      // Missing Password Error
      // 1 validation error detected: Value at 'password'failed to satisfy constraint: Member must not be null
      error3.name === SignUpException.InvalidParameterException && /'password'/.test(error3.message) && /Member must not be null/.test(error3.message)
    ) {
      const name2 = AuthValidationErrorCode.EmptySignUpPassword;
      const { message: message2, recoverySuggestion } = validationErrorMap[name2];
      throw new AuthError({
        name: name2,
        message: message2,
        recoverySuggestion
      });
    }
    throw new AuthError({ name: error3.name, message: error3.message });
  }
  return parseJsonBody(response);
};
var createSignUpClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("SignUp"), createSignUpClientDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signUp.mjs
async function signUp(input2) {
  var _a2;
  const { username, password, options } = input2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  const signUpVerificationMethod = (authConfig == null ? void 0 : authConfig.signUpVerificationMethod) ?? "code";
  const { clientMetadata, validationData, autoSignIn: autoSignIn2 } = input2.options ?? {};
  assertTokenProviderConfig(authConfig);
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);
  const signInServiceOptions = typeof autoSignIn2 !== "boolean" ? autoSignIn2 : void 0;
  const signInInput = {
    username,
    options: signInServiceOptions
  };
  if ((signInServiceOptions == null ? void 0 : signInServiceOptions.authFlowType) !== "CUSTOM_WITHOUT_SRP") {
    signInInput.password = password;
  }
  const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;
  const signUpClient = createSignUpClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const signUpClientInput = {
    Username: username,
    Password: void 0,
    UserAttributes: (options == null ? void 0 : options.userAttributes) && toAttributeType(options == null ? void 0 : options.userAttributes),
    ClientMetadata: clientMetadata,
    ValidationData: validationData && toAttributeType(validationData),
    ClientId: userPoolClientId,
    UserContextData: getUserContextData({
      username,
      userPoolId,
      userPoolClientId
    })
  };
  if (password) {
    signUpClientInput.Password = password;
  }
  const { UserSub: userId, CodeDeliveryDetails: cdd, UserConfirmed: userConfirmed, Session: session } = await signUpClient({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignUp)
  }, signUpClientInput);
  if (signInServiceOptions || autoSignIn2 === true) {
    autoSignInStore.dispatch({ type: "START" });
    autoSignInStore.dispatch({ type: "SET_USERNAME", value: username });
    autoSignInStore.dispatch({ type: "SET_SESSION", value: session });
  }
  const codeDeliveryDetails = {
    destination: cdd == null ? void 0 : cdd.Destination,
    deliveryMedium: cdd == null ? void 0 : cdd.DeliveryMedium,
    attributeName: cdd == null ? void 0 : cdd.AttributeName
  };
  const isSignUpComplete = !!userConfirmed;
  const isAutoSignInStarted = autoSignInStore.getState().active;
  if (isSignUpComplete) {
    if (isAutoSignInStarted) {
      setAutoSignIn(autoSignInUserConfirmed(signInInput));
      return {
        isSignUpComplete: true,
        nextStep: {
          signUpStep: "COMPLETE_AUTO_SIGN_IN"
        },
        userId
      };
    }
    return {
      isSignUpComplete: true,
      nextStep: {
        signUpStep: "DONE"
      },
      userId
    };
  }
  if (isAutoSignInStarted) {
    if (signUpVerificationMethod === "link") {
      setAutoSignIn(autoSignInWhenUserIsConfirmedWithLink(signInInput));
      return {
        isSignUpComplete: false,
        nextStep: {
          signUpStep: "COMPLETE_AUTO_SIGN_IN",
          codeDeliveryDetails
        },
        userId
      };
    }
    handleCodeAutoSignIn(signInInput);
  }
  return {
    isSignUpComplete: false,
    nextStep: {
      signUpStep: "CONFIRM_SIGN_UP",
      codeDeliveryDetails
    },
    userId
  };
}

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.mjs
var createForgotPasswordClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ForgotPassword"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/resetPassword.mjs
async function resetPassword(input2) {
  var _a2, _b;
  const { username } = input2;
  assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;
  const clientMetadata = (_b = input2.options) == null ? void 0 : _b.clientMetadata;
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const forgotPassword = createForgotPasswordClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const res = await forgotPassword({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword)
  }, {
    Username: username,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  });
  const codeDeliveryDetails = res.CodeDeliveryDetails;
  return {
    isPasswordReset: false,
    nextStep: {
      resetPasswordStep: "CONFIRM_RESET_PASSWORD_WITH_CODE",
      codeDeliveryDetails: {
        deliveryMedium: codeDeliveryDetails == null ? void 0 : codeDeliveryDetails.DeliveryMedium,
        destination: codeDeliveryDetails == null ? void 0 : codeDeliveryDetails.Destination,
        attributeName: codeDeliveryDetails == null ? void 0 : codeDeliveryDetails.AttributeName
      }
    }
  };
}

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.mjs
var createConfirmForgotPasswordClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ConfirmForgotPassword"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmResetPassword.mjs
async function confirmResetPassword(input2) {
  var _a2, _b;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;
  const { username, newPassword } = input2;
  assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);
  assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);
  const code = input2.confirmationCode;
  assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);
  const metadata = (_b = input2.options) == null ? void 0 : _b.clientMetadata;
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const confirmForgotPassword = createConfirmForgotPasswordClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  await confirmForgotPassword({
    region: getRegionFromUserPoolId(authConfig.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword)
  }, {
    Username: username,
    ConfirmationCode: code,
    Password: newPassword,
    ClientMetadata: metadata,
    ClientId: authConfig.userPoolClientId,
    UserContextData
  });
}

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs
var createResendConfirmationCodeClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ResendConfirmationCode"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/resendSignUpCode.mjs
async function resendSignUpCode(input2) {
  var _a2, _b;
  const { username } = input2;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;
  const clientMetadata = (_b = input2.options) == null ? void 0 : _b.clientMetadata;
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const resendConfirmationCode = createResendConfirmationCodeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { CodeDeliveryDetails } = await resendConfirmationCode({
    region: getRegionFromUserPoolId(authConfig.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode)
  }, {
    Username: username,
    ClientMetadata: clientMetadata,
    ClientId: authConfig.userPoolClientId,
    UserContextData
  });
  const { DeliveryMedium, AttributeName, Destination } = {
    ...CodeDeliveryDetails
  };
  return {
    destination: Destination,
    deliveryMedium: DeliveryMedium,
    attributeName: AttributeName ? AttributeName : void 0
  };
}

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs
var createConfirmSignUpClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ConfirmSignUp"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmSignUp.mjs
async function confirmSignUp(input2) {
  var _a2;
  const { username, confirmationCode, options } = input2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;
  const clientMetadata = options == null ? void 0 : options.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);
  assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const confirmSignUpClient = createConfirmSignUpClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { Session: session } = await confirmSignUpClient({
    region: getRegionFromUserPoolId(authConfig.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp)
  }, {
    Username: username,
    ConfirmationCode: confirmationCode,
    ClientMetadata: clientMetadata,
    ForceAliasCreation: options == null ? void 0 : options.forceAliasCreation,
    ClientId: authConfig.userPoolClientId,
    UserContextData
  });
  return new Promise((resolve, reject) => {
    try {
      const signUpOut = {
        isSignUpComplete: true,
        nextStep: {
          signUpStep: "DONE"
        }
      };
      const autoSignInStoreState = autoSignInStore.getState();
      if (!autoSignInStoreState.active || autoSignInStoreState.username !== username) {
        resolve(signUpOut);
        resetAutoSignIn();
        return;
      }
      autoSignInStore.dispatch({ type: "SET_SESSION", value: session });
      const stopListener = HubInternal.listen("auth-internal", ({ payload }) => {
        switch (payload.event) {
          case "autoSignIn":
            resolve({
              isSignUpComplete: true,
              nextStep: {
                signUpStep: "COMPLETE_AUTO_SIGN_IN"
              }
            });
            stopListener();
        }
      });
      HubInternal.dispatch("auth-internal", {
        event: "confirmSignUp",
        data: signUpOut
      });
    } catch (error3) {
      reject(error3);
    }
  });
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmSignIn.mjs
async function confirmSignIn(input2) {
  var _a2;
  const { challengeResponse, options } = input2;
  const { username, challengeName, signInSession, signInDetails } = signInStore.getState();
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const clientMetaData = options == null ? void 0 : options.clientMetadata;
  assertValidationError(!!challengeResponse, AuthValidationErrorCode.EmptyChallengeResponse);
  if (!username || !challengeName || !signInSession)
    throw new AuthError({
      name: AuthErrorCodes.SignInException,
      message: `
			An error occurred during the sign in process.

			This most likely occurred due to:
			1. signIn was not called before confirmSignIn.
			2. signIn threw an exception.
			3. page was refreshed during the sign in flow and session has expired.
			`,
      recoverySuggestion: "Make sure a successful call to signIn is made before calling confirmSignInand that the session has not expired."
    });
  try {
    const { Session, ChallengeName: handledChallengeName, AuthenticationResult, ChallengeParameters: handledChallengeParameters } = await handleChallengeName(username, challengeName, signInSession, challengeResponse, authConfig, tokenOrchestrator, clientMetaData, options);
    setActiveSignInState({
      signInSession: Session,
      username,
      challengeName: handledChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        username,
        ...AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: handledChallengeName,
      challengeParameters: handledChallengeParameters
    });
  } catch (error3) {
    assertServiceError(error3);
    const result = getSignInResultFromError(error3.name);
    if (result)
      return result;
    throw error3;
  }
}

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs
var createGetUserClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("GetUser"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createChangePasswordClient.mjs
var createChangePasswordClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ChangePassword"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/updatePassword.mjs
async function updatePassword(input2) {
  var _a2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolEndpoint, userPoolId } = authConfig;
  const { oldPassword, newPassword } = input2;
  assertValidationError(!!oldPassword, AuthValidationErrorCode.EmptyUpdatePassword);
  assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyUpdatePassword);
  const { tokens: tokens2 } = await fetchAuthSession2({ forceRefresh: false });
  assertAuthTokens(tokens2);
  const changePassword2 = createChangePasswordClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  await changePassword2({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.UpdatePassword)
  }, {
    AccessToken: tokens2.accessToken.toString(),
    PreviousPassword: oldPassword,
    ProposedPassword: newPassword
  });
}

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createVerifyUserAttributeClient.mjs
var createVerifyUserAttributeClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("VerifyUserAttribute"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmUserAttribute.mjs
async function confirmUserAttribute(input2) {
  var _a2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolEndpoint, userPoolId } = authConfig;
  const { confirmationCode, userAttributeKey } = input2;
  assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmUserAttributeCode);
  const { tokens: tokens2 } = await fetchAuthSession2({ forceRefresh: false });
  assertAuthTokens(tokens2);
  const verifyUserAttribute = createVerifyUserAttributeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  await verifyUserAttribute({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmUserAttribute)
  }, {
    AccessToken: tokens2.accessToken.toString(),
    AttributeName: userAttributeKey,
    Code: confirmationCode
  });
}

// node_modules/@aws-amplify/auth/dist/esm/Errors.mjs
var logger11 = new ConsoleLogger("AuthError");
var authErrorMessages = {
  oauthSignInError: {
    message: AuthErrorStrings.OAUTH_ERROR,
    log: "Make sure Cognito Hosted UI has been configured correctly"
  },
  noConfig: {
    message: AuthErrorStrings.DEFAULT_MSG,
    log: `
            Error: Amplify has not been configured correctly.
            This error is typically caused by one of the following scenarios:

            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point
                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information
            
            2. There might be multiple conflicting versions of amplify packages in your node_modules.
				Refer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)
        `
  },
  missingAuthConfig: {
    message: AuthErrorStrings.DEFAULT_MSG,
    log: `
            Error: Amplify has not been configured correctly. 
            The configuration object is missing required auth properties.
            This error is typically caused by one of the following scenarios:

            1. Did you run \`amplify push\` after adding auth via \`amplify add auth\`?
                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information

            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.
        `
  },
  emptyUsername: {
    message: AuthErrorStrings.EMPTY_USERNAME
  },
  // TODO: should include a list of valid sign-in types
  invalidUsername: {
    message: AuthErrorStrings.INVALID_USERNAME
  },
  emptyPassword: {
    message: AuthErrorStrings.EMPTY_PASSWORD
  },
  emptyCode: {
    message: AuthErrorStrings.EMPTY_CODE
  },
  signUpError: {
    message: AuthErrorStrings.SIGN_UP_ERROR,
    log: "The first parameter should either be non-null string or object"
  },
  noMFA: {
    message: AuthErrorStrings.NO_MFA
  },
  invalidMFA: {
    message: AuthErrorStrings.INVALID_MFA
  },
  emptyChallengeResponse: {
    message: AuthErrorStrings.EMPTY_CHALLENGE
  },
  noUserSession: {
    message: AuthErrorStrings.NO_USER_SESSION
  },
  deviceConfig: {
    message: AuthErrorStrings.DEVICE_CONFIG
  },
  networkError: {
    message: AuthErrorStrings.NETWORK_ERROR
  },
  autoSignInError: {
    message: AuthErrorStrings.AUTOSIGNIN_ERROR
  },
  default: {
    message: AuthErrorStrings.DEFAULT_MSG
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/createOAuthError.mjs
var createOAuthError = (message2, recoverySuggestion) => new AuthError({
  message: message2 ?? "An error has occurred during the oauth process.",
  name: AuthErrorCodes.OAuthSignInError,
  recoverySuggestion: recoverySuggestion ?? authErrorMessages.oauthSignInError.log
});

// node_modules/@aws-amplify/auth/dist/esm/types/Auth.mjs
var AuthErrorTypes;
(function(AuthErrorTypes2) {
  AuthErrorTypes2["NoConfig"] = "noConfig";
  AuthErrorTypes2["MissingAuthConfig"] = "missingAuthConfig";
  AuthErrorTypes2["EmptyUsername"] = "emptyUsername";
  AuthErrorTypes2["InvalidUsername"] = "invalidUsername";
  AuthErrorTypes2["EmptyPassword"] = "emptyPassword";
  AuthErrorTypes2["EmptyCode"] = "emptyCode";
  AuthErrorTypes2["SignUpError"] = "signUpError";
  AuthErrorTypes2["NoMFA"] = "noMFA";
  AuthErrorTypes2["InvalidMFA"] = "invalidMFA";
  AuthErrorTypes2["EmptyChallengeResponse"] = "emptyChallengeResponse";
  AuthErrorTypes2["NoUserSession"] = "noUserSession";
  AuthErrorTypes2["Default"] = "default";
  AuthErrorTypes2["DeviceConfig"] = "deviceConfig";
  AuthErrorTypes2["NetworkError"] = "networkError";
  AuthErrorTypes2["AutoSignInError"] = "autoSignInError";
  AuthErrorTypes2["OAuthSignInError"] = "oauthSignInError";
})(AuthErrorTypes || (AuthErrorTypes = {}));

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/validateState.mjs
var flowCancelledMessage = "`signInWithRedirect` has been canceled.";
var validationFailedMessage = "An error occurred while validating the state.";
var validationRecoverySuggestion = "Try to initiate an OAuth flow from Amplify";
var validateState = async (state) => {
  const savedState = await oAuthStore.loadOAuthState();
  const validatedState = state === savedState ? savedState : void 0;
  if (!validatedState) {
    throw new AuthError({
      name: AuthErrorTypes.OAuthSignInError,
      message: state === null ? flowCancelledMessage : validationFailedMessage,
      recoverySuggestion: state === null ? void 0 : validationRecoverySuggestion
    });
  }
  return validatedState;
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/completeOAuthFlow.mjs
var completeOAuthFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, responseType, domain, preferPrivateSession }) => {
  const urlParams = new AmplifyUrl(currentUrl);
  const error3 = urlParams.searchParams.get("error");
  const errorMessage = urlParams.searchParams.get("error_description");
  if (error3) {
    throw createOAuthError(errorMessage ?? error3);
  }
  if (responseType === "code") {
    return handleCodeFlow({
      currentUrl,
      userAgentValue,
      clientId,
      redirectUri,
      domain,
      preferPrivateSession
    });
  }
  return handleImplicitFlow({
    currentUrl,
    redirectUri,
    preferPrivateSession
  });
};
var handleCodeFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, domain, preferPrivateSession }) => {
  const url = new AmplifyUrl(currentUrl);
  const code = url.searchParams.get("code");
  const state = url.searchParams.get("state");
  if (!code || !state) {
    throw createOAuthError("User cancelled OAuth flow.");
  }
  const validatedState = await validateState(state);
  const oAuthTokenEndpoint = "https://" + domain + "/oauth2/token";
  const codeVerifier = await oAuthStore.loadPKCE();
  const oAuthTokenBody = {
    grant_type: "authorization_code",
    code,
    client_id: clientId,
    redirect_uri: redirectUri,
    ...codeVerifier ? { code_verifier: codeVerifier } : {}
  };
  const body = Object.entries(oAuthTokenBody).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join("&");
  const { access_token, refresh_token: refreshToken, id_token, error: error3, error_message: errorMessage, token_type, expires_in } = await (await fetch(oAuthTokenEndpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      [USER_AGENT_HEADER]: userAgentValue
    },
    body
  })).json();
  if (error3) {
    throw createOAuthError(errorMessage ?? error3);
  }
  const username = (access_token && decodeJWT(access_token).payload.username) ?? "username";
  await cacheCognitoTokens({
    username,
    AccessToken: access_token,
    IdToken: id_token,
    RefreshToken: refreshToken
  });
  return completeFlow({
    redirectUri,
    state: validatedState,
    preferPrivateSession
  });
};
var handleImplicitFlow = async ({ currentUrl, redirectUri, preferPrivateSession }) => {
  const url = new AmplifyUrl(currentUrl);
  const { id_token, access_token, state, token_type, expires_in, error_description, error: error3 } = (url.hash ?? "#").substring(1).split("&").map((pairings) => pairings.split("=")).reduce((accum, [k, v]) => ({ ...accum, [k]: v }), {
    id_token: void 0,
    access_token: void 0,
    state: void 0,
    token_type: void 0,
    expires_in: void 0,
    error_description: void 0,
    error: void 0
  });
  if (error3) {
    throw createOAuthError(error_description ?? error3);
  }
  if (!access_token) {
    throw createOAuthError("No access token returned from OAuth flow.");
  }
  const validatedState = await validateState(state);
  const username = (access_token && decodeJWT(access_token).payload.username) ?? "username";
  await cacheCognitoTokens({
    username,
    AccessToken: access_token,
    IdToken: id_token
  });
  return completeFlow({
    redirectUri,
    state: validatedState,
    preferPrivateSession
  });
};
var completeFlow = async ({ redirectUri, state, preferPrivateSession }) => {
  await tokenOrchestrator.setOAuthMetadata({
    oauthSignIn: true
  });
  await oAuthStore.clearOAuthData();
  await oAuthStore.storeOAuthSignIn(true, preferPrivateSession);
  resolveAndClearInflightPromises();
  clearHistory(redirectUri);
  if (isCustomState(state)) {
    Hub.dispatch("auth", {
      event: "customOAuthState",
      data: urlSafeDecode(getCustomState(state))
    }, "Auth", AMPLIFY_SYMBOL);
  }
  Hub.dispatch("auth", { event: "signInWithRedirect" }, "Auth", AMPLIFY_SYMBOL);
  await dispatchSignedInHubEvent();
};
var isCustomState = (state) => {
  return /-/.test(state);
};
var getCustomState = (state) => {
  return state.split("-").splice(1).join("-");
};
var clearHistory = (redirectUri) => {
  if (typeof window !== "undefined" && typeof window.history !== "undefined") {
    window.history.replaceState(window.history.state, "", redirectUri);
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/getRedirectUrl.mjs
function getRedirectUrl2(redirects, preferredRedirectUrl) {
  if (preferredRedirectUrl) {
    const redirectUrl = redirects == null ? void 0 : redirects.find((redirect) => redirect === preferredRedirectUrl);
    if (!redirectUrl) {
      throw invalidPreferredRedirectUrlException;
    }
    return redirectUrl;
  } else {
    const redirectUrlFromTheSameOrigin = (redirects == null ? void 0 : redirects.find(isSameOriginAndPathName)) ?? (redirects == null ? void 0 : redirects.find(isTheSameDomain));
    const redirectUrlFromDifferentOrigin = (redirects == null ? void 0 : redirects.find(isHttps)) ?? (redirects == null ? void 0 : redirects.find(isHttp));
    if (redirectUrlFromTheSameOrigin) {
      return redirectUrlFromTheSameOrigin;
    } else if (redirectUrlFromDifferentOrigin) {
      throw invalidOriginException;
    }
    throw invalidRedirectException;
  }
}
var isSameOriginAndPathName = (redirect) => redirect.startsWith(
  // eslint-disable-next-line no-constant-binary-expression
  String(window.location.origin + window.location.pathname)
);
var isTheSameDomain = (redirect) => redirect.includes(String(window.location.hostname));
var isHttp = (redirect) => redirect.startsWith("http://");
var isHttps = (redirect) => redirect.startsWith("https://");

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/handleFailure.mjs
var handleFailure = async (error3) => {
  resolveAndClearInflightPromises();
  await oAuthStore.clearOAuthInflightData();
  Hub.dispatch("auth", { event: "signInWithRedirect_failure", data: { error: error3 } }, "Auth", AMPLIFY_SYMBOL);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/attemptCompleteOAuthFlow.mjs
var attemptCompleteOAuthFlow = async (authConfig) => {
  try {
    assertTokenProviderConfig(authConfig);
    assertOAuthConfig(authConfig);
    oAuthStore.setAuthConfig(authConfig);
  } catch (_) {
    return;
  }
  if (!await oAuthStore.loadOAuthInFlight()) {
    return;
  }
  try {
    const currentUrl = window.location.href;
    const { loginWith, userPoolClientId } = authConfig;
    const { domain, redirectSignIn, responseType } = loginWith.oauth;
    const redirectUri = getRedirectUrl2(redirectSignIn);
    await completeOAuthFlow({
      currentUrl,
      clientId: userPoolClientId,
      domain,
      redirectUri,
      responseType,
      userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect)
    });
  } catch (err) {
    await handleFailure(err);
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/enableOAuthListener.mjs
isBrowser() && (() => {
  Amplify[ADD_OAUTH_LISTENER](attemptCompleteOAuthFlow);
})();

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/types/models.mjs
var cognitoHostedUIIdentityProviderMap = {
  Google: "Google",
  Facebook: "Facebook",
  Amazon: "LoginWithAmazon",
  Apple: "SignInWithApple"
};

// node_modules/@aws-amplify/auth/dist/esm/utils/openAuthSession.mjs
var openAuthSession = async (url) => {
  if (!(window == null ? void 0 : window.location)) {
    return;
  }
  window.location.href = url.replace("http://", "https://");
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/generateCodeVerifier.mjs
var CODE_VERIFIER_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
var generateCodeVerifier = (length) => {
  const randomBytes = new Uint8Array(length);
  getCrypto().getRandomValues(randomBytes);
  let value = "";
  let codeChallenge;
  for (const byte of randomBytes) {
    value += CODE_VERIFIER_CHARSET.charAt(byte % CODE_VERIFIER_CHARSET.length);
  }
  return {
    value,
    method: "S256",
    toCodeChallenge() {
      if (codeChallenge) {
        return codeChallenge;
      }
      codeChallenge = generateCodeChallenge(value);
      return codeChallenge;
    }
  };
};
function generateCodeChallenge(codeVerifier) {
  const awsCryptoHash = new Sha256();
  awsCryptoHash.update(codeVerifier);
  const codeChallenge = removePaddingChar(base64Encoder.convert(awsCryptoHash.digestSync(), { urlSafe: true }));
  return codeChallenge;
}
function removePaddingChar(base64Encoded) {
  return base64Encoded.replace(/=/g, "");
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/generateState.mjs
var generateState = () => {
  return generateRandomString(32);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/cancelOAuthFlow.mjs
var listenForOAuthFlowCancellation = (store) => {
  async function handleCancelOAuthFlow(event2) {
    const isBfcache = event2.persisted;
    if (isBfcache && await store.loadOAuthInFlight()) {
      const error3 = createOAuthError("User cancelled OAuth flow.");
      await handleFailure(error3);
    }
    window.removeEventListener("pageshow", handleCancelOAuthFlow);
  }
  window.addEventListener("pageshow", handleCancelOAuthFlow);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithRedirect.mjs
async function signInWithRedirect(input2) {
  var _a2, _b, _c, _d, _e, _f;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  assertOAuthConfig(authConfig);
  oAuthStore.setAuthConfig(authConfig);
  await assertUserNotAuthenticated();
  let provider = "COGNITO";
  if (typeof (input2 == null ? void 0 : input2.provider) === "string") {
    provider = cognitoHostedUIIdentityProviderMap[input2.provider];
  } else if ((_b = input2 == null ? void 0 : input2.provider) == null ? void 0 : _b.custom) {
    provider = input2.provider.custom;
  }
  return oauthSignIn({
    oauthConfig: authConfig.loginWith.oauth,
    clientId: authConfig.userPoolClientId,
    provider,
    customState: input2 == null ? void 0 : input2.customState,
    preferPrivateSession: (_c = input2 == null ? void 0 : input2.options) == null ? void 0 : _c.preferPrivateSession,
    options: {
      loginHint: (_d = input2 == null ? void 0 : input2.options) == null ? void 0 : _d.loginHint,
      lang: (_e = input2 == null ? void 0 : input2.options) == null ? void 0 : _e.lang,
      nonce: (_f = input2 == null ? void 0 : input2.options) == null ? void 0 : _f.nonce
    }
  });
}
var oauthSignIn = async ({ oauthConfig, provider, clientId, customState, preferPrivateSession, options }) => {
  const { domain, redirectSignIn, responseType, scopes } = oauthConfig;
  const { loginHint, lang, nonce } = options ?? {};
  const randomState = generateState();
  const state = customState ? `${randomState}-${urlSafeEncode(customState)}` : randomState;
  const { value, method, toCodeChallenge } = generateCodeVerifier(128);
  const redirectUri = getRedirectUrl2(oauthConfig.redirectSignIn);
  if (isBrowser())
    oAuthStore.storeOAuthInFlight(true);
  oAuthStore.storeOAuthState(state);
  oAuthStore.storePKCE(value);
  const queryString = Object.entries({
    redirect_uri: redirectUri,
    response_type: responseType,
    client_id: clientId,
    identity_provider: provider,
    scope: scopes.join(" "),
    // eslint-disable-next-line camelcase
    ...loginHint && { login_hint: loginHint },
    ...lang && { lang },
    ...nonce && { nonce },
    state,
    ...responseType === "code" && {
      code_challenge: toCodeChallenge(),
      code_challenge_method: method
    }
  }).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join("&");
  const oAuthUrl = `https://${domain}/oauth2/authorize?${queryString}`;
  listenForOAuthFlowCancellation(oAuthStore);
  const { type, error: error3, url } = await openAuthSession(oAuthUrl) ?? {};
  try {
    if (type === "error") {
      throw createOAuthError(String(error3));
    }
    if (type === "success" && url) {
      await completeOAuthFlow({
        currentUrl: url,
        clientId,
        domain,
        redirectUri,
        responseType,
        userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),
        preferPrivateSession
      });
    }
  } catch (err) {
    await handleFailure(err);
    throw err;
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/internal/fetchUserAttributes.mjs
var fetchUserAttributes = async (amplify) => {
  var _a2;
  const authConfig = (_a2 = amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolEndpoint, userPoolId } = authConfig;
  const { tokens: tokens2 } = await fetchAuthSession(amplify, {
    forceRefresh: false
  });
  assertAuthTokens(tokens2);
  const getUser = createGetUserClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { UserAttributes } = await getUser({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.FetchUserAttributes)
  }, {
    AccessToken: tokens2.accessToken.toString()
  });
  return toAuthUserAttribute(UserAttributes);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/fetchUserAttributes.mjs
var fetchUserAttributes2 = () => {
  return fetchUserAttributes(Amplify);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/completeOAuthSignOut.mjs
var completeOAuthSignOut = async (store) => {
  await store.clearOAuthData();
  tokenOrchestrator.clearTokens();
  await clearCredentials();
  Hub.dispatch("auth", { event: "signedOut" }, "Auth", AMPLIFY_SYMBOL);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/oAuthSignOutRedirect.mjs
var oAuthSignOutRedirect = async (authConfig, preferPrivateSession = false, redirectUrl) => {
  assertOAuthConfig(authConfig);
  const { loginWith, userPoolClientId } = authConfig;
  const { domain, redirectSignOut } = loginWith.oauth;
  const signoutUri = getRedirectUrl2(redirectSignOut, redirectUrl);
  const oAuthLogoutEndpoint = `https://${domain}/logout?${Object.entries({
    client_id: userPoolClientId,
    logout_uri: encodeURIComponent(signoutUri)
  }).map(([k, v]) => `${k}=${v}`).join("&")}`;
  return openAuthSession(oAuthLogoutEndpoint);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/handleOAuthSignOut.mjs
var handleOAuthSignOut = async (cognitoConfig, store, tokenOrchestrator2, redirectUrl) => {
  const { isOAuthSignIn } = await store.loadOAuthSignIn();
  const oauthMetadata = await tokenOrchestrator2.getOAuthMetadata();
  await completeOAuthSignOut(store);
  if (isOAuthSignIn || (oauthMetadata == null ? void 0 : oauthMetadata.oauthSignIn)) {
    return oAuthSignOutRedirect(cognitoConfig, false, redirectUrl);
  }
};

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createRevokeTokenClient.mjs
var createRevokeTokenClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("RevokeToken"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGlobalSignOutClient.mjs
var createGlobalSignOutClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("GlobalSignOut"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signOut.mjs
var logger12 = new ConsoleLogger("Auth");
async function signOut(input2) {
  var _a2, _b;
  const cognitoConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(cognitoConfig);
  if (input2 == null ? void 0 : input2.global) {
    await globalSignOut(cognitoConfig);
  } else {
    await clientSignOut(cognitoConfig);
  }
  let hasOAuthConfig;
  try {
    assertOAuthConfig(cognitoConfig);
    hasOAuthConfig = true;
  } catch (err) {
    hasOAuthConfig = false;
  }
  if (hasOAuthConfig) {
    const oAuthStore2 = new DefaultOAuthStore(defaultStorage);
    oAuthStore2.setAuthConfig(cognitoConfig);
    const { type } = await handleOAuthSignOut(cognitoConfig, oAuthStore2, tokenOrchestrator, (_b = input2 == null ? void 0 : input2.oauth) == null ? void 0 : _b.redirectUrl) ?? {};
    if (type === "error") {
      throw new AuthError({
        name: OAUTH_SIGNOUT_EXCEPTION,
        message: `An error occurred when attempting to log out from OAuth provider.`
      });
    }
  } else {
    tokenOrchestrator.clearTokens();
    await clearCredentials();
    Hub.dispatch("auth", { event: "signedOut" }, "Auth", AMPLIFY_SYMBOL);
  }
}
async function clientSignOut(cognitoConfig) {
  try {
    const { userPoolEndpoint, userPoolId, userPoolClientId } = cognitoConfig;
    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();
    assertAuthTokensWithRefreshToken(authTokens);
    if (isSessionRevocable(authTokens.accessToken)) {
      const revokeToken = createRevokeTokenClient({
        endpointResolver: createCognitoUserPoolEndpointResolver({
          endpointOverride: userPoolEndpoint
        })
      });
      await revokeToken({
        region: getRegionFromUserPoolId(userPoolId),
        userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)
      }, {
        ClientId: userPoolClientId,
        Token: authTokens.refreshToken
      });
    }
  } catch (err) {
    logger12.debug("Client signOut error caught but will proceed with token removal");
  }
}
async function globalSignOut(cognitoConfig) {
  try {
    const { userPoolEndpoint, userPoolId } = cognitoConfig;
    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();
    assertAuthTokens(authTokens);
    const globalSignOutClient = createGlobalSignOutClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    await globalSignOutClient({
      region: getRegionFromUserPoolId(userPoolId),
      userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)
    }, {
      AccessToken: authTokens.accessToken.toString()
    });
  } catch (err) {
    logger12.debug("Global signOut error caught but will proceed with token removal");
  }
}
var isSessionRevocable = (token) => {
  var _a2;
  return !!((_a2 = token == null ? void 0 : token.payload) == null ? void 0 : _a2.origin_jti);
};

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserAttributeVerificationCodeClient.mjs
var createGetUserAttributeVerificationCodeClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("GetUserAttributeVerificationCode"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/sendUserAttributeVerificationCode.mjs
var sendUserAttributeVerificationCode = async (input2) => {
  var _a2;
  const { userAttributeKey, options } = input2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  const clientMetadata = options == null ? void 0 : options.clientMetadata;
  assertTokenProviderConfig(authConfig);
  const { userPoolEndpoint, userPoolId } = authConfig;
  const { tokens: tokens2 } = await fetchAuthSession2({ forceRefresh: false });
  assertAuthTokens(tokens2);
  const getUserAttributeVerificationCode = createGetUserAttributeVerificationCodeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { CodeDeliveryDetails } = await getUserAttributeVerificationCode({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SendUserAttributeVerificationCode)
  }, {
    AccessToken: tokens2.accessToken.toString(),
    ClientMetadata: clientMetadata,
    AttributeName: userAttributeKey
  });
  const { DeliveryMedium, AttributeName, Destination } = {
    ...CodeDeliveryDetails
  };
  return {
    destination: Destination,
    deliveryMedium: DeliveryMedium,
    attributeName: AttributeName
  };
};

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createEmptyResponseDeserializer.mjs
var createEmptyResponseDeserializer = () => async (response) => {
  if (response.statusCode >= 300) {
    const error3 = await parseJsonError(response);
    assertServiceError(error3);
    throw new AuthError({ name: error3.name, message: error3.message });
  } else {
    return void 0;
  }
};

// node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteUserClient.mjs
var createDeleteUserClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("DeleteUser"), createEmptyResponseDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2
});

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/deleteUser.mjs
async function deleteUser() {
  var _a2;
  const authConfig = (_a2 = Amplify.getConfig().Auth) == null ? void 0 : _a2.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolEndpoint, userPoolId } = authConfig;
  const { tokens: tokens2 } = await fetchAuthSession2();
  assertAuthTokens(tokens2);
  const serviceDeleteUser = createDeleteUserClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  await serviceDeleteUser({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.DeleteUser)
  }, {
    AccessToken: tokens2.accessToken.toString()
  });
  await tokenOrchestrator.clearDeviceMetadata();
  await signOut();
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/types.mjs
var IdentityIdStorageKeys = {
  identityId: "identityId"
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/IdentityIdStore.mjs
var logger13 = new ConsoleLogger("DefaultIdentityIdStore");
var DefaultIdentityIdStore = class {
  setAuthConfig(authConfigParam) {
    assertIdentityPoolIdConfig(authConfigParam.Cognito);
    this.authConfig = authConfigParam;
    this._authKeys = createKeysForAuthStorage3("Cognito", authConfigParam.Cognito.identityPoolId);
  }
  constructor(keyValueStorage) {
    this._authKeys = {};
    this._hasGuestIdentityId = false;
    this.keyValueStorage = keyValueStorage;
  }
  async loadIdentityId() {
    var _a2;
    assertIdentityPoolIdConfig((_a2 = this.authConfig) == null ? void 0 : _a2.Cognito);
    try {
      if (this._primaryIdentityId) {
        return {
          id: this._primaryIdentityId,
          type: "primary"
        };
      } else {
        const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);
        if (storedIdentityId) {
          this._hasGuestIdentityId = true;
          return {
            id: storedIdentityId,
            type: "guest"
          };
        }
        return null;
      }
    } catch (err) {
      logger13.log("Error getting stored IdentityId.", err);
      return null;
    }
  }
  async storeIdentityId(identity2) {
    var _a2;
    assertIdentityPoolIdConfig((_a2 = this.authConfig) == null ? void 0 : _a2.Cognito);
    if (identity2.type === "guest") {
      this.keyValueStorage.setItem(this._authKeys.identityId, identity2.id);
      this._primaryIdentityId = void 0;
      this._hasGuestIdentityId = true;
    } else {
      this._primaryIdentityId = identity2.id;
      if (this._hasGuestIdentityId) {
        this.keyValueStorage.removeItem(this._authKeys.identityId);
        this._hasGuestIdentityId = false;
      }
    }
  }
  async clearIdentityId() {
    this._primaryIdentityId = void 0;
    await this.keyValueStorage.removeItem(this._authKeys.identityId);
  }
};
var createKeysForAuthStorage3 = (provider, identifier) => {
  return getAuthStorageKeys(IdentityIdStorageKeys)(`com.amplify.${provider}`, identifier);
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/utils.mjs
function formLoginsMap(idToken) {
  const issuer = decodeJWT(idToken).payload.iss;
  const res = {};
  if (!issuer) {
    throw new AuthError({
      name: "InvalidIdTokenException",
      message: "Invalid Idtoken."
    });
  }
  const domainName = issuer.replace(/(^\w+:|^)\/\//, "");
  res[domainName] = idToken;
  return res;
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/IdentityIdProvider.mjs
async function cognitoIdentityIdProvider({ tokens: tokens2, authConfig, identityIdStore }) {
  identityIdStore.setAuthConfig({ Cognito: authConfig });
  const identityId = await identityIdStore.loadIdentityId();
  if (identityId) {
    return identityId.id;
  }
  const logins = (tokens2 == null ? void 0 : tokens2.idToken) ? formLoginsMap(tokens2.idToken.toString()) : {};
  const generatedIdentityId = await generateIdentityId(logins, authConfig);
  identityIdStore.storeIdentityId({
    id: generatedIdentityId,
    type: tokens2 ? "primary" : "guest"
  });
  return generatedIdentityId;
}
async function generateIdentityId(logins, authConfig) {
  const identityPoolId = authConfig == null ? void 0 : authConfig.identityPoolId;
  const region = getRegionFromIdentityPoolId(identityPoolId);
  let idResult;
  try {
    idResult = (await getId({
      region
    }, {
      IdentityPoolId: identityPoolId,
      Logins: logins
    })).IdentityId;
  } catch (e) {
    assertServiceError(e);
    throw new AuthError(e);
  }
  if (!idResult) {
    throw new AuthError({
      name: "GetIdResponseException",
      message: "Received undefined response from getId operation",
      recoverySuggestion: "Make sure to pass a valid identityPoolId in the configuration."
    });
  }
  return idResult;
}

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/credentialsProvider.mjs
var logger14 = new ConsoleLogger("CognitoCredentialsProvider");
var CREDENTIALS_TTL = 50 * 60 * 1e3;
var CognitoAWSCredentialsAndIdentityIdProvider = class {
  constructor(identityIdStore) {
    this._nextCredentialsRefresh = 0;
    this._identityIdStore = identityIdStore;
  }
  async clearCredentialsAndIdentityId() {
    logger14.debug("Clearing out credentials and identityId");
    this._credentialsAndIdentityId = void 0;
    await this._identityIdStore.clearIdentityId();
  }
  async clearCredentials() {
    logger14.debug("Clearing out in-memory credentials");
    this._credentialsAndIdentityId = void 0;
  }
  async getCredentialsAndIdentityId(getCredentialsOptions) {
    const isAuthenticated2 = getCredentialsOptions.authenticated;
    const { tokens: tokens2 } = getCredentialsOptions;
    const { authConfig } = getCredentialsOptions;
    try {
      assertIdentityPoolIdConfig(authConfig == null ? void 0 : authConfig.Cognito);
    } catch {
      return;
    }
    if (!isAuthenticated2 && !authConfig.Cognito.allowGuestAccess) {
      return;
    }
    const { forceRefresh } = getCredentialsOptions;
    const tokenHasChanged = this.hasTokenChanged(tokens2);
    const identityId = await cognitoIdentityIdProvider({
      tokens: tokens2,
      authConfig: authConfig.Cognito,
      identityIdStore: this._identityIdStore
    });
    if (forceRefresh || tokenHasChanged) {
      this.clearCredentials();
    }
    if (!isAuthenticated2) {
      return this.getGuestCredentials(identityId, authConfig.Cognito);
    } else {
      assertIdTokenInAuthTokens(tokens2);
      return this.credsForOIDCTokens(authConfig.Cognito, tokens2, identityId);
    }
  }
  async getGuestCredentials(identityId, authConfig) {
    var _a2, _b;
    if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === false) {
      logger14.info("returning stored credentials as they neither past TTL nor expired.");
      return this._credentialsAndIdentityId;
    }
    this.clearCredentials();
    const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);
    let clientResult;
    try {
      clientResult = await getCredentialsForIdentity({ region }, {
        IdentityId: identityId
      });
    } catch (e) {
      assertServiceError(e);
      throw new AuthError(e);
    }
    if (((_a2 = clientResult == null ? void 0 : clientResult.Credentials) == null ? void 0 : _a2.AccessKeyId) && ((_b = clientResult == null ? void 0 : clientResult.Credentials) == null ? void 0 : _b.SecretKey)) {
      this._nextCredentialsRefresh = (/* @__PURE__ */ new Date()).getTime() + CREDENTIALS_TTL;
      const res = {
        credentials: {
          accessKeyId: clientResult.Credentials.AccessKeyId,
          secretAccessKey: clientResult.Credentials.SecretKey,
          sessionToken: clientResult.Credentials.SessionToken,
          expiration: clientResult.Credentials.Expiration
        },
        identityId
      };
      if (clientResult.IdentityId) {
        res.identityId = clientResult.IdentityId;
        this._identityIdStore.storeIdentityId({
          id: clientResult.IdentityId,
          type: "guest"
        });
      }
      this._credentialsAndIdentityId = {
        ...res,
        isAuthenticatedCreds: false
      };
      return res;
    } else {
      throw new AuthError({
        name: "CredentialsNotFoundException",
        message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`
      });
    }
  }
  async credsForOIDCTokens(authConfig, authTokens, identityId) {
    var _a2, _b, _c;
    if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === true) {
      logger14.debug("returning stored credentials as they neither past TTL nor expired.");
      return this._credentialsAndIdentityId;
    }
    this.clearCredentials();
    const logins = authTokens.idToken ? formLoginsMap(authTokens.idToken.toString()) : {};
    const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);
    let clientResult;
    try {
      clientResult = await getCredentialsForIdentity({ region }, {
        IdentityId: identityId,
        Logins: logins
      });
    } catch (e) {
      assertServiceError(e);
      throw new AuthError(e);
    }
    if (((_a2 = clientResult == null ? void 0 : clientResult.Credentials) == null ? void 0 : _a2.AccessKeyId) && ((_b = clientResult == null ? void 0 : clientResult.Credentials) == null ? void 0 : _b.SecretKey)) {
      this._nextCredentialsRefresh = (/* @__PURE__ */ new Date()).getTime() + CREDENTIALS_TTL;
      const res = {
        credentials: {
          accessKeyId: clientResult.Credentials.AccessKeyId,
          secretAccessKey: clientResult.Credentials.SecretKey,
          sessionToken: clientResult.Credentials.SessionToken,
          expiration: clientResult.Credentials.Expiration
        },
        identityId
      };
      if (clientResult.IdentityId) {
        res.identityId = clientResult.IdentityId;
        this._identityIdStore.storeIdentityId({
          id: clientResult.IdentityId,
          type: "primary"
        });
      }
      this._credentialsAndIdentityId = {
        ...res,
        isAuthenticatedCreds: true,
        associatedIdToken: (_c = authTokens.idToken) == null ? void 0 : _c.toString()
      };
      return res;
    } else {
      throw new AuthError({
        name: "CredentialsException",
        message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`
      });
    }
  }
  isPastTTL() {
    return this._nextCredentialsRefresh === void 0 ? true : this._nextCredentialsRefresh <= Date.now();
  }
  hasTokenChanged(tokens2) {
    var _a2, _b;
    return !!tokens2 && !!((_a2 = this._credentialsAndIdentityId) == null ? void 0 : _a2.associatedIdToken) && ((_b = tokens2.idToken) == null ? void 0 : _b.toString()) !== this._credentialsAndIdentityId.associatedIdToken;
  }
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/actor.mjs
var getActorState = (state) => {
  var _a2;
  return (_a2 = state.context.actorRef) == null ? void 0 : _a2.getSnapshot();
};
var getActorContext = (state) => {
  var _a2;
  return (_a2 = getActorState(state)) == null ? void 0 : _a2.context;
};

// node_modules/@aws-amplify/ui/dist/esm/utils/setUserAgent/constants.mjs
var AI_INPUT_BASE = {
  category: Category.AI,
  apis: [
    AiAction.CreateConversation,
    AiAction.DeleteConversation,
    AiAction.ListConversations,
    AiAction.UpdateConversation,
    AiAction.OnMessage,
    AiAction.SendMessage,
    AiAction.Generation
  ]
};
var ACCOUNT_SETTINGS_INPUT_BASE = {
  apis: [AuthAction.DeleteUser, AuthAction.UpdatePassword],
  category: Category.Auth
};
var AUTHENTICATOR_INPUT_BASE = {
  apis: [
    AuthAction.SignUp,
    AuthAction.ConfirmSignUp,
    AuthAction.ResendSignUpCode,
    AuthAction.SignIn,
    AuthAction.ConfirmSignIn,
    AuthAction.FetchUserAttributes,
    AuthAction.SignOut,
    AuthAction.ResetPassword,
    AuthAction.ConfirmResetPassword,
    AuthAction.SignInWithRedirect
  ],
  category: Category.Auth
};
var FILE_UPLOADER_BASE_INPUT = {
  apis: [StorageAction.UploadData],
  category: Category.Storage
};
var IN_APP_MESSAGING_INPUT_BASE = {
  apis: [InAppMessagingAction.NotifyMessageInteraction],
  category: Category.InAppMessaging
};
var LOCATION_SEARCH_INPUT_BASE = {
  category: Category.Geo,
  apis: [
    GeoAction.SearchByText,
    GeoAction.SearchForSuggestions,
    GeoAction.SearchByPlaceId
  ]
};
var MAP_VIEW_INPUT_BASE = {
  category: Category.Geo,
  apis: []
};
var STORAGE_MANAGER_INPUT_BASE = {
  apis: [StorageAction.UploadData],
  category: Category.Storage
};
var STORAGE_BROWSER_INPUT_BASE = {
  apis: [
    StorageAction.UploadData,
    StorageAction.Copy,
    StorageAction.GetUrl,
    StorageAction.List,
    StorageAction.Remove,
    StorageAction.GetDataAccess,
    StorageAction.ListCallerAccessGrants
  ],
  category: Category.Storage
};

// node_modules/@aws-amplify/ui/dist/esm/utils/utils.mjs
function isObject(value) {
  return value != null && !Array.isArray(value) && typeof value === "object";
}
function isString2(value) {
  return typeof value === "string" || typeof value === "object" && Object.prototype.toString.call(value) === "[object String]";
}
function isMap(value) {
  return isObject(value) && Object.prototype.toString.call(value) === "[object Map]";
}
function isSet(value) {
  return isObject(value) && Object.prototype.toString.call(value) === "[object Set]";
}
function isEmpty2(value) {
  if (value === null || value === void 0)
    return true;
  if (isObject(value) && (isMap(value) || isSet(value))) {
    return !value.size;
  }
  if (isObject(value) && (isString2(value) || Array.isArray(value))) {
    return !value.length;
  }
  for (const key in value) {
    if (has2(value, key)) {
      return false;
    }
  }
  return true;
}
function isEmptyArray(value) {
  return Array.isArray(value) && isEmpty2(value);
}
function areEmptyArrays(...values) {
  return values.every(isEmptyArray);
}
function isEmptyObject(value) {
  return isObject(value) && isEmpty2(value);
}
function areEmptyObjects(...values) {
  return values.every(isEmptyObject);
}
function has2(value, key) {
  return value != null && Object.prototype.hasOwnProperty.call(value, key);
}
function isFunction3(value) {
  return typeof value === "function";
}
var classNameModifier = (base, modifier) => {
  return modifier ? `${base}--${modifier}` : "";
};
var classNameModifierByFlag = (base, modifier, flag) => {
  return flag ? `${base}--${modifier}` : "";
};
function noop2(..._) {
  return;
}
function splitObject(obj, predicate) {
  const left = {};
  const right = {};
  Object.entries(obj).forEach(([key, value]) => {
    if (predicate(key)) {
      left[key] = value;
    } else {
      right[key] = value;
    }
  });
  return [left, right];
}

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/defaultAuthHubHandler.mjs
var defaultAuthHubHandler = ({ payload }, service, options) => {
  var _a2;
  const { data, event: event2 } = payload;
  const { send: send3 } = service;
  const { onSignIn, onSignOut } = options ?? {};
  switch (event2) {
    case "signedIn": {
      if (isFunction3(onSignIn)) {
        onSignIn(payload);
      }
      break;
    }
    case "signInWithRedirect": {
      send3("SIGN_IN_WITH_REDIRECT");
      break;
    }
    case "signedOut": {
      if (isFunction3(onSignOut)) {
        onSignOut();
      }
      send3("SIGN_OUT");
      break;
    }
    case "tokenRefresh_failure": {
      if (((_a2 = data == null ? void 0 : data.error) == null ? void 0 : _a2.name) === AmplifyErrorCode.NetworkError) {
        return;
      }
      send3("SIGN_OUT");
      break;
    }
  }
};
var listenToAuthHub = (service, handler = defaultAuthHubHandler) => {
  const eventHandler = (data) => handler(data, service);
  return Hub.listen("auth", eventHandler, "authenticator-hub-handler");
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/country-dial-codes.mjs
var countryDialCodes = [
  "+1",
  "+7",
  "+20",
  "+27",
  "+30",
  "+31",
  "+32",
  "+33",
  "+34",
  "+36",
  "+39",
  "+40",
  "+41",
  "+43",
  "+44",
  "+45",
  "+46",
  "+47",
  "+48",
  "+49",
  "+51",
  "+52",
  "+53",
  "+54",
  "+55",
  "+56",
  "+57",
  "+58",
  "+60",
  "+61",
  "+62",
  "+63",
  "+64",
  "+65",
  "+66",
  "+81",
  "+82",
  "+84",
  "+86",
  "+90",
  "+91",
  "+92",
  "+93",
  "+94",
  "+95",
  "+98",
  "+212",
  "+213",
  "+216",
  "+218",
  "+220",
  "+221",
  "+222",
  "+223",
  "+224",
  "+225",
  "+226",
  "+227",
  "+228",
  "+229",
  "+230",
  "+231",
  "+232",
  "+233",
  "+234",
  "+235",
  "+236",
  "+237",
  "+238",
  "+239",
  "+240",
  "+241",
  "+242",
  "+243",
  "+244",
  "+245",
  "+246",
  "+248",
  "+249",
  "+250",
  "+251",
  "+252",
  "+253",
  "+254",
  "+255",
  "+256",
  "+257",
  "+258",
  "+260",
  "+261",
  "+262",
  "+263",
  "+264",
  "+265",
  "+266",
  "+267",
  "+268",
  "+269",
  "+290",
  "+291",
  "+297",
  "+298",
  "+299",
  "+345",
  "+350",
  "+351",
  "+352",
  "+353",
  "+354",
  "+355",
  "+356",
  "+357",
  "+358",
  "+359",
  "+370",
  "+371",
  "+372",
  "+373",
  "+374",
  "+375",
  "+376",
  "+377",
  "+378",
  "+379",
  "+380",
  "+381",
  "+382",
  "+385",
  "+386",
  "+387",
  "+389",
  "+420",
  "+421",
  "+423",
  "+500",
  "+501",
  "+502",
  "+503",
  "+504",
  "+505",
  "+506",
  "+507",
  "+508",
  "+509",
  "+537",
  "+590",
  "+591",
  "+593",
  "+594",
  "+595",
  "+596",
  "+597",
  "+598",
  "+599",
  "+670",
  "+672",
  "+673",
  "+674",
  "+675",
  "+676",
  "+677",
  "+678",
  "+679",
  "+680",
  "+681",
  "+682",
  "+683",
  "+685",
  "+686",
  "+687",
  "+688",
  "+689",
  "+690",
  "+691",
  "+692",
  "+850",
  "+852",
  "+853",
  "+855",
  "+856",
  "+872",
  "+880",
  "+886",
  "+960",
  "+961",
  "+962",
  "+963",
  "+964",
  "+965",
  "+966",
  "+967",
  "+968",
  "+970",
  "+971",
  "+972",
  "+973",
  "+974",
  "+975",
  "+976",
  "+977",
  "+992",
  "+993",
  "+994",
  "+995",
  "+996",
  "+998"
];

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/constants.mjs
var defaultFormFieldOptions = {
  birthdate: {
    label: "Birthdate",
    placeholder: "Enter your Birthdate",
    type: "date",
    autocomplete: "bday",
    isRequired: true
  },
  confirmation_code: {
    label: "Confirmation Code",
    placeholder: "Enter your Confirmation Code",
    type: "text",
    autocomplete: "one-time-code",
    isRequired: true
  },
  confirm_password: {
    label: "Confirm Password",
    placeholder: "Please confirm your Password",
    type: "password",
    autocomplete: "new-password",
    isRequired: true
  },
  email: {
    label: "Email",
    placeholder: "Enter your Email",
    type: "email",
    autocomplete: "username",
    isRequired: true
  },
  family_name: {
    label: "Family Name",
    placeholder: "Enter your Family Name",
    type: "text",
    autocomplete: "family-name",
    isRequired: true
  },
  given_name: {
    label: "Given Name",
    placeholder: "Enter your Given Name",
    type: "text",
    autocomplete: "given-name",
    isRequired: true
  },
  middle_name: {
    label: "Middle Name",
    placeholder: "Enter your Middle Name",
    type: "text",
    autocomplete: "additional-name",
    isRequired: true
  },
  name: {
    label: "Name",
    placeholder: "Enter your Name",
    type: "text",
    autocomplete: "name",
    isRequired: true
  },
  nickname: {
    label: "Nickname",
    placeholder: "Enter your Nickname",
    type: "text",
    autocomplete: "tel",
    isRequired: true
  },
  password: {
    label: "Password",
    placeholder: "Enter your Password",
    type: "password",
    autocomplete: "new-password",
    isRequired: true
  },
  phone_number: {
    label: "Phone Number",
    placeholder: "Enter your Phone Number",
    type: "tel",
    autocomplete: "tel",
    dialCode: "+1",
    dialCodeList: countryDialCodes,
    isRequired: true
  },
  preferred_username: {
    label: "Preferred Username",
    placeholder: "Enter your Preferred Username",
    type: "text",
    isRequired: true
  },
  profile: {
    label: "Profile",
    placeholder: "Add your Profile",
    type: "url",
    autocomplete: "url",
    isRequired: true
  },
  website: {
    label: "Website",
    placeholder: "Add your Website",
    type: "url",
    autocomplete: "url",
    isRequired: true
  },
  username: {
    label: "Username",
    placeholder: "Enter your Username",
    type: "text",
    autocomplete: "username",
    isRequired: true
  }
};
var ALLOWED_SPECIAL_CHARACTERS = [
  "^",
  "$",
  "*",
  ".",
  "[",
  "]",
  "{",
  "}",
  "(",
  ")",
  "?",
  '"',
  "!",
  "@",
  "#",
  "%",
  "&",
  "/",
  "\\",
  ",",
  ">",
  "<",
  "'",
  ":",
  ";",
  "|",
  "_",
  "~",
  "`",
  "=",
  "+",
  "-",
  " "
];

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/getRoute.mjs
var getRoute = (state, actorState) => {
  if (actorState == null ? void 0 : actorState.matches("federatedSignIn")) {
    if (state.matches("signUpActor")) {
      return "signUp";
    }
    if (state.matches("signInActor")) {
      return "signIn";
    }
  }
  switch (true) {
    case state.matches("idle"):
      return "idle";
    case state.matches("setup"):
      return "setup";
    case state.matches("signOut"):
      return "signOut";
    case state.matches("authenticated"):
      return "authenticated";
    case (actorState == null ? void 0 : actorState.matches("confirmSignUp")):
    case (actorState == null ? void 0 : actorState.matches("resendSignUpCode")):
      return "confirmSignUp";
    case (actorState == null ? void 0 : actorState.matches("confirmSignIn")):
      return "confirmSignIn";
    case (actorState == null ? void 0 : actorState.matches("setupTotp.edit")):
    case (actorState == null ? void 0 : actorState.matches("setupTotp.submit")):
      return "setupTotp";
    case (actorState == null ? void 0 : actorState.matches("signIn")):
      return "signIn";
    case (actorState == null ? void 0 : actorState.matches("signUp")):
    case (actorState == null ? void 0 : actorState.matches("autoSignIn")):
      return "signUp";
    case (actorState == null ? void 0 : actorState.matches("forceChangePassword")):
      return "forceNewPassword";
    case (actorState == null ? void 0 : actorState.matches("forgotPassword")):
      return "forgotPassword";
    case (actorState == null ? void 0 : actorState.matches("confirmResetPassword")):
      return "confirmResetPassword";
    case (actorState == null ? void 0 : actorState.matches("selectUserAttributes")):
      return "verifyUser";
    case (actorState == null ? void 0 : actorState.matches("confirmVerifyUserAttribute")):
      return "confirmVerifyUser";
    case (actorState == null ? void 0 : actorState.matches("setupEmail")):
      return "setupEmail";
    case (actorState == null ? void 0 : actorState.matches("selectMfaType")):
      return "selectMfaType";
    case state.matches("getCurrentUser"):
    case (actorState == null ? void 0 : actorState.matches("fetchUserAttributes")):
      return "transition";
    default:
      return null;
  }
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/facade.mjs
var getSendEventAliases = (send3) => {
  const sendToMachine = (type) => {
    return (data) => send3({ type, data });
  };
  return {
    initializeMachine: sendToMachine("INIT"),
    resendCode: sendToMachine("RESEND"),
    signOut: sendToMachine("SIGN_OUT"),
    submitForm: sendToMachine("SUBMIT"),
    updateForm: sendToMachine("CHANGE"),
    updateBlur: sendToMachine("BLUR"),
    // Actions that don't immediately invoke a service but instead transition to a screen
    // are prefixed with `to*`
    toFederatedSignIn: sendToMachine("FEDERATED_SIGN_IN"),
    toForgotPassword: sendToMachine("FORGOT_PASSWORD"),
    toSignIn: sendToMachine("SIGN_IN"),
    toSignUp: sendToMachine("SIGN_UP"),
    skipVerification: sendToMachine("SKIP")
  };
};
var getServiceContextFacade = (state) => {
  var _a2, _b;
  const actorContext = getActorContext(state) ?? {};
  const { allowedMfaTypes, challengeName, codeDeliveryDetails, remoteError: error3, validationError: validationErrors, totpSecretCode = null, unverifiedUserAttributes, username } = actorContext;
  const { socialProviders = [] } = ((_a2 = state.context) == null ? void 0 : _a2.config) ?? {};
  const user = (actorContext == null ? void 0 : actorContext.user) ?? ((_b = state.context) == null ? void 0 : _b.user);
  const hasValidationErrors = !!(validationErrors && Object.keys(validationErrors).length > 0);
  const actorState = getActorState(state);
  const isPending = state.hasTag("pending") || (actorState == null ? void 0 : actorState.hasTag("pending"));
  const route = getRoute(state, actorState);
  const authStatus = ((route2) => {
    switch (route2) {
      case "idle":
      case "setup":
        return "configuring";
      case "authenticated":
        return "authenticated";
      default:
        return "unauthenticated";
    }
  })(route);
  const facade = {
    allowedMfaTypes,
    authStatus,
    challengeName,
    codeDeliveryDetails,
    error: error3,
    hasValidationErrors,
    isPending,
    route,
    socialProviders,
    totpSecretCode,
    unverifiedUserAttributes,
    user,
    username,
    validationErrors
    // @v6-migration-note
    // While most of the properties
    // on `AuthenticatorServiceContextFacade` can resolve to `undefined`, updating
    // the interface requires material changes in consumers (namely `useAuthenticator`)
    // which will have implications on the UI layer as typeguards and non-null checks
    // are required to pass type checking. As the `Authenticator` is behaving as expected
    // with the `AuthenticatorServiceContextFacade` interface, prefer to cast
  };
  return facade;
};
var getServiceFacade = ({ send: send3, state }) => {
  const sendEventAliases = getSendEventAliases(send3);
  const serviceContext = getServiceContextFacade(state);
  return {
    ...sendEventAliases,
    ...serviceContext
  };
};

// node_modules/@aws-amplify/ui/dist/esm/types/authenticator/user.mjs
var FederatedIdentityProviders;
(function(FederatedIdentityProviders2) {
  FederatedIdentityProviders2["Apple"] = "Apple";
  FederatedIdentityProviders2["Amazon"] = "Amazon";
  FederatedIdentityProviders2["Facebook"] = "Facebook";
  FederatedIdentityProviders2["Google"] = "Google";
})(FederatedIdentityProviders || (FederatedIdentityProviders = {}));
var UnverifiedContactMethodType;
(function(UnverifiedContactMethodType2) {
  UnverifiedContactMethodType2["Email"] = "email";
  UnverifiedContactMethodType2["PhoneNumber"] = "phone_number";
})(UnverifiedContactMethodType || (UnverifiedContactMethodType = {}));

// node_modules/@aws-amplify/ui/dist/esm/types/authenticator/attributes.mjs
var signUpFieldsWithDefault = [
  "birthdate",
  "email",
  "family_name",
  "given_name",
  "middle_name",
  "name",
  "nickname",
  "phone_number",
  "preferred_username",
  "profile",
  "website"
];
var LoginMechanismArray = [
  "username",
  "email",
  "phone_number"
];
var authFieldsWithDefaults = [
  ...LoginMechanismArray,
  ...signUpFieldsWithDefault,
  "confirmation_code",
  "password",
  "confirm_password"
];
var isAuthFieldsWithDefaults = (field2) => {
  return authFieldsWithDefaults.includes(field2);
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/form.mjs
var isAuthFieldWithDefaults = (field2) => {
  return authFieldsWithDefaults.includes(field2);
};
var isArray5 = (val) => {
  return Array.isArray(val);
};
var getErrors = (errors) => {
  if (!errors)
    return null;
  if (isArray5(errors)) {
    return errors;
  } else {
    return [errors];
  }
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/utils.mjs
var censorAllButFirstAndLast = (value) => {
  const split = value.trim().split("");
  for (let i = 0; i < split.length; i++) {
    if (i > 0 && i < split.length - 1) {
      split[i] = "*";
    }
  }
  return split.join("");
};
var censorPhoneNumber = (val) => {
  if (val.length < 4) {
    return val;
  }
  const split = val.split("");
  for (let i = 0; i < split.length - 4; i++) {
    split[i] = "*";
  }
  return split.join("");
};
var censorEmail = (val) => {
  const splitEmail = val.split("@");
  const censoredName = censorAllButFirstAndLast(splitEmail[0]);
  return `${censoredName}@${splitEmail[1]}`;
};
var censorContactMethod = (type, value) => {
  return type === "Phone Number" ? censorPhoneNumber(value) : censorEmail(value);
};
var hasSpecialChars = (password) => ALLOWED_SPECIAL_CHARACTERS.some((char) => password.includes(char));
var getTotpCodeURL = (issuer, username, secret) => encodeURI(`otpauth://totp/${issuer}:${username}?secret=${secret}&issuer=${issuer}`);
function trimValues(values, ...ignored) {
  return Object.entries(values).reduce((acc, [name2, value]) => ({
    ...acc,
    [name2]: ignored.includes(name2) ? value : value == null ? void 0 : value.trim()
  }), {});
}

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/de.mjs
var deDict = {
  "Account recovery requires verified contact information": "Zurücksetzen des Accounts benötigt einen verifizierten Account",
  "Add your Profile": "Ihr Profil hinzufügen",
  "Add your Website": "Ihre Website hinzufügen",
  "Authenticator App (TOTP)": "Authentifikator-App (TOTP)",
  "Back to Sign In": "Zurück zur Anmeldung",
  "Change Password": "Passwort ändern",
  Changing: "Ändern von",
  Code: "Code",
  "Confirm Email Code": "E-Mail-Code bestätigen",
  "Confirm Password": "Passwort bestätigen",
  "Please confirm your Password": "Bitte bestätigen Sie Ihr Passwort",
  "Confirm Sign Up": "Registrierung bestätigen",
  "Confirm SMS Code": "SMS-Code bestätigen",
  "Confirm TOTP Code": "TOTP-Code bestätigen",
  Confirm: "Bestätigen",
  "Confirmation Code": "Bestätigungs-Code",
  Confirming: "Wird bestätigt",
  "Create a new account": "Einen neuen Account erstellen",
  "Create Account": "Account erstellen",
  "Creating Account": "Account wird erstellt",
  "Dismiss alert": "Warnung verwerfen",
  Email: "E-Mail",
  "Email Message": "E-Mail-Nachricht",
  "Enter your Birthdate": "Geben Sie Ihr Geburtsdatum ein",
  "Enter your code": "Geben Sie Ihren Code ein",
  "Enter your Confirmation Code": "Geben Sie Ihren Bestätigungs-Code ein",
  "Enter your Email": "Geben Sie Ihre E-Mail ein",
  "Enter your Family Name": "Geben Sie Ihren Nachnamen ein",
  "Enter your Given Name": "Geben Sie Ihren Vornamen ein",
  "Enter your Middle Name": "Geben Sie Ihren zweiten Vornamen ein",
  "Enter your Name": "Geben Sie Ihren Namen ein",
  "Enter your Nickname": "Geben Sie Ihren Spitznamen ein",
  "Enter your Password": "Geben Sie Ihr Passwort ein",
  "Enter your password": "Geben Sie Ihr Passwort ein",
  "Enter your email": "Geben Sie Ihre E-Mail ein",
  "Enter your phone number": "Geben Sie Ihre Telefonnummer ein",
  "Enter your Preferred Username": "Geben Sie Ihren bevorzugten Benutzernamen ein",
  "Enter your username": "Geben Sie Ihren Benutzernamen ein",
  "Forgot password?": "Passwort vergessen?",
  "Forgot your password?": "Passwort vergessen? ",
  "Hide password": "Passwort verbergen",
  "It may take a minute to arrive": "Es kann eine Minute dauern, bis er ankommt",
  Loading: "Wird geladen",
  "Multi-Factor Authentication": "Multifaktor-Authentifizierung",
  "Multi-Factor Authentication Setup": "Einrichtung der Multifaktor-Authentifizierung",
  "New password": "Neues Passwort",
  or: "oder",
  Password: "Passwort",
  "Phone Number": "Telefonnummer",
  "Resend Code": "Code erneut senden",
  "Reset your Password": "Zurücksetzen des Passworts",
  "Reset your password": "Zurücksetzen des passworts",
  "Select MFA Type": "MFA-Typ auswählen",
  "Send code": "Code senden",
  "Send Code": "Code senden",
  Sending: "Wird gesendet",
  "Setup Email": "E-Mail einrichten",
  "Setup TOTP": "TOTP einrichten",
  "Show password": "Passwort anzeigen",
  "Sign in to your account": "Melden Sie sich mit Ihrem Account an",
  "Sign In with Amazon": "Mit Amazon anmelden",
  "Sign In with Apple": "Mit Apple anmelden",
  "Sign In with Facebook": "Mit Facebook anmelden",
  "Sign In with Google": "Mit Google anmelden",
  "Sign in": "Anmelden",
  "Sign In": "Anmelden",
  "Signing in": "Wird angemeldet",
  Skip: "Überspringen",
  Submit: "Abschicken",
  Submitting: "Wird gesendet",
  "Text Message (SMS)": "Textnachricht (SMS)",
  Username: "Benutzername",
  "Verify Contact": "Kontakt verifizieren",
  Verify: "Verifizieren",
  "We Emailed You": "E-Mail wurde versendet",
  "We Sent A Code": "Wir haben einen Code gesendet",
  "We Texted You": "Wir haben Ihnen eine SMS gesendet",
  "Your code is on the way. To log in, enter the code we emailed to": "Ihr Bestätigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir per E-Mail verschickt haben",
  "Your code is on the way. To log in, enter the code we sent you": "Ihr Code ist unterwegs. Um sich anzumelden, geben Sie den Code ein, den wir Ihnen gesendet haben",
  "Your code is on the way. To log in, enter the code we texted to": "Ihr Bestätigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir per SMS verschickt haben",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Ein Account mit dieser E-Mail existiert bereits.",
  "Confirm a Code": "Code bestätigen",
  "Confirm Sign In": "Anmeldung bestätigen",
  "Create account": "Hier registrieren",
  "Sign Up with Facebook": "Mit Facebook registrieren",
  "Sign Up with Google": "Mit Google registrieren",
  "Forgot Password": "Passwort vergessen",
  "Have an account? ": "Schon registriert? ",
  "Incorrect username or password": "Falscher Benutzername oder falsches Passwort",
  "Invalid password format": "Ungültiges Passwort-Format",
  "Invalid phone number format": `Ungültiges Telefonummern-Format. Benutze eine Nummer im Format: +12345678900`,
  "It may take a minute to arrive.": "Es könnte eine Minute dauern, bis der Code eintrifft.",
  "Lost your code? ": "Code verloren? ",
  "New Password": "Neues Passwort",
  "No account? ": "Kein Account? ",
  "Password attempts exceeded": "Die maximale Anzahl der fehlerhaften Anmeldeversuche wurde erreicht",
  "Reset password": "Passwort zurücksetzen",
  "Reset Password": "Passwort Zurücksetzen",
  "Sign Out": "Abmelden",
  "Sign Up": "Registrieren",
  "User already exists": "Dieser Benutzer existiert bereits",
  "User does not exist": "Dieser Benutzer existiert nicht",
  "Username cannot be empty": "Benutzername darf nicht leer sein"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/en.mjs
var enDict = {
  "Account recovery requires verified contact information": "Account recovery requires verified contact information",
  "Add your Profile": "Add your Profile",
  "Add your Website": "Add your Website",
  "Authenticator App (TOTP)": "Authenticator App (TOTP)",
  "Back to Sign In": "Back to Sign In",
  "Change Password": "Change Password",
  Changing: "Changing",
  Code: "Code",
  "Confirm Email Code": "Confirm Email Code",
  "Confirm Password": "Confirm Password",
  "Confirm Sign Up": "Confirm Sign Up",
  "Confirm SMS Code": "Confirm SMS Code",
  "Confirm MFA Code": "Confirm MFA Code",
  "Confirm TOTP Code": "Confirm TOTP Code",
  Confirm: "Confirm",
  "Confirmation Code": "Confirmation Code",
  Confirming: "Confirming",
  "Create a new account": "Create a new account",
  "Create Account": "Create Account",
  "Creating Account": "Creating Account",
  "Dismiss alert": "Dismiss alert",
  Email: "Email",
  "Email Message": "Email Message",
  "Enter your Birthdate": "Enter your Birthdate",
  "Enter your code": "Enter your code",
  "Enter your Confirmation Code": "Enter your Confirmation Code",
  "Enter your Email": "Enter your Email",
  "Enter your Family Name": "Enter your Family Name",
  "Enter your Given Name": "Enter your Given Name",
  "Enter your Middle Name": "Enter your Middle Name",
  "Enter your Name": "Enter your Name",
  "Enter your Nickname": "Enter your Nickname",
  "Enter your Password": "Enter your Password",
  "Enter your phone number": "Enter your phone number",
  "Enter your Preferred Username": "Enter your Preferred Username",
  "Enter your username": "Enter your username",
  "Forgot password?": "Forgot password?",
  "Forgot your password?": "Forgot your password?",
  "Hide password": "Hide password",
  "It may take a minute to arrive": "It may take a minute to arrive",
  Loading: "Loading",
  "Multi-Factor Authentication": "Multi-Factor Authentication",
  "Multi-Factor Authentication Setup": "Multi-Factor Authentication Setup",
  "New password": "New password",
  or: "or",
  Password: "Password",
  "Phone Number": "Phone Number",
  "Please confirm your Password": "Please confirm your Password",
  "Resend Code": "Resend Code",
  "Reset your password": "Reset your password",
  "Reset your Password": "Reset your Password",
  "Select MFA Type": "Select MFA Type",
  "Send code": "Send code",
  "Send Code": "Send Code",
  Sending: "Sending",
  "Setup Email": "Setup Email",
  "Setup TOTP": "Setup TOTP",
  "Show password": "Show password",
  "Sign in to your account": "Sign in to your account",
  "Sign In with Amazon": "Sign In with Amazon",
  "Sign In with Apple": "Sign In with Apple",
  "Sign In with Facebook": "Sign In with Facebook",
  "Sign In with Google": "Sign In with Google",
  "Sign in": "Sign in",
  "Sign In": "Sign In",
  "Signing in": "Signing in",
  Skip: "Skip",
  Submit: "Submit",
  Submitting: "Submitting",
  "Text Message (SMS)": "Text Message (SMS)",
  Username: "Username",
  "Verify Contact": "Verify Contact",
  Verify: "Verify",
  "We Emailed You": "We Emailed You",
  "We Sent A Code": "We Sent A Code",
  "We Texted You": "We Texted You",
  "Your code is on the way. To log in, enter the code we emailed to": "Your code is on the way. To log in, enter the code we emailed to",
  "Your code is on the way. To log in, enter the code we sent you": "Your code is on the way. To log in, enter the code we sent you",
  "Your code is on the way. To log in, enter the code we texted to": "Your code is on the way. To log in, enter the code we texted to"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/es.mjs
var esDict = {
  "Account recovery requires verified contact information": "La recuperación de la cuenta requiere información de contacto verificada",
  "Authenticator App (TOTP)": "Aplicación de autenticación (TOTP)",
  "Back to Sign In": "Volver a inicio de sesión",
  "Change Password": "Cambiar contraseña",
  Changing: "Cambiando",
  Code: "Código",
  "Code *": "Código *",
  "Confirm Email Code": "Confirmar el código de correo electrónico",
  "Confirm Password": "Confirmar contraseña",
  "Confirm Sign Up": "Confirmar registro",
  "Confirm SMS Code": "Confirmar el código de SMS",
  "Confirm TOTP Code": "Confirmar código TOTP",
  Confirm: "Confirmar",
  "Confirmation Code": "Código de confirmación",
  Confirming: "Confirmando",
  "Create a new account": "Crear una cuenta nueva",
  "Create Account": "Crear cuenta",
  "Creating Account": "Creando cuenta",
  "Dismiss alert": "Descartar alerta",
  Email: "Email",
  "Email Message": "Mensaje de correo electrónico",
  "Enter your code": "Ingrese el código",
  "Enter your Email": "Escriba su Email",
  "Enter your email": "Escriba su email",
  "Enter your Password": "Escriba su Contraseña",
  "Enter your phone number": "Ingrese el número de teléfono",
  "Enter your username": "Ingrese el nombre de usuario",
  "Forgot your password?": "¿Olvidó su contraseña?",
  "Hide password": "Ocultar contraseña",
  "It may take a minute to arrive": "Es posible que tarde un minuto en llegar",
  Loading: "Cargando",
  "Multi-Factor Authentication": "Autenticación multifactor",
  "Multi-Factor Authentication Setup": "Configuración de autenticación multifactor",
  "New password": "Nueva contraseña",
  or: "o",
  Password: "Contraseña",
  "Phone Number": "Número de teléfono",
  "Resend Code": "Reenviar código",
  "Reset your password": "Restablecer su contraseña",
  "Reset your Password": "Restablecer su Contraseña",
  "Select MFA Type": "Seleccionar el tipo de MFA",
  "Send code": "Enviar código",
  "Send Code": "Enviar código",
  Sending: "Enviando",
  "Setup Email": "Configurar correo electrónico",
  "Setup TOTP": "Configurar TOTP",
  "Show password": "Mostrar contraseña",
  "Sign in to your account": "Iniciar sesión en tu cuenta",
  "Sign In with Amazon": "Iniciar Sesión con Amazon",
  "Sign In with Apple": "Iniciar Sesión con Apple",
  "Sign In with Facebook": "Iniciar Sesión con Facebook",
  "Sign In with Google": "Iniciar Sesión con Google",
  "Sign in": "Iniciar sesión",
  "Sign In": "Iniciar Sesión",
  "Signing in": "Iniciando sesión",
  Skip: "Omitir",
  Submit: "Enviar",
  Submitting: "Enviando",
  "Text Message (SMS)": "Mensaje de texto (SMS)",
  Username: "Nombre de usuario",
  "Verify Contact": "Verificar contacto",
  Verify: "Verificar",
  "We Emailed You": "Le hemos enviado un correo electrónico",
  "We Sent A Code": "Hemos enviado un código",
  "We Texted You": "Le hemos enviado un mensaje de texto",
  "Your code is on the way. To log in, enter the code we emailed to": "El código está en camino. Para iniciar sesión, escriba el código que hemos enviado por correo electrónico a",
  "Your code is on the way. To log in, enter the code we sent you": "El código está en camino. Para iniciar sesión, escriba el código que le hemos enviado",
  "Your code is on the way. To log in, enter the code we texted to": "El código está en camino. Para iniciar sesión, escriba el código que hemos enviado por mensaje de texto a",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Ya existe una cuenta con el correo ingresado.",
  "Confirm a Code": "Confirmar un código",
  "Confirm Sign In": "Confirmar inicio de sesión",
  "Forgot Password": "Olvidé mi contraseña",
  "Incorrect username or password.": "Nombre de usuario o contraseña incorrecta",
  "Enter your Family Name": "Escriba su apellido",
  "Enter your Given Name": "Escriba su nombre",
  "Given Name": "Nombre",
  "Family Name": "Apellido",
  "Reset Password": "Restablecer contraseña",
  "Please confirm your Password": "Confirme su contraseña",
  "Invalid password format": "Formato de contraseña inválido",
  "Invalid phone number format": "Formato de número de teléfono inválido",
  "Loading...": "Cargando...",
  "New Password": "Nueva contraseña",
  "Resend a Code": "Reenviar un código",
  "Sign Out": "Cerrar sesión",
  "Sign Up with Amazon": "Crear cuenta con Amazon",
  "Sign Up with Apple": "Crear cuenta con Apple",
  "Sign Up with Facebook": "Crear cuenta con Facebook",
  "Sign Up with Google": "Crear cuenta con Google",
  "Sign Up": "Crear cuenta",
  "User already exists": "El usuario ya existe",
  "User does not exist": "El usuario no existe",
  "Username/client id combination not found.": "El usuario no existe",
  "Username cannot be empty": "El nombre de usuario no puede estar vacío",
  "Your passwords must match": "Las contraseñas deben coincidir",
  "Password must have at least 8 characters": "La contraseña debe tener al menos 8 caracteres",
  "Password did not conform with policy: Password must have uppercase characters": "La contraseña debe tener al menos un carácter en mayúscula",
  "Password did not conform with policy: Password must have numeric characters": "La contraseña debe tener al menos un carácter numérico",
  "Password did not conform with policy: Password must have symbol characters": "La contraseña debe tener al menos un símbolo",
  "Password did not conform with policy: Password must have lowercase characters": "La contraseña debe tener al menos un carácter en minúsculas",
  "Invalid verification code provided, please try again.": "Código de verificación no válido, inténtelo de nuevo.",
  "Attempt limit exceeded, please try after some time.": "Número máximo de intentos excedido, por favor inténtelo de nuevo más tarde.",
  "A network error has occurred.": "Se ha producido un error de red."
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/fr.mjs
var frDict = {
  "Account recovery requires verified contact information": "La récupération du compte nécessite des informations de contact vérifiées",
  "Authenticator App (TOTP)": "Application d’authentification (TOTP)",
  "Back to Sign In": "Retour à la connexion",
  "Change Password": "Modifier le mot de passe",
  Changing: "Modification en cours",
  Code: "Code",
  "Confirm Email Code": "Confirmer le code e-mail",
  "Confirm Password": "Confirmez le mot de passe",
  "Confirm Sign Up": "Confirmer l'inscription",
  "Confirm SMS Code": "Confirmer le code SMS",
  "Confirm TOTP Code": "Confirmer le code TOTP",
  Confirm: "Confirmer",
  "Confirmation Code": "Code de confirmation",
  Confirming: "Confirmation",
  "Create a new account": "Créer un nouveau compte",
  "Create Account": "Créer un compte",
  "Creating Account": `Création d'un compte`,
  "Dismiss alert": `Supprimer l'alerte`,
  Email: "Email",
  "Email Message": "Message de l’e-mail",
  "Enter your code": "Saisissez cotre code de confirmation",
  "Enter your Email": "Saisissez votre adresse e-mail",
  "Enter your email": "Saisissez votre adresse e-mail",
  "Enter your phone number": "Saisissez votre numéro de téléphone",
  "Enter your username": "Saisissez votre nom d'utilisateur",
  "Forgot your password?": "Mot de passe oublié ? ",
  "Hide password": "Masquer le mot de passe",
  "It may take a minute to arrive": "Cela peut prendre une minute",
  Loading: "Chargement en cours",
  "Multi-Factor Authentication": "Authentification multifactorielle",
  "Multi-Factor Authentication Setup": "Configuration de l’authentification multifactorielle",
  "New password": "Nouveau mot de passe",
  or: "ou",
  Password: "Mot de passe",
  "Phone Number": "Numéro de téléphone",
  "Resend Code": "Renvoyer le code",
  "Reset your Password": "Réinitialiser votre mot de passe",
  "Reset your password": "Réinitialisez votre mot de passe",
  "Select MFA Type": "Sélectionner le type de MFA",
  "Send code": "Envoyer le code",
  "Send Code": "M'envoyer un code",
  Sending: "Envoi en cours",
  "Setup Email": "E-mail de configuration",
  "Setup TOTP": "Configuration de TOTP",
  "Show password": "Afficher le mot de passe",
  "Sign in to your account": "Connexion à votre compte",
  "Sign In with Amazon": "Se connecter avec Amazon",
  "Sign In with Apple": "Se connecter avec Apple",
  "Sign In with Facebook": "Se connecter avec Facebook",
  "Sign In with Google": "Se connecter avec Google",
  "Sign in": "Se connecter",
  "Sign In": "Se connecter",
  "Signing in": "Connexion en cours",
  Skip: "Passer",
  Submit: "Soumettre",
  Submitting: "Envoi en cours",
  "Text Message (SMS)": "Message texte (SMS)",
  Username: "Nom d'utilisateur",
  "Verify Contact": "Vérifier le contact",
  Verify: "Vérifier",
  "We Sent A Code": "Nous avons envoyé un code",
  "We Texted You": "Nous vous avons envoyé un SMS",
  "Your code is on the way. To log in, enter the code we sent you": `Votre code est en cours d'envoi. Pour vous connecter, saisissez le code que nous vous avons envoyé`,
  // Additional translations provided by customers
  "Add your Profile": "Ajoutez votre profil",
  "Add your Website": "Ajoutez votre site web",
  "An account with the given email already exists.": "Un utilisateur avec cette adresse email existe déjà.",
  Birthdate: "Date de naissance",
  Change: "Modifier",
  "Confirm a Code": "Confirmer un code",
  "Confirm Sign In": "Confirmer la connexion",
  "Create account": "Créer un compte",
  "Enter your Birthdate": "Saisissez votre date de naissance",
  "Enter your Confirmation Code": "Saisissez votre code de confirmation",
  "Enter your Family Name": "Saisissez votre nom de famille",
  "Enter your Given Name": "Saisissez votre prénom",
  "Enter your Middle Name": "Saisissez votre deuxième prénom",
  "Enter your Name": "Saisissez votre nom",
  "Enter your Nickname": "Saisissez votre surnom",
  "Enter your Password": "Saisissez votre mot de passe",
  "Enter your Phone Number": "Saisissez votre numéro de téléphone",
  "Enter your Preferred Username": "Saisissez votre nom d'utilisateur",
  "Enter your password": "Saisissez votre mot de passe",
  "Given Name": "Prénom",
  "Family Name": "Nom de famille",
  "Forgot Password": "Mot de passe oublié",
  "Forgot Password?": "Mot de passe oublié ?",
  "Incorrect username or password.": "Identifiant ou mot de passe incorrect.",
  "Have an account? ": "Déjà un compte ? ",
  Hello: "Bonjour",
  "Incorrect username or password": "Identifiant ou mot de passe incorrect",
  "Invalid password format": "Format de mot de passe invalide",
  "Invalid phone number format": `Format de numéro de téléphone invalide. Veuillez utiliser un format +12345678900`,
  "Loading...": "Chargement...",
  "Lost your code? ": "Vous avez perdu votre code ? ",
  "Network error": "Erreur réseau",
  "New Password": "Nouveau mot de passe",
  Name: "Nom",
  "No account? ": "Pas de compte ? ",
  "Please confirm your Password": "Confirmez votre mot de passe",
  "Preferred Username": "Nom d'utilisateur préféré",
  Profile: "Profil",
  "Resend a Code": "Renvoyer un code",
  "Reset password": "Réinitialiser le mot de passe",
  "Reset Password": "Réinitialiser le mot de passe",
  Send: "Envoyer",
  "Sign In with AWS": "Se connecter avec AWS",
  "Sign Out": "Déconnexion",
  "Sign Up": "S'inscrire",
  SMS: "SMS",
  "User already exists": "L'utilisateur existe déjà",
  "User does not exist": "L'utilisateur n'existe pas",
  "Username cannot be empty": "Le nom d'utilisateur doit être renseigné",
  "Username/client id combination not found.": "L'utilisateur n'existe pas",
  "We Emailed You": "Nous vous avons envoyé un code",
  "Your code is on the way. To log in, enter the code we emailed to": "Votre code est en route. Pour vous connecter entrez le code reçu sur cette adresse email",
  "Your code is on the way. To log in, enter the code we texted to": "Votre code est en route. Pour vous connecter entrez le code reçu sur ce numéro de téléphone",
  "Your passwords must match": "Vos mots de passe doivent être identiques",
  "It may take a minute to arrive.": "Cela peut prendre quelques minutes.",
  Website: "Site web",
  "Password must have at least 8 characters": "Le mot de passe doit comporter au moins 8 caractères",
  "Password did not conform with policy: Password must have uppercase characters": "Le mot de passe doit comporter des caractères majuscules",
  "Password did not conform with policy: Password must have numeric characters": "Le mot de passe doit comporter des caractères numériques",
  "Password did not conform with policy: Password must have symbol characters": "Le mot de passe doit comporter des symboles",
  "Password did not conform with policy: Password must have lowercase characters": "Le mot de passe doit comporter des caractères minuscules",
  "Invalid verification code provided, please try again.": "Code de vérification invalide, veuillez réessayer.",
  "Attempt limit exceeded, please try after some time.": "Nombre maximum de tentatives dépassé, veuillez réessayer plus tard.",
  "A network error has occurred.": "Une erreur de réseau s'est produite."
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/it.mjs
var itDict = {
  "Account recovery requires verified contact information": "Il ripristino dell'account richiede informazioni di contatto verificate",
  "Authenticator App (TOTP)": "App di autenticazione (TOTP)",
  "Back to Sign In": "Torna alla schermata di accesso",
  "Change Password": "Cambia la password",
  Changing: "Modifica in corso",
  Code: "Codice",
  "Confirm Email Code": "Conferma codice e-mail",
  "Confirm Password": "Conferma la password",
  "Confirm Sign Up": "Conferma registrazione",
  "Confirm SMS Code": "Conferma codice SMS",
  "Confirm TOTP Code": "Conferma codice TOTP",
  Confirm: "Conferma",
  "Confirmation Code": "Codice di verifica",
  Confirming: "Conferma in corso",
  "Create a new account": "Crea un nuovo account",
  "Create Account": "Crea Account",
  "Creating Account": "Creazione account in corso",
  "Dismiss alert": `Ignora l'avviso`,
  Email: "Email",
  "Email Message": "Messaggio e-mail",
  "Enter your code": "Inserisci il tuo codice",
  "Enter your Email": "Inserisci la tua e-mail",
  "Enter your phone number": 'Inserisci il tuo numero di telefono"',
  "Enter your username": "Inserisci il tuo nome utente",
  "Forgot your password?": "Password dimenticata?",
  "Hide password": "Nascondi password",
  "It may take a minute to arrive": "L'arrivo potrebbe richiedere qualche minuto",
  Loading: "Caricamento in corso",
  "Multi-Factor Authentication": "Autenticazione a più fattori",
  "Multi-Factor Authentication Setup": "Configurazione dell'autenticazione a più fattori",
  "New password": "Nuova password",
  or: "oppure",
  Password: "Password",
  "Phone Number": "Numero di telefono",
  "Resend Code": "Invia nuovamente il codice",
  "Reset your Password": "Reimposta la tua Password",
  "Reset your password": "Reimposta la tua password",
  "Select MFA Type": "Seleziona il tipo di MFA",
  "Send code": "Invia codice",
  "Send Code": "Invia codice",
  Sending: "Invio in corso",
  "Setup Email": "Configura l'e-mail",
  "Setup TOTP": "Configura TOTP",
  "Show password": "Mostra password",
  "Sign in to your account": "Accedi al tuo account",
  "Sign In with Amazon": "Accedi con Amazon",
  "Sign In with Apple": "Accedi con Apple",
  "Sign In with Facebook": "Accedi con Facebook",
  "Sign In with Google": "Accedi con Google",
  "Sign in": "Accedi",
  "Sign In": "Accedi",
  "Signing in": "Accesso in corso",
  Skip: "Salta",
  Submit: "Invia",
  Submitting: "Invio in corso",
  "Text Message (SMS)": "Messaggio di testo (SMS)",
  Username: "Nome utente",
  "Verify Contact": "Verifica contatto",
  Verify: "Verifica",
  "We Emailed You": "Ti abbiamo inviato un'e-mail",
  "We Sent A Code": "Ti abbiamo inviato un codice",
  "We Texted You": "Ti abbiamo inviato un SMS",
  "Your code is on the way. To log in, enter the code we emailed to": "Il codice è in arrivo. Per effettuare l'accesso, immetti il codice che ti abbiamo inviato via e-mail",
  "Your code is on the way. To log in, enter the code we sent you": "Il codice è in arrivo. Per accedere, immetti il codice che ti abbiamo inviato",
  "Your code is on the way. To log in, enter the code we texted to": "Il codice è in arrivo. Per accedere, immetti il codice che abbiamo inviato tramite SMS",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Questa email è già utilizzata da un altro account.",
  "Confirm a Code": "Conferma un codice",
  "Confirm Sign In": "Conferma l'accesso",
  "Create account": "Crea account",
  "Enter your password": "Inserisci la tua password",
  "Forgot Password?": "Password dimenticata?",
  "Have an account? ": "Già registrato?",
  "Incorrect username or password": "Nome utente o password errati",
  "Invalid password format": "Formato della password non valido",
  "Invalid phone number format": "Formato del numero di telefono non valido",
  "Lost your code?": "Codice smarrito?",
  "New Password": "Nuova password",
  "No account? ": "Non hai un account?",
  "Password attempts exceeded": "Il numero massimo di tentativi di accesso falliti è stato raggiunto",
  "Reset password": "Reimposta password",
  "Sign Out": "Esci",
  "Sign Up": "Registrati",
  "User already exists": "Utente già esistente",
  "User does not exist": "Utente inesistente",
  "Username cannot be empty": "Il nome utente non può essere vuoto"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/ja.mjs
var jaDict = {
  "Account recovery requires verified contact information": "アカウントの復旧には確認済みの連絡先が必要です",
  "Authenticator App (TOTP)": "認証アプリ (TOTP)",
  "Back to Sign In": "サインインに戻る",
  "Change Password": "パスワードを変える ",
  Changing: "変更中",
  Code: "コード",
  "Confirm Email Code": "E メールコードを確認",
  "Confirm Password": "パスワードの確認",
  "Confirm Sign Up": "登録する",
  "Confirm SMS Code": "SMS コードを確認",
  "Confirm TOTP Code": "TOTP コードを確認",
  Confirm: "確定",
  "Confirmation Code": "確認コード",
  Confirming: "確認中",
  "Create a new account": "新しいアカウントを作る",
  "Create Account": "アカウントを作る",
  "Creating Account": "アカウントの作成中",
  "Dismiss alert": "アラートを閉じる",
  Email: "メールアドレス",
  "Email Message": "E メールメッセージ",
  "Enter your code": "コードを入力",
  "Enter your Email": "メールアドレスを入力",
  "Enter your phone number": "電話番号を入力",
  "Enter your username": "ユーザー名を入力 ",
  "Enter your Username": "ユーザー名を入力 ",
  "Forgot your password?": "パスワードを忘れましたか？ ",
  "Hide password": "パスワードを非表示",
  "It may take a minute to arrive": "到着するまでに 1 分かかることがあります",
  Loading: "ロード中",
  "Multi-Factor Authentication": "多要素認証",
  "Multi-Factor Authentication Setup": "多要素認証のセットアップ",
  "New password": "新しいパスワード",
  or: "又は",
  Password: "パスワード ",
  "Phone Number": "電話番号",
  "Resend Code": "コードを再送信",
  "Reset your Password": "パスワードをリセット",
  "Reset your password": "パスワードをリセットする",
  "Select MFA Type": "MFA タイプを選択",
  "Send code": "コードを送信",
  "Send Code": "コードを送信",
  Sending: "送信中",
  "Setup Email": "E メールをセットアップ",
  "Setup TOTP": "TOTP をセットアップ",
  "Show password": "パスワードを表示",
  "Sign in to your account": "アカウントにサインイン ",
  "Sign In with Amazon": "Amazonでサインイン",
  "Sign In with Apple": "Apple でサインイン",
  "Sign In with Facebook": "Facebookでサインイン",
  "Sign In with Google": "Googleでサインイン",
  "Sign In": "サインイン ",
  "Sign in": "サインイン",
  "Signing in": "サインイン中",
  Skip: "スキップ",
  Submit: "送信",
  Submitting: "送信中",
  "Text Message (SMS)": "テキストメッセージ (SMS)",
  Username: "ユーザー名 ",
  "Verify Contact": "連絡先を確認",
  Verify: "確認",
  "We Sent A Code": "コードが送信されました",
  "We Texted You": "テキストが送信されました",
  "Your code is on the way. To log in, enter the code we sent you": "コードが途中です。ログインするには、送信したコードを入力してください",
  // Additional translations provided by customers
  "An account with the given email already exists.": "入力されたメールアドレスのアカウントが既に存在します",
  "Confirm a Code": "コードを確認",
  "Confirm Sign In": "サインインする",
  "Create account": "アカウントを作る ",
  "Enter your password": "パスワードを入力 ",
  "Enter your Password": "パスワードを入力",
  "Please confirm your Password": "パスワードを入力",
  "Forgot Password": "パスワードを忘れた ",
  "Have an account? ": "アカウントを持っていますか？",
  "Incorrect username or password": "ユーザー名かパスワードが異なります ",
  "Invalid password format": "パスワードの形式が無効です ",
  "Invalid phone number format": "不正な電話番号の形式です。\n+12345678900 の形式で入力してください",
  "It may take a minute to arrive.": "コードを受信するまで数分かかる場合があります。",
  "Lost your code? ": "コードを失くしましたか？",
  "New Password": "新しいパスワード",
  "No account? ": "アカウントが無いとき ",
  "Password attempts exceeded": "サインインの試行回数が上限に達しました",
  "Reset password": "パスワードをリセット ",
  "Reset Password": "パスワードをリセット",
  "Sign Out": "サインアウト ",
  "Sign Up": "登録 ",
  "User already exists": "既にユーザーが存在しています ",
  "User does not exist": "ユーザーが存在しません ",
  "Username cannot be empty": "ユーザー名は入力必須です",
  "We Emailed You": "コードを送信しました",
  "Your code is on the way. To log in, enter the code we emailed to": "ログインするには、メールに記載されたコードを入力してください。送信先:",
  "Your code is on the way. To log in, enter the code we texted to": "ログインするには、テキストメッセージに記載されたコードを入力してください。送信先:"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/kr.mjs
var krDict = {
  "Account recovery requires verified contact information": "계정 복구를 위해 연락처 확인이 필요합니다",
  "Authenticator App (TOTP)": "인증 앱(TOTP)",
  "Back to Sign In": "로그인으로 돌아가기",
  "Change Password": "비밀번호 변경하기",
  Changing: "변경중",
  Code: "코드",
  "Confirm Email Code": "이메일 코드 확인",
  "Confirm Password": "비밀번호 재확인",
  "Confirm Sign Up": "회원가입 확인",
  "Confirm SMS Code": "휴대폰 본인 확인",
  "Confirm TOTP Code": "TOTP 인증번호 확인",
  Confirm: "확인",
  "Confirmation Code": "인증번호",
  Confirming: "확인중",
  "Create a new account": "회원가입",
  "Create Account": "회원가입",
  "Creating Account": "회원가입중",
  "Dismiss alert": "알림 무시",
  Email: "이메일",
  "Email Message": "이메일 메시지",
  "Enter your Birthdate": "생년월일 입력",
  "Enter your code": "인증번호를 입력해주세요",
  "Enter your Confirmation Code": "확인 코드 입력",
  "Enter your Email": "이메일 입력",
  "Enter your Family Name": "성 입력",
  "Enter your Given Name": "사용장 이름 입력",
  "Enter your Name": "이름 입력",
  "Enter your Nickname": "닉네임 입력",
  "Enter your Password": "비밀번호 입력",
  "Enter your phone number": "전화번호 입력",
  "Enter your Preferred Username": "선호하는 아이디 입력",
  "Enter your username": "아이디를 입력해주세요",
  "Forgot password?": "비밀번호를 잊으셨나요?",
  "Hide password": "비밀번호 숨기기",
  "It may take a minute to arrive": "도착하는 데 1분 정도 걸릴 수 있습니다",
  Loading: "로딩중",
  "Multi-Factor Authentication": "다중 인증",
  "Multi-Factor Authentication Setup": "다중 인증 설정",
  "New password": "새 비밀번호",
  or: "또는",
  Password: "비밀번호",
  "Phone Number": "전화번호",
  "Please confirm your Password": "비밀번호를 확인해 주세요.",
  "Resend Code": "인증번호 재전송",
  "Reset your password": "비밀번호 재설정",
  "Reset your Password": "비밀번호 재설정",
  "Select MFA Type": "MFA 유형 선택",
  "Send code": "인증코드 보내기",
  "Send Code": "코드 전송",
  Sending: "전송중",
  "Setup Email": "이메일 설정",
  "Setup TOTP": "TOTP 설정하기",
  "Show password": "비밀번호 보이기",
  "Sign in to your account": "로그인",
  "Sign In with Amazon": "Amazon 로그인",
  "Sign In with Apple": "Apple 로그인",
  "Sign In with Facebook": "Facebook 로그인",
  "Sign In with Google": "Google 로그인",
  "Sign in": "로그인",
  "Sign In": "로그인",
  "Signing in": "로그인중",
  Skip: "다음에 하기",
  Submit: "확인",
  Submitting: "확인중",
  "Text Message (SMS)": "문자 메시지(SMS)",
  Username: "아이디",
  "Verify Contact": "연락처 확인",
  Verify: "인증",
  "We Emailed You": "이메일을 보냄",
  "We Sent A Code": "코드를 보냄",
  "We Texted You": "문자 메시지를 보냄",
  "Your code is on the way. To log in, enter the code we emailed to": "코드가 전송 중입니다. 로그인하려면 이메일로 전송한 코드를 입력하세요",
  "Your code is on the way. To log in, enter the code we sent you": "코드가 전송 중입니다. 로그인하려면 전송한 코드를 입력하세요",
  "Your code is on the way. To log in, enter the code we texted to": "코드가 전송 중입니다. 로그인하려면 문자 메시지로 전송한 코드를 입력하세요",
  // Additional translations provided by customers
  Birthdate: "생년월일",
  "Family Name": "성",
  "Forgot your password?": "비밀번호를 잊으셨나요?",
  "Given Name": "이름",
  Name: "성함",
  Nickname: "닉네임",
  "Preferred Username": "닉네임",
  Profile: "프로필",
  "Reset Password": "비밀번호 재설정",
  Website: "웹사이트"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/nb.mjs
var nbDict = {
  "Account recovery requires verified contact information": "Gjenoppretting av konto krever verifisert kontaktinformajson",
  "Add your Profile": "Legg til profilen din",
  "Add your Website": "Legg til nettsiden din",
  "Authenticator App (TOTP)": "Autentiseringsapp (TOTP)",
  "Back to Sign In": "Tilbake til innlogging",
  "Change Password": "Bytt passord",
  Changing: "Endre",
  Code: "Kode",
  "Confirm Email Code": "Bekreft e-postkode",
  "Confirm Password": "Bekreft passordet",
  "Confirm Sign Up": "Bekreft registrering",
  "Confirm SMS Code": "Bekreft SMS-kode",
  "Confirm TOTP Code": "Bekreft TOTP-kode",
  Confirm: "Bekreft",
  "Confirmation Code": "Bekreftelseskode",
  Confirming: "Bekrefter",
  "Create a new account": "Opprett en ny konto",
  "Create Account": "Opprett konto",
  "Creating Account": "Oppretter konto",
  "Dismiss alert": "Avvis varsel",
  Email: "E-post",
  "Email Message": "E-postmelding",
  "Enter your Birthdate": "Skriv inn fødselsdatoen din",
  "Enter your code": "Skriv inn koden din",
  "Enter your Confirmation Code": "Skriv inn bekreftelseskoden din",
  "Enter your Email": "Skriv inn e-postadressen din",
  "Enter your Family Name": "Skriv inn etternavnet ditt",
  "Enter your Given Name": "Skriv inn fornavnet ditt",
  "Enter your Middle Name": "Skriv inn mellomnavnet ditt",
  "Enter your Name": "Skriv inn navnet ditt",
  "Enter your Nickname": "Skriv inn kallenavnet ditt",
  "Enter your Password": "Skriv inn passordet ditt",
  "Enter your phone number": "Skriv inn telefonnummeret ditt",
  "Enter your Preferred Username": "Skriv inn det foretrukne brukernavnet ditt",
  "Enter your username": "Skriv inn brukernavnet ditt",
  "Forgot password?": "Glemt passord?",
  "Forgot your password?": "Glemt passordet ditt?",
  "Hide password": "Skjul passordet",
  "It may take a minute to arrive": "Det kan ta et minutt for å komme frem",
  Loading: "Laster inn",
  "Multi-Factor Authentication": "Flerfaktorautentisering",
  "Multi-Factor Authentication Setup": "Oppsett av flerfaktorautentisering",
  "New password": "Nytt passord",
  or: "eller",
  Password: "Passord",
  "Phone Number": "Telefonnummer",
  "Please confirm your Password": "Vennligst bekreft passordet ditt",
  "Resend Code": "Send koden på nytt",
  "Reset your password": "Nullstill passordet ditt",
  "Reset your Password": "Nullstill passordet ditt",
  "Select MFA Type": "Velg MFA-type",
  "Send code": "Send kode",
  "Send Code": "Send kode",
  Sending: "Sender",
  "Setup Email": "Konfigurer e-post",
  "Setup TOTP": "Konfigurer TOTP",
  "Show password": "Vis passordet",
  "Sign in to your account": "Logg inn på kontoen din",
  "Sign In with Amazon": "Logg inn med Amazon",
  "Sign In with Apple": "Logg inn med Apple",
  "Sign In with Facebook": "Logg inn med Facebook",
  "Sign In with Google": "Logg inn med Google",
  "Sign in": "Logg inn",
  "Sign In": "Logg inn",
  "Signing in": "Logger inn",
  Skip: "Hopp over",
  Submit: "Send inn",
  Submitting: "Sender inn",
  "Text Message (SMS)": "Tekstmelding (SMS)",
  Username: "Brukernavn",
  "Verify Contact": "Bekreft kontakt",
  Verify: "Bekreft",
  "We Emailed You": "Vi sendte deg en e-post",
  "We Sent A Code": "Vi sendte en kode",
  "We Texted You": "Vi sendte deg en tekstmelding",
  "Your code is on the way. To log in, enter the code we emailed to": "Koden din er på vei. For å logge inn, skriv inn koden vi sendte e-post til",
  "Your code is on the way. To log in, enter the code we sent you": "Koden din er på vei. For å logge inn, skriv inn koden vi sendte deg",
  "Your code is on the way. To log in, enter the code we texted to": "Koden din er på vei. For å logge inn, skriv inn koden vi sendte tekstmelding til",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Det finnes allerede en konto med denne e-postadressen",
  "Confirm a Code": "Bekreft koden",
  "Confirm Sign In": "Bekreft innlogging",
  "Create account": "Opprett konto",
  "Enter your password": "Skriv inn passordet ditt",
  "Forgot Password": "Glemt passordet",
  "Have an account? ": "Har en konto allerede? ",
  "Incorrect username or password": "Feil brukernavn eller passord",
  "Invalid password format": "Ugyldig passordformat",
  "Invalid phone number format": "Ugyldig telefonnummerformat",
  "Lost your code? ": "Mistet koden? ",
  "New Password": "Nytt passord",
  "No account? ": "Ingen konto? ",
  "Password attempts exceeded": "For mange mislykkede passordforsøk",
  "Reset password": "Nullstill passord",
  "Sign Out": "Logg ut",
  "Sign Up": "Registrering",
  "User already exists": "Brukeren finnes allerede",
  "User does not exist": "Brukeren finnes ikke",
  "Username cannot be empty": "Brukernavnet kan ikke være tomt"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/nl.mjs
var nlDict = {
  "Account recovery requires verified contact information": "Accountherstel vereist geverifieerde contactgegevens",
  "Authenticator App (TOTP)": "Authenticator-app (TOTP)",
  "Back to Sign In": "Terug naar inloggen",
  "Change Password": "Wachtwoord wijzigen",
  Changing: "Wordt aangepast",
  Code: "Code",
  "Confirm Email Code": "E-mailcode bevestigen",
  "Confirm Password": "Bevestig Wachtwoord",
  "Confirm Sign Up": "Bevestig inschrijving",
  "Confirm SMS Code": "Bevestig SMS Code",
  "Confirm TOTP Code": "Bevestig TOTP Code",
  Confirm: "Bevestig",
  "Confirmation Code": "Bevestigingscode",
  Confirming: "Bevestigen",
  "Create a new account": "Nieuw account aanmaken",
  "Create Account": "Account aanmaken",
  "Creating Account": "Account wordt aangemaakt",
  "Dismiss alert": "Waarschuwing sluiten",
  Email: "E-mail",
  "Email Message": "E-mailbericht",
  "Enter your code": "Vul je code in",
  "Enter your Email": "Vul je e-mail in",
  "Enter your Password": "Vul je wachtwoord in",
  "Enter your phone number": "Vul je telefoonnummer in",
  "Enter your username": "Vul je gebruikersnaam in",
  "Enter your Username": "Vul je gebruikersnaam in",
  "Forgot your password?": "Wachtwoord vergeten? ",
  "Hide password": "Verberg wachtwoord",
  "It may take a minute to arrive": "Het kan even duren voordat deze aankomt",
  Loading: "Laden",
  "Multi-Factor Authentication": "Multi-Factor Authentication",
  "Multi-Factor Authentication Setup": "Multi-Factor Authentication instellen",
  "New password": "Nieuw wachtwoord",
  "New Password": "Nieuw Wachtwoord",
  or: "of",
  Password: "Wachtwoord",
  "Phone Number": "Telefoonnummer",
  "Please confirm your Password": "Bevestig je wachtwoord",
  "Resend Code": "Verstuur code nogmaals",
  "Reset Password": "Wachtwoord resetten",
  "Reset your password": "Reset je wachtwoord",
  "Reset your Password": "Wachtwoord resetten",
  "Select MFA Type": "MFA-type kiezen",
  "Send code": "Verstuur code",
  "Send Code": "Verstuur Code",
  Sending: "Versturen",
  "Setup Email": "E-mailadres instellen",
  "Setup TOTP": "TOTP Instellingen",
  "Show password": "Toon wachtwoord",
  "Sign in to your account": "Inloggen op je account",
  "Sign In with Amazon": "Inloggen met Amazon",
  "Sign In with Apple": "Inloggen met Apple",
  "Sign In with Facebook": "Inloggen met Facebook",
  "Sign In with Google": "Inloggen met Google",
  "Sign in": "Inloggen",
  "Sign In": "Inloggen",
  "Signing in": "Inloggen",
  Skip: "Overslaan",
  Submit: "Versturen",
  Submitting: "Wordt verstuurd",
  "Text Message (SMS)": "Tekstbericht (sms)",
  Username: "Gebruikersnaam",
  "Verify Contact": "Verifieer Contact",
  Verify: "Verifieer",
  "We Emailed You": "We hebben u een e-mail gestuurd",
  "We Sent A Code": "We hebben een code gestuurd",
  "We Texted You": "We hebben u een sms gestuurd",
  "Your code is on the way. To log in, enter the code we emailed to": "Uw code is onderweg. Om in te loggen, voer de code in die we gemaild hebben naar",
  "Your code is on the way. To log in, enter the code we sent you": "Uw code is onderweg. Om in te loggen, voer de code in die we u hebben gestuurd",
  "Your code is on the way. To log in, enter the code we texted to": "Uw code is onderweg. Om in te loggen, voer de code in die we hebben gestuurd naar",
  "Your passwords must match": "Je wachtwoorden moeten overeenkomen"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/pl.mjs
var plDict = {
  "Account recovery requires verified contact information": "Odzyskanie konta wymaga zweryfikowanych danych kontaktowych",
  "Authenticator App (TOTP)": "Aplikacja uwierzytelniania (TOTP)",
  "Back to Sign In": "Powrót do logowania",
  "Change Password": "Zmień hasło",
  Changing: "Zmienianie",
  Code: "Kod",
  "Confirm Email Code": "Potwierdź kod e-mail",
  "Confirm Password": "Potwierdź Hasło",
  "Confirm Sign Up": "Potwierdź rejestrację",
  "Confirm SMS Code": "Potwierdź kod SMS",
  "Confirm TOTP Code": "Potwierdź hasło jednorazowe",
  Confirm: "Potwierdź",
  "Confirmation Code": "Kod potwierdzenia",
  Confirming: "Potwierdzanie",
  "Create a new account": "Utwórz nowe konto",
  "Create Account": "Utwórz konto",
  "Creating Account": "Tworzenie konta",
  "Dismiss alert": "Odrzuć alert",
  Email: "E-mail",
  "Email Message": "Wiadomość e-mail",
  "Enter your code": "Wprowadź swój kod",
  "Enter your Email": "Wpisz swój adres e-mail",
  "Enter your phone number": "Wpisz swój numer telefonu",
  "Enter your username": "Wprowadź swoją nazwę użytkownika",
  "Forgot your password?": "Zapomniałeś hasła? ",
  "Hide password": "Ukryj hasło",
  "It may take a minute to arrive": "Może to chwilę potrwać",
  Loading: "Ładowanie",
  "Multi-Factor Authentication": "Uwierzytelnianie wieloskładnikowe",
  "Multi-Factor Authentication Setup": "Konfigurowanie uwierzytelniania wieloskładnikowego",
  "New password": "Nowe hasło",
  or: "albo",
  Password: "Hasło",
  "Phone Number": "Numer telefonu",
  "Resend Code": "Wyślij kod ponownie",
  "Reset your password": "Zresetuj swoje hasło",
  "Reset your Password": "Zresetuj swoje hasło",
  "Select MFA Type": "Wybierz typ MFA",
  "Send code": "Wyślij kod",
  "Send Code": "Zresetuj hasło",
  Sending: "Wysyłanie",
  "Setup Email": "Konfiguracja poczty e-mail",
  "Setup TOTP": "Konfiguruj TOTP",
  "Show password": "Pokaż hasło",
  "Sign in to your account": "Zaloguj się na swoje konto",
  "Sign In with Amazon": "Zaloguj z Amazon",
  "Sign In with Apple": "Zaloguj z Apple",
  "Sign In with Facebook": "Zaloguj z Facebook",
  "Sign In with Google": "Zaloguj z Google",
  "Sign In": "Logowanie",
  "Sign in": "Zaloguj",
  "Signing in": "Logowanie",
  Skip: "Pomiń",
  Submit: "Wyślij",
  Submitting: "Wysyłanie",
  "Text Message (SMS)": "Wiadomość tekstowa (SMS)",
  Username: "Nazwa użytkownika",
  "Verify Contact": "Weryfikacja danych kontaktowych",
  Verify: "Zweryfikuj",
  // Additional translations provided by customers
  Birthdate: "Data urodzenia",
  "Family Name": "Nazwisko",
  "Given Name": "Pierwsze imię",
  "Middle Name": "Drugie imię",
  Name: "Imię i nazwisko",
  Nickname: "Pseudonim",
  "Preferred Username": "Preferowana nazwa użytkownika",
  Profile: "Profil",
  Website: "Strona internetowa",
  "We Emailed You": "Wysłaliśmy Ci wiadomość e-mail",
  "We Sent A Code": "Wysłaliśmy kod",
  "We Texted You": "Wysłaliśmy Ci wiadomość SMS",
  "Your code is on the way. To log in, enter the code we emailed to": "Twój kod został wysłany. Aby się zalogować, wprowadź kod wysłany na adres e-mail",
  "Your code is on the way. To log in, enter the code we sent you": "Twój kod został wysłany. Aby się zalogować, wprowadź wysłany do Ciebie kod",
  "Your code is on the way. To log in, enter the code we texted to": "Twój kod został wysłany. Aby się zalogować, wprowadź kod wysłany do Ciebie w wiadomości SMS pod numer"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/pt.mjs
var ptDict = {
  "Account recovery requires verified contact information": "A recuperação da conta requer informações de contato verificadas",
  "Authenticator App (TOTP)": "Aplicativo autenticador (TOTP)",
  "Add your Profile": "Adicione seu Perfil",
  "Add your Website": "Adicione seu Website",
  "Back to Sign In": "Voltar para Entrar",
  "Change Password": "Mudar senha",
  Changing: "Mudando",
  Code: "Código",
  "Confirm Email Code": "Confirmar código de e-mail",
  "Confirm Password": "Confirme a Senha",
  "Confirm Sign Up": "Confirmar inscrição",
  "Confirm SMS Code": "Confirme o código SMS",
  "Confirm MFA Code": "Confirme o código MFA",
  "Confirm TOTP Code": "Confirme o código TOTP",
  Confirm: "confirme",
  "Confirmation Code": "Código de confirmação",
  Confirming: "Confirmando",
  "Create a new account": "Criar uma nova conta",
  "Create Account": "Criar Conta",
  "Creating Account": "Criando conta",
  "Dismiss alert": "Descartar alerta",
  Email: "O email",
  "Email Message": "Mensagem de e-mail",
  "Enter your Birthdate": "Digite sua Data de Nascimento",
  "Enter your code": "Insira seu código",
  "Enter your Confirmation Code": "Digite seu código de confirmação",
  "Enter your Email": "Digite seu e-mail",
  "Enter your Family Name": "Digite seu Sobrenome",
  "Enter your Given Name": "Digite seu Primeiro Nome",
  "Enter your Middle Name": "Digite seu Nome do Meio",
  "Enter your Name": "Digite seu Nome",
  "Enter your Nickname": "Digite seu Apelido",
  "Enter your Password": "Digite sua senha",
  "Enter your phone number": "Digite seu número de telefone",
  "Enter your Preferred Username": "Digite seu nome de usuário preferido",
  "Enter your username": "Digite seu nome de usuário",
  "Forgot password?": "Esqueceu a senha?",
  "Forgot your password?": "Esqueceu sua senha?",
  "Hide password": "Esconder a senha",
  "It may take a minute to arrive": "Pode levar um minuto para chegar",
  Loading: "Carregando",
  "Multi-Factor Authentication": "Autenticação multifator",
  "Multi-Factor Authentication Setup": "Configuração da autenticação multifator",
  "New password": "Nova Senha",
  or: "ou",
  Password: "Senha",
  "Phone Number": "Número de telefone",
  "Please confirm your Password": "Por favor confirme sua Senha",
  "Resend Code": "Reenviar código",
  "Reset your password": "Redefina sua senha",
  "Reset your Password": "Redefina sua senha",
  "Select MFA Type": "Selecionar tipo de MFA",
  "Send code": "Enviar código",
  "Send Code": "Enviar código",
  Sending: "Enviando",
  "Setup Email": "Configurar e-mail",
  "Setup TOTP": "Configurar TOTP",
  "Show password": "Mostrar senha",
  "Sign in to your account": "Faça login em sua conta",
  "Sign In with Amazon": "Entrar com a Amazon",
  "Sign In with Apple": "Entrar com a Apple",
  "Sign In with Facebook": "Entrar com o Facebook",
  "Sign In with Google": "Faça login no Google",
  "Sign in": "Entrar",
  "Sign In": "Entrar",
  "Signing in": "Entrando",
  Skip: "Pular",
  Submit: "Enviar",
  Submitting: "Enviando",
  "Text Message (SMS)": "Mensagem de texto (SMS)",
  Username: "Nome do usuário",
  "Verify Contact": "Verificar contato",
  Verify: "Verificar",
  "We Emailed You": "Enviamos um e-mail para você",
  "We Sent A Code": "Enviamos um código",
  "We Texted You": "Enviamos um SMS para você",
  "Your code is on the way. To log in, enter the code we emailed to": "Seu código está a caminho. Para fazer login, insira o código para o qual enviamos um e-mail",
  "Your code is on the way. To log in, enter the code we sent you": "Seu código está a caminho. Para fazer login, insira o código que enviamos para você",
  "Your code is on the way. To log in, enter the code we texted to": "Seu código está a caminho. Para fazer login, insira o código para o qual enviamos uma mensagem de texto",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Já existe uma conta com o email utilizado.",
  "Confirm a Code": "Confirmar um Código",
  "Confirm Sign In": "Confirmar Início de Sessão",
  "Forgot Password": "Esqueci Minha Senha",
  "Incorrect username or password.": "Nome de usuário ou senha incorreta",
  "Invalid password format": "Formato de senha inválido",
  "Invalid phone number format": "Formato de número de telefone inválido",
  "Loading...": "Carregando...",
  "New Password": "Nova Senha",
  "Resend a Code": "Reenviar um Código",
  "Sign Out": "Sair",
  "Sign Up with Amazon": "Criar Conta com a Amazon",
  "Sign Up with Apple": "Criar Conta com a Apple",
  "Sign Up with Facebook": "Criar Conta com o Facebook",
  "Sign Up with Google": "Criar Conta com o Google",
  "Sign Up": "Criar Conta",
  "User already exists": "Usuário já existe",
  "User does not exist": "Usuário não existe",
  "Username cannot be empty": "Nome de usuário não pode estar vazio",
  "Your passwords must match": "Suas senhas devem ser iguais"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/zh.mjs
var zhDict = {
  "Account recovery requires verified contact information": "账户恢复需要验证过的联系方式",
  "Authenticator App (TOTP)": "Authenticator 应用程序（TOTP）",
  "Back to Sign In": "回到登录",
  "Change Password": "更改密码",
  Changing: "正在修改",
  Code: "确认码",
  "Confirm Email Code": "确认电子邮件代码",
  "Confirm Password": "确认密码",
  "Confirm Sign Up": "确认注册",
  "Confirm SMS Code": "确认短信验证码",
  "Confirm TOTP Code": "确认 TOTP 代码",
  Confirm: "确认",
  "Confirmation Code": "确认码",
  Confirming: "正在确认",
  "Create a new account": "创建新账户",
  "Create Account": "创建账户",
  "Creating Account": "正在创建账户",
  "Dismiss alert": "关闭警报",
  Email: "邮箱",
  "Email Message": "电子邮件消息",
  "Enter your code": "输入验证码",
  "Enter your Email": "输入电子邮件",
  "Enter your Password": "输入密码",
  "Enter your phone number": "输入电话号码",
  "Enter your username": "输入用户名",
  "Forgot your password?": "忘记密码了？",
  "Hide password": "隐藏密码",
  "It may take a minute to arrive": "可能需要一分钟才能到达",
  Loading: "正在加载",
  "Multi-Factor Authentication": "多重身份验证",
  "Multi-Factor Authentication Setup": "多重身份验证设置",
  "New password": "新密码",
  or: "或者",
  Password: "密码",
  "Phone Number": "电话",
  "Please confirm your Password": "请再次输入密码",
  "Resend Code": "重发验证码",
  "Reset your password": "重置密码",
  "Reset your Password": "重置密码",
  "Select MFA Type": "选择 MFA 类型",
  "Send Code": "发送确认码",
  "Send code": "发送验证码",
  Sending: "正在发送",
  "Setup Email": "设置电子邮件",
  "Setup TOTP": "设置 TOTP",
  "Show password": "显示密码",
  "Sign in to your account": "登录账户",
  "Sign In with Amazon": "通过 Amazon 登录",
  "Sign In with Apple": "通过 Apple 登录",
  "Sign In with Facebook": "通过 Facebook 登录",
  "Sign In with Google": "通过 Google 登录",
  "Sign in": "登录",
  "Sign In": "登录",
  "Signing in": "正在登录",
  Skip: "跳过",
  Submit: "提交",
  Submitting: "正在提交",
  "Text Message (SMS)": "短信（SMS）",
  Username: "用户名",
  "Verify Contact": "验证联系方式",
  Verify: "验证",
  "We Emailed You": "我们给您发送了电子邮件",
  "We Sent A Code": "我们发送了代码",
  "We Texted You": "我们给您发送了短信",
  "Your code is on the way. To log in, enter the code we emailed to": "您的代码正在发送中。要登录，请输入我们通过电子邮件发送给以下人员的代码：",
  "Your code is on the way. To log in, enter the code we sent you": "您的代码正在发送中。要登录，请输入我们发送给您的代码",
  "Your code is on the way. To log in, enter the code we texted to": "您的代码正在发送中。要登录，请输入我们通过短信发送给以下人员的代码：",
  // Additional translations provided by customers
  "Confirm a Code": "确认码",
  "Confirm Sign In": "确认登录",
  "Forgot Password": "忘记密码",
  "Incorrect username or password": "用户名或密码错误",
  "Invalid password format": "密码格式错误",
  "Invalid phone number format": "电话格式错误，请使用格式 +12345678900",
  "New Password": "新密码",
  "Resend a Code": "重发确认码",
  "Sign Out": "退出",
  "Sign Up": "注册",
  "User already exists": "用户已经存在",
  "User does not exist": "用户不存在"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/sv.mjs
var svDict = {
  "Account recovery requires verified contact information": "För att återställa kontot behöver du ett verifierat konto",
  "Authenticator App (TOTP)": "Autentiseringsapp (TOTP)",
  "Back to Sign In": "Tillbaka till inloggningen",
  "Change Password": "Byt lösenord",
  Changing: "Ändra",
  Code: "Kod",
  "Confirm Email Code": "Bekräfta e-postkod",
  "Confirm Password": "Bekräfta lösenord",
  "Confirm Sign Up": "Bekräfta registrering",
  "Confirm SMS Code": "Bekräfta SMS-kod",
  "Confirm TOTP Code": "Bekräfta TOTP-kod",
  Confirm: "Bekräfta",
  "Confirmation Code": "Verifikationskod",
  Confirming: "Bekräftar",
  "Create a new account": "Skapa ett nytt konto",
  "Create Account": "Skapa konto",
  "Creating Account": "Skapar konto",
  "Dismiss alert": "Avvisa varning",
  Email: "E-post",
  "Email Message": "E-postmeddelande",
  "Enter your code": "Skriv din kod",
  "Enter your Email": "Ange din e-post",
  "Enter your phone number": "Ange ditt telefonnummer",
  "Enter your username": "Ange ditt användarnamn",
  "Forgot your password?": "Glömt ditt lösenord? ",
  "Hide password": "Dölj lösenord",
  "It may take a minute to arrive": "Det kan ta en minut att komma fram",
  Loading: "Laddar",
  "Multi-Factor Authentication": "Multifaktorautentisering",
  "Multi-Factor Authentication Setup": "Konfigurering av multifaktorautentisering",
  "New password": "Nytt lösenord",
  or: "eller",
  Password: "Lösenord",
  "Phone Number": "Telefonnummer",
  "Resend Code": "Skicka koden igen",
  "Reset your password": "Återställ ditt lösenord",
  "Reset your Password": "Återställ ditt lösenord",
  "Select MFA Type": "Välj MFA-typ",
  "Send code": "Skicka kod",
  "Send Code": "Skicka kod",
  Sending: "Skickar",
  "Setup Email": "Konfigurera e-post",
  "Setup TOTP": "Konfigurera TOTP",
  "Show password": "Visa lösenord",
  "Sign in to your account": "Logga in till ditt konto",
  "Sign In with Amazon": "Logga in med Amazon",
  "Sign In with Apple": "Logga in med Apple",
  "Sign In with Facebook": "Logga in med Facebook",
  "Sign In with Google": "Logga in med Google",
  "Sign in": "Logga in",
  "Sign In": "Logga in",
  "Signing in": "Loggar in",
  Skip: "Hoppa över",
  Submit: "Skicka",
  Submitting: "Skickar in",
  "Text Message (SMS)": "Textmeddelande (SMS)",
  Username: "Användarnamn",
  "Verify Contact": "Verifiera kontakt",
  Verify: "Verifiera",
  "We Sent A Code": "Vi skickade en kod",
  "We Texted You": "Vi sms:ade dig",
  "Your code is on the way. To log in, enter the code we emailed to": "Din kod är på väg. För att logga in, ange koden vi mejlade till",
  "Your code is on the way. To log in, enter the code we sent you": "Din kod är på väg. För att logga in, ange koden vi skickade till dig",
  "Your code is on the way. To log in, enter the code we texted to": "Din kod är på väg. För att logga in, ange koden vi sms:ade till",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Det finns redan ett konto med denna e-postadress",
  "Confirm a Code": "Bekräfta koden",
  "Confirm Sign In": "Bekräfta inloggning",
  "Create account": "Skapa konto",
  "Enter your Password": "Ange ditt lösenord",
  "Forgot Password?": "Glömt lösenord?",
  "Have an account? ": "Redan registrerad? ",
  "Incorrect username or password": "Felaktigt användarnamn eller lösenord",
  "Invalid password format": "Ogiltigt lösenordsformat",
  "Invalid phone number format": `Ogiltigt format för telefonnummer`,
  "Lost your code? ": "Förlorat koden? ",
  "New Password": "Nytt lösenord",
  "No account? ": "Inget konto? ",
  "Password attempts exceeded": "Maximalt antal felaktiga inloggningsförsök har uppnåtts",
  "Reset Password": "Återställ lösenord",
  "Sign Out": "Logga ut",
  "Sign Up": "Registrering",
  "User already exists": "Användaren finns redan",
  "User does not exist": "Användaren finns inte",
  "Username cannot be empty": "Användarnamnet kan inte vara tomt",
  "We Emailed You": "Vi har skickat e-post till dig",
  "Please confirm your Password": "Bekräfta ditt lösenord"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/id.mjs
var idDict = {
  "Account recovery requires verified contact information": "Pemulihan akun memerlukan informasi kontak terverifikasi",
  "Authenticator App (TOTP)": "Aplikasi Pengauntentikasi (TOTP)",
  "Back to Sign In": "Kembali ke Masuk",
  "Change Password": "Ubah kata sandi",
  Changing: "Mengubah",
  Code: "Kode",
  "Confirm Email Code": "Konfirmasi Kode Email",
  "Confirm Password": "Konfirmasi kata sandi",
  "Confirm Sign Up": "Konfirmasi Pendaftaran",
  "Confirm SMS Code": "Konfirmasi Kode SMS",
  "Confirm TOTP Code": "Konfirmasi Kode TOTP",
  Confirm: "Konfirmasi",
  "Confirmation Code": "Kode Konfirmasi",
  Confirming: "Mengkonfirmasi",
  "Create a new account": "Buat akun baru",
  "Create Account": "Buat Akun",
  "Creating Account": "Membuat Akun",
  "Dismiss alert": "Hentikan pemberitahuan",
  Email: "Email",
  "Email Message": "Pesan Email",
  "Enter your code": "Masukkan kode anda",
  "Enter your Email": "Masukkan email anda",
  "Enter your phone number": "Masukkan nomor telepon anda",
  "Enter your username": "Masukkan nama akun anda",
  "Forgot your password?": "Lupa kata sandi? ",
  "Hide password": "Sembunyikan kata sandi",
  "It may take a minute to arrive": "Mungkin perlu waktu satu menit untuk tiba",
  Loading: "Memuat",
  "Multi-Factor Authentication": "Autentikasi Multifaktor",
  "Multi-Factor Authentication Setup": "Pengaturan Autentikasi Multifaktor",
  "New password": "Kata sandi baru",
  or: "atau",
  Password: "Kata sandi",
  "Phone Number": "Nomor telepon",
  "Resend Code": "Kirim ulang kodenya",
  "Reset your Password": "Reset Kata Sandi",
  "Reset your password": "Ubah kata sandi anda",
  "Select MFA Type": "Pilih tipe MFA",
  "Send code": "Kirim kode",
  "Send Code": "Kirim Kode",
  Sending: "Mengirim",
  "Setup Email": "Atur Email",
  "Setup TOTP": "Siapkan TOTP",
  "Show password": "Tampilkan kata sandi",
  "Sign in to your account": "Masuk akun anda",
  "Sign In with Amazon": "Masuk dengan Amazon",
  "Sign In with Apple": "Masuk dengan Apple",
  "Sign In with Facebook": "Masuk dengan Facebook",
  "Sign In with Google": "Masuk dengan Google",
  "Sign in": "Masuk",
  "Sign In": "Masuk",
  "Signing in": "Memasuki",
  Skip: "Lewati",
  Submit: "Ajukan",
  Submitting: "Mengajukan",
  "Text Message (SMS)": "Pesan Teks (SMS)",
  Username: "Nama akun",
  "Verify Contact": "Verifikasi Kontak",
  Verify: "Verifikasi",
  "We Sent A Code": "Kami Mengirim Kode",
  "We Texted You": "Kami mengirim SMS kepada Anda",
  "Your code is on the way. To log in, enter the code we sent you": "Kode Anda segera hadir. Untuk masuk, masukkan kode yang kami kirimkan kepada Anda",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Akun dengan email tersebut sudah terdaftar.",
  "Attempt limit exceeded, please try after some time.": "Batas percobaan terlampaui, mohon coba lagi setelah beberapa waktu.",
  "Cannot reset password for the user as there is no registered/verified email or phone_number": "Tidak dapat mengatur ulang kata sandi karena tidak ada email terdaftar / terverifikasi atau nomor telepon",
  Change: "Ubah",
  "Confirm a Code": "Konfirmasi kode",
  "Create account": "Buat akun",
  "Enter your password": "Masukkan kata sandi anda",
  "Forgot Password": "Lupa kata sandi",
  "Have an account? ": "Sudah punya akun? ",
  Hello: "Halo",
  "Incorrect username or password.": "Nama akun atau kata sandi salah.",
  "Invalid phone number format": "Nomor telepon tidak sesuai dengan format.",
  "Invalid verification code provided, please try again.": "Kode verifikasi tidak sesuai, mohon coba lagi.",
  "It may take a minute to arrive.": "Mungkin perlu beberapa waktu untuk tiba.",
  "Lost your code? ": "Kode anda hilang?",
  Name: "Nama",
  "Network error": "Galat jaringan",
  "No account? ": "Tidak ada akun?",
  "Password did not conform with policy: Password not long enough": "Kata sandi tidak sesuai dengan aturan: Kata sandi kurang panjang",
  "Resend a Code": "Renvoyer un code",
  "Reset password": "Ubah kata sandi anda",
  Send: "Kirim",
  "Sign In with AWS": "Masuk dengan AWS",
  "Sign Up with Amazon": "Daftar dengan Amazon",
  "Sign Up with AWS": "Daftar dengan AWS",
  "Sign Up with Facebook": "Daftar dengan Facebook",
  "Sign Up with Google": "Daftar dengan Google",
  SMS: "SMS",
  "User already exists": "Akun sudah terdaftar",
  "User does not exist.": "Akun tidak terdaftar.",
  "User is disabled.": "Akun dinonaktifkan.",
  "Username cannot be empty": "Nama akun tidak boleh kosong",
  "Username/client id combination not found.": "Nama akun atau id tidak ditemukan.",
  "We Emailed You": "Kami mengirimkanmu email",
  "Your code is on the way. To log in, enter the code we emailed to": "Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami emailkan ke",
  "Your code is on the way. To log in, enter the code we texted to": "Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami tuliskan ke",
  "Your passwords must match": "Kata sandi harus sama"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/tr.mjs
var trDict = {
  "Account recovery requires verified contact information": "Hesap kurtarma, doğrulanmış iletişim bilgilerini gerektirir",
  "Authenticator App (TOTP)": "Kimlik Doğrulayıcı Uygulaması (TOTP)",
  "Add your Profile": "Profilinizi ekleyin",
  "Add your Website": "Web sitenizi ekleyin",
  "Back to Sign In": "Oturum Açmaya Geri Dön",
  "Change Password": "Şifreyi Değiştir",
  Changing: "Değiştiriliyor",
  Code: "Kod",
  "Confirm Email Code": "E-posta Kodunu Onayla",
  "Confirm Password": "Şifreyi Doğrula",
  "Confirm Sign Up": "Kayıt İşlemini Doğrula",
  "Confirm SMS Code": "SMS Kodunu Doğrula",
  "Confirm MFA Code": "Çoklu Faktörlü Doğrulama Kodunu Doğrula",
  "Confirm TOTP Code": "Tek Kullanımlık Şifreyi Doğrula",
  Confirm: "Doğrula",
  "Confirmation Code": "Doğrulama Kodu",
  Confirming: "Doğrulanıyor",
  "Create a new account": "Yeni bir hesap oluştur",
  "Create Account": "Hesap Oluştur",
  "Creating Account": "Hesap Oluşturuluyor",
  "Dismiss alert": "Uyarıyı reddet",
  Email: "E-posta",
  "Email Message": "E-posta Mesajı",
  "Enter your Birthdate": "Doğum gününüzü girin",
  "Enter your code": "Kodu girin",
  "Enter your Confirmation Code": "Doğrulama Kodunuzu Girin",
  "Enter your Email": "E-posta adresinizi girin",
  "Enter your email": "E-posta adresinizi girin",
  "Enter your Family Name": "Ad Soyadınızı girin",
  "Enter your Given Name": "Adınızı girin",
  "Enter your Middle Name": "Soyadınızı girin",
  "Enter your Name": "Adınızı girin",
  "Enter your Nickname": "Takma adınızı girin",
  "Enter your Password": "Şifrenizi girin",
  "Enter your phone number": "Telefon numaranızı girin",
  "Enter your Preferred Username": "Tercih ettiğiniz kullanıcı adınızı girin",
  "Enter your username": "Kullanıcı adınızı girin",
  "Forgot Password?": "Şifrenizi Mi Unuttunuz?",
  "Forgot password?": "Şifrenizi mi unuttunuz?",
  "Forgot your password?": "Şifrenizi mi unuttunuz?",
  "Hide password": "Şifreyi gizle",
  "It may take a minute to arrive": "Kodun gelmesi bir dakika sürebilir",
  Loading: "Yükleniyor",
  "Multi-Factor Authentication": "Çok Faktörlü Kimlik Doğrulama",
  "Multi-Factor Authentication Setup": "Çok Faktörlü Kimlik Doğrulama Kurulumu",
  "New password": "Yeni şifre",
  or: "veya",
  Password: "Şifre",
  "Phone Number": "Telefon Numarası",
  "Please confirm your Password": "Lütfen şifrenizi doğrulayın",
  "Resend Code": "Kodu Yeniden Gönder",
  "Reset your password": "Şifrenizi sıfırlayın",
  "Reset your Password": "Şifrenizi Sıfırlayın",
  "Reset Password": "Şifreyi Sıfırla",
  "Select MFA Type": "MFA türünü seçin",
  "Send code": "Kod gönder",
  "Send Code": "Kod Gönder",
  Sending: "Gönderiliyor",
  "Setup Email": "E-postayı ayarla",
  "Setup TOTP": "Tek kullanımlık şifre kurulumu yap",
  "Show password": "Şifreyi göster",
  "Sign in to your account": "Hesabınızda oturum açın",
  "Sign In with Amazon": "Amazon ile Oturum Aç",
  "Sign In with Apple": "Apple ile Oturum Aç",
  "Sign In with Facebook": "Facebook ile Oturum Aç",
  "Sign In with Google": "Google ile Oturum Aç",
  "Sign in": "Oturum aç",
  "Sign In": "Oturum Aç",
  "Sign Up with Facebook": "Facebook ile Kayıt Ol",
  "Sign Up with Google": "Google ile Kayıt Ol",
  "Signing in": "Oturum açılıyor",
  Skip: "Atla",
  Submit: "Gönder",
  Submitting: "Gönderiliyor",
  "Text Message (SMS)": "Kısa Mesaj (SMS)",
  Username: "Kullanıcı adı",
  "Verify Contact": "Kişiyi Doğrula",
  Verify: "Doğrula",
  "We Emailed You": "Size E-posta Gönderdik",
  "We Sent A Code": "Bir Kod Gönderdik",
  "We Texted You": "Size Mesaj Gönderdik",
  "Your code is on the way. To log in, enter the code we emailed to": "Kodunuz yolda. Oturum açmak için, gönderdiğimiz e-postadaki kodu girin",
  "Your code is on the way. To log in, enter the code we sent you": "Kodunuz yolda. Oturum açmak için, size gönderdiğimiz kodu girin",
  "Your code is on the way. To log in, enter the code we texted to": "Kodunuz yolda. Oturum açmak için, gönderdiğimiz mesajdaki kodu girin",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Bu e-postaya ait zaten bir hesap var.",
  "Confirm Sign In": "Oturum Açmayı Doğrula",
  "Have an account? ": "Hesabınız var mı? ",
  "Incorrect username or password": "Yanlış kullanıcı adı ya da şifre",
  "Invalid password format": "Geçersiz parola formatı",
  "Invalid phone number format": "Geçersiz telefon numarası formatı",
  "Lost your code? ": "Kodu mu kaybettiniz? ",
  "No account? ": "Hesabınız yok mu? ",
  "Password attempts exceeded": "Maksimum oturum açma girişimi aşıldı",
  "Sign Out": "Çıkış yap",
  "Sign Up": "Kayıt Ol",
  "User already exists": "Bu kullanıcı zaten var",
  "User does not exist": "Böyle bir kullanıcı mevcut değil",
  "Username cannot be empty": "Kullanıcı adı boş olamaz"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/ru.mjs
var ruDict = {
  "Account recovery requires verified contact information": "Восстановление учетной записи требует проверки контактной информации",
  "Authenticator App (TOTP)": "Приложение для аутентификации (TOTP)",
  "Back to Sign In": "Назад, чтобы войти",
  "Change Password": "изменять пароль",
  Changing: "Изменение",
  Code: "Код",
  "Confirm Email Code": "Подтвердите код электронной почты",
  "Confirm Password": "Подтверждение пароля",
  "Confirm Sign Up": "Подтверждение зарегистрироваться",
  "Confirm SMS Code": "Подтверждение CMC-Код",
  "Confirm TOTP Code": "Подтверждение TOTP-Код",
  Confirm: "Подтверждать",
  "Confirmation Code": "код подтверждения",
  Confirming: "подтверждение",
  "Create a new account": "Создавать новую учетную запись",
  "Create Account": "Создать учетную запись",
  "Creating Account": "создание учетная запись",
  "Dismiss alert": "Закрыть оповещение",
  Email: "электронная почта",
  "Email Message": "Сообщение по электронной почте",
  "Enter your code": "ввести ваш Код",
  "Enter your Email": "ввести ваш электронная почта",
  "Enter your phone number": "ввести ваш номер телефона",
  "Enter your username": "ввести ваш имя пользователя",
  "Forgot your password?": "Забыли ваш пароль?",
  "Hide password": "Скрывать пароль",
  "It may take a minute to arrive": "Доставка может занять некоторое время",
  Loading: "Загрузка",
  "Multi-Factor Authentication": "Многофакторная аутентификация",
  "Multi-Factor Authentication Setup": "Настройка многофакторной аутентификации",
  "New password": "Новый пароль",
  or: "или",
  Password: "Пароль",
  "Phone Number": "Номер телефона",
  "Resend Code": "Отправь еще раз Код",
  "Reset your password": "сброс ваш пароль",
  "Reset your Password": "сброс ваш Пароль",
  "Select MFA Type": "Выберите тип МФА",
  "Send code": "Отправлять Код",
  "Send Code": "Отправлять Код",
  Sending: "отправка",
  "Setup Email": "Настроить электронную почту",
  "Setup TOTP": "Настраивать TOTP",
  "Show password": "Показывать пароль",
  "Sign in to your account": "знак в свой аккаунт",
  "Sign In with Amazon": "знак в с Amazon",
  "Sign In with Apple": "знак в с Apple",
  "Sign In with Facebook": "знак в с Facebook",
  "Sign In with Google": "знак в с Google",
  "Sign in": "знак в",
  "Sign In": "знак в",
  "Signing in": "подписание в",
  Skip: "Пропускать",
  Submit: "Представлять на рассмотрение",
  Submitting: "Представив",
  "Text Message (SMS)": "Текстовое сообщение (SMS)",
  Username: "Имя пользователя",
  "Verify Contact": "Проверить контакт",
  Verify: "Проверить",
  "We Emailed You": "Мы отправили вам электронное письмо",
  "We Sent A Code": "Мы отправили код",
  "We Texted You": "Мы отправили вам текстовое сообщение",
  "Your code is on the way. To log in, enter the code we emailed to": "Ваш код отправлен. Чтобы войти в систему, введите код, который мы отправили по электронной почте",
  "Your code is on the way. To log in, enter the code we sent you": "Ваш код отправлен. Чтобы войти в систему, введите код, который мы послали вам",
  "Your code is on the way. To log in, enter the code we texted to": "Ваш код отправлен. Чтобы войти в систему, введите код, который мы отправили текстовым сообщением"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/he.mjs
var heDict = {
  "Account recovery requires verified contact information": "שחזור לקוח דורש עוד מידע",
  "Authenticator App (TOTP)": "אפליקציית אימות (TOTP)",
  "Back to Sign In": "חזור להרשמה",
  "Change Password": "עדכון סיסמא",
  Changing: "מעדכן",
  Code: "קוד",
  "Confirm Email Code": "אמת קוד אימייל",
  "Confirm Password": "אשר סיסמא",
  "Confirm Sign Up": "אשר הרשמה",
  "Confirm SMS Code": "אשר sms קוד",
  "Confirm TOTP Code": "אשר totp קוד",
  Confirm: "אישור",
  "Confirmation Code": "אישור קוד",
  Confirming: "מאשר",
  "Create a new account": "צור משתמש חדש",
  "Create Account": "צור משתמש",
  "Creating Account": "יצירת משתמש",
  "Dismiss alert": "הסר התראה",
  Email: "אימייל",
  "Email Message": "הודעת אימייל",
  "Enter your code": "הכנס את הקוד",
  "Enter your Email": "הכנס את המייל שלך",
  "Enter your phone number": "הכנס את מספר הטלפון שלך",
  "Enter your username": "הכנס את שם המתמש שלך",
  "Forgot your password?": "שכחת סיסמא ?",
  "Hide password": "הסתר סיסמא",
  Loading: "טוען",
  "Multi-Factor Authentication": "אימות רב-גורמי",
  "Multi-Factor Authentication Setup": "הגדרת אימות רב-גורמי",
  "New password": "סיסמא חדשה",
  or: "אוֹ",
  Password: "סיסמא",
  "Phone Number": "מספר טלפון",
  "Resend Code": "שלח קוד שוב",
  "Reset your password": "אפס סיסמא",
  "Reset your Password": "אפס סיסמא",
  "Select MFA Type": "בחר סוג אימות רב-גורמי",
  "Send code": "שלח קוד",
  "Send Code": "שלח קוד",
  Sending: "שולח",
  "Setup Email": "הגדר אימייל",
  "Setup TOTP": "Setup TOTP",
  "Show password": "הצג סיסמא",
  "Sign in to your account": "התחבר לחשבון שלך",
  "Sign In with Amazon": "Sign In with Amazon",
  "Sign In with Apple": "Sign In with Apple",
  "Sign In with Facebook": "Sign In with Facebook",
  "Sign In with Google": "Sign In with Google",
  "Sign in": "התחבר",
  "Sign In": "התחבר",
  "Signing in": "מתחבר",
  Skip: "דלג",
  Submit: "שלח",
  Submitting: "שולח",
  "Text Message (SMS)": "הודעת טקסט (SMS)",
  Username: "שם משתמש",
  "Verify Contact": "אמת איש קשר",
  Verify: "אמת"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/ua.mjs
var uaDict = {
  "Account recovery requires verified contact information": "Відновлення облікового запису потребує контактної інформації",
  "Authenticator App (TOTP)": "Додаток автентифікації (TOTP)",
  "Back to Sign In": "Назад на сторінку входу",
  "Change Password": "Змінити пароль",
  Changing: "Змінюємо",
  Code: "Код",
  "Confirm Email Code": "Підтвердити код електронної пошти",
  "Confirm Password": "Підтвердіть пароль",
  "Confirm Sign Up": "Підтвердіть реєстрацію",
  "Confirm SMS Code": "Підтвердіть SMS код",
  "Confirm TOTP Code": "Підтвердіть TOTP код",
  Confirm: "Підтвердити",
  "Confirmation Code": "Код підтвердження",
  Confirming: "Підтверджуємо",
  "Create a new account": "Зареєструватися",
  "Create Account": "Зареєструватися",
  "Creating Account": "Реєструємо",
  "Dismiss alert": "Відхилити сповіщення",
  Email: "Email",
  "Email Message": "Повідомлення електронної пошти",
  "Enter your code": "Введіть код",
  "Enter your Email": "Введіть ваш email",
  "Enter your phone number": "Введіть ваш номер телефону",
  "Enter your username": "Введіть ваше імʼя користувача",
  "Forgot password?": "Забули пароль?",
  "Forgot your password?": "Забули ваш пароль?",
  "Hide password": "Сховати пароль",
  "It may take a minute to arrive": "Доставка може тривати хвилину",
  Loading: "Загружаємо",
  "Multi-Factor Authentication": "Багатофакторна автентифікація",
  "Multi-Factor Authentication Setup": "Налаштування багатофакторної автентифікації",
  "New password": "Новий пароль",
  or: "або",
  Password: "Пароль",
  "Phone Number": "Номер Телефону",
  "Resend Code": "Відправити код повторно",
  "Reset your password": "Скинути пароль",
  "Reset your Password": "Скинути пароль",
  "Select MFA Type": "Виберіть тип MFA",
  "Send code": "Відправити код",
  "Send Code": "Відправити код",
  Sending: "Відправляємо",
  "Setup Email": "Налаштувати електронну пошту",
  "Setup TOTP": "Налаштувати TOTP",
  "Show password": "Показати пароль",
  "Sign in to your account": "Увійти у ваш обліковий запис",
  "Sign In with Amazon": "Увійти з Amazon",
  "Sign In with Apple": "Увійти з Apple",
  "Sign In with Facebook": "Увійти з Facebook",
  "Sign In with Google": "Увійти з Google",
  "Sign in": "Увійти",
  "Sign In": "Увійти",
  "Signing in": "Входимо",
  Skip: "Пропустити",
  Submit: "Відправити",
  Submitting: "Відправляємо",
  "Text Message (SMS)": "Текстове повідомлення (SMS)",
  Username: "Імʼя користувача",
  "Verify Contact": "Підтвердити Контакт",
  Verify: "Підтвердити",
  "We Emailed You": "Ми відправили вам Email",
  "We Sent A Code": "Ми відправили код",
  "We Texted You": "Ми відправили вам текстове повідомлення",
  "Your code is on the way. To log in, enter the code we emailed to": "Ваш код вже в дорозі. Щоб увійти, введіть код, що ми відправили вам на Email",
  "Your code is on the way. To log in, enter the code we sent you": "Ваш код вже в дорозі. Щоб увійти, введіть код, що ми вам відправили",
  "Your code is on the way. To log in, enter the code we texted to": "Ваш код вже в дорозі. Щоб увійти, введіть код, що ми відправили вам текстовим повідомленням",
  // Additional translations
  "An account with the given email already exists.": "Обліковий запис з цим Email вже існує.",
  "Confirm a Code": "Підтвердіть код",
  "Confirm Sign In": "Підтвердіть вхід",
  "Forgot Password": "Забули пароль",
  "Incorrect username or password.": "Невірне імʼя користувача або пароль",
  "Invalid password format": "Невірний формат паролю",
  "Invalid phone number format": "Невірний формат номеру телефону",
  "Loading...": "Загружаємо...",
  "New Password": "Новий пароль",
  "Resend a Code": "Відправити код повторно",
  "Reset Password": "Скинути пароль",
  "Sign Out": "Вийти",
  "Sign Up with Amazon": "Зареєструватися з Amazon",
  "Sign Up with Apple": "Зареєструватися з Apple",
  "Sign Up with Facebook": "Зареєструватися з Facebook",
  "Sign Up with Google": "Зареєструватися з Google",
  "Sign Up": "Зареєструватися",
  "User already exists": "Користувач вже існує",
  "User does not exist": "Такий користувач не існує",
  "Username cannot be empty": "Імʼя користувача не може бути пустим",
  "Your passwords must match": "Паролі мають збігатися"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/th.mjs
var thDict = {
  "Account recovery requires verified contact information": "การกู้คืนบัญชีต้องมีข้อมูลติดต่อที่ได้รับการยืนยันแล้ว",
  "Add your Profile": "เพิ่มโปรไฟล์ของคุณ",
  "Add your Website": "เพิ่มเว็บไซต์ของคุณ",
  "Authenticator App (TOTP)": "แอปพลิเคชันยืนยันตัวตน (TOTP)",
  "Back to Sign In": "กลับไปที่การเข้าสู่ระบบ",
  "Change Password": "เปลี่ยนรหัสผ่าน",
  Changing: "กำลังเปลี่ยน",
  Code: "รหัส",
  "Confirm Email Code": "ยืนยันรหัสอีเมล",
  "Confirm Password": "ยืนยันรหัสผ่าน",
  "Please confirm your Password": "กรุณายืนยันรหัสผ่านของคุณ",
  "Confirm Sign Up": "ยืนยันการลงทะเบียน",
  "Confirm SMS Code": "ยืนยันรหัส SMS",
  "Confirm MFA Code": "ยืนยันรหัส MFA",
  "Confirm TOTP Code": "ยืนยันรหัส TOTP",
  Confirm: "ยืนยัน",
  "Confirmation Code": "รหัสยืนยัน",
  Confirming: "กำลังยืนยัน",
  "Create a new account": "สร้างบัญชีใหม่",
  "Create Account": "สร้างบัญชี",
  "Creating Account": "กำลังสร้างบัญชี",
  "Dismiss alert": "ปิดการแจ้งเตือน",
  Email: "อีเมล",
  "Email Message": "ข้อความอีเมล",
  "Enter your Birthdate": "กรอกวันเกิดของคุณ",
  "Enter your code": "กรอกรหัสของคุณ",
  "Enter your Confirmation Code": "กรอกรหัสยืนยันของคุณ",
  "Enter your Email": "กรอกอีเมลของคุณ",
  "Enter your Family Name": "กรอกนามสกุลของคุณ",
  "Enter your Given Name": "กรอกชื่อของคุณ",
  "Enter your Middle Name": "กรอกชื่อกลางของคุณ",
  "Enter your Name": "กรอกชื่อของคุณ",
  "Enter your Nickname": "กรอกชื่อเล่นของคุณ",
  "Enter your Password": "กรอกรหัสผ่านของคุณ",
  "Enter your email": "กรอกอีเมลของคุณ",
  "Enter your phone number": "กรอกหมายเลขโทรศัพท์ของคุณ",
  "Enter your Preferred Username": "กรอกชื่อผู้ใช้ที่ต้องการ",
  "Enter your username": "กรอกชื่อผู้ใช้ของคุณ",
  "Forgot password?": "ลืมรหัสผ่าน?",
  "Forgot your password?": "ลืมรหัสผ่านใช่หรือไม่?",
  "Hide password": "ซ่อนรหัสผ่าน",
  "It may take a minute to arrive": "อาจใช้เวลาสักครู่",
  Loading: "กำลังโหลด",
  "Multi-Factor Authentication": "การยืนยันตัวตนหลายขั้นตอน",
  "Multi-Factor Authentication Setup": "ตั้งค่าการยืนยันตัวตนแบบหลายขั้นตอน",
  "New password": "รหัสผ่านใหม่",
  or: "หรือ",
  Password: "รหัสผ่าน",
  "Phone Number": "หมายเลขโทรศัพท์",
  "Resend Code": "ส่งรหัสอีกครั้ง",
  "Reset your Password": "รีเซ็ตรหัสผ่านของคุณ",
  "Reset your password": "รีเซ็ตรหัสผ่านของคุณ",
  "Select MFA Type": "เลือกประเภท MFA",
  "Send code": "ส่งรหัส",
  "Send Code": "ส่งรหัส",
  Sending: "กำลังส่ง",
  "Setup Email": "ตั้งค่าอีเมล",
  "Setup TOTP": "ตั้งค่า TOTP",
  "Show password": "แสดงรหัสผ่าน",
  "Sign in to your account": "เข้าสู่ระบบบัญชีของคุณ",
  "Sign In with Amazon": "เข้าสู่ระบบด้วย Amazon",
  "Sign In with Apple": "เข้าสู่ระบบด้วย Apple",
  "Sign In with Facebook": "เข้าสู่ระบบด้วย Facebook",
  "Sign In with Google": "เข้าสู่ระบบด้วย Google",
  "Sign in": "เข้าสู่ระบบ",
  "Sign In": "เข้าสู่ระบบ",
  "Signing in": "กำลังเข้าสู่ระบบ",
  Skip: "ข้าม",
  Submit: "ส่ง",
  Submitting: "กำลังส่ง",
  "Text Message (SMS)": "ข้อความตัวอักษร (SMS)",
  Username: "ชื่อผู้ใช้",
  "Verify Contact": "ยืนยันการติดต่อ",
  Verify: "ยืนยัน",
  "We Emailed You": "เราได้ส่งอีเมลถึงคุณแล้ว",
  "We Sent A Code": "เราได้ส่งรหัสแล้ว",
  "We Texted You": "เราได้ส่ง SMS ถึงคุณแล้ว",
  "Your code is on the way. To log in, enter the code we emailed to": "รหัสของคุณกำลังมา เพื่อเข้าสู่ระบบ กรุณากรอกรหัสที่เราส่งไปยังอีเมล",
  "Your code is on the way. To log in, enter the code we sent you": "รหัสของคุณกำลังมา เพื่อเข้าสู่ระบบ กรุณากรอกรหัสที่เราส่งให้คุณ",
  "Your code is on the way. To log in, enter the code we texted to": "รหัสของคุณกำลังมา เพื่อเข้าสู่ระบบ กรุณากรอกรหัสที่เราส่งไปยัง SMS",
  // Additional translations
  "An account with the given email already exists.": "บัญชีที่ใช้อีเมลนี้มีอยู่แล้ว",
  "Confirm a Code": "ยืนยันรหัส",
  "Confirm Sign In": "ยืนยันการเข้าสู่ระบบ",
  "Create account": "สร้างบัญชี",
  "Sign Up with Facebook": "ลงทะเบียนด้วย Facebook",
  "Sign Up with Google": "ลงทะเบียนด้วย Google",
  "Sign Up with Apple": "ลงทะเบียนด้วย Apple",
  "Sign Up with Line": "ลงทะเบียนด้วย Line",
  "Forgot Password": "ลืมรหัสผ่าน",
  "Have an account? ": "มีบัญชีอยู่แล้ว? ",
  "Incorrect username or password": "ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง",
  "Invalid password format": "รูปแบบรหัสผ่านไม่ถูกต้อง",
  "It may take a minute to arrive.": "อาจใช้เวลาสักครู่ในการมาถึง",
  "Lost your code? ": "หารหัสไม่เจอ? ",
  "New Password": "รหัสผ่านใหม่",
  "No account? ": "ไม่มีบัญชี? ",
  "Password attempts exceeded": "เกินจำนวนครั้งที่อนุญาตให้ใส่รหัสผ่าน",
  "Reset password": "รีเซ็ตรหัสผ่าน",
  "Reset Password": "รีเซ็ตรหัสผ่าน",
  "Sign Out": "ออกจากระบบ",
  "Sign Up": "ลงทะเบียน",
  "User already exists": "ผู้ใช้นี้มีอยู่แล้ว",
  "User does not exist": "ไม่มีผู้ใช้นี้",
  "Username cannot be empty": "ต้องใส่ชื่อผู้ใช้งาน"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/authenticator/defaultTexts.mjs
var defaultTexts = {
  ADD_PROFILE: "Add your Profile",
  ADD_WEBSITE: "Add your Website",
  BACK_SIGN_IN: "Back to Sign In",
  BIRTHDATE: "Birthdate",
  CHANGE_PASSWORD: "Change Password",
  CHANGING_PASSWORD: "Changing",
  CODE: "Code",
  CODE_ARRIVAL: "It may take a minute to arrive",
  CODE_EMAILED: "Your code is on the way. To log in, enter the code we emailed to",
  CODE_SENT: "Your code is on the way. To log in, enter the code we sent you",
  CODE_TEXTED: "Your code is on the way. To log in, enter the code we texted to",
  CONFIRM_PASSWORD: "Confirm Password",
  CONFIRM_PASSWORD_PLACEHOLDER: "Please confirm your Password",
  CONFIRM_RESET_PASSWORD_HEADING: "Reset your Password",
  CONFIRM_SIGNUP_HEADING: "Confirm Sign Up",
  CONFIRM_SMS: "Confirm SMS Code",
  CONFIRM_EMAIL: "Confirm Email Code",
  // If challenge name is not returned
  CONFIRM_MFA_DEFAULT: "Confirm MFA Code",
  CONFIRM_TOTP: "Confirm TOTP Code",
  CONFIRM: "Confirm",
  CONFIRMATION_CODE: "Confirmation Code",
  CONFIRMING: "Confirming",
  CREATE_ACCOUNT: "Create Account",
  CREATING_ACCOUNT: "Creating Account",
  EMAIL_ADDRESS: "Email",
  EMAIL_OTP: "Email Message",
  ENTER_BIRTHDATE: "Enter your Birthdate",
  ENTER_CODE: "Enter your code",
  ENTER_CONFIRMATION_CODE: "Enter your Confirmation Code",
  ENTER_EMAIL: "Enter your Email",
  ENTER_FAMILY_NAME: "Enter your Family Name",
  ENTER_GIVEN_NAME: "Enter your Given Name",
  ENTER_MIDDLE_NAME: "Enter your Middle Name",
  ENTER_NAME: "Enter your Name",
  ENTER_NICK_NAME: "Enter your Nickname",
  ENTER_PASSWORD: "Enter your Password",
  ENTER_PHONE_NUMBER: "Enter your Phone Number",
  ENTER_PREFERRED_USERNAME: "Enter your Preferred Username",
  ENTER_USERNAME: "Enter your username",
  FAMILY_NAME: "Family Name",
  GIVEN_NAME: "Given Name",
  FORGOT_PASSWORD: "Forgot Password?",
  FORGOT_YOUR_PASSWORD: "Forgot your password?",
  HIDE_PASSWORD: "Hide password",
  LOADING: "Loading",
  LOGIN_NAME: "Username",
  MIDDLE_NAME: "Middle Name",
  MFA_SETUP_SELECTION: "Multi-Factor Authentication Setup",
  MFA_SELECTION: "Multi-Factor Authentication",
  NAME: "Name",
  NICKNAME: "Nickname",
  NEW_PASSWORD: "New password",
  OR: "or",
  PASSWORD: "Password",
  PHONE_NUMBER: "Phone Number",
  PREFERRED_USERNAME: "Preferred Username",
  PROFILE: "Profile",
  RESEND_CODE: "Resend Code",
  RESET_PASSWORD_HEADING: "Reset your password",
  RESET_PASSWORD: "Reset Password",
  SEND_CODE: "Send code",
  SENDING: "Sending",
  SELECT_MFA_TYPE: "Select MFA Type",
  SETUP_EMAIL: "Setup Email",
  SETUP_TOTP: "Setup TOTP",
  SHOW_PASSWORD: "Show password",
  SIGN_IN_BUTTON: "Sign in",
  SIGN_IN_TAB: "Sign In",
  SIGN_IN_WITH_AMAZON: "Sign In with Amazon",
  SIGN_IN_WITH_APPLE: "Sign In with Apple",
  SIGN_IN_WITH_FACEBOOK: "Sign In with Facebook",
  SIGN_IN_WITH_GOOGLE: "Sign In with Google",
  SIGN_IN: "Sign in to your account",
  SIGN_UP_BUTTON: "Create a new account",
  SIGNING_IN_BUTTON: "Signing in",
  SKIP: "Skip",
  SMS_MFA: "Text Message (SMS)",
  SUBMIT: "Submit",
  SUBMITTING: "Submitting",
  SOFTWARE_TOKEN_MFA: "Authenticator App (TOTP)",
  UPPERCASE_COPY: "COPY",
  VERIFY_CONTACT: "Verify Contact",
  VERIFY_HEADING: "Account recovery requires verified contact information",
  VERIFY: "Verify",
  WE_EMAILED: "We Emailed You",
  WE_SENT_CODE: "We Sent A Code",
  WE_TEXTED: "We Texted You",
  WEBSITE: "Website"
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/dictionaries/index.mjs
var deDict2 = { ...deDict };
var enDict2 = {
  ...enDict
};
var esDict2 = { ...esDict };
var frDict2 = { ...frDict };
var itDict2 = { ...itDict };
var jaDict2 = { ...jaDict };
var krDict2 = { ...krDict };
var nbDict2 = { ...nbDict };
var nlDict2 = { ...nlDict };
var plDict2 = { ...plDict };
var ptDict2 = { ...ptDict };
var zhDict2 = { ...zhDict };
var svDict2 = { ...svDict };
var idDict2 = { ...idDict };
var trDict2 = { ...trDict };
var ruDict2 = { ...ruDict };
var heDict2 = { ...heDict };
var uaDict2 = { ...uaDict };
var thDict2 = { ...thDict };
var defaultTexts2 = {
  ...defaultTexts
  // new module related default texts goes here
};

// node_modules/@aws-amplify/ui/dist/esm/i18n/translations.mjs
var DefaultTexts = { ...defaultTexts2 };
function translate(phrase) {
  return I18n2.get(phrase);
}
var translations = {
  de: deDict2,
  en: enDict2,
  es: esDict2,
  fr: frDict2,
  id: idDict2,
  it: itDict2,
  ja: jaDict2,
  // TODO: remove kr in next major release
  kr: krDict2,
  ko: krDict2,
  nb: nbDict2,
  nl: nlDict2,
  pl: plDict2,
  pt: ptDict2,
  zh: zhDict2,
  sv: svDict2,
  tr: trDict2,
  ru: ruDict2,
  he: heDict2,
  ua: uaDict2,
  th: thDict2
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/utils.mjs
var getPrimaryAlias = (state) => {
  var _a2;
  const loginMechanisms = (_a2 = state == null ? void 0 : state.context.config) == null ? void 0 : _a2.loginMechanisms;
  const [primaryAlias] = loginMechanisms ?? ["username"];
  return primaryAlias;
};
var applyTranslation = (formFields) => {
  const newFormFields = { ...formFields };
  for (const [name2, options] of Object.entries(formFields)) {
    const { label, placeholder: placeholder2 } = options;
    newFormFields[name2] = {
      ...options,
      label: label ? translate(label) : void 0,
      placeholder: placeholder2 ? translate(placeholder2) : void 0
    };
  }
  return newFormFields;
};
var sortFormFields = (formFields) => {
  return Object.entries(formFields).sort((a, b) => {
    const orderA = a[1].order || Number.MAX_VALUE;
    const orderB = b[1].order || Number.MAX_VALUE;
    return orderA - orderB;
  }).filter((formFieldEntry) => formFieldEntry[1] !== void 0);
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/defaults.mjs
var DEFAULT_COUNTRY_CODE = "+1";
var getDefaultFormField = (fieldName) => {
  let options = defaultFormFieldOptions[fieldName];
  const { type } = options;
  if (type === "tel") {
    options = { ...options, dialCode: DEFAULT_COUNTRY_CODE };
  }
  return options;
};
var getAliasDefaultFormField = (state) => {
  const primaryAlias = getPrimaryAlias(state);
  return {
    ...getDefaultFormField(primaryAlias),
    autocomplete: "username"
  };
};
var getConfirmationCodeFormFields = (_) => ({
  confirmation_code: {
    ...getDefaultFormField("confirmation_code"),
    label: "Code *",
    placeholder: "Code"
  }
});
var getSignInFormFields = (state) => ({
  username: { ...getAliasDefaultFormField(state) },
  password: {
    ...getDefaultFormField("password"),
    autocomplete: "current-password"
  }
});
var getSignUpFormFields = (state) => {
  const { loginMechanisms, signUpAttributes } = state.context.config;
  const primaryAlias = getPrimaryAlias(state);
  const fieldNames = Array.from(/* @__PURE__ */ new Set([
    ...loginMechanisms,
    "password",
    "confirm_password",
    ...signUpAttributes
  ]));
  const formField = {};
  for (const fieldName of fieldNames) {
    if (isAuthFieldWithDefaults(fieldName)) {
      const fieldAttrs = fieldName === primaryAlias ? getAliasDefaultFormField(state) : getDefaultFormField(fieldName);
      formField[fieldName] = { ...fieldAttrs };
    } else {
      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize SignUp FormFields to add your own.`);
    }
  }
  return formField;
};
var getConfirmSignUpFormFields = (_) => ({
  confirmation_code: {
    ...getDefaultFormField("confirmation_code"),
    placeholder: "Enter your code"
  }
});
var getForgotPasswordFormFields = (state) => {
  const primaryAlias = getPrimaryAlias(state);
  const { label } = defaultFormFieldOptions[primaryAlias];
  return {
    username: {
      ...getAliasDefaultFormField(state),
      label: `Enter your ${label.toLowerCase()}`,
      placeholder: `Enter your ${label.toLowerCase()}`
    }
  };
};
var getConfirmResetPasswordFormFields = (state) => ({
  ...getConfirmationCodeFormFields(),
  password: {
    ...getDefaultFormField("password"),
    label: "New Password",
    placeholder: "New Password"
  },
  confirm_password: {
    ...getDefaultFormField("confirm_password"),
    label: "Confirm Password",
    placeholder: "Confirm Password"
  }
});
var getForceNewPasswordFormFields = (state) => {
  const actorState = getActorState(state);
  const { missingAttributes } = actorState.context;
  const fieldNames = Array.from(/* @__PURE__ */ new Set([
    "password",
    "confirm_password",
    ...missingAttributes ?? []
  ]));
  const formField = {};
  for (const fieldName of fieldNames) {
    if (isAuthFieldWithDefaults(fieldName)) {
      formField[fieldName] = { ...getDefaultFormField(fieldName) };
    } else {
      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize ForceNewPassword FormFields to add your own.`);
    }
  }
  return formField;
};
var getSetupEmailFormFields = (_) => ({
  email: getDefaultFormField("email")
});
var defaultFormFieldsGetters = {
  signIn: getSignInFormFields,
  signUp: getSignUpFormFields,
  confirmSignUp: getConfirmSignUpFormFields,
  confirmSignIn: getConfirmationCodeFormFields,
  forceNewPassword: getForceNewPasswordFormFields,
  forgotPassword: getForgotPasswordFormFields,
  confirmResetPassword: getConfirmResetPasswordFormFields,
  confirmVerifyUser: getConfirmationCodeFormFields,
  setupEmail: getSetupEmailFormFields,
  setupTotp: getConfirmationCodeFormFields
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/formFields/formFields.mjs
var getDefaultFormFields = (route, state) => {
  const formFieldGetter = defaultFormFieldsGetters[route];
  return formFieldGetter(state);
};
var getCustomFormFields = (route, state) => {
  var _a2, _b;
  const customFormFields = (_b = (_a2 = getActorContext(state)) == null ? void 0 : _a2.formFields) == null ? void 0 : _b[route];
  if (!customFormFields || Object.keys(customFormFields).length === 0) {
    return {};
  }
  return Object.entries(customFormFields).reduce((acc, [fieldName, customOptions]) => {
    if ((route === "signIn" || route === "forgotPassword") && fieldName === "username") {
      const defaultOptions3 = getAliasDefaultFormField(state);
      const mergedOptions = { ...defaultOptions3, ...customOptions };
      return { ...acc, [fieldName]: mergedOptions };
    } else if (isAuthFieldsWithDefaults(fieldName)) {
      const defaultOptions3 = defaultFormFieldOptions[fieldName];
      const mergedOptions = { ...defaultOptions3, ...customOptions };
      return { ...acc, [fieldName]: mergedOptions };
    } else {
      return { ...acc, [fieldName]: customOptions };
    }
  }, {});
};
var getFormFields = (route, state) => {
  const defaultFormFields = getDefaultFormFields(route, state);
  const customFormFields = getCustomFormFields(route, state);
  const formFields = { ...defaultFormFields, ...customFormFields };
  delete formFields["QR"];
  return applyTranslation(formFields);
};
var removeOrderKeys = (formFields) => formFields.map((field2) => {
  const key = field2[0];
  const values = { ...field2[1], order: void 0 };
  return [key, values];
});
var getSortedFormFields = (route, state) => {
  const formFields = getFormFields(route, state);
  return removeOrderKeys(sortFormFields(formFields));
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/authenticator/textUtil.mjs
var getChallengeText = (challengeName) => {
  switch (challengeName) {
    case "EMAIL_OTP":
      return translate(DefaultTexts.CONFIRM_EMAIL);
    case "SMS_MFA":
      return translate(DefaultTexts.CONFIRM_SMS);
    case "SOFTWARE_TOKEN_MFA":
      return translate(DefaultTexts.CONFIRM_TOTP);
    default:
      return translate(DefaultTexts.CONFIRM_MFA_DEFAULT);
  }
};
var getDeliveryMessageText = (codeDeliveryDetails) => {
  const { DeliveryMedium, Destination } = codeDeliveryDetails ?? {};
  const isEmailMessage = DeliveryMedium === "EMAIL";
  const isTextMessage = DeliveryMedium === "SMS";
  const arrivalMessage = translate(DefaultTexts.CODE_ARRIVAL);
  if (!(isEmailMessage || isTextMessage)) {
    return `${translate(DefaultTexts.CODE_SENT)}. ${arrivalMessage}.`;
  }
  const instructionMessage = isEmailMessage ? translate(DefaultTexts.CODE_EMAILED) : translate(DefaultTexts.CODE_TEXTED);
  return `${instructionMessage} ${Destination}. ${arrivalMessage}.`;
};
var getDeliveryMethodText = (codeDeliveryDetails) => {
  const { DeliveryMedium } = codeDeliveryDetails ?? {};
  const isEmailMessage = DeliveryMedium === "EMAIL";
  const isTextMessage = DeliveryMedium === "SMS";
  if (!isEmailMessage && isTextMessage) {
    return translate(DefaultTexts.WE_SENT_CODE);
  }
  return isEmailMessage ? translate(DefaultTexts.WE_EMAILED) : translate(DefaultTexts.WE_TEXTED);
};
var providerNameMap = {
  amazon: "Amazon",
  apple: "Apple",
  facebook: "Facebook",
  google: "Google"
};
var getSignInWithFederationText = (route, provider) => {
  const isSignIn = route === "signIn";
  return translate(`Sign ${isSignIn ? "In" : "Up"} with ${providerNameMap[provider]}`);
};
var getSelectMfaTypeByChallengeName = (challengeName) => {
  if (challengeName === "MFA_SETUP") {
    return translate(DefaultTexts.MFA_SETUP_SELECTION);
  }
  return translate(DefaultTexts.MFA_SELECTION);
};
var getMfaTypeLabelByValue = (mfaType) => {
  switch (mfaType) {
    case "EMAIL":
      return translate(defaultTexts2.EMAIL_OTP);
    case "SMS":
      return translate(defaultTexts2.SMS_MFA);
    case "TOTP":
      return translate(defaultTexts2.SOFTWARE_TOKEN_MFA);
    default:
      return translate(mfaType);
  }
};
var authenticatorTextUtil = {
  /** Shared */
  getBackToSignInText: () => translate(DefaultTexts.BACK_SIGN_IN),
  getChangePasswordText: () => translate(DefaultTexts.CHANGE_PASSWORD),
  getChangingText: () => translate(DefaultTexts.CHANGING_PASSWORD),
  getConfirmText: () => translate(DefaultTexts.CONFIRM),
  getConfirmingText: () => translate(DefaultTexts.CONFIRMING),
  getCopyText: () => translate(DefaultTexts.UPPERCASE_COPY),
  getHidePasswordText: () => translate(DefaultTexts.HIDE_PASSWORD),
  getLoadingText: () => translate(DefaultTexts.LOADING),
  getOrText: () => translate(DefaultTexts.OR),
  getResendCodeText: () => translate(DefaultTexts.RESEND_CODE),
  getSendCodeText: () => translate(DefaultTexts.SEND_CODE),
  getSendingText: () => translate(DefaultTexts.SENDING),
  getShowPasswordText: () => translate(DefaultTexts.SHOW_PASSWORD),
  getSubmitText: () => translate(DefaultTexts.SUBMIT),
  getSubmittingText: () => translate(DefaultTexts.SUBMITTING),
  /** SignInSignUpTabs */
  getSignInTabText: () => translate(DefaultTexts.SIGN_IN_TAB),
  getSignUpTabText: () => translate(DefaultTexts.CREATE_ACCOUNT),
  /** SignIn */
  getForgotPasswordText: (shortVersion) => translate(shortVersion ? DefaultTexts.FORGOT_PASSWORD : DefaultTexts.FORGOT_YOUR_PASSWORD),
  getSigningInText: () => translate(DefaultTexts.SIGNING_IN_BUTTON),
  getSignInText: () => translate(DefaultTexts.SIGN_IN_BUTTON),
  /** SignUp */
  getCreatingAccountText: () => translate(DefaultTexts.CREATING_ACCOUNT),
  getCreateAccountText: () => translate(DefaultTexts.CREATE_ACCOUNT),
  /** ConfirmSignUp */
  getDeliveryMessageText,
  getDeliveryMethodText,
  /** ConfirmSignIn */
  getChallengeText,
  /** ForgotPassword */
  getResetYourPasswordText: () => translate(DefaultTexts.RESET_PASSWORD),
  /** SetupEmail */
  getSetupEmailText: () => translate(DefaultTexts.SETUP_EMAIL),
  /** SetupTotp */
  getSetupTotpText: () => translate(DefaultTexts.SETUP_TOTP),
  // TODO: add defaultText for below
  getSetupTotpInstructionsText: () => translate("Copy and paste the secret key below into an authenticator app and then enter the code in the text field below."),
  // TODO: add defaultText for "COPIED"
  getCopiedText: () => translate("COPIED"),
  /** FederatedSignIn */
  getSignInWithFederationText,
  /** SelectMfaType */
  getMfaTypeLabelByValue,
  getSelectMfaTypeByChallengeName,
  getSelectMfaTypeText: () => translate(DefaultTexts.SELECT_MFA_TYPE),
  /** VerifyUser */
  getSkipText: () => translate(DefaultTexts.SKIP),
  getVerifyText: () => translate(DefaultTexts.VERIFY),
  getVerifyContactText: () => translate(DefaultTexts.VERIFY_CONTACT),
  getAccountRecoveryInfoText: () => translate(DefaultTexts.VERIFY_HEADING),
  /** Validations */
  // TODO: add defaultText
  getInvalidEmailText: () => translate("Please enter a valid email"),
  // TODO: add defaultText
  getRequiredFieldText: () => translate("This field is required")
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/utils.mjs
var getLogger = (category) => new ConsoleLogger(`AmplifyUI:${category}`);

// node_modules/@aws-amplify/ui/dist/esm/helpers/accountSettings/utils.mjs
var logger15 = getLogger("Auth");
var changePassword = async ({ currentPassword, newPassword }) => {
  try {
    logger15.debug("calling Auth.updatePassword");
    await updatePassword({
      oldPassword: currentPassword,
      newPassword
    });
    logger15.debug("Auth.updatePassword was successful");
    return Promise.resolve();
  } catch (e) {
    logger15.debug("Auth.updatePassword failed with error", e);
    return Promise.reject(e);
  }
};
var deleteUser2 = async () => {
  try {
    logger15.debug("calling Auth.deleteUser");
    await deleteUser();
    logger15.debug("Auth.deleteUser was successful");
    return Promise.resolve();
  } catch (e) {
    logger15.debug("Auth.deleteUser failed with error", e);
    return Promise.reject(e);
  }
};

// node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/index.mjs
var cognitoCredentialsProvider = new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(defaultStorage));

// node_modules/aws-amplify/dist/esm/initSingleton.mjs
var DefaultAmplify = {
  /**
   * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.
   *
   * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the
   * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.
   * @param libraryOptions The {@link LibraryOptions} additional options for the library.
   *
   * @example
   * import config from './amplifyconfiguration.json';
   *
   * Amplify.configure(config);
   */
  configure(resourceConfig, libraryOptions) {
    const resolvedResourceConfig = parseAmplifyConfig(resourceConfig);
    const cookieBasedKeyValueStorage = new CookieStorage({ sameSite: "lax" });
    const resolvedKeyValueStorage = (libraryOptions == null ? void 0 : libraryOptions.ssr) ? cookieBasedKeyValueStorage : defaultStorage;
    const resolvedCredentialsProvider = (libraryOptions == null ? void 0 : libraryOptions.ssr) ? new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(cookieBasedKeyValueStorage)) : cognitoCredentialsProvider;
    if (!resolvedResourceConfig.Auth) {
      Amplify.configure(resolvedResourceConfig, libraryOptions);
      return;
    }
    if (libraryOptions == null ? void 0 : libraryOptions.Auth) {
      Amplify.configure(resolvedResourceConfig, libraryOptions);
      return;
    }
    if (!Amplify.libraryOptions.Auth) {
      cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);
      cognitoUserPoolsTokenProvider.setKeyValueStorage(
        // TODO: allow configure with a public interface
        resolvedKeyValueStorage
      );
      Amplify.configure(resolvedResourceConfig, {
        ...libraryOptions,
        Auth: {
          tokenProvider: cognitoUserPoolsTokenProvider,
          credentialsProvider: resolvedCredentialsProvider
        }
      });
      return;
    }
    if (libraryOptions) {
      const authLibraryOptions = Amplify.libraryOptions.Auth;
      if (libraryOptions.ssr !== void 0) {
        cognitoUserPoolsTokenProvider.setKeyValueStorage(
          // TODO: allow configure with a public interface
          resolvedKeyValueStorage
        );
        authLibraryOptions.credentialsProvider = resolvedCredentialsProvider;
      }
      Amplify.configure(resolvedResourceConfig, {
        Auth: authLibraryOptions,
        ...libraryOptions
      });
      return;
    }
    Amplify.configure(resolvedResourceConfig);
  },
  /**
   * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling
   * `Amplify.configure`.
   *
   * @returns An {@link ResourcesConfig} object.
   */
  getConfig() {
    return Amplify.getConfig();
  }
};

// node_modules/@aws-amplify/ui/dist/esm/helpers/accountSettings/validator.mjs
var getPasswordRequirement = () => {
  var _a2;
  const config2 = DefaultAmplify.getConfig();
  const passwordSettings = (_a2 = config2 == null ? void 0 : config2.Auth) == null ? void 0 : _a2.Cognito.passwordFormat;
  if (!passwordSettings) {
    return null;
  }
  return {
    minLength: passwordSettings.minLength,
    needsLowerCase: passwordSettings.requireLowercase ?? false,
    needsUpperCase: passwordSettings.requireUppercase ?? false,
    needsNumber: passwordSettings.requireNumbers ?? false,
    needsSpecialChar: passwordSettings.requireSpecialCharacters ?? false
  };
};
var getHasMinLength = (minLength) => ({
  validationMode: "onTouched",
  validator: (field2) => field2.length >= minLength,
  message: `Password must have at least ${minLength} characters`
});
var hasLowerCase = {
  validationMode: "onTouched",
  validator: (field2) => /[a-z]/.test(field2),
  message: "Password must have lower case letters"
};
var hasUpperCase = {
  validationMode: "onTouched",
  validator: (field2) => /[A-Z]/.test(field2),
  message: "Password must have upper case letters"
};
var hasNumber = {
  validationMode: "onTouched",
  validator: (field2) => /[0-9]/.test(field2),
  message: "Password must have numbers"
};
var hasSpecialChar = {
  validationMode: "onTouched",
  validator: (field2) => hasSpecialChars(field2),
  message: "Password must have special characters"
};
var getMatchesConfirmPassword = (password) => {
  return {
    validationMode: "onTouched",
    validator: (confirmPassword) => password === confirmPassword,
    message: "Your passwords must match"
  };
};
var getDefaultPasswordValidators = () => {
  const requirement = getPasswordRequirement();
  if (!requirement)
    return [];
  const validators = [];
  const { minLength, needsLowerCase, needsUpperCase, needsNumber, needsSpecialChar } = requirement;
  if (minLength) {
    validators.push(getHasMinLength(minLength));
  }
  if (needsLowerCase) {
    validators.push(hasLowerCase);
  }
  if (needsUpperCase) {
    validators.push(hasUpperCase);
  }
  if (needsNumber) {
    validators.push(hasNumber);
  }
  if (needsSpecialChar) {
    validators.push(hasSpecialChar);
  }
  return validators;
};
var getDefaultConfirmPasswordValidators = (password) => {
  return [getMatchesConfirmPassword(password)];
};
var shouldValidate = ({ validationMode, eventType, hasBlurred }) => {
  switch (validationMode) {
    case "onBlur": {
      return eventType === "blur";
    }
    case "onChange": {
      return eventType === "change";
    }
    case "onTouched": {
      return eventType === "blur" || hasBlurred;
    }
  }
};
var runFieldValidators = ({ value, validators, eventType, hasBlurred }) => {
  if (!value)
    return [];
  return validators.reduce((prevErrors, validatorSpec) => {
    const { validator, validationMode, message: message2 } = validatorSpec;
    if (shouldValidate({ validationMode, eventType, hasBlurred })) {
      const hasError = !validator(value);
      return hasError ? [...prevErrors, message2] : prevErrors;
    }
    return prevErrors;
  }, []);
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/utils.mjs
var import_pickBy = __toESM(require_pickBy(), 1);
var DEFAULT_AUTO_SIGN_IN = true;
var EMPTY_STRING = "";
var sanitizePhoneNumber = (dialCode, phoneNumber) => `${dialCode}${phoneNumber}`.replace(/[^A-Z0-9+]/gi, "");
var selectUserAttributes = (_, key) => {
  switch (key) {
    case "address":
    case "birthdate":
    case "email":
    case "family_name":
    case "gender":
    case "given_name":
    case "locale":
    case "middle_name":
    case "name":
    case "nickname":
    case "phone_number":
    case "picture":
    case "preferred_username":
    case "profile":
    case "updated_at":
    case "website":
    case "zoneinfo":
      return true;
    default:
      return key.startsWith("custom:");
  }
};
var getUserAttributes = (formValues) => {
  const { phone_number, ...userAttributes } = (0, import_pickBy.default)(formValues, selectUserAttributes);
  if (isString2(phone_number) && phone_number !== EMPTY_STRING) {
    const { country_code } = formValues;
    return {
      ...userAttributes,
      phone_number: sanitizePhoneNumber(country_code, phone_number)
    };
  }
  return userAttributes;
};
var getSignUpInput = (username, formValues, loginMechanism) => {
  const { password, ...values } = formValues;
  const attributes = getUserAttributes(values);
  const options = {
    autoSignIn: DEFAULT_AUTO_SIGN_IN,
    userAttributes: {
      // use `username` value for `phone_number`
      ...loginMechanism === "phone_number" ? { ...attributes, phone_number: username } : attributes
    }
  };
  return { username, password, options };
};
var getUsernameSignUp = ({ formValues, loginMechanisms }) => {
  const loginMechanism = loginMechanisms[0];
  if (loginMechanism === "phone_number") {
    const { country_code, phone_number } = formValues;
    return sanitizePhoneNumber(country_code, phone_number);
  }
  return formValues[loginMechanism];
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actions.mjs
var { assign: assign5 } = actions_exports;
var clearActorDoneData = assign5({ actorDoneData: void 0 });
var clearChallengeName = assign5({ challengeName: void 0 });
var clearMissingAttributes = assign5({ missingAttributes: void 0 });
var clearError = assign5({ remoteError: void 0 });
var clearFormValues = assign5({ formValues: {} });
var clearTouched = assign5({ touched: {} });
var clearUser = assign5({ user: void 0 });
var clearValidationError = assign5({ validationError: {} });
var setTotpSecretCode = assign5({
  totpSecretCode: (_, { data }) => {
    var _a2;
    const { sharedSecret } = ((_a2 = data.nextStep) == null ? void 0 : _a2.totpSetupDetails) ?? {};
    return sharedSecret;
  }
});
var setAllowedMfaTypes = assign5({
  allowedMfaTypes: (_, { data }) => {
    var _a2;
    return (_a2 = data.nextStep) == null ? void 0 : _a2.allowedMFATypes;
  }
});
var setSignInStep = assign5({ step: "SIGN_IN" });
var setShouldVerifyUserAttributeStep = assign5({
  step: "SHOULD_CONFIRM_USER_ATTRIBUTE"
});
var setConfirmAttributeCompleteStep = assign5({
  step: "CONFIRM_ATTRIBUTE_COMPLETE"
});
var setChallengeName = assign5({
  challengeName: (_, { data }) => {
    const { signInStep } = data.nextStep;
    switch (signInStep) {
      case "CONFIRM_SIGN_IN_WITH_SMS_CODE":
        return "SMS_MFA";
      case "CONFIRM_SIGN_IN_WITH_TOTP_CODE":
        return "SOFTWARE_TOKEN_MFA";
      case "CONFIRM_SIGN_IN_WITH_EMAIL_CODE":
        return "EMAIL_OTP";
      case "CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION":
      case "CONTINUE_SIGN_IN_WITH_EMAIL_SETUP":
      case "CONTINUE_SIGN_IN_WITH_TOTP_SETUP":
        return "MFA_SETUP";
      case "CONTINUE_SIGN_IN_WITH_MFA_SELECTION":
        return "SELECT_MFA_TYPE";
      default:
        return void 0;
    }
  }
});
var setUsernameForgotPassword = assign5({
  username: ({ formValues, loginMechanisms }) => {
    const loginMechanism = loginMechanisms[0];
    const { username, country_code } = formValues;
    if (loginMechanism === "phone_number") {
      return sanitizePhoneNumber(country_code, username);
    }
    return username;
  }
});
var setUsernameSignUp = assign5({ username: getUsernameSignUp });
var setUsernameSignIn = assign5({
  username: ({ formValues, loginMechanisms }) => {
    const loginMechanism = loginMechanisms[0];
    const { username, country_code } = formValues;
    if (loginMechanism === "phone_number") {
      return sanitizePhoneNumber(country_code, username);
    }
    return username;
  }
});
var setNextSignInStep = assign5({
  step: (_, { data }) => data.nextStep.signInStep === "DONE" ? "SIGN_IN_COMPLETE" : data.nextStep.signInStep
});
var setNextSignUpStep = assign5({
  step: (_, { data }) => data.nextStep.signUpStep === "DONE" ? "SIGN_UP_COMPLETE" : data.nextStep.signUpStep
});
var setNextResetPasswordStep = assign5({
  step: (_, { data }) => data.nextStep.resetPasswordStep === "DONE" ? "RESET_PASSWORD_COMPLETE" : data.nextStep.resetPasswordStep
});
var setMissingAttributes = assign5({
  missingAttributes: (_, { data }) => {
    var _a2;
    return (_a2 = data.nextStep) == null ? void 0 : _a2.missingAttributes;
  }
});
var setFieldErrors = assign5({
  validationError: (_, { data }) => data
});
var setRemoteError = assign5({
  remoteError: (_, { data }) => {
    if (data.name === "NoUserPoolError") {
      return `Configuration error (see console) – please contact the administrator`;
    }
    return (data == null ? void 0 : data.message) || data;
  }
});
var setUser = assign5({ user: (_, { data }) => data });
var resolveCodeDeliveryDetails = (details) => ({
  Destination: details.destination,
  DeliveryMedium: details.deliveryMedium,
  AttributeName: details.attributName
});
var setCodeDeliveryDetails = assign5({
  codeDeliveryDetails: (_, { data }) => {
    var _a2;
    if ((_a2 = data == null ? void 0 : data.nextStep) == null ? void 0 : _a2.codeDeliveryDetails) {
      return resolveCodeDeliveryDetails(data.nextStep.codeDeliveryDetails);
    }
    return resolveCodeDeliveryDetails(data);
  }
});
var handleInput = assign5({
  formValues: (context2, { data }) => {
    const { name: name2, value } = data;
    return { ...context2["formValues"], [name2]: value };
  }
});
var handleSubmit = assign5({
  formValues: (context2, { data }) => (
    // do not trim password
    trimValues({ ...context2["formValues"], ...data }, "password")
  )
});
var handleBlur = assign5({
  touched: (context2, { data }) => ({
    ...context2["touched"],
    [data.name]: true
  })
});
var setUnverifiedUserAttributes = assign5({
  unverifiedUserAttributes: (_, { data }) => {
    const { email, phone_number } = data;
    const unverifiedUserAttributes = {
      ...email && { email },
      ...phone_number && { phone_number }
    };
    return unverifiedUserAttributes;
  }
});
var clearSelectedUserAttribute = assign5({ selectedUserAttribute: void 0 });
var setSelectedUserAttribute = assign5({
  selectedUserAttribute: (context2) => {
    var _a2;
    return (_a2 = context2.formValues) == null ? void 0 : _a2.unverifiedAttr;
  }
});
var setConfirmSignUpSignUpStep = assign5({ step: "CONFIRM_SIGN_UP" });
var ACTIONS = {
  clearActorDoneData,
  clearChallengeName,
  clearError,
  clearFormValues,
  clearMissingAttributes,
  clearSelectedUserAttribute,
  clearTouched,
  clearUser,
  clearValidationError,
  handleBlur,
  handleInput,
  handleSubmit,
  setAllowedMfaTypes,
  setChallengeName,
  setCodeDeliveryDetails,
  setFieldErrors,
  setMissingAttributes,
  setNextResetPasswordStep,
  setNextSignInStep,
  setNextSignUpStep,
  setRemoteError,
  setConfirmAttributeCompleteStep,
  setConfirmSignUpSignUpStep,
  setShouldVerifyUserAttributeStep,
  setSelectedUserAttribute,
  setSignInStep,
  setTotpSecretCode,
  setUser,
  setUnverifiedUserAttributes,
  setUsernameForgotPassword,
  setUsernameSignIn,
  setUsernameSignUp
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/guards.mjs
var SIGN_IN_STEP_MFA_CONFIRMATION = [
  "CONFIRM_SIGN_IN_WITH_SMS_CODE",
  "CONFIRM_SIGN_IN_WITH_TOTP_CODE",
  "CONFIRM_SIGN_IN_WITH_EMAIL_CODE"
];
var shouldConfirmSignInWithNewPassword = (_, { data }) => (data == null ? void 0 : data.nextStep.signInStep) === "CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED";
var shouldResetPasswordFromSignIn = (_, { data }) => {
  var _a2;
  return ((_a2 = data == null ? void 0 : data.nextStep) == null ? void 0 : _a2.signInStep) === "RESET_PASSWORD";
};
var shouldConfirmSignUpFromSignIn = (_, { data }) => (data == null ? void 0 : data.nextStep.signInStep) === "CONFIRM_SIGN_UP";
var shouldAutoSignIn = (_, { data }) => (data == null ? void 0 : data.nextStep.signUpStep) === "COMPLETE_AUTO_SIGN_IN";
var hasCompletedSignIn = (_, { data }) => (data == null ? void 0 : data.nextStep.signInStep) === "DONE";
var hasCompletedSignUp = (_, { data }) => (data == null ? void 0 : data.nextStep.signUpStep) === "DONE";
var hasCompletedResetPassword = (_, { data }) => (data == null ? void 0 : data.nextStep.resetPasswordStep) === "DONE";
var hasCompletedAttributeConfirmation = (_, { data }) => (data == null ? void 0 : data.step) === "CONFIRM_ATTRIBUTE_COMPLETE";
var isConfirmUserAttributeStep = (_, { data }) => (data == null ? void 0 : data.step) === "CONFIRM_ATTRIBUTE_WITH_CODE";
var isShouldConfirmUserAttributeStep = (_, { data }) => (data == null ? void 0 : data.step) === "SHOULD_CONFIRM_USER_ATTRIBUTE";
var isResetPasswordStep = (_, { data }) => (data == null ? void 0 : data.step) === "RESET_PASSWORD";
var isConfirmSignUpStep = (_, { data }) => (data == null ? void 0 : data.step) === "CONFIRM_SIGN_UP";
var shouldConfirmSignIn = ({ step }) => SIGN_IN_STEP_MFA_CONFIRMATION.includes(step);
var shouldSetupTotp = ({ step }) => step === "CONTINUE_SIGN_IN_WITH_TOTP_SETUP";
var shouldSetupEmail = ({ step }) => step === "CONTINUE_SIGN_IN_WITH_EMAIL_SETUP";
var shouldSelectMfaType = ({ step }) => [
  "CONTINUE_SIGN_IN_WITH_MFA_SELECTION",
  "CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION"
].includes(step);
var shouldResetPassword = ({ step }) => step === "RESET_PASSWORD";
var shouldConfirmResetPassword = ({ step }) => step === "CONFIRM_RESET_PASSWORD_WITH_CODE";
var shouldConfirmSignUp = ({ step }) => step === "CONFIRM_SIGN_UP";
var shouldVerifyAttribute = (_, { data }) => {
  const { email, phone_number, phone_number_verified, email_verified } = data;
  if (!email && !phone_number)
    return false;
  const emailNotVerified = email_verified === void 0 || email_verified === "false";
  const phoneNotVerified = phone_number_verified === void 0 || phone_number_verified === "false";
  return emailNotVerified && phoneNotVerified;
};
var isUserAlreadyConfirmed = (_, { data }) => data.message === "User is already confirmed.";
var GUARDS = {
  hasCompletedAttributeConfirmation,
  hasCompletedResetPassword,
  hasCompletedSignIn,
  hasCompletedSignUp,
  isConfirmSignUpStep,
  isConfirmUserAttributeStep,
  isResetPasswordStep,
  isShouldConfirmUserAttributeStep,
  isUserAlreadyConfirmed,
  shouldAutoSignIn,
  shouldConfirmResetPassword,
  shouldConfirmSignIn,
  shouldConfirmSignInWithNewPassword,
  shouldConfirmSignUp,
  shouldConfirmSignUpFromSignIn,
  shouldResetPassword,
  shouldResetPasswordFromSignIn,
  shouldSetupTotp,
  shouldSetupEmail,
  shouldSelectMfaType,
  shouldVerifyAttribute
};

// node_modules/@aws-amplify/ui/dist/esm/validators/index.mjs
var import_merge3 = __toESM(require_merge(), 1);
var runValidators = async (formData, touchData, passwordSettings, validators) => {
  const errors = await Promise.all(validators.map((validator) => validator(formData, touchData, passwordSettings)));
  const mergedError = (0, import_merge3.default)({}, ...errors);
  if (isEmpty2(mergedError)) {
    return Promise.resolve();
  } else {
    return Promise.reject(mergedError);
  }
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/defaultServices.mjs
var DEFAULT_COGNITO_PASSWORD_MIN_LENGTH = 8;
var isInvalidUserAtributes = (userAttributes) => Array.isArray(userAttributes);
var parseUserAttributes = (userAttributes) => {
  if (!userAttributes) {
    return void 0;
  }
  if (isInvalidUserAtributes(userAttributes)) {
    return Object.entries(userAttributes).map(([_, value]) => Object.keys(value)[0]);
  }
  return Object.keys(userAttributes);
};
var defaultServices = {
  async getAmplifyConfig() {
    var _a2, _b, _c, _d;
    const result = DefaultAmplify.getConfig();
    const cliConfig = (_a2 = result.Auth) == null ? void 0 : _a2.Cognito;
    const { loginWith, userAttributes } = ((_b = result.Auth) == null ? void 0 : _b.Cognito) ?? {};
    const parsedLoginMechanisms = loginWith ? Object.entries(loginWith).filter(([key, _value]) => key !== "oauth").filter(([_key, value]) => !!value).map((keyValueArray) => {
      return keyValueArray[0] === "phone" ? "phone_number" : keyValueArray[0];
    }) : void 0;
    const parsedSignupAttributes = parseUserAttributes(userAttributes);
    const parsedSocialProviders = ((_c = loginWith == null ? void 0 : loginWith.oauth) == null ? void 0 : _c.providers) ? (_d = loginWith.oauth.providers) == null ? void 0 : _d.map((provider) => provider.toString().toLowerCase()) : void 0;
    return {
      ...cliConfig,
      loginMechanisms: parsedLoginMechanisms,
      signUpAttributes: parsedSignupAttributes,
      socialProviders: parsedSocialProviders
    };
  },
  getCurrentUser: getCurrentUser2,
  handleSignIn: signIn,
  handleSignUp: signUp,
  handleConfirmSignIn: confirmSignIn,
  handleConfirmSignUp: confirmSignUp,
  handleForgotPasswordSubmit: confirmResetPassword,
  handleForgotPassword: resetPassword,
  handleResendSignUpCode: resendSignUpCode,
  // Validation hooks for overriding
  async validateCustomSignUp(_, __) {
  },
  async validateFormPassword(formData, touchData, passwordSettings) {
    const { password } = formData;
    const { password: touched_password } = touchData;
    if (!touched_password || !passwordSettings)
      return null;
    const password_complexity = [];
    const policyMinLength = passwordSettings.minLength ?? DEFAULT_COGNITO_PASSWORD_MIN_LENGTH;
    if (password.length < policyMinLength) {
      password_complexity.push(`Password must have at least ${policyMinLength} characters`);
    }
    if (passwordSettings.requireLowercase && !/[a-z]/.test(password))
      password_complexity.push("Password must have lower case letters");
    if (passwordSettings.requireUppercase && !/[A-Z]/.test(password))
      password_complexity.push("Password must have upper case letters");
    if (passwordSettings.requireNumbers && !/[0-9]/.test(password))
      password_complexity.push("Password must have numbers");
    if (passwordSettings.requireSpecialCharacters && !hasSpecialChars(password))
      password_complexity.push("Password must have special characters");
    return password_complexity.length !== 0 ? { password: password_complexity } : null;
  },
  async validateConfirmPassword(formData, touchData) {
    const { password, confirm_password } = formData;
    const { confirm_password: touched_confirm_password, password: touched_password } = touchData;
    if (!password && !confirm_password) {
      return null;
    } else if ((password || confirm_password) && password !== confirm_password && (touched_confirm_password && touched_password || (password == null ? void 0 : password.length) >= 6 && (confirm_password == null ? void 0 : confirm_password.length) >= 6)) {
      return {
        confirm_password: "Your passwords must match"
      };
    }
  },
  async validatePreferredUsername(_, __) {
  }
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/forgotPassword.mjs
function forgotPasswordActor({ services }) {
  return createMachine({
    id: "forgotPasswordActor",
    initial: "init",
    predictableActionArguments: true,
    states: {
      init: {
        always: [
          {
            cond: "shouldResetPassword",
            target: "confirmResetPassword"
          },
          {
            cond: "shouldConfirmResetPassword",
            target: "confirmResetPassword"
          },
          {
            target: "forgotPassword"
          }
        ]
      },
      forgotPassword: {
        initial: "edit",
        entry: "sendUpdate",
        exit: ["clearError", "clearTouched"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              CHANGE: { actions: "handleInput" },
              BLUR: { actions: "handleBlur" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["sendUpdate", "clearError", "setUsernameForgotPassword"],
            invoke: {
              src: "handleResetPassword",
              onDone: {
                actions: [
                  "setCodeDeliveryDetails",
                  "setNextResetPasswordStep"
                ],
                target: "#forgotPasswordActor.confirmResetPassword"
              },
              onError: {
                actions: "setRemoteError",
                target: "edit"
              }
            }
          }
        }
      },
      confirmResetPassword: {
        type: "parallel",
        exit: ["clearFormValues", "clearError", "clearTouched"],
        states: {
          validation: {
            initial: "pending",
            states: {
              pending: {
                invoke: {
                  src: "validateFields",
                  onDone: {
                    target: "valid",
                    actions: "clearValidationError"
                  },
                  onError: {
                    target: "invalid",
                    actions: "setFieldErrors"
                  }
                }
              },
              valid: { entry: "sendUpdate" },
              invalid: { entry: "sendUpdate" }
            },
            on: {
              CHANGE: {
                actions: "handleInput",
                target: ".pending"
              },
              BLUR: {
                actions: "handleBlur",
                target: ".pending"
              }
            }
          },
          submission: {
            initial: "idle",
            states: {
              idle: {
                entry: "sendUpdate",
                on: {
                  SUBMIT: { actions: "handleSubmit", target: "validate" },
                  RESEND: "resendCode",
                  CHANGE: { actions: "handleInput" },
                  BLUR: { actions: "handleBlur" }
                }
              },
              validate: {
                entry: "sendUpdate",
                invoke: {
                  src: "validateFields",
                  onDone: {
                    target: "pending",
                    actions: "clearValidationError"
                  },
                  onError: {
                    target: "idle",
                    actions: "setFieldErrors"
                  }
                }
              },
              resendCode: {
                tags: "pending",
                entry: ["clearError", "sendUpdate"],
                invoke: {
                  src: "handleResetPassword",
                  onDone: { target: "idle" },
                  onError: { actions: "setRemoteError", target: "idle" }
                }
              },
              pending: {
                tags: "pending",
                entry: ["clearError", "sendUpdate"],
                invoke: {
                  src: "handleConfirmResetPassword",
                  onDone: [
                    {
                      cond: "hasCompletedResetPassword",
                      actions: "setNextResetPasswordStep",
                      target: "#forgotPasswordActor.resolved"
                    },
                    {
                      actions: "setSignInStep",
                      target: "#forgotPasswordActor.resolved"
                    }
                  ],
                  onError: { actions: "setRemoteError", target: "idle" }
                }
              }
            }
          }
        }
      },
      resolved: {
        type: "final",
        data: ({ step }) => ({ step })
      }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...ACTIONS, sendUpdate: sendUpdate2() },
    guards: GUARDS,
    services: {
      handleResetPassword({ username }) {
        return services.handleForgotPassword({ username });
      },
      handleConfirmResetPassword({ formValues, username }) {
        const { confirmation_code: confirmationCode, password: newPassword } = formValues;
        return services.handleForgotPasswordSubmit({
          confirmationCode,
          newPassword,
          username
        });
      },
      validateFields(context2) {
        return runValidators(context2.formValues, context2.touched, context2.passwordSettings, [
          defaultServices.validateFormPassword,
          defaultServices.validateConfirmPassword
        ]);
      }
    }
  });
}

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/utils.mjs
var getFederatedSignInState = (target) => ({
  entry: ["sendUpdate", "clearError"],
  invoke: {
    src: "signInWithRedirect",
    onDone: { target },
    onError: { actions: "setRemoteError", target }
  }
});
var getConfirmSignInFormValuesKey = (signInStep) => {
  if ([
    "CONTINUE_SIGN_IN_WITH_MFA_SELECTION",
    "CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION"
  ].includes(signInStep)) {
    return "mfa_type";
  }
  if (signInStep === "CONTINUE_SIGN_IN_WITH_EMAIL_SETUP") {
    return "email";
  }
  return "confirmation_code";
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/signIn.mjs
var handleSignInResponse = {
  onDone: [
    {
      cond: "hasCompletedSignIn",
      actions: "setNextSignInStep",
      target: "#signInActor.fetchUserAttributes"
    },
    {
      cond: "shouldConfirmSignInWithNewPassword",
      actions: ["setMissingAttributes", "setNextSignInStep"],
      target: "#signInActor.forceChangePassword"
    },
    {
      cond: "shouldResetPasswordFromSignIn",
      actions: "setNextSignInStep",
      target: "#signInActor.resetPassword"
    },
    {
      cond: "shouldConfirmSignUpFromSignIn",
      actions: "setNextSignInStep",
      target: "#signInActor.resendSignUpCode"
    },
    {
      actions: [
        "setChallengeName",
        "setMissingAttributes",
        "setNextSignInStep",
        "setTotpSecretCode",
        "setAllowedMfaTypes"
      ],
      target: "#signInActor.init"
    }
  ],
  onError: { actions: "setRemoteError", target: "edit" }
};
var handleFetchUserAttributesResponse = {
  onDone: [
    {
      cond: "shouldVerifyAttribute",
      actions: [
        "setShouldVerifyUserAttributeStep",
        "setUnverifiedUserAttributes"
      ],
      target: "#signInActor.resolved"
    },
    {
      actions: "setConfirmAttributeCompleteStep",
      target: "#signInActor.resolved"
    }
  ],
  onError: {
    actions: "setConfirmAttributeCompleteStep",
    target: "#signInActor.resolved"
  }
};
var getDefaultConfirmSignInState = (exit) => ({
  initial: "edit",
  exit,
  states: {
    edit: {
      entry: "sendUpdate",
      on: {
        SUBMIT: { actions: "handleSubmit", target: "submit" },
        SIGN_IN: "#signInActor.signIn",
        CHANGE: { actions: "handleInput" }
      }
    },
    submit: {
      tags: "pending",
      entry: ["sendUpdate", "clearError"],
      invoke: { src: "confirmSignIn", ...handleSignInResponse }
    }
  }
});
function signInActor({ services }) {
  return createMachine({
    id: "signInActor",
    initial: "init",
    predictableActionArguments: true,
    states: {
      init: {
        always: [
          {
            cond: "shouldConfirmSignIn",
            target: "confirmSignIn"
          },
          {
            cond: "shouldSetupTotp",
            target: "setupTotp"
          },
          {
            cond: "shouldSetupEmail",
            target: "setupEmail"
          },
          {
            cond: "shouldSelectMfaType",
            target: "selectMfaType"
          },
          {
            cond: ({ step }) => step === "CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED",
            actions: "setActorDoneData",
            target: "forceChangePassword"
          },
          { target: "signIn" }
        ]
      },
      federatedSignIn: getFederatedSignInState("signIn"),
      fetchUserAttributes: {
        invoke: {
          src: "fetchUserAttributes",
          ...handleFetchUserAttributesResponse
        }
      },
      resendSignUpCode: {
        invoke: {
          src: "handleResendSignUpCode",
          onDone: {
            actions: "setCodeDeliveryDetails",
            target: "#signInActor.resolved"
          },
          onError: {
            actions: "setRemoteError",
            target: "#signInActor.signIn"
          }
        }
      },
      resetPassword: {
        invoke: {
          src: "resetPassword",
          onDone: [
            {
              actions: "setCodeDeliveryDetails",
              target: "#signInActor.resolved"
            }
          ],
          onError: { actions: ["setRemoteError", "sendUpdate"] }
        }
      },
      signIn: {
        initial: "edit",
        exit: "clearTouched",
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              CHANGE: { actions: "handleInput" },
              FEDERATED_SIGN_IN: { target: "#signInActor.federatedSignIn" },
              SUBMIT: { actions: "handleSubmit", target: "submit" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate", "setUsernameSignIn"],
            exit: "clearFormValues",
            invoke: { src: "handleSignIn", ...handleSignInResponse }
          }
        }
      },
      confirmSignIn: getDefaultConfirmSignInState([
        "clearChallengeName",
        "clearFormValues",
        "clearError",
        "clearTouched"
      ]),
      forceChangePassword: {
        entry: "sendUpdate",
        type: "parallel",
        exit: ["clearFormValues", "clearError", "clearTouched"],
        states: {
          validation: {
            initial: "pending",
            states: {
              pending: {
                invoke: {
                  src: "validateFields",
                  onDone: {
                    target: "valid",
                    actions: "clearValidationError"
                  },
                  onError: {
                    target: "invalid",
                    actions: "setFieldErrors"
                  }
                }
              },
              valid: { entry: "sendUpdate" },
              invalid: { entry: "sendUpdate" }
            },
            on: {
              SIGN_IN: {
                actions: "setSignInStep",
                target: "#signInActor.resolved"
              },
              CHANGE: {
                actions: "handleInput",
                target: ".pending"
              },
              BLUR: {
                actions: "handleBlur",
                target: ".pending"
              }
            }
          },
          submit: {
            initial: "edit",
            entry: "clearError",
            states: {
              edit: {
                entry: "sendUpdate",
                on: {
                  SUBMIT: { actions: "handleSubmit", target: "validate" }
                }
              },
              validate: {
                entry: "sendUpdate",
                invoke: {
                  src: "validateFields",
                  onDone: {
                    actions: "clearValidationError",
                    target: "pending"
                  },
                  onError: { actions: "setFieldErrors", target: "edit" }
                }
              },
              pending: {
                tags: "pending",
                entry: ["sendUpdate", "clearError"],
                invoke: {
                  src: "handleForceChangePassword",
                  ...handleSignInResponse
                }
              }
            }
          }
        }
      },
      setupTotp: getDefaultConfirmSignInState([
        "clearFormValues",
        "clearError",
        "clearTouched"
      ]),
      setupEmail: getDefaultConfirmSignInState([
        "clearFormValues",
        "clearError",
        "clearTouched"
      ]),
      selectMfaType: getDefaultConfirmSignInState([
        "clearFormValues",
        "clearError",
        "clearTouched"
      ]),
      resolved: {
        type: "final",
        data: (context2) => ({
          codeDeliveryDetails: context2.codeDeliveryDetails,
          remoteError: context2.remoteError,
          step: context2.step,
          unverifiedUserAttributes: context2.unverifiedUserAttributes,
          username: context2.username
        })
      }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...ACTIONS, sendUpdate: sendUpdate2() },
    guards: GUARDS,
    services: {
      async fetchUserAttributes() {
        return fetchUserAttributes2();
      },
      resetPassword({ username }) {
        return resetPassword({ username });
      },
      handleResendSignUpCode({ username }) {
        return services.handleResendSignUpCode({ username });
      },
      handleSignIn({ formValues, username }) {
        const { password } = formValues;
        return services.handleSignIn({ username, password });
      },
      confirmSignIn({ formValues, step }) {
        const formValuesKey = getConfirmSignInFormValuesKey(step);
        const { [formValuesKey]: challengeResponse } = formValues;
        return services.handleConfirmSignIn({ challengeResponse });
      },
      async handleForceChangePassword({ formValues }) {
        let {
          password: challengeResponse,
          phone_number,
          country_code,
          // destructure and toss UI confirm_password field
          // to prevent error from sending to confirmSignIn
          confirm_password,
          ...userAttributes
        } = formValues;
        let phoneNumberWithCountryCode;
        if (phone_number) {
          phoneNumberWithCountryCode = `${country_code}${phone_number}`.replace(/[^A-Z0-9+]/gi, "");
          userAttributes = {
            ...userAttributes,
            phone_number: phoneNumberWithCountryCode
          };
        }
        const input2 = {
          challengeResponse,
          options: { userAttributes }
        };
        return confirmSignIn(input2);
      },
      signInWithRedirect(_, { data }) {
        return signInWithRedirect(data);
      },
      async validateFields(context2) {
        return runValidators(context2.formValues, context2.touched, context2.passwordSettings, [
          defaultServices.validateFormPassword,
          defaultServices.validateConfirmPassword
        ]);
      }
    }
  });
}

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/signUp.mjs
var handleResetPasswordResponse = {
  onDone: [
    { actions: "setCodeDeliveryDetails", target: "#signUpActor.resolved" }
  ],
  onError: { actions: ["setRemoteError", "sendUpdate"] }
};
var handleAutoSignInResponse = {
  onDone: [
    {
      cond: "hasCompletedSignIn",
      actions: "setNextSignInStep",
      target: "#signUpActor.fetchUserAttributes"
    },
    {
      cond: "shouldConfirmSignInWithNewPassword",
      actions: "setNextSignInStep",
      target: "#signUpActor.resolved"
    },
    {
      cond: "shouldResetPasswordFromSignIn",
      actions: "setNextSignInStep",
      target: "#signUpActor.resetPassword"
    },
    {
      cond: "shouldConfirmSignUpFromSignIn",
      actions: "setNextSignInStep",
      target: "#signUpActor.resendSignUpCode"
    },
    {
      actions: [
        "setNextSignInStep",
        "setChallengeName",
        "setMissingAttributes",
        "setTotpSecretCode",
        "setAllowedMfaTypes"
      ],
      target: "#signUpActor.resolved"
    }
  ],
  onError: {
    actions: "setRemoteError",
    target: "#signUpActor.resolved"
  }
};
var handleFetchUserAttributesResponse2 = {
  onDone: [
    {
      cond: "shouldVerifyAttribute",
      actions: [
        "setShouldVerifyUserAttributeStep",
        "setUnverifiedUserAttributes"
      ],
      target: "#signUpActor.resolved"
    },
    {
      actions: "setConfirmAttributeCompleteStep",
      target: "#signUpActor.resolved"
    }
  ],
  onError: {
    actions: "setConfirmAttributeCompleteStep",
    target: "#signUpActor.resolved"
  }
};
function signUpActor({ services }) {
  return createMachine({
    id: "signUpActor",
    initial: "init",
    predictableActionArguments: true,
    states: {
      init: {
        always: [
          { cond: "shouldConfirmSignUp", target: "confirmSignUp" },
          { target: "signUp" }
        ]
      },
      autoSignIn: {
        tags: "pending",
        invoke: { src: "autoSignIn", ...handleAutoSignInResponse }
      },
      fetchUserAttributes: {
        invoke: {
          src: "fetchUserAttributes",
          ...handleFetchUserAttributesResponse2
        }
      },
      federatedSignIn: getFederatedSignInState("signUp"),
      resetPassword: {
        invoke: { src: "resetPassword", ...handleResetPasswordResponse }
      },
      resendSignUpCode: {
        tags: "pending",
        entry: "sendUpdate",
        exit: "sendUpdate",
        invoke: {
          src: "resendSignUpCode",
          onDone: {
            actions: ["setCodeDeliveryDetails", "sendUpdate"],
            target: "#signUpActor.confirmSignUp"
          },
          onError: [
            {
              cond: "isUserAlreadyConfirmed",
              target: "#signUpActor.resolved"
            },
            { actions: ["setRemoteError", "sendUpdate"] }
          ]
        }
      },
      signUp: {
        type: "parallel",
        exit: "clearTouched",
        on: {
          FEDERATED_SIGN_IN: { target: "federatedSignIn" }
        },
        states: {
          validation: {
            initial: "pending",
            states: {
              pending: {
                invoke: {
                  src: "validateSignUp",
                  onDone: {
                    actions: "clearValidationError",
                    target: "valid"
                  },
                  onError: { actions: "setFieldErrors", target: "invalid" }
                }
              },
              valid: { entry: "sendUpdate" },
              invalid: { entry: "sendUpdate" }
            },
            on: {
              BLUR: { actions: "handleBlur", target: ".pending" },
              CHANGE: { actions: "handleInput", target: ".pending" }
            }
          },
          submission: {
            initial: "idle",
            states: {
              idle: {
                entry: ["sendUpdate"],
                on: {
                  SUBMIT: { actions: "handleSubmit", target: "validate" }
                }
              },
              validate: {
                entry: "sendUpdate",
                invoke: {
                  src: "validateSignUp",
                  onDone: {
                    target: "handleSignUp",
                    actions: "clearValidationError"
                  },
                  onError: { actions: "setFieldErrors", target: "idle" }
                }
              },
              handleSignUp: {
                tags: "pending",
                entry: ["setUsernameSignUp", "clearError"],
                exit: "sendUpdate",
                invoke: {
                  src: "handleSignUp",
                  onDone: [
                    {
                      cond: "hasCompletedSignUp",
                      actions: "setNextSignUpStep",
                      target: "#signUpActor.resolved"
                    },
                    {
                      cond: "shouldAutoSignIn",
                      actions: "setNextSignUpStep",
                      target: "#signUpActor.autoSignIn"
                    },
                    {
                      actions: [
                        "setCodeDeliveryDetails",
                        "setNextSignUpStep"
                      ],
                      target: "#signUpActor.init"
                    }
                  ],
                  onError: {
                    actions: ["sendUpdate", "setRemoteError"],
                    target: "idle"
                  }
                }
              }
            }
          }
        }
      },
      confirmSignUp: {
        initial: "edit",
        entry: "sendUpdate",
        states: {
          edit: {
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              CHANGE: { actions: "handleInput" },
              BLUR: { actions: "handleBlur" },
              RESEND: "#signUpActor.resendSignUpCode"
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "confirmSignUp",
              onDone: [
                {
                  cond: "shouldAutoSignIn",
                  actions: ["setNextSignUpStep", "clearFormValues"],
                  target: "#signUpActor.autoSignIn"
                },
                {
                  actions: "setNextSignUpStep",
                  target: "#signUpActor.init"
                }
              ],
              onError: {
                actions: ["setRemoteError", "sendUpdate"],
                target: "edit"
              }
            }
          }
        }
      },
      resolved: {
        type: "final",
        data: (context2) => ({
          challengeName: context2.challengeName,
          missingAttributes: context2.missingAttributes,
          remoteError: context2.remoteError,
          step: context2.step,
          totpSecretCode: context2.totpSecretCode,
          username: context2.username,
          unverifiedUserAttributes: context2.unverifiedUserAttributes,
          allowedMfaTypes: context2.allowedMfaTypes
        })
      }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...ACTIONS, sendUpdate: sendUpdate2() },
    guards: GUARDS,
    services: {
      autoSignIn() {
        return autoSignIn();
      },
      async fetchUserAttributes() {
        return fetchUserAttributes2();
      },
      confirmSignUp({ formValues, username }) {
        const { confirmation_code: confirmationCode } = formValues;
        const input2 = { username, confirmationCode };
        return services.handleConfirmSignUp(input2);
      },
      resendSignUpCode({ username }) {
        return services.handleResendSignUpCode({ username });
      },
      signInWithRedirect(_, { data }) {
        return signInWithRedirect(data);
      },
      handleSignUp(context2) {
        const { formValues, loginMechanisms, username } = context2;
        const loginMechanism = loginMechanisms[0];
        const input2 = getSignUpInput(username, formValues, loginMechanism);
        return services.handleSignUp(input2);
      },
      async validateSignUp(context2) {
        return runValidators(context2.formValues, context2.touched, context2.passwordSettings, [
          // Validation of password
          services.validateFormPassword,
          // Validation for default form fields
          services.validateConfirmPassword,
          services.validatePreferredUsername,
          // Validation for any custom Sign Up fields
          services.validateCustomSignUp
        ]);
      }
    }
  });
}

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/signOut.mjs
var signOutActor = () => {
  return createMachine({
    initial: "pending",
    id: "signOutActor",
    predictableActionArguments: true,
    states: {
      pending: {
        tags: "pending",
        invoke: {
          src: "signOut",
          onDone: "resolved",
          onError: "rejected"
        }
      },
      resolved: { type: "final" },
      rejected: { type: "final" }
    }
  }, {
    services: {
      signOut: () => signOut()
    }
  });
};

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/verifyUserAttributes.mjs
function verifyUserAttributesActor() {
  return createMachine({
    id: "verifyUserAttributesActor",
    initial: "selectUserAttributes",
    predictableActionArguments: true,
    states: {
      selectUserAttributes: {
        initial: "edit",
        exit: ["clearError", "clearTouched", "sendUpdate"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              SKIP: { target: "#verifyUserAttributesActor.resolved" },
              CHANGE: { actions: "handleInput" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "sendUserAttributeVerificationCode",
              onDone: {
                actions: [
                  "setSelectedUserAttribute",
                  "setCodeDeliveryDetails"
                ],
                target: "#verifyUserAttributesActor.confirmVerifyUserAttribute"
              },
              onError: {
                actions: "setRemoteError",
                target: "edit"
              }
            }
          }
        }
      },
      confirmVerifyUserAttribute: {
        initial: "edit",
        exit: ["clearError", "clearFormValues", "clearTouched"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              SKIP: "#verifyUserAttributesActor.resolved",
              CHANGE: { actions: "handleInput" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "confirmVerifyUserAttribute",
              onDone: {
                actions: [
                  "setConfirmAttributeCompleteStep",
                  "clearSelectedUserAttribute"
                ],
                target: "#verifyUserAttributesActor.resolved"
              },
              onError: {
                actions: "setRemoteError",
                target: "edit"
              }
            }
          }
        }
      },
      resolved: { type: "final", data: ({ step }) => ({ step }) }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...ACTIONS, sendUpdate: sendUpdate2() },
    services: {
      sendUserAttributeVerificationCode({ formValues: { unverifiedAttr } }) {
        const input2 = {
          userAttributeKey: unverifiedAttr
        };
        return sendUserAttributeVerificationCode(input2);
      },
      async confirmVerifyUserAttribute({ formValues: { confirmation_code: confirmationCode }, selectedUserAttribute }) {
        const input2 = {
          confirmationCode,
          userAttributeKey: selectedUserAttribute
        };
        return confirmUserAttribute(input2);
      },
      async validateFields(context2) {
        return runValidators(context2.formValues, context2.touched, context2.passwordSettings, [
          defaultServices.validateFormPassword,
          defaultServices.validateConfirmPassword
        ]);
      }
    }
  });
}

// node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/index.mjs
var getActorContext2 = (context2, defaultStep) => {
  var _a2, _b, _c, _d, _e, _f;
  return {
    ...context2.actorDoneData,
    step: ((_a2 = context2 == null ? void 0 : context2.actorDoneData) == null ? void 0 : _a2.step) ?? defaultStep,
    // initialize empty objects on actor start
    formValues: {},
    touched: {},
    validationError: {},
    // values included on `context.config` that should be available in actors
    formFields: (_b = context2.config) == null ? void 0 : _b.formFields,
    loginMechanisms: (_c = context2.config) == null ? void 0 : _c.loginMechanisms,
    passwordSettings: (_d = context2.config) == null ? void 0 : _d.passwordSettings,
    signUpAttributes: (_e = context2.config) == null ? void 0 : _e.signUpAttributes,
    socialProviders: (_f = context2.config) == null ? void 0 : _f.socialProviders
  };
};
var { choose: choose3, stop: stop3 } = actions_exports;
var stopActor = (machineId) => stop3(machineId);
var LEGACY_WAIT_CONFIG = {
  on: {
    INIT: {
      actions: "configure",
      target: "getConfig"
    },
    SIGN_OUT: "#authenticator.signOut"
  }
};
var NEXT_WAIT_CONFIG = {
  always: { actions: "configure", target: "getConfig" }
};
function createAuthenticatorMachine(options) {
  const { useNextWaitConfig, ...overrideConfigServices } = options ?? {};
  const initConfig = useNextWaitConfig ? NEXT_WAIT_CONFIG : LEGACY_WAIT_CONFIG;
  return createMachine({
    id: "authenticator",
    initial: "idle",
    context: {
      user: void 0,
      config: {},
      services: defaultServices,
      actorRef: void 0,
      hasSetup: false
    },
    predictableActionArguments: true,
    states: {
      // See: https://xstate.js.org/docs/guides/communication.html#invoking-promises
      idle: {
        invoke: {
          src: "handleGetCurrentUser",
          onDone: { actions: "setUser", target: "setup" },
          onError: { target: "setup" }
        }
      },
      setup: {
        initial: "initConfig",
        states: {
          initConfig,
          getConfig: {
            invoke: {
              src: "getAmplifyConfig",
              onDone: [
                {
                  actions: ["applyAmplifyConfig", "setHasSetup"],
                  cond: "hasUser",
                  target: "#authenticator.authenticated"
                },
                {
                  actions: ["applyAmplifyConfig", "setHasSetup"],
                  target: "goToInitialState"
                }
              ]
            }
          },
          goToInitialState: {
            always: [
              {
                cond: "isInitialStateSignUp",
                target: "#authenticator.signUpActor"
              },
              {
                cond: "isInitialStateResetPassword",
                target: "#authenticator.forgotPasswordActor"
              },
              { target: "#authenticator.signInActor" }
            ]
          }
        }
      },
      getCurrentUser: {
        invoke: {
          src: "handleGetCurrentUser",
          onDone: {
            actions: "setUser",
            target: "#authenticator.authenticated"
          },
          onError: { target: "#authenticator.setup" }
        }
      },
      signInActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: { actions: "spawnSignInActor", target: "runActor" }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("signInActor")
          }
        },
        on: {
          FORGOT_PASSWORD: "forgotPasswordActor",
          SIGN_IN: "signInActor",
          SIGN_UP: "signUpActor",
          "done.invoke.signInActor": [
            {
              cond: "hasCompletedAttributeConfirmation",
              target: "#authenticator.getCurrentUser"
            },
            {
              cond: "isShouldConfirmUserAttributeStep",
              actions: "setActorDoneData",
              target: "#authenticator.verifyUserAttributesActor"
            },
            {
              cond: "isResetPasswordStep",
              actions: "setActorDoneData",
              target: "#authenticator.forgotPasswordActor"
            },
            {
              cond: "isConfirmSignUpStep",
              actions: "setActorDoneData",
              target: "#authenticator.signUpActor"
            }
          ]
        }
      },
      signUpActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: { actions: "spawnSignUpActor", target: "runActor" }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("signUpActor")
          }
        },
        on: {
          SIGN_IN: "signInActor",
          "done.invoke.signUpActor": [
            {
              cond: "hasCompletedAttributeConfirmation",
              target: "#authenticator.getCurrentUser"
            },
            {
              cond: "isShouldConfirmUserAttributeStep",
              actions: "setActorDoneData",
              target: "#authenticator.verifyUserAttributesActor"
            },
            {
              cond: "isConfirmUserAttributeStep",
              target: "#authenticator.verifyUserAttributesActor"
            },
            {
              actions: "setActorDoneData",
              target: "#authenticator.signInActor"
            }
          ]
        }
      },
      forgotPasswordActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: {
              actions: "spawnForgotPasswordActor",
              target: "runActor"
            }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("forgotPasswordActor")
          }
        },
        on: {
          SIGN_IN: "signInActor",
          "done.invoke.forgotPasswordActor": [
            { target: "#authenticator.signInActor" }
          ]
        }
      },
      verifyUserAttributesActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: {
              actions: "spawnVerifyUserAttributesActor",
              target: "runActor"
            }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("verifyUserAttributesActor")
          }
        },
        on: {
          "done.invoke.verifyUserAttributesActor": [
            {
              actions: "setActorDoneData",
              target: "#authenticator.getCurrentUser"
            }
          ]
        }
      },
      authenticated: {
        initial: "idle",
        states: {
          idle: { on: { TOKEN_REFRESH: "refreshUser" } },
          refreshUser: {
            invoke: {
              src: "#authenticator.getCurrentUser",
              onDone: { actions: "setUser", target: "idle" },
              onError: { target: "#authenticator.signOut" }
            }
          }
        },
        on: { SIGN_OUT: "signOut" }
      },
      signOut: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: { actions: "spawnSignOutActor", target: "runActor" }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: stopActor("signOutActor")
          }
        },
        on: {
          "done.invoke.signOutActor": {
            actions: "clearUser",
            target: "setup.getConfig"
          }
        }
      }
    },
    on: {
      SIGN_IN_WITH_REDIRECT: { target: "#authenticator.getCurrentUser" },
      CHANGE: { actions: "forwardToActor" },
      BLUR: { actions: "forwardToActor" },
      SUBMIT: { actions: "forwardToActor" },
      FEDERATED_SIGN_IN: { actions: "forwardToActor" },
      RESEND: { actions: "forwardToActor" },
      SIGN_IN: { actions: "forwardToActor" },
      SKIP: { actions: "forwardToActor" }
    }
  }, {
    actions: {
      ...ACTIONS,
      forwardToActor: choose3([
        { cond: "hasActor", actions: forwardTo2(({ actorRef }) => actorRef) }
      ]),
      setActorDoneData: assign3({
        actorDoneData: (_, event2) => ({
          challengeName: event2.data.challengeName,
          codeDeliveryDetails: event2.data.codeDeliveryDetails,
          missingAttributes: event2.data.missingAttributes,
          remoteError: event2.data.remoteError,
          username: event2.data.username,
          step: event2.data.step,
          totpSecretCode: event2.data.totpSecretCode,
          unverifiedUserAttributes: event2.data.unverifiedUserAttributes,
          allowedMfaTypes: event2.data.allowedMfaTypes
        })
      }),
      applyAmplifyConfig: assign3({
        config(context2, { data: cliConfig }) {
          const { loginMechanisms = cliConfig.loginMechanisms ?? [], signUpAttributes = cliConfig.signUpAttributes ?? [], socialProviders = cliConfig.socialProviders ?? [], initialState, formFields: _formFields, passwordSettings = cliConfig.passwordFormat ?? {} } = context2.config;
          if (loginMechanisms.length === 0) {
            loginMechanisms.push("username");
          }
          const formFields = convertFormFields(_formFields) ?? {};
          return {
            formFields,
            initialState,
            loginMechanisms,
            passwordSettings,
            signUpAttributes,
            socialProviders
          };
        }
      }),
      spawnSignInActor: assign3({
        actorRef: (context2, _) => {
          const { services } = context2;
          const actor = signInActor({ services }).withContext(getActorContext2(context2, "SIGN_IN"));
          return spawn(actor, { name: "signInActor" });
        }
      }),
      spawnSignUpActor: assign3({
        actorRef: (context2, _) => {
          const { services } = context2;
          const actor = signUpActor({ services }).withContext(getActorContext2(context2, "SIGN_UP"));
          return spawn(actor, { name: "signUpActor" });
        }
      }),
      spawnForgotPasswordActor: assign3({
        actorRef: (context2, _) => {
          const { services } = context2;
          const actor = forgotPasswordActor({ services }).withContext(getActorContext2(context2, "FORGOT_PASSWORD"));
          return spawn(actor, { name: "forgotPasswordActor" });
        }
      }),
      spawnVerifyUserAttributesActor: assign3({
        actorRef: (context2) => {
          const actor = verifyUserAttributesActor().withContext(getActorContext2(context2));
          return spawn(actor, { name: "verifyUserAttributesActor" });
        }
      }),
      spawnSignOutActor: assign3({
        actorRef: (context2) => {
          const actor = signOutActor().withContext({ user: context2 == null ? void 0 : context2.user });
          return spawn(actor, { name: "signOutActor" });
        }
      }),
      configure: assign3((_, event2) => {
        const { services: customServices, ...config2 } = !isEmptyObject(overrideConfigServices) ? overrideConfigServices : event2.data ?? {};
        return {
          services: { ...defaultServices, ...customServices },
          config: config2
        };
      }),
      setHasSetup: assign3({ hasSetup: true })
    },
    guards: {
      ...GUARDS,
      hasActor: ({ actorRef }) => !!actorRef,
      isInitialStateSignUp: ({ config: config2 }) => config2.initialState === "signUp",
      isInitialStateResetPassword: ({ config: config2 }) => config2.initialState === "forgotPassword",
      shouldSetup: ({ hasSetup }) => !hasSetup,
      hasUser: ({ user }) => {
        return !!user;
      }
    },
    services: {
      getAmplifyConfig: ({ services }) => services.getAmplifyConfig(),
      handleGetCurrentUser: ({ services }) => services.getCurrentUser()
    }
  });
}
function convertFormFields(formFields) {
  if (formFields) {
    Object.keys(formFields).forEach((component) => {
      Object.keys(formFields[component]).forEach((inputName) => {
        let ff = formFields[component][inputName];
        ff.required = ff.isRequired;
      });
    });
  }
  return formFields;
}

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/borderWidths.mjs
var borderWidths = {
  small: { value: "1px" },
  medium: { value: "2px" },
  large: { value: "3px" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/colors.mjs
var colors = {
  red: {
    10: { value: "hsl(0, 75%, 95%)" },
    20: { value: "hsl(0, 75%, 85%)" },
    40: { value: "hsl(0, 75%, 75%)" },
    60: { value: "hsl(0, 50%, 50%)" },
    80: { value: "hsl(0, 95%, 30%)" },
    90: { value: "hsl(0, 100%, 20%)" },
    100: { value: "hsl(0, 100%, 15%)" }
  },
  orange: {
    10: { value: "hsl(30, 75%, 95%)" },
    20: { value: "hsl(30, 75%, 85%)" },
    40: { value: "hsl(30, 75%, 75%)" },
    60: { value: "hsl(30, 50%, 50%)" },
    80: { value: "hsl(30, 95%, 30%)" },
    90: { value: "hsl(30, 100%, 20%)" },
    100: { value: "hsl(30, 100%, 15%)" }
  },
  yellow: {
    10: { value: "hsl(60, 75%, 95%)" },
    20: { value: "hsl(60, 75%, 85%)" },
    40: { value: "hsl(60, 75%, 75%)" },
    60: { value: "hsl(60, 50%, 50%)" },
    80: { value: "hsl(60, 95%, 30%)" },
    90: { value: "hsl(60, 100%, 20%)" },
    100: { value: "hsl(60, 100%, 15%)" }
  },
  green: {
    10: { value: "hsl(130, 60%, 95%)" },
    20: { value: "hsl(130, 60%, 90%)" },
    40: { value: "hsl(130, 44%, 63%)" },
    60: { value: "hsl(130, 43%, 46%)" },
    80: { value: "hsl(130, 33%, 37%)" },
    90: { value: "hsl(130, 27%, 29%)" },
    100: { value: "hsl(130, 22%, 23%)" }
  },
  teal: {
    10: { value: "hsl(190, 75%, 95%)" },
    20: { value: "hsl(190, 75%, 85%)" },
    40: { value: "hsl(190, 70%, 70%)" },
    60: { value: "hsl(190, 50%, 50%)" },
    80: { value: "hsl(190, 95%, 30%)" },
    90: { value: "hsl(190, 100%, 20%)" },
    100: { value: "hsl(190, 100%, 15%)" }
  },
  blue: {
    10: { value: "hsl(220, 95%, 95%)" },
    20: { value: "hsl(220, 85%, 85%)" },
    40: { value: "hsl(220, 70%, 70%)" },
    60: { value: "hsl(220, 50%, 50%)" },
    80: { value: "hsl(220, 95%, 30%)" },
    90: { value: "hsl(220, 100%, 20%)" },
    100: { value: "hsl(220, 100%, 15%)" }
  },
  purple: {
    10: { value: "hsl(300, 95%, 95%)" },
    20: { value: "hsl(300, 85%, 85%)" },
    40: { value: "hsl(300, 70%, 70%)" },
    60: { value: "hsl(300, 50%, 50%)" },
    80: { value: "hsl(300, 95%, 30%)" },
    90: { value: "hsl(300, 100%, 20%)" },
    100: { value: "hsl(300, 100%, 15%)" }
  },
  pink: {
    10: { value: "hsl(340, 95%, 95%)" },
    20: { value: "hsl(340, 90%, 85%)" },
    40: { value: "hsl(340, 70%, 70%)" },
    60: { value: "hsl(340, 50%, 50%)" },
    80: { value: "hsl(340, 95%, 30%)" },
    90: { value: "hsl(340, 100%, 20%)" },
    100: { value: "hsl(340, 100%, 15%)" }
  },
  neutral: {
    10: { value: "hsl(210, 5%, 98%)" },
    20: { value: "hsl(210, 5%, 94%)" },
    40: { value: "hsl(210, 5%, 87%)" },
    60: { value: "hsl(210, 10%, 58%)" },
    80: { value: "hsl(210, 10%, 40%)" },
    90: { value: "hsl(210, 25%, 25%)" },
    100: { value: "hsl(210, 50%, 10%)" }
  },
  primary: {
    10: { value: "{colors.teal.10.value}" },
    20: { value: "{colors.teal.20.value}" },
    40: { value: "{colors.teal.40.value}" },
    60: { value: "{colors.teal.60.value}" },
    80: { value: "{colors.teal.80.value}" },
    90: { value: "{colors.teal.90.value}" },
    100: { value: "{colors.teal.100.value}" }
  },
  secondary: {
    10: { value: "{colors.purple.10.value}" },
    20: { value: "{colors.purple.20.value}" },
    40: { value: "{colors.purple.40.value}" },
    60: { value: "{colors.purple.60.value}" },
    80: { value: "{colors.purple.80.value}" },
    90: { value: "{colors.purple.90.value}" },
    100: { value: "{colors.purple.100.value}" }
  },
  font: {
    primary: { value: "{colors.neutral.100.value}" },
    secondary: { value: "{colors.neutral.90.value}" },
    tertiary: { value: "{colors.neutral.80.value}" },
    disabled: { value: "{colors.neutral.60.value}" },
    inverse: { value: "{colors.white.value}" },
    interactive: { value: "{colors.primary.80.value}" },
    // Hover and Focus colors are intentionally different colors.
    // This allows users to distinguish between the current keyboard focus
    // and the location of their pointer
    hover: { value: "{colors.primary.90.value}" },
    // Focus color is set to 100 to ensure enough contrast for accessibility
    focus: { value: "{colors.primary.100.value}" },
    active: { value: "{colors.primary.100.value}" },
    info: { value: "{colors.blue.90.value}" },
    warning: { value: "{colors.orange.90.value}" },
    error: { value: "{colors.red.90.value}" },
    success: { value: "{colors.green.90.value}" }
  },
  background: {
    primary: { value: "{colors.white.value}" },
    secondary: { value: "{colors.neutral.10.value}" },
    tertiary: { value: "{colors.neutral.20.value}" },
    quaternary: { value: "{colors.neutral.60.value}" },
    disabled: { value: "{colors.background.tertiary.value}" },
    info: { value: "{colors.blue.10.value}" },
    warning: { value: "{colors.orange.10.value}" },
    error: { value: "{colors.red.10.value}" },
    success: { value: "{colors.green.10.value}" }
  },
  border: {
    primary: { value: "{colors.neutral.60.value}" },
    secondary: { value: "{colors.neutral.40.value}" },
    tertiary: { value: "{colors.neutral.20.value}" },
    disabled: { value: "{colors.border.tertiary.value}" },
    pressed: { value: "{colors.primary.100.value}" },
    // Focus color is set to 100 to ensure enough contrast for accessibility
    focus: { value: "{colors.primary.100.value}" },
    error: { value: "{colors.red.80.value}" },
    info: { value: "{colors.blue.80.value}" },
    success: { value: "{colors.green.80.value}" },
    warning: { value: "{colors.orange.80.value}" }
  },
  shadow: {
    primary: { value: "hsla(210, 50%, 10%, 0.25)" },
    secondary: { value: "hsla(210, 50%, 10%, 0.15)" },
    tertiary: { value: "hsla(210, 50%, 10%, 0.05)" }
  },
  overlay: {
    5: { value: "hsla(0, 0%, 0%, 0.05)" },
    10: { value: "hsla(0, 0%, 0%, 0.1)" },
    20: { value: "hsla(0, 0%, 0%, 0.2)" },
    30: { value: "hsla(0, 0%, 0%, 0.3)" },
    40: { value: "hsla(0, 0%, 0%, 0.4)" },
    50: { value: "hsla(0, 0%, 0%, 0.5)" },
    60: { value: "hsla(0, 0%, 0%, 0.6)" },
    70: { value: "hsla(0, 0%, 0%, 0.7)" },
    80: { value: "hsla(0, 0%, 0%, 0.8)" },
    90: { value: "hsla(0, 0%, 0%, 0.9)" }
  },
  black: { value: "hsl(0, 0%, 0%)" },
  white: { value: "hsl(0, 0%, 100%)" },
  transparent: { value: "transparent" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/alert.mjs
var alert = {
  // Default styles
  alignItems: { value: "center" },
  justifyContent: { value: "space-between" },
  color: { value: "{colors.font.primary.value}" },
  backgroundColor: { value: "{colors.background.tertiary.value}" },
  paddingBlock: { value: "{space.small.value}" },
  paddingInline: { value: "{space.medium.value}" },
  icon: {
    size: { value: "{fontSizes.xl.value}" }
  },
  heading: {
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" }
  },
  // Variations
  info: {
    color: { value: "{colors.font.info.value}" },
    backgroundColor: { value: "{colors.background.info.value}" }
  },
  error: {
    color: { value: "{colors.font.error.value}" },
    backgroundColor: { value: "{colors.background.error.value}" }
  },
  warning: {
    color: { value: "{colors.font.warning.value}" },
    backgroundColor: { value: "{colors.background.warning.value}" }
  },
  success: {
    color: { value: "{colors.font.success.value}" },
    backgroundColor: { value: "{colors.background.success.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/aiConversation.mjs
var aiConversation = {
  message: {
    backgroundColor: { value: "{colors.background.secondary.value}" },
    borderRadius: { value: "{radii.large.value}" },
    gap: { value: "{space.small.value}" },
    paddingBlock: { value: "{space.small.value}" },
    paddingInline: { value: "{space.small.value}" },
    user: {
      backgroundColor: { value: "{colors.background.secondary.value}" }
    },
    assistant: {
      backgroundColor: { value: "{colors.primary.10.value}" }
    },
    sender: {
      gap: { value: "{space.small.value}" },
      username: {
        color: { value: "{colors.font.primary.value}" },
        fontSize: { value: "inherit" },
        fontWeight: { value: "{fontWeights.bold.value}" }
      },
      timestamp: {
        color: { value: "{colors.font.tertiary.value}" },
        fontSize: { value: "inherit" },
        fontWeight: { value: "inherit" }
      }
    },
    body: { gap: { value: "{space.xs.value}" } },
    actions: { gap: { value: "{space.xs.value}" } }
  },
  form: {
    gap: { value: "{space.small.value}" },
    padding: { value: "{space.small.value}" }
  },
  attachment: {
    borderColor: { value: "{colors.border.secondary.value}" },
    borderWidth: { value: "{borderWidths.small.value}" },
    borderRadius: { value: "{radii.small.value}" },
    fontSize: { value: "{fontSizes.small.value}" },
    paddingBlock: { value: "{space.xxxs.value}" },
    paddingInline: { value: "{space.xs.value}" },
    gap: { value: "{space.xs.value}" },
    list: {
      padding: { value: "{space.xs.value}" },
      paddingBlockStart: { value: "0" },
      gap: { value: "{space.xxs.value}" }
    },
    name: {
      color: { value: "{colors.font.primary.value}" },
      fontSize: { value: "{fontSizes.small.value}" },
      fontWeight: { value: "{fontWeights.normal.value}" }
    },
    size: {
      color: { value: "{colors.font.tertiary.value}" },
      fontSize: { value: "{fontSizes.small.value}" },
      fontWeight: { value: "{fontWeights.normal.value}" }
    },
    remove: {
      padding: { value: "{space.xxs.value}" }
    },
    image: {
      width: { value: "{fontSizes.medium.value}" },
      height: { value: "{fontSizes.medium.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/autocomplete.mjs
var autocomplete = {
  menu: {
    width: { value: "100%" },
    marginBlockStart: { value: "{space.xxxs}" },
    backgroundColor: { value: "{colors.background.primary}" },
    borderColor: { value: "{colors.border.primary}" },
    borderWidth: { value: "{borderWidths.small}" },
    borderStyle: { value: "solid" },
    borderRadius: { value: "{radii.small}" },
    options: {
      display: { value: "flex" },
      flexDirection: { value: "column" },
      maxHeight: { value: "300px" }
    },
    option: {
      backgroundColor: { value: "{colors.background.primary}" },
      color: { value: "currentcolor" },
      cursor: { value: "pointer" },
      transitionDuration: { value: "{time.short}" },
      transitionProperty: { value: "background-color, color" },
      transitionTimingFunction: { value: "ease" },
      _active: {
        backgroundColor: { value: "{colors.primary.80}" },
        color: { value: "{colors.white}" }
      }
    },
    _empty: {
      display: { value: "flex" }
    },
    _loading: {
      alignItems: { value: "center" },
      display: { value: "flex" },
      gap: { value: "{space.xxxs}" }
    },
    spaceShared: {
      paddingBlock: { value: "{space.xs}" },
      paddingInline: { value: "{space.small}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/authenticator.mjs
var authenticator = {
  maxWidth: { value: "60rem" },
  modal: {
    width: { value: "{space.relative.full}" },
    height: { value: "{space.relative.full}" },
    backgroundColor: { value: "{colors.overlay.50.value}" },
    top: { value: "{space.zero}" },
    left: { value: "{space.zero}" }
  },
  container: {
    widthMax: { value: "30rem" }
  },
  router: {
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    borderColor: { value: "{colors.border.primary.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    boxShadow: { value: "{shadows.medium.value}" }
  },
  footer: {
    paddingBottom: { value: "{space.medium.value}" }
  },
  form: {
    padding: { value: "{space.xl.value}" }
  },
  state: {
    inactive: {
      backgroundColor: { value: "{colors.background.secondary.value}" }
    }
  },
  orContainer: {
    color: { value: "{colors.neutral.80.value}" },
    orLine: {
      backgroundColor: { value: "{colors.background.primary.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/avatar.mjs
var avatar = {
  // Default styles
  color: { value: "{colors.font.tertiary.value}" },
  lineHeight: { value: 1 },
  fontWeight: { value: "{fontWeights.semibold.value}" },
  fontSize: { value: "{fontSizes.small.value}" },
  textAlign: { value: "center" },
  width: { value: "{fontSizes.xxl.value}" },
  height: { value: "{fontSizes.xxl.value}" },
  backgroundColor: { value: "{colors.background.tertiary}" },
  borderRadius: { value: "100%" },
  borderColor: { value: "{colors.border.primary.value}" },
  borderWidth: { value: "{borderWidths.medium.value}" },
  // Color Theme Variations
  info: {
    color: { value: "{colors.font.info.value}" },
    backgroundColor: { value: "{colors.background.info.value}" },
    borderColor: { value: "{colors.border.info.value}" }
  },
  warning: {
    color: { value: "{colors.font.warning.value}" },
    backgroundColor: { value: "{colors.background.warning.value}" },
    borderColor: { value: "{colors.border.warning.value}" }
  },
  success: {
    color: { value: "{colors.font.success.value}" },
    backgroundColor: { value: "{colors.background.success.value}" },
    borderColor: { value: "{colors.border.success.value}" }
  },
  error: {
    color: { value: "{colors.font.error.value}" },
    backgroundColor: { value: "{colors.background.error.value}" },
    borderColor: { value: "{colors.border.error.value}" }
  },
  // Sizes
  small: {
    fontSize: { value: "{fontSizes.xs.value}" },
    width: { value: "{fontSizes.xl.value}" },
    height: { value: "{fontSizes.xl.value}" }
  },
  // medium is the default size
  large: {
    fontSize: { value: "{fontSizes.medium.value}" },
    width: { value: "{fontSizes.xxxl.value}" },
    height: { value: "{fontSizes.xxxl.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/badge.mjs
var badge = {
  // Default styles
  color: { value: "{colors.font.primary.value}" },
  lineHeight: { value: 1 },
  fontWeight: { value: "{fontWeights.semibold.value}" },
  fontSize: { value: "{fontSizes.small.value}" },
  textAlign: { value: "center" },
  paddingVertical: { value: "{space.xs.value}" },
  paddingHorizontal: { value: "{space.small.value}" },
  backgroundColor: { value: "{colors.background.tertiary.value}" },
  // An arbitrarily large value to ensure that the left and right sides of the badge are perfectly rounded for any size variation
  borderRadius: { value: "{radii.xl.value}" },
  // Variations
  info: {
    color: { value: "{colors.font.info.value}" },
    backgroundColor: { value: "{colors.background.info.value}" }
  },
  warning: {
    color: { value: "{colors.font.warning.value}" },
    backgroundColor: { value: "{colors.background.warning.value}" }
  },
  success: {
    color: { value: "{colors.font.success.value}" },
    backgroundColor: { value: "{colors.background.success.value}" }
  },
  error: {
    color: { value: "{colors.font.error.value}" },
    backgroundColor: { value: "{colors.background.error.value}" }
  },
  // Sizes
  small: {
    fontSize: { value: "{fontSizes.xs.value}" },
    paddingVertical: { value: "{space.xxs.value}" },
    paddingHorizontal: { value: "{space.xs.value}" }
  },
  // medium is the default size
  large: {
    fontSize: { value: "{fontSizes.medium.value}" },
    paddingVertical: { value: "{space.small.value}" },
    paddingHorizontal: { value: "{space.medium.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/breadcrumbs.mjs
var breadcrumbs = {
  flexDirection: { value: "row" },
  flexWrap: { value: "wrap" },
  gap: { value: "0" },
  color: { value: "{colors.font.tertiary}" },
  item: {
    flexDirection: { value: "row" },
    color: { value: "inherit" },
    fontSize: { value: "inherit" },
    alignItems: { value: "center" },
    lineHeight: { value: "1" }
  },
  separator: {
    color: { value: "inherit" },
    fontSize: { value: "inherit" },
    paddingInline: { value: "{space.xxs}" }
  },
  link: {
    color: { value: "{components.link.color}" },
    fontSize: { value: "inherit" },
    fontWeight: { value: "normal" },
    textDecoration: { value: "none" },
    paddingInline: { value: "{space.xs}" },
    paddingBlock: { value: "{space.xxs}" },
    current: {
      color: { value: "inherit" },
      fontSize: { value: "inherit" },
      fontWeight: { value: "normal" },
      textDecoration: { value: "none" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/button.mjs
var button = {
  // shared styles
  fontWeight: { value: "{fontWeights.bold.value}" },
  transitionDuration: {
    value: "{components.fieldcontrol.transitionDuration.value}"
  },
  fontSize: { value: "{components.fieldcontrol.fontSize.value}" },
  lineHeight: { value: "{components.fieldcontrol.lineHeight.value}" },
  paddingBlockStart: {
    value: "{components.fieldcontrol.paddingBlockStart.value}"
  },
  paddingBlockEnd: {
    value: "{components.fieldcontrol.paddingBlockEnd.value}"
  },
  paddingInlineStart: {
    value: "{components.fieldcontrol.paddingInlineStart.value}"
  },
  paddingInlineEnd: {
    value: "{components.fieldcontrol.paddingInlineEnd.value}"
  },
  backgroundColor: { value: "transparent" },
  borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
  borderWidth: { value: "{components.fieldcontrol.borderWidth.value}" },
  borderStyle: { value: "{components.fieldcontrol.borderStyle.value}" },
  borderRadius: { value: "{components.fieldcontrol.borderRadius.value}" },
  color: { value: "{colors.font.primary.value}" },
  _hover: {
    color: { value: "{colors.font.focus.value}" },
    backgroundColor: { value: "{colors.primary.10.value}" },
    borderColor: { value: "{colors.primary.60.value}" }
  },
  _focus: {
    color: { value: "{colors.font.focus.value}" },
    backgroundColor: { value: "{colors.primary.10.value}" },
    borderColor: { value: "{colors.border.focus.value}" },
    boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
  },
  _active: {
    color: { value: "{colors.font.active.value}" },
    backgroundColor: { value: "{colors.primary.20.value}" },
    borderColor: { value: "{colors.primary.100.value}" }
  },
  _loading: {
    color: { value: "{colors.font.disabled.value}" },
    backgroundColor: { value: "transparent" },
    borderColor: { value: "{colors.border.tertiary.value}" }
  },
  _disabled: {
    color: { value: "{colors.font.disabled.value}" },
    backgroundColor: { value: "transparent" },
    borderColor: { value: "{colors.border.tertiary.value}" }
  },
  // variations
  outlined: {
    info: {
      borderColor: { value: "{colors.blue.60.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.blue.100}" },
      _hover: {
        borderColor: { value: "{colors.blue.60.value}" },
        backgroundColor: { value: "{colors.blue.10.value}" },
        color: { value: "{colors.blue.100.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.blue.100.value}" },
        backgroundColor: { value: "{colors.blue.10.value}" },
        color: { value: "{colors.blue.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.info._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.blue.100.value}" },
        backgroundColor: { value: "{colors.blue.20.value}" },
        color: { value: "{colors.blue.100.value}" }
      }
    },
    warning: {
      borderColor: { value: "{colors.orange.60.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.orange.100}" },
      _hover: {
        borderColor: { value: "{colors.orange.60.value}" },
        backgroundColor: { value: "{colors.orange.10.value}" },
        color: { value: "{colors.orange.100.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.orange.100.value}" },
        backgroundColor: { value: "{colors.orange.10.value}" },
        color: { value: "{colors.orange.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.warning._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.orange.100.value}" },
        backgroundColor: { value: "{colors.orange.20.value}" },
        color: { value: "{colors.orange.100.value}" }
      }
    },
    success: {
      borderColor: { value: "{colors.green.60.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.green.100}" },
      _hover: {
        borderColor: { value: "{colors.green.60.value}" },
        backgroundColor: { value: "{colors.green.10.value}" },
        color: { value: "{colors.green.100.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.green.100.value}" },
        backgroundColor: { value: "{colors.green.10.value}" },
        color: { value: "{colors.green.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.success._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.green.100.value}" },
        backgroundColor: { value: "{colors.green.20.value}" },
        color: { value: "{colors.green.100.value}" }
      }
    },
    error: {
      borderColor: { value: "{colors.red.80.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.red.100}" },
      _hover: {
        borderColor: { value: "{colors.red.80.value}" },
        backgroundColor: { value: "{colors.red.10.value}" },
        color: { value: "{colors.red.100.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.red.100.value}" },
        backgroundColor: { value: "{colors.red.10.value}" },
        color: { value: "{colors.red.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.red.100.value}" },
        backgroundColor: { value: "{colors.red.20.value}" },
        color: { value: "{colors.red.100.value}" }
      }
    },
    overlay: {
      borderColor: { value: "{colors.overlay.60.value}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.primary.value}" },
      _hover: {
        borderColor: { value: "{colors.overlay.60.value}" },
        backgroundColor: { value: "{colors.overlay.5.value}" },
        color: { value: "{colors.neutral.90.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.overlay.90.value}" },
        backgroundColor: { value: "{colors.overlay.5.value}" },
        color: { value: "{colors.neutral.90.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.overlay._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "{colors.overlay.90.value}" },
        backgroundColor: { value: "{colors.overlay.10.value}" },
        color: { value: "{colors.neutral.100.value}" }
      }
    }
  },
  primary: {
    borderColor: { value: "transparent" },
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    backgroundColor: { value: "{colors.primary.80.value}" },
    color: { value: "{colors.font.inverse.value}" },
    _disabled: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.background.disabled.value}" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _loading: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.background.disabled.value}" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _hover: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.90.value}" },
      color: { value: "{colors.font.inverse.value}" }
    },
    _focus: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.90.value}" },
      color: { value: "{colors.font.inverse.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    },
    _active: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.100.value}" },
      color: { value: "{colors.font.inverse.value}" }
    },
    info: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.blue.80}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.info._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.100.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    },
    warning: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.orange.80}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.overlay._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.100.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    },
    error: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.red.80}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.100.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    },
    success: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.green.80}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.success._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.100.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    },
    overlay: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.overlay.70}" },
      color: { value: "{colors.font.inverse.value}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.90.value}" },
        color: { value: "{colors.font.inverse.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.overlay._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.90.value}" },
        color: { value: "{colors.font.inverse.value}" }
      }
    }
  },
  menu: {
    borderWidth: { value: "{space.zero.value}" },
    backgroundColor: { value: "transparent" },
    justifyContent: { value: "start" },
    // Focus and hover styles are identical for menu variation
    // because for Menu primitive, menu items are forced to be focused even
    // for mouse interactions, making it impossible to distinguish the two interactions
    _hover: {
      color: { value: "{colors.font.inverse.value}" },
      backgroundColor: { value: "{colors.primary.80.value}" }
    },
    _focus: {
      color: { value: "{colors.font.inverse.value}" },
      backgroundColor: { value: "{colors.primary.80.value}" }
    },
    _active: {
      color: { value: "{colors.font.inverse.value}" },
      backgroundColor: { value: "{colors.primary.90.value}" }
    },
    _disabled: {
      color: { value: "{colors.font.disabled.value}" }
    }
  },
  link: {
    backgroundColor: { value: "transparent" },
    borderColor: { value: "transparent" },
    borderWidth: { value: "{borderWidths.small.value}" },
    color: { value: "{colors.font.interactive.value}" },
    _hover: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.10.value}" },
      color: { value: "{colors.font.hover.value}" }
    },
    _focus: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.10.value}" },
      color: { value: "{colors.font.focus.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    },
    _active: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.primary.20.value}" },
      color: { value: "{colors.font.active.value}" }
    },
    _disabled: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _loading: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.disabled.value}" }
    },
    info: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.blue.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.10.value}" },
        color: { value: "{colors.blue.90.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.10.value}" },
        color: { value: "{colors.blue.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.info._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.blue.20.value}" },
        color: { value: "{colors.blue.100.value}" }
      }
    },
    warning: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.orange.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.10.value}" },
        color: { value: "{colors.orange.90.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.10.value}" },
        color: { value: "{colors.orange.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.warning._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.orange.20.value}" },
        color: { value: "{colors.orange.100.value}" }
      }
    },
    success: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.green.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.10.value}" },
        color: { value: "{colors.green.90.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.10.value}" },
        color: { value: "{colors.green.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.success._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.green.20.value}" },
        color: { value: "{colors.green.100.value}" }
      }
    },
    error: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.red.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.10.value}" },
        color: { value: "{colors.red.90.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.10.value}" },
        color: { value: "{colors.red.100.value}" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.red.20.value}" },
        color: { value: "{colors.red.100.value}" }
      }
    },
    overlay: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.neutral.100}" },
      _hover: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.5.value}" },
        color: { value: "{colors.overlay.80.value}" }
      },
      _focus: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.5.value}" },
        color: { value: "{colors.overlay.90.value}" },
        boxShadow: {
          value: "{components.fieldcontrol.overlay._focus.boxShadow.value}"
        }
      },
      _active: {
        borderColor: { value: "transparent" },
        backgroundColor: { value: "{colors.overlay.10.value}" },
        color: { value: "{colors.overlay.90.value}" }
      }
    }
  },
  warning: {
    backgroundColor: { value: "transparent" },
    borderColor: { value: "{colors.red.60}" },
    borderWidth: { value: "{borderWidths.small}" },
    color: { value: "{colors.red.60}" },
    _hover: {
      borderColor: { value: "{colors.red.80}" },
      backgroundColor: { value: "{colors.red.10}" },
      color: { value: "{colors.font.error}" }
    },
    _focus: {
      borderColor: { value: "{colors.red.80}" },
      backgroundColor: { value: "{colors.red.10}" },
      color: { value: "{colors.red.80}" },
      boxShadow: { value: "{components.fieldcontrol._error._focus.boxShadow}" }
    },
    _active: {
      borderColor: { value: "{colors.red.100}" },
      backgroundColor: { value: "{colors.red.20}" },
      color: { value: "{colors.red.100}" }
    },
    _disabled: {
      borderColor: { value: "{colors.border.tertiary}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.disabled}" }
    },
    _loading: {
      borderColor: { value: "{colors.border.tertiary}" },
      backgroundColor: { value: "transparent" },
      color: { value: "{colors.font.disabled}" }
    }
  },
  destructive: {
    borderColor: { value: "transparent" },
    borderWidth: { value: "{borderWidths.small}" },
    borderStyle: { value: "solid" },
    backgroundColor: { value: "{colors.red.60}" },
    color: { value: "{colors.font.inverse}" },
    _disabled: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.background.disabled}" },
      color: { value: "{colors.font.disabled}" }
    },
    _loading: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.background.disabled}" },
      color: { value: "{colors.font.disabled}" }
    },
    _hover: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.red.80}" },
      color: { value: "{colors.font.inverse}" }
    },
    _focus: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.red.80}" },
      color: { value: "{colors.font.inverse}" },
      boxShadow: { value: "{components.fieldcontrol._error._focus.boxShadow}" }
    },
    _active: {
      borderColor: { value: "transparent" },
      backgroundColor: { value: "{colors.red.100}" },
      color: { value: "{colors.font.inverse}" }
    }
  },
  // sizes
  small: {
    fontSize: { value: "{components.fieldcontrol.small.fontSize.value}" },
    paddingBlockStart: {
      value: "{components.fieldcontrol.small.paddingBlockStart.value}"
    },
    paddingBlockEnd: {
      value: "{components.fieldcontrol.small.paddingBlockEnd.value}"
    },
    paddingInlineStart: {
      value: "{components.fieldcontrol.small.paddingInlineStart.value}"
    },
    paddingInlineEnd: {
      value: "{components.fieldcontrol.small.paddingInlineEnd.value}"
    }
  },
  large: {
    fontSize: { value: "{components.fieldcontrol.large.fontSize.value}" },
    paddingBlockStart: {
      value: "{components.fieldcontrol.large.paddingBlockStart.value}"
    },
    paddingBlockEnd: {
      value: "{components.fieldcontrol.large.paddingBlockEnd.value}"
    },
    paddingInlineStart: {
      value: "{components.fieldcontrol.large.paddingInlineStart.value}"
    },
    paddingInlineEnd: {
      value: "{components.fieldcontrol.large.paddingInlineEnd.value}"
    }
  },
  loaderWrapper: {
    alignItems: {
      value: "center"
    },
    gap: {
      value: "{space.xs.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/card.mjs
var card = {
  backgroundColor: { value: "{colors.background.primary.value}" },
  borderRadius: { value: "{radii.xs.value}" },
  borderWidth: { value: "0" },
  borderStyle: { value: "solid" },
  borderColor: { value: "transparent" },
  boxShadow: { value: "none" },
  padding: { value: "{space.medium.value}" },
  outlined: {
    backgroundColor: { value: "{components.card.backgroundColor.value}" },
    borderRadius: { value: "{radii.xs.value}" },
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    borderColor: { value: "{colors.border.primary.value}" },
    boxShadow: { value: "{components.card.boxShadow.value}" }
  },
  elevated: {
    backgroundColor: { value: "{components.card.backgroundColor.value}" },
    borderRadius: { value: "{radii.xs.value}" },
    borderWidth: { value: "0" },
    borderStyle: { value: "solid" },
    borderColor: { value: "transparent" },
    boxShadow: { value: "{shadows.medium.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/checkbox.mjs
var checkbox = {
  cursor: { value: "pointer" },
  alignItems: { value: "center" },
  _disabled: {
    cursor: {
      value: "not-allowed"
    }
  },
  button: {
    position: { value: "relative" },
    alignItems: { value: "center" },
    justifyContent: { value: "center" },
    color: { value: "{colors.font.inverse.value}" },
    before: {
      width: { value: "100%" },
      height: { value: "100%" },
      borderWidth: { value: "{borderWidths.medium.value}" },
      borderRadius: { value: "20%" },
      borderStyle: { value: "solid" },
      borderColor: { value: "{colors.border.primary.value}" }
    },
    _focus: {
      outlineColor: { value: "{colors.transparent.value}" },
      outlineStyle: { value: "solid" },
      outlineWidth: { value: "{outlineWidths.medium.value}" },
      outlineOffset: { value: "{outlineOffsets.medium.value}" },
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    },
    _disabled: {
      borderColor: { value: "{colors.border.disabled.value}" }
    },
    _error: {
      borderColor: { value: "{colors.border.error.value}" },
      _focus: {
        borderColor: { value: "{colors.border.error.value}" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      }
    }
  },
  icon: {
    backgroundColor: { value: "{colors.primary.80.value}" },
    borderRadius: { value: "20%" },
    opacity: { value: "{opacities.0.value}" },
    transform: { value: "scale(0)" },
    transitionProperty: { value: "all" },
    transitionDuration: { value: "{time.short.value}" },
    transitionTimingFunction: { value: "ease-in-out" },
    _checked: {
      opacity: { value: "{opacities.100.value}" },
      transform: { value: "scale(1)" },
      _disabled: {
        backgroundColor: { value: "{colors.background.disabled.value}" }
      }
    },
    _indeterminate: {
      opacity: { value: "{opacities.100.value}" },
      transform: { value: "scale(1)" },
      _disabled: {
        backgroundColor: { value: "{colors.background.disabled.value}" }
      }
    }
  },
  label: {
    color: { value: "{components.text.color.value}" },
    _disabled: {
      color: {
        value: "{colors.font.disabled.value}"
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/checkboxField.mjs
var checkboxfield = {
  alignItems: { value: "flex-start" },
  alignContent: { value: "center" },
  flexDirection: { value: "column" },
  justifyContent: { value: "center" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/collection.mjs
var collection = {
  pagination: {
    current: {
      color: { value: "{components.pagination.current.color}" },
      backgroundColor: {
        value: "{components.pagination.current.backgroundColor}"
      }
    },
    button: {
      color: { value: "{components.pagination.button.color}" },
      _hover: {
        backgroundColor: {
          value: "{components.pagination.button.hover.backgroundColor}"
        },
        color: { value: "{components.pagination.button.hover.color}" }
      },
      _disabled: {
        color: { value: "{components.pagination.button.disabled.color}" }
      }
    }
  },
  search: {
    input: {
      color: { value: "{components.searchfield.color}" }
    },
    button: {
      color: { value: "{components.searchfield.button.color}" },
      _active: {
        backgroundColor: {
          value: "{components.searchfield.button._active.backgroundColor}"
        },
        borderColor: {
          value: "{components.searchfield.button._active.borderColor}"
        },
        color: { value: "{components.searchfield.button._active.color}" }
      },
      _disabled: {
        backgroundColor: {
          value: "{components.searchfield.button._disabled.backgroundColor}"
        },
        borderColor: {
          value: "{components.searchfield.button._disabled.borderColor}"
        },
        color: {
          value: "{components.searchfield.button._disabled.color}"
        }
      },
      _focus: {
        backgroundColor: {
          value: "{components.searchfield.button._focus.backgroundColor}"
        },
        borderColor: {
          value: "{components.searchfield.button._focus.borderColor}"
        },
        color: { value: "{components.searchfield.button._focus.color}" }
      },
      _hover: {
        backgroundColor: {
          value: "{components.searchfield.button._hover.backgroundColor}"
        },
        borderColor: {
          value: "{components.searchfield.button._hover.borderColor}"
        },
        color: { value: "{components.searchfield.button._hover.color}" }
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/copy.mjs
var copy = {
  fontSize: { value: "{fontSizes.xs}" },
  gap: { value: "{space.relative.medium}" },
  svg: {
    path: {
      fill: {
        value: "{colors.font.primary}"
      }
    }
  },
  toolTip: {
    bottom: { value: "{space.large}" },
    color: { value: "{colors.teal.100}" },
    fontSize: { value: "{fontSizes.xxs}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/dialCodeSelect.mjs
var dialcodeselect = {
  height: {
    value: "{space.relative.full.value}"
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/divider.mjs
var divider = {
  borderStyle: { value: "solid" },
  borderColor: { value: "{colors.border.primary.value}" },
  borderWidth: { value: "{borderWidths.medium.value}" },
  label: {
    color: { value: "{colors.font.tertiary.value}" },
    paddingInline: { value: "{space.medium.value}" },
    fontSize: { value: "{fontSizes.small.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" }
  },
  small: {
    borderWidth: { value: "{borderWidths.small.value}" }
  },
  large: {
    borderWidth: { value: "{borderWidths.large.value}" }
  },
  opacity: {
    value: "{opacities.60.value}"
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/dropZone.mjs
var dropzone = {
  backgroundColor: { value: "{colors.background.primary}" },
  borderRadius: { value: "{radii.small}" },
  borderColor: { value: "{colors.border.primary}" },
  borderStyle: { value: "dashed" },
  borderWidth: { value: "{borderWidths.small}" },
  color: { value: "{colors.font.primary}" },
  gap: { value: "{space.small}" },
  paddingBlock: { value: "{space.xl}" },
  paddingInline: { value: "{space.large}" },
  textAlign: { value: "center" },
  _active: {
    backgroundColor: { value: "{colors.primary.10}" },
    borderRadius: { value: "{components.dropzone.borderRadius}" },
    borderColor: { value: "{colors.border.pressed}" },
    borderStyle: { value: "{components.dropzone.borderStyle}" },
    borderWidth: { value: "{components.dropzone.borderWidth}" },
    color: { value: "{colors.font.primary}" }
  },
  _disabled: {
    backgroundColor: { value: "{colors.background.disabled}" },
    borderRadius: { value: "{components.dropzone.borderRadius}" },
    borderColor: { value: "{colors.border.disabled}" },
    borderStyle: { value: "{components.dropzone.borderStyle}" },
    borderWidth: { value: "{components.dropzone.borderWidth}" },
    color: { value: "{colors.font.disabled}" }
  },
  accepted: {
    backgroundColor: { value: "{colors.background.success}" },
    borderRadius: { value: "{components.dropzone.borderRadius}" },
    borderColor: { value: "{colors.border.success}" },
    borderStyle: { value: "{components.dropzone.borderStyle}" },
    borderWidth: { value: "{components.dropzone.borderWidth}" },
    color: { value: "{colors.font.success}" }
  },
  rejected: {
    backgroundColor: { value: "{colors.background.error}" },
    borderRadius: { value: "{components.dropzone.borderRadius}" },
    borderColor: { value: "{colors.border.pressed}" },
    borderStyle: { value: "{components.dropzone.borderStyle}" },
    borderWidth: { value: "{components.dropzone.borderWidth}" },
    color: { value: "{colors.font.error}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/accordion.mjs
var accordion = {
  backgroundColor: { value: "{colors.background.primary.value}" },
  item: {
    borderColor: { value: "{colors.border.secondary.value}" },
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    borderRadius: { value: "{radii.small.value}" },
    trigger: {
      alignItems: { value: "center" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      color: { value: "inherit" },
      gap: { value: "{space.small.value}" },
      justifyContent: { value: "space-between" },
      paddingBlock: { value: "{space.xs.value}" },
      paddingInline: { value: "{space.small.value}" },
      _hover: {
        color: { value: "inherit" },
        backgroundColor: { value: "{colors.overlay.5.value}" }
      },
      _focus: {
        borderColor: { value: "{colors.border.focus.value}" },
        boxShadow: {
          value: {
            offsetX: "0",
            offsetY: "0",
            blurRadius: "0",
            spreadRadius: "2px",
            color: "{colors.border.focus.value}"
          }
        }
      }
    },
    content: {
      color: { value: "inherit" },
      paddingInline: { value: "{space.small.value}" },
      paddingBlockEnd: { value: "{space.small.value}" },
      paddingBlockStart: { value: "{space.xxxs.value}" }
    },
    icon: {
      color: { value: "{colors.font.tertiary.value}" },
      transitionDuration: { value: "{time.medium.value}" },
      transitionTimingFunction: { value: "cubic-bezier(0.87, 0, 0.13, 1)" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/field.mjs
var field = {
  // default styles
  gap: { value: "{space.xs.value}" },
  fontSize: { value: "{fontSizes.medium.value}" },
  flexDirection: { value: "column" },
  // Adjust base fontSize and gap for small and large sizes
  small: {
    gap: { value: "{space.xxxs.value}" },
    fontSize: { value: "{fontSizes.small.value}" }
  },
  large: {
    gap: { value: "{space.small.value}" },
    fontSize: { value: "{fontSizes.large.value}" }
  },
  label: {
    color: { value: "{colors.font.secondary.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldControl.mjs
var fieldcontrol = {
  borderStyle: { value: "solid" },
  borderColor: { value: "{colors.border.primary.value}" },
  borderWidth: { value: "{borderWidths.small.value}" },
  borderRadius: { value: "{radii.small.value}" },
  color: { value: "{colors.font.primary.value}" },
  paddingBlockStart: {
    value: "{space.xs.value}"
  },
  paddingBlockEnd: {
    value: "{space.xs.value}"
  },
  paddingInlineStart: {
    value: "{space.medium.value}"
  },
  paddingInlineEnd: {
    value: "{space.medium.value}"
  },
  fontSize: { value: "{components.field.fontSize.value}" },
  lineHeight: { value: "{lineHeights.medium.value}" },
  transitionDuration: { value: "{time.medium.value}" },
  outlineColor: { value: "{colors.transparent.value}" },
  outlineStyle: { value: "solid" },
  outlineWidth: { value: "{outlineWidths.medium.value}" },
  outlineOffset: { value: "{outlineOffsets.medium.value}" },
  small: {
    fontSize: { value: "{components.field.small.fontSize.value}" },
    paddingBlockStart: {
      value: "{space.xxs.value}"
    },
    paddingBlockEnd: {
      value: "{space.xxs.value}"
    },
    paddingInlineStart: {
      value: "{space.small.value}"
    },
    paddingInlineEnd: {
      value: "{space.small.value}"
    }
  },
  large: {
    fontSize: { value: "{components.field.large.fontSize.value}" },
    paddingBlockStart: {
      value: "{space.xs.value}"
    },
    paddingBlockEnd: {
      value: "{space.xs.value}"
    },
    paddingInlineStart: {
      value: "{space.medium.value}"
    },
    paddingInlineEnd: {
      value: "{space.medium.value}"
    }
  },
  quiet: {
    borderStyle: { value: "none" },
    borderInlineStart: { value: "none" },
    borderInlineEnd: { value: "none" },
    borderBlockStart: { value: "none" },
    borderRadius: { value: "0" },
    _focus: {
      borderBlockEndColor: { value: "transparent" },
      boxShadow: {
        value: "{components.fieldcontrol._focus.boxShadow.value}"
      }
    },
    _error: {
      borderBlockEndColor: { value: "{colors.border.error.value}" },
      _focus: {
        borderBlockEndColor: { value: "transparent" },
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      }
    }
  },
  _focus: {
    // These focus styles have been calibrated to create
    // a highly visible focus indicator per WCAG 2.2 guidlines:
    // See: https://www.w3.org/TR/WCAG22/#focus-appearance
    //
    // Key features:
    // * Focus indicator area is at least the 2 CSS px perimeter around the component.
    // * Contrast between focused and unfocused area of contrast has a ratio of 3:1
    //
    // IMPORTANT: Must recalibrate if `colors.border.focus` are changed
    borderColor: { value: "{colors.border.focus.value}" },
    boxShadow: {
      value: {
        offsetX: "0px",
        offsetY: "0px",
        blurRadius: "0px",
        spreadRadius: "2px",
        color: "{colors.border.focus.value}"
      }
    }
  },
  _disabled: {
    color: { value: "{colors.font.disabled.value}" },
    cursor: { value: "not-allowed" },
    borderColor: { value: "{colors.transparent.value}" },
    backgroundColor: { value: "{colors.background.disabled.value}" }
  },
  _error: {
    borderColor: { value: "{colors.border.error.value}" },
    color: { value: "{colors.font.error.value}" },
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.border.error.value}"
        }
      }
    }
  },
  info: {
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.blue.100.value}"
        }
      }
    }
  },
  warning: {
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.orange.100.value}"
        }
      }
    }
  },
  success: {
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.green.100.value}"
        }
      }
    }
  },
  overlay: {
    _focus: {
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "2px",
          color: "{colors.overlay.90.value}"
        }
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldGroup.mjs
var fieldgroup = {
  gap: { value: "{space.zero.value}" },
  vertical: {
    alignItems: { value: "center" }
  },
  outer: {
    alignItems: { value: "center" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldset.mjs
var fieldset = {
  backgroundColor: { value: "transparent" },
  borderRadius: { value: "{radii.xs.value}" },
  flexDirection: {
    value: "column"
  },
  gap: { value: "{components.field.gap.value}" },
  legend: {
    color: { value: "{colors.font.primary.value}" },
    fontSize: { value: "{components.field.fontSize.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" },
    lineHeight: { value: "{lineHeights.medium.value}" },
    small: {
      fontSize: "{components.field.small.fontSize.value}"
    },
    large: {
      fontSize: "{components.field.large.fontSize.value}"
    }
  },
  outlined: {
    padding: "{space.medium.value}",
    borderColor: "{colors.neutral.40.value}",
    borderWidth: "{borderWidths.small.value}",
    borderStyle: "solid",
    small: {
      padding: "{space.small.value}"
    },
    large: {
      padding: "{space.large.value}"
    }
  },
  small: {
    gap: "{components.field.small.gap.value}"
  },
  large: {
    gap: "{components.field.large.gap.value}"
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fieldMessages.mjs
var fieldmessages = {
  error: {
    color: { value: "{colors.font.error.value}" },
    fontSize: { value: "{fontSizes.small.value}" }
  },
  description: {
    color: { value: "{colors.font.secondary.value}" },
    fontStyle: { value: "italic" },
    fontSize: { value: "{fontSizes.small.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/fileuploader.mjs
var fileuploader = {
  dropzone: {
    backgroundColor: { value: "{colors.background.primary}" },
    borderRadius: { value: "{radii.small}" },
    borderColor: { value: "{colors.border.primary}" },
    borderStyle: { value: "dashed" },
    borderWidth: { value: "{borderWidths.small}" },
    gap: { value: "{space.small}" },
    paddingBlock: { value: "{space.xl}" },
    paddingInline: { value: "{space.large}" },
    textAlign: { value: "center" },
    _active: {
      backgroundColor: { value: "{colors.primary.10}" },
      borderRadius: {
        value: "{components.fileuploader.dropzone.borderRadius}"
      },
      borderColor: { value: "{colors.border.pressed}" },
      borderStyle: {
        value: "{components.fileuploader.dropzone.borderStyle}"
      },
      borderWidth: { value: "{borderWidths.medium}" }
    },
    icon: {
      color: { value: "{colors.border.primary}" },
      fontSize: { value: "{fontSizes.xxl}" }
    },
    text: {
      color: { value: "{colors.font.tertiary}" },
      fontSize: { value: "{fontSizes.medium}" },
      fontWeight: { value: "{fontWeights.bold}" }
    }
  },
  file: {
    backgroundColor: { value: "{colors.background.primary}" },
    borderRadius: { value: "{radii.small}" },
    borderColor: { value: "{colors.border.primary}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small}" },
    paddingBlock: { value: "{space.xs}" },
    paddingInline: { value: "{space.small}" },
    gap: { value: "{space.small}" },
    alignItems: { value: "baseline" },
    name: {
      fontSize: { value: "{fontSizes.medium}" },
      fontWeight: { value: "{fontWeights.bold}" },
      color: { value: "{colors.font.primary}" }
    },
    size: {
      fontSize: { value: "{fontSizes.small}" },
      fontWeight: { value: "{fontWeights.normal}" },
      color: { value: "{colors.font.tertiary}" }
    },
    image: {
      width: { value: "{space.xxl}" },
      height: { value: "{space.xxl}" },
      backgroundColor: { value: "{colors.background.secondary}" },
      color: { value: "{colors.font.tertiary}" },
      borderRadius: { value: "{radii.small}" }
    }
  },
  filelist: {
    flexDirection: { value: "column" },
    gap: { value: "{space.small}" }
  },
  loader: {
    strokeLinecap: { value: "round" },
    strokeEmpty: { value: "{colors.border.secondary}" },
    strokeFilled: { value: "{components.loader.strokeFilled}" },
    strokeWidth: { value: "{borderWidths.large}" }
  },
  previewer: {
    backgroundColor: { value: "{colors.background.primary}" },
    borderColor: { value: "{colors.border.primary}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small}" },
    borderRadius: { value: "{radii.small}" },
    paddingBlock: { value: "{space.zero}" },
    paddingInline: { value: "{space.zero}" },
    maxHeight: { value: "40rem" },
    maxWidth: { value: "auto" },
    text: {
      fontSize: { value: "{fontSizes.medium}" },
      fontWeight: { value: "{fontWeights.bold}" },
      color: { value: "{colors.font.primary}" }
    },
    body: {
      paddingBlock: { value: "{space.medium}" },
      paddingInline: { value: "{space.medium}" },
      gap: { value: "{space.small}" }
    },
    footer: {
      justifyContent: { value: "flex-end" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/flex.mjs
var flex = {
  gap: { value: "{space.medium.value}" },
  justifyContent: { value: "normal" },
  alignItems: { value: "stretch" },
  alignContent: { value: "normal" },
  flexWrap: { value: "nowrap" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/heading.mjs
var heading = {
  color: { value: "{colors.font.primary.value}" },
  lineHeight: { value: "{lineHeights.small.value}" },
  1: {
    fontSize: { value: "{fontSizes.xxxxl.value}" },
    fontWeight: { value: "{fontWeights.light.value}" }
  },
  2: {
    fontSize: { value: "{fontSizes.xxxl.value}" },
    fontWeight: { value: "{fontWeights.normal.value}" }
  },
  3: {
    fontSize: { value: "{fontSizes.xxl.value}" },
    fontWeight: { value: "{fontWeights.medium.value}" }
  },
  4: {
    fontSize: { value: "{fontSizes.xl.value}" },
    fontWeight: { value: "{fontWeights.semibold.value}" }
  },
  5: {
    fontSize: { value: "{fontSizes.large.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" }
  },
  6: {
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.extrabold.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/highlightMatch.mjs
var highlightmatch = {
  highlighted: {
    fontWeight: { value: "{fontWeights.bold}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/icon.mjs
var icon = {
  lineHeight: { value: 1 },
  height: { value: "1em" }
  // Should match height of parent container font-size
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/input.mjs
var input = {
  color: { value: "{components.fieldcontrol.color.value}" },
  borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
  fontSize: { value: "{components.fieldcontrol.fontSize.value}" },
  _focus: {
    borderColor: {
      value: "{components.fieldcontrol._focus.borderColor.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/image.mjs
var image = {
  maxWidth: { value: "100%" },
  height: { value: "auto" },
  objectFit: { value: "initial" },
  objectPosition: { value: "initial" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/inAppMessaging.mjs
var inappmessaging = {
  banner: {
    height: { value: "150px " },
    width: { value: "400px " }
  },
  button: {
    backgroundColor: { value: "#e8e8e8" },
    borderRadius: { value: "5px" },
    color: { value: "black" }
  },
  dialog: {
    height: { value: "50vh" },
    minHeight: { value: "400px" },
    minWidth: { value: "400px" },
    width: { value: "30vw" }
  },
  header: {
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.extrabold.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/link.mjs
var link = {
  active: { color: { value: "{colors.font.active.value}" } },
  color: { value: "{colors.font.interactive.value}" },
  focus: { color: { value: "{colors.font.focus.value}" } },
  hover: { color: { value: "{colors.font.hover.value}" } },
  visited: { color: { value: "{colors.font.interactive.value}" } }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/liveness.mjs
var liveness = {
  cameraModule: {
    backgroundColor: { value: "{colors.background.primary.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/loader.mjs
var loader = {
  width: { value: "{fontSizes.medium.value}" },
  height: { value: "{fontSizes.medium.value}" },
  fontSize: { value: "{fontSizes.xs.value}" },
  strokeEmpty: { value: "{colors.neutral.20.value}" },
  strokeFilled: { value: "{colors.primary.80.value}" },
  strokeLinecap: { value: "round" },
  animationDuration: { value: "1s" },
  small: {
    width: { value: "{fontSizes.small.value}" },
    height: { value: "{fontSizes.small.value}" },
    fontSize: { value: "{fontSizes.xxs.value}" }
  },
  large: {
    width: { value: "{fontSizes.large.value}" },
    height: { value: "{fontSizes.large.value}" },
    fontSize: { value: "{fontSizes.small.value}" }
  },
  linear: {
    width: { value: "100%" },
    minWidth: { value: "5rem" },
    fontSize: { value: "{fontSizes.xxs.value}" },
    strokeWidth: { value: "{fontSizes.xxs.value}" },
    strokeFilled: { value: "{colors.primary.80.value}" },
    strokeEmpty: { value: "{colors.neutral.20.value}" },
    strokeLinecap: { value: "round" },
    animationDuration: { value: "1s" },
    small: {
      strokeWidth: { value: "{fontSizes.xxxs.value}" },
      fontSize: { value: "{fontSizes.xxxs.value}" }
    },
    large: {
      strokeWidth: { value: "{fontSizes.xs.value}" },
      fontSize: { value: "{fontSizes.xs.value}" }
    }
  },
  text: {
    fill: { value: "{colors.font.primary.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/menu.mjs
var menu = {
  backgroundColor: { value: "{colors.background.primary.value}" },
  borderRadius: { value: "{radii.medium.value}" },
  borderWidth: { value: "{borderWidths.small.value}" },
  borderStyle: { value: "solid" },
  borderColor: { value: "{colors.border.primary.value}" },
  boxShadow: { value: "{shadows.large.value}" },
  flexDirection: { value: "column" },
  gap: { value: "{space.zero.value}" },
  maxWidth: { value: "30rem" },
  minWidth: { value: "14rem" },
  small: {
    width: { value: "{fontSizes.medium.value}" },
    height: { value: "{fontSizes.medium.value}" }
  },
  large: {
    width: { value: "{fontSizes.xxxl.value}" },
    height: { value: "{fontSizes.xxxl.value}" }
  },
  item: {
    minHeight: { value: "2.5rem" },
    paddingInlineStart: { value: "{space.medium.value}" },
    paddingInlineEnd: { value: "{space.medium.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/message.mjs
var message = {
  // Default styles
  alignItems: { value: "center" },
  backgroundColor: { value: "{colors.background.tertiary.value}" },
  borderColor: { value: "transparent" },
  borderStyle: { value: "solid" },
  borderWidth: { value: "{borderWidths.small.value}" },
  borderRadius: { value: "{radii.xs.value}" },
  color: { value: "{colors.font.primary.value}" },
  justifyContent: { value: "flex-start" },
  paddingBlock: { value: "{space.small.value}" },
  paddingInline: { value: "{space.medium.value}" },
  lineHeight: { value: "{lineHeights.small.value}" },
  icon: {
    size: { value: "{fontSizes.xl.value}" }
  },
  heading: {
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" }
  },
  dismiss: {
    gap: { value: "{space.xxs.value}" }
  },
  // Variations
  plain: {
    color: { value: "{colors.font.primary.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    borderColor: { value: "transparent" },
    info: {
      color: { value: "{colors.font.info.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "transparent" }
    },
    error: {
      color: { value: "{colors.font.error.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "transparent" }
    },
    success: {
      color: { value: "{colors.font.success.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "transparent" }
    },
    warning: {
      color: { value: "{colors.font.warning.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "transparent" }
    }
  },
  outlined: {
    color: { value: "{colors.font.primary.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    borderColor: { value: "{colors.border.primary.value}" },
    info: {
      color: { value: "{colors.font.info.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.info.value}" }
    },
    error: {
      color: { value: "{colors.font.error.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.error.value}" }
    },
    success: {
      color: { value: "{colors.font.success.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.success.value}" }
    },
    warning: {
      color: { value: "{colors.font.warning.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.warning.value}" }
    }
  },
  filled: {
    color: { value: "{colors.font.primary.value}" },
    backgroundColor: { value: "{colors.background.secondary.value}" },
    borderColor: { value: "transparent" },
    info: {
      color: { value: "{colors.font.info.value}" },
      backgroundColor: { value: "{colors.background.info.value}" },
      borderColor: { value: "transparent" }
    },
    error: {
      color: { value: "{colors.font.error.value}" },
      backgroundColor: { value: "{colors.background.error.value}" },
      borderColor: { value: "transparent" }
    },
    success: {
      color: { value: "{colors.font.success.value}" },
      backgroundColor: { value: "{colors.background.success.value}" },
      borderColor: { value: "transparent" }
    },
    warning: {
      color: { value: "{colors.font.warning.value}" },
      backgroundColor: { value: "{colors.background.warning.value}" },
      borderColor: { value: "transparent" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/pagination.mjs
var pagination = {
  current: {
    alignItems: { value: "center" },
    justifyContent: { value: "center" },
    color: { value: "{colors.font.inverse.value}" },
    fontSize: { value: "{fontSizes.small.value}" },
    backgroundColor: { value: "{colors.overlay.40.value}" }
  },
  button: {
    color: { value: "{colors.font.primary.value}" },
    paddingInlineStart: { value: "{space.xxs.value}" },
    paddingInlineEnd: { value: "{space.xxs.value}" },
    transitionProperty: { value: "background-color" },
    transitionDuration: { value: "{time.medium.value}" },
    hover: {
      backgroundColor: { value: "{colors.overlay.10.value}" },
      color: { value: "{colors.font.primary.value}" }
    },
    disabled: {
      color: { value: "{colors.font.disabled.value}" }
    }
  },
  ellipsis: {
    alignItems: { value: "baseline" },
    justifyContent: { value: "center" },
    paddingInlineStart: { value: "{space.xs.value}" },
    paddingInlineEnd: { value: "{space.xs.value}" }
  },
  itemContainer: {
    marginLeft: { value: "{space.xxxs.value}" },
    marginRight: { value: "{space.xxxs.value}" }
  },
  itemShared: {
    height: { value: "{fontSizes.xxl.value}" },
    minWidth: { value: "{fontSizes.xxl.value}" },
    borderRadius: { value: "{fontSizes.medium.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/passwordField.mjs
var passwordfield = {
  color: { value: "{components.fieldcontrol.color.value}" },
  button: {
    color: { value: "{components.button.color.value}" },
    _active: {
      backgroundColor: {
        value: "{components.button._active.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._active.borderColor.value}" },
      color: { value: "{components.button._active.color.value}" }
    },
    _disabled: {
      backgroundColor: {
        value: "{components.button._disabled.backgroundColor.value}"
      },
      borderColor: {
        value: "{components.button._disabled.borderColor.value}"
      },
      color: { value: "{components.button._disabled.color.value}" }
    },
    _error: {
      color: { value: "{components.button.outlined.error.color.value}" },
      backgroundColor: {
        value: "{components.button.outlined.error.backgroundColor.value}"
      },
      borderColor: {
        value: "{components.button.outlined.error.borderColor.value}"
      },
      _active: {
        borderColor: {
          value: "{components.button.outlined.error._active.borderColor.value}"
        },
        backgroundColor: {
          value: "{components.button.outlined.error._active.backgroundColor.value}"
        },
        color: {
          value: "{components.button.outlined.error._active.color.value}"
        }
      },
      _focus: {
        borderColor: {
          value: "{components.button.outlined.error._focus.borderColor.value}"
        },
        backgroundColor: {
          value: "{components.button.outlined.error._focus.backgroundColor.value}"
        },
        color: {
          value: "{components.button.outlined.error._focus.color.value}"
        },
        boxShadow: {
          value: "{components.button.outlined.error._focus.boxShadow.value}"
        }
      },
      _hover: {
        borderColor: {
          value: "{components.button.outlined.error._hover.borderColor.value}"
        },
        backgroundColor: {
          value: "{components.button.outlined.error._hover.backgroundColor.value}"
        },
        color: {
          value: "{components.button.outlined.error._hover.color.value}"
        }
      }
    },
    _focus: {
      backgroundColor: {
        value: "{components.button._focus.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._focus.borderColor.value}" },
      color: { value: "{components.button._focus.color.value}" }
    },
    _hover: {
      backgroundColor: {
        value: "{components.button._hover.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._hover.borderColor.value}" },
      color: { value: "{components.button._hover.color.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/phoneNumberField.mjs
var phonenumberfield = {
  color: { value: "{components.fieldcontrol.color}" },
  borderColor: { value: "{components.fieldcontrol.borderColor}" },
  fontSize: { value: "{components.fieldcontrol.fontSize}" },
  _focus: {
    borderColor: { value: "{components.fieldcontrol._focus.borderColor}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/placeholder.mjs
var placeholder = {
  borderRadius: { value: "{radii.small.value}" },
  transitionDuration: { value: "{time.long.value}" },
  startColor: { value: "{colors.background.secondary.value}" },
  endColor: { value: "{colors.background.tertiary.value}" },
  // sizes
  small: {
    height: { value: "{space.small.value}" }
  },
  default: {
    height: { value: "{space.medium.value}" }
  },
  large: {
    height: { value: "{space.large.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/radio.mjs
var radio = {
  alignItems: { value: "center" },
  justifyContent: { value: "flex-start" },
  gap: { value: "inherit" },
  _disabled: { cursor: { value: "not-allowed" } },
  button: {
    alignItems: { value: "center" },
    justifyContent: { value: "center" },
    width: { value: "{fontSizes.medium.value}" },
    height: { value: "{fontSizes.medium.value}" },
    boxSizing: { value: "border-box" },
    borderWidth: { value: "{borderWidths.medium.value}" },
    borderStyle: { value: "solid" },
    borderRadius: { value: "50%" },
    borderColor: { value: "{colors.border.primary.value}" },
    color: { value: "{colors.background.primary.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    transitionProperty: { value: "all" },
    transitionDuration: { value: "{time.medium.value}" },
    outlineColor: { value: "{colors.transparent.value}" },
    outlineStyle: { value: "solid" },
    outlineWidth: { value: "{outlineWidths.medium.value}" },
    outlineOffset: { value: "{outlineOffsets.medium.value}" },
    // We want the dot inside the border to be a border-width from the border
    padding: { value: "{borderWidths.medium.value}" },
    small: {
      width: { value: "{fontSizes.small.value}" },
      height: { value: "{fontSizes.small.value}" }
    },
    large: {
      width: { value: "{fontSizes.large.value}" },
      height: { value: "{fontSizes.large.value}" }
    },
    _checked: {
      color: {
        value: "{colors.primary.80.value}"
      },
      _disabled: { color: { value: "{colors.background.disabled.value}" } }
    },
    _focus: {
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    },
    _error: {
      borderColor: { value: "{colors.border.error.value}" },
      _focus: {
        boxShadow: {
          value: "{components.fieldcontrol._error._focus.boxShadow.value}"
        }
      }
    },
    _disabled: {
      borderColor: { value: "{colors.border.disabled.value}" },
      backgroundColor: { value: "{colors.background.primary.value}" }
    }
  },
  label: {
    color: { value: "{components.text.color.value}" },
    _disabled: {
      color: {
        value: "{colors.font.disabled.value}"
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/radioGroup.mjs
var radiogroup = {
  radio: {
    borderWidth: { value: "{components.radio.button.borderWidth}" },
    borderColor: { value: "{components.radio.button.borderColor}" },
    backgroundColor: { value: "{components.radio.button.backgroundColor}" },
    _checked: {
      color: { value: "{components.radio.button._checked.color}" }
    },
    label: {
      color: { value: "{components.radio.label.color}" }
    }
  },
  legend: {
    color: { value: "{components.fieldset.legend.color}" },
    fontWeight: { value: "{fontWeights.normal}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/rating.mjs
var rating = {
  large: { size: { value: "{fontSizes.xxxl.value}" } },
  default: { size: { value: "{fontSizes.xl.value}" } },
  small: { size: { value: "{fontSizes.small.value}" } },
  filled: { color: { value: "{colors.secondary.80.value}" } },
  empty: { color: { value: "{colors.background.tertiary.value}" } }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/searchField.mjs
var searchfield = {
  color: { value: "{components.fieldcontrol.color.value}" },
  button: {
    color: { value: "{components.button.color.value}" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    _active: {
      backgroundColor: {
        value: "{components.button._active.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._active.borderColor.value}" },
      color: { value: "{components.button._active.color.value}" }
    },
    _disabled: {
      backgroundColor: {
        value: "{components.button._disabled.backgroundColor.value}"
      },
      borderColor: {
        value: "{components.button._disabled.borderColor.value}"
      },
      color: { value: "{components.button._disabled.color.value}" }
    },
    _focus: {
      backgroundColor: {
        value: "{components.button._focus.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._focus.borderColor.value}" },
      color: { value: "{components.button._focus.color.value}" }
    },
    _hover: {
      backgroundColor: {
        value: "{components.button._hover.backgroundColor.value}"
      },
      borderColor: { value: "{components.button._hover.borderColor.value}" },
      color: { value: "{components.button._hover.color.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/select.mjs
var select = {
  color: { value: "{components.fieldcontrol.color}" },
  backgroundColor: { value: "{colors.background.primary.value}" },
  paddingInlineEnd: { value: "{space.xxl.value}" },
  _disabled: {
    color: { value: "{colors.font.disabled.value}" },
    backgroundColor: { value: "{colors.background.disabled.value}" }
  },
  // wrappers
  wrapper: {
    flex: { value: "1" },
    display: { value: "block" },
    position: { value: "relative" },
    cursor: { value: "pointer" }
  },
  iconWrapper: {
    alignItems: { value: "center" },
    position: { value: "absolute" },
    top: { value: "50%" },
    right: { value: "{space.medium.value}" },
    transform: { value: "translateY(-50%)" },
    pointerEvents: { value: "none" },
    small: {
      right: { value: "{space.xs.value}" }
    },
    large: {
      right: { value: "{space.medium.value}" }
    }
  },
  // It's important to test these option values on Chrome/FireFox/Edge
  // on Windows because they allow styling of the option element.
  // Chrome/Safari/Firefox on Mac uses the system ui.
  option: {
    backgroundColor: { value: "transparent" },
    color: { value: "{colors.font.primary.value}" },
    _disabled: {
      color: { value: "{colors.font.disabled.value}" },
      backgroundColor: {
        value: "transparent"
      }
    }
  },
  whiteSpace: { value: "nowrap" },
  minWidth: { value: "6.5rem" },
  small: {
    minWidth: { value: "5.5rem" },
    paddingInlineEnd: { value: "{space.xl.value}" }
  },
  large: {
    minWidth: { value: "7.5rem" },
    paddingInlineEnd: { value: "{space.xxl.value}" }
  },
  expanded: {
    paddingBlock: { value: "{space.xs.value}" },
    paddingInline: { value: "{space.small.value}" },
    option: {
      paddingBlock: { value: "{space.xs.value}" },
      paddingInline: { value: "{space.small.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/selectField.mjs
var selectfield = {
  borderColor: { value: "{components.fieldcontrol.borderColor}" },
  color: { value: "{components.fieldcontrol.color}" },
  flexDirection: {
    value: "column"
  },
  fontSize: { value: "{components.fieldcontrol.fontSize}" },
  _focus: {
    borderColor: { value: "{components.fieldcontrol._focus.borderColor}" }
  },
  label: {
    color: { value: "{components.field.label.color}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/sliderField.mjs
var sliderfield = {
  paddingBlock: { value: "{space.xs.value}" },
  // The track is the thin background of the slider
  track: {
    backgroundColor: { value: "{colors.background.quaternary.value}" },
    borderRadius: { value: "9999px" },
    height: { value: "0.375rem" },
    minWidth: { value: "10rem" }
  },
  // The range is the filled part of the track
  range: {
    backgroundColor: { value: "{colors.primary.80.value}" },
    borderRadius: { value: "9999px" },
    _disabled: {
      backgroundColor: { value: "{colors.background.disabled.value}" }
    }
  },
  // The thumb is the circle above the track that the user drags
  thumb: {
    width: { value: "1.25rem" },
    height: { value: "1.25rem" },
    backgroundColor: { value: "{colors.background.primary.value}" },
    boxShadow: { value: "{shadows.small.value}" },
    borderRadius: { value: "50%" },
    borderWidth: { value: "{borderWidths.medium.value}" },
    borderColor: { value: "{colors.border.primary.value}" },
    borderStyle: { value: "solid" },
    _disabled: {
      backgroundColor: { value: "{colors.background.disabled.value}" },
      borderColor: { value: "transparent" },
      boxShadow: { value: "none" }
    },
    _hover: {
      backgroundColor: { value: "{colors.background.primary.value}" },
      borderColor: { value: "{colors.border.focus.value}" }
    },
    _focus: {
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" }
    }
  },
  small: {
    track: {
      height: { value: "0.25rem" }
    },
    thumb: {
      width: { value: "1rem" },
      height: { value: "1rem" }
    }
  },
  large: {
    track: {
      height: { value: "0.625rem" }
    },
    thumb: {
      width: { value: "1.5rem" },
      height: { value: "1.5rem" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/stepperField.mjs
var stepperfield = {
  borderColor: { value: "{components.fieldcontrol.borderColor}" },
  flexDirection: { value: "column" },
  input: {
    color: { value: "{components.fieldcontrol.color}" },
    fontSize: { value: "{components.fieldcontrol.fontSize}" },
    textAlign: { value: "center" }
  },
  button: {
    color: { value: "{components.button.color}" },
    backgroundColor: { value: "{colors.transparent}" },
    _active: {
      color: { value: "{components.button._active.color}" },
      backgroundColor: { value: "{components.button._active.backgroundColor}" }
    },
    _focus: {
      color: { value: "{components.button._focus.color}" },
      backgroundColor: { value: "{components.button._focus.backgroundColor}" }
    },
    _disabled: {
      color: { value: "{components.button._disabled.color}" },
      backgroundColor: {
        value: "{components.fieldcontrol._disabled.backgroundColor}"
      }
    },
    _hover: {
      color: { value: "{components.button._hover.color}" },
      backgroundColor: { value: "{components.button._hover.backgroundColor}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/storagemanager.mjs
var storagemanager = {
  dropzone: {
    backgroundColor: { value: "{colors.background.primary}" },
    borderRadius: { value: "{radii.small}" },
    borderColor: { value: "{colors.border.primary}" },
    borderStyle: { value: "dashed" },
    borderWidth: { value: "{borderWidths.small}" },
    gap: { value: "{space.small}" },
    paddingBlock: { value: "{space.xl}" },
    paddingInline: { value: "{space.large}" },
    textAlign: { value: "center" },
    _active: {
      backgroundColor: { value: "{colors.primary.10}" },
      borderRadius: {
        value: "{components.storagemanager.dropzone.borderRadius}"
      },
      borderColor: { value: "{colors.border.pressed}" },
      borderStyle: {
        value: "{components.storagemanager.dropzone.borderStyle}"
      },
      borderWidth: { value: "{borderWidths.medium}" }
    },
    icon: {
      color: { value: "{colors.border.primary}" },
      fontSize: { value: "{fontSizes.xxl}" }
    },
    text: {
      color: { value: "{colors.font.tertiary}" },
      fontSize: { value: "{fontSizes.medium}" },
      fontWeight: { value: "{fontWeights.bold}" }
    }
  },
  file: {
    backgroundColor: { value: "{colors.background.primary}" },
    borderRadius: { value: "{radii.small}" },
    borderColor: { value: "{colors.border.primary}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small}" },
    paddingBlock: { value: "{space.xs}" },
    paddingInline: { value: "{space.small}" },
    gap: { value: "{space.small}" },
    alignItems: { value: "baseline" },
    name: {
      fontSize: { value: "{fontSizes.medium}" },
      fontWeight: { value: "{fontWeights.bold}" },
      color: { value: "{colors.font.primary}" }
    },
    size: {
      fontSize: { value: "{fontSizes.small}" },
      fontWeight: { value: "{fontWeights.normal}" },
      color: { value: "{colors.font.tertiary}" }
    },
    image: {
      width: { value: "{space.xxl}" },
      height: { value: "{space.xxl}" },
      backgroundColor: { value: "{colors.background.secondary}" },
      color: { value: "{colors.font.tertiary}" },
      borderRadius: { value: "{radii.small}" }
    }
  },
  filelist: {
    flexDirection: { value: "column" },
    gap: { value: "{space.small}" }
  },
  loader: {
    strokeLinecap: { value: "round" },
    strokeEmpty: { value: "{colors.border.secondary}" },
    strokeFilled: { value: "{components.loader.strokeFilled}" },
    strokeWidth: { value: "{borderWidths.large}" }
  },
  previewer: {
    backgroundColor: { value: "{colors.background.primary}" },
    borderColor: { value: "{colors.border.primary}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small}" },
    borderRadius: { value: "{radii.small}" },
    paddingBlock: { value: "{space.zero}" },
    paddingInline: { value: "{space.zero}" },
    maxHeight: { value: "40rem" },
    maxWidth: { value: "auto" },
    text: {
      fontSize: { value: "{fontSizes.medium}" },
      fontWeight: { value: "{fontWeights.bold}" },
      color: { value: "{colors.font.primary}" }
    },
    body: {
      paddingBlock: { value: "{space.medium}" },
      paddingInline: { value: "{space.medium}" },
      gap: { value: "{space.small}" }
    },
    footer: {
      justifyContent: { value: "flex-end" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/switchField.mjs
var switchfield = {
  // States
  _disabled: {
    opacity: { value: "{opacities.60.value}" }
  },
  _focused: {
    shadow: {
      value: "{components.fieldcontrol._focus.boxShadow.value}"
    }
  },
  // Sizes
  fontSize: { value: "{fontSizes.medium.value}" },
  large: {
    fontSize: { value: "{fontSizes.large.value}" }
  },
  small: {
    fontSize: { value: "{fontSizes.small.value}" }
  },
  // Child elements
  label: {
    padding: { value: "{space.xs.value}" }
  },
  thumb: {
    backgroundColor: { value: "{colors.background.primary.value}" },
    borderColor: { value: "transparent" },
    borderWidth: { value: "{borderWidths.small.value}" },
    borderStyle: { value: "solid" },
    borderRadius: { value: "{radii.xxxl.value}" },
    checked: {
      transform: { value: "{transforms.slideX.medium.value}" }
    },
    transition: {
      duration: { value: "{time.medium.value}" }
    },
    width: { value: "{space.relative.medium.value}" }
  },
  track: {
    backgroundColor: { value: "{colors.background.quaternary.value}" },
    borderRadius: { value: "{radii.xxxl.value}" },
    checked: {
      backgroundColor: { value: "{colors.primary.80.value}" }
    },
    height: { value: "{space.relative.medium.value}" },
    padding: { value: "{outlineWidths.medium.value}" },
    transition: {
      duration: { value: "{time.short.value}" }
    },
    width: { value: "{space.relative.xl.value}" },
    _error: {
      backgroundColor: { value: "{colors.background.error.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/table.mjs
var table = {
  /**
   * Default table styles
   */
  borderCollapse: { value: "collapse" },
  display: { value: "table" },
  width: { value: "100%" },
  /**
   * Default table head styles
   */
  head: {
    display: { value: "table-header-group" },
    verticalAlign: { value: "middle" }
  },
  /**
   * Default table body styles
   */
  body: {
    display: { value: "table-row-group" },
    verticalAlign: { value: "middle" }
  },
  /**
   * Default table foot styles
   */
  foot: {
    display: { value: "table-footer-group" },
    verticalAlign: { value: "middle" }
  },
  /**
   * Default table row styles
   */
  row: {
    display: { value: "table-row" },
    verticalAlign: { value: "middle" },
    hover: {
      backgroundColor: { value: "{colors.background.tertiary.value}" }
    },
    striped: {
      backgroundColor: { value: "{colors.background.secondary.value}" }
    }
  },
  /**
   * Default table header cell styles
   */
  header: {
    borderColor: { value: "{colors.border.tertiary.value}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small.value}" },
    color: { value: "{colors.font.primary.value}" },
    display: { value: "table-cell" },
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" },
    padding: { value: "{space.medium.value}" },
    verticalAlign: { value: "middle" },
    large: {
      fontSize: { value: "{fontSizes.large.value}" },
      padding: { value: "{space.large.value}" }
    },
    small: {
      fontSize: { value: "{fontSizes.small.value}" },
      padding: { value: "{space.xs.value}" }
    }
  },
  /**
   * Default table data cell styles
   */
  data: {
    borderColor: { value: "{colors.border.tertiary.value}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.small.value}" },
    color: { value: "{colors.font.primary.value}" },
    display: { value: "table-cell" },
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.normal.value}" },
    padding: { value: "{space.medium.value}" },
    verticalAlign: { value: "middle" },
    large: {
      fontSize: { value: "{fontSizes.large.value}" },
      padding: { value: "{space.large.value}" }
    },
    small: {
      fontSize: { value: "{fontSizes.small.value}" },
      padding: { value: "{space.xs.value}" }
    }
  },
  /**
   * Default table caption styles
   */
  caption: {
    captionSide: { value: "bottom" },
    color: { value: "{colors.font.primary.value}" },
    display: { value: "table-caption" },
    fontSize: { value: "{fontSizes.medium.value}" },
    textAlign: { value: "center" },
    wordBreak: { value: "break-all" },
    large: {
      fontSize: { value: "{fontSizes.large.value}" }
    },
    small: {
      fontSize: { value: "{fontSizes.small.value}" }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/tabs.mjs
var tabs = {
  backgroundColor: { value: "transparent" },
  borderColor: { value: "{colors.border.secondary.value}" },
  borderStyle: { value: "solid" },
  borderWidth: { value: "{borderWidths.medium.value}" },
  gap: { value: "0" },
  item: {
    backgroundColor: { value: "transparent" },
    borderColor: { value: "{colors.border.secondary.value}" },
    borderStyle: { value: "solid" },
    borderWidth: { value: "{borderWidths.medium.value}" },
    color: { value: "{colors.font.secondary.value}" },
    fontSize: { value: "{fontSizes.medium.value}" },
    fontWeight: { value: "{fontWeights.bold.value}" },
    paddingVertical: { value: "{space.small.value}" },
    paddingHorizontal: { value: "{space.medium.value}" },
    textAlign: { value: "center" },
    transitionDuration: { value: "{time.medium.value}" },
    _hover: {
      backgroundColor: { value: "transparent" },
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: { value: "none" },
      color: { value: "{colors.font.hover.value}" }
    },
    _focus: {
      backgroundColor: { value: "transparent" },
      borderColor: { value: "{colors.border.focus.value}" },
      boxShadow: {
        value: {
          offsetX: "0px",
          offsetY: "0px",
          blurRadius: "0px",
          spreadRadius: "{borderWidths.medium}",
          color: "{colors.border.focus.value}"
        }
      },
      color: { value: "{colors.font.focus.value}" }
    },
    _active: {
      backgroundColor: { value: "transparent" },
      borderColor: { value: "{colors.font.interactive.value}" },
      boxShadow: { value: "none" },
      color: { value: "{colors.font.interactive.value}" }
    },
    _disabled: {
      backgroundColor: { value: "transparent" },
      borderColor: { value: "{colors.border.tertiary.value}" },
      boxShadow: { value: "none" },
      color: { value: "{colors.font.disabled.value}" }
    }
  },
  panel: {
    backgroundColor: { value: "transparent" },
    paddingInline: { value: "0" },
    paddingBlock: { value: "{space.small.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/text.mjs
var text = {
  // default styles
  color: { value: "{colors.font.primary.value}" },
  // variations
  primary: {
    color: { value: "{colors.font.primary.value}" }
  },
  secondary: {
    color: { value: "{colors.font.secondary.value}" }
  },
  tertiary: {
    color: { value: "{colors.font.tertiary.value}" }
  },
  error: {
    color: { value: "{colors.font.error.value}" }
  },
  warning: {
    color: { value: "{colors.font.warning.value}" }
  },
  success: {
    color: { value: "{colors.font.success.value}" }
  },
  info: {
    color: { value: "{colors.font.info.value}" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/textAreaField.mjs
var textareafield = {
  color: { value: "{components.fieldcontrol.color.value}" },
  borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
  _focus: {
    borderColor: {
      value: "{components.fieldcontrol._focus.borderColor.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/textField.mjs
var textfield = {
  color: { value: "{components.fieldcontrol.color.value}" },
  borderColor: { value: "{components.fieldcontrol.borderColor.value}" },
  fontSize: { value: "{components.fieldcontrol.fontSize.value}" },
  _focus: {
    borderColor: {
      value: "{components.fieldcontrol._focus.borderColor.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/toggleButton.mjs
var togglebutton = {
  borderColor: { value: "{colors.border.primary.value}" },
  color: { value: "{colors.font.primary.value}" },
  _hover: {
    backgroundColor: { value: "{colors.overlay.10.value}" }
  },
  _focus: {
    borderColor: { value: "{colors.border.focus.value}" },
    color: { value: "{colors.font.primary.value}" }
  },
  _active: {
    backgroundColor: { value: "{colors.transparent.value}" }
  },
  _disabled: {
    backgroundColor: { value: "{colors.transparent.value}" },
    borderColor: { value: "{colors.border.disabled.value}" },
    color: { value: "{colors.font.disabled.value}" }
  },
  _pressed: {
    borderColor: { value: "{colors.border.pressed.value}" },
    color: { value: "{colors.font.primary.value}" },
    backgroundColor: { value: "{colors.overlay.20.value}" },
    _hover: {
      backgroundColor: { value: "{colors.overlay.30.value}" }
    }
  },
  primary: {
    backgroundColor: { value: "{colors.transparent.value}" },
    borderWidth: { value: "{borderWidths.small.value}" },
    _focus: {
      borderColor: { value: "{colors.border.focus.value}" },
      backgroundColor: { value: "{colors.transparent.value}" },
      boxShadow: { value: "{components.fieldcontrol._focus.boxShadow.value}" },
      color: { value: "{colors.font.primary.value}" }
    },
    _hover: {
      backgroundColor: { value: "{colors.overlay.10.value}" },
      color: { value: "{colors.font.primary.value}" }
    },
    _disabled: {
      borderColor: { value: "{colors.border.disabled.value}" },
      backgroundColor: { value: "{colors.background.disabled.value}" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _pressed: {
      backgroundColor: { value: "{colors.primary.80.value}" },
      borderColor: { value: "{colors.primary.80.value}" },
      color: { value: "{colors.background.primary.value}" },
      _focus: {
        backgroundColor: {
          value: "{colors.border.focus.value}"
        },
        borderColor: { value: "{colors.border.focus.value}" },
        color: { value: "{colors.background.primary.value}" }
      },
      _hover: {
        borderColor: { value: "{colors.primary.60.value}" },
        backgroundColor: {
          value: "{colors.primary.60.value}"
        },
        boxShadow: { value: "{colors.primary.60.value}" },
        color: { value: "{colors.background.primary.value}" }
      }
    }
  },
  link: {
    backgroundColor: { value: "{colors.transparent.value}" },
    color: { value: "{colors.overlay.50.value}" },
    _hover: {
      backgroundColor: { value: "{colors.transparent.value}" },
      color: { value: "{colors.overlay.50.value}" }
    },
    _focus: {
      backgroundColor: { value: "{colors.transparent.value}" },
      color: { value: "{colors.overlay.50.value}" }
    },
    _disabled: {
      backgroundColor: { value: "{colors.transparent.value}" },
      color: { value: "{colors.font.disabled.value}" }
    },
    _pressed: {
      backgroundColor: { value: "{colors.transparent.value}" },
      color: { value: "{colors.overlay.90.value}" },
      _focus: {
        backgroundColor: { value: "{colors.transparent.value}" },
        color: { value: "{colors.overlay.90.value}" }
      },
      _hover: {
        color: { value: "{colors.overlay.90.value}" },
        backgroundColor: { value: "{colors.transparent.value}" }
      }
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/toggleButtonGroup.mjs
var togglebuttongroup = {
  alignItems: { value: "center" },
  alignContent: { value: "center" },
  justifyContent: { value: "flex-start" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/components/index.mjs
var components = {
  accordion,
  aiConversation,
  alert,
  authenticator,
  autocomplete,
  avatar,
  badge,
  breadcrumbs,
  button,
  card,
  checkbox,
  checkboxfield,
  collection,
  copy,
  countrycodeselect: dialcodeselect,
  divider,
  dropzone,
  field,
  fieldcontrol,
  fieldgroup,
  fieldmessages,
  fieldset,
  fileuploader,
  flex,
  heading,
  icon,
  highlightmatch,
  image,
  inappmessaging,
  input,
  link,
  liveness,
  loader,
  menu,
  message,
  pagination,
  passwordfield,
  phonenumberfield,
  placeholder,
  radio,
  radiogroup,
  rating,
  searchfield,
  select,
  selectfield,
  sliderfield,
  stepperfield,
  storagemanager,
  switchfield,
  table,
  tabs,
  text,
  textareafield,
  textfield,
  togglebutton,
  togglebuttongroup
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/fonts.mjs
var fonts = {
  default: {
    variable: {
      value: `'InterVariable', 'Inter var', 'Inter', -apple-system, BlinkMacSystemFont,
        'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans',
        sans-serif`
    },
    static: {
      value: `'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue',
        'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif`
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/fontSizes.mjs
var fontSizes = {
  xxxs: { value: "0.375rem" },
  xxs: { value: "0.5rem" },
  xs: { value: "0.75rem" },
  small: { value: "0.875rem" },
  medium: { value: "1rem" },
  large: { value: "1.25rem" },
  xl: { value: "1.5rem" },
  xxl: { value: "2rem" },
  xxxl: { value: "2.5rem" },
  xxxxl: { value: "3rem" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/fontWeights.mjs
var fontWeights = {
  hairline: { value: 100 },
  thin: { value: 200 },
  light: { value: 300 },
  normal: { value: 400 },
  medium: { value: 500 },
  semibold: { value: 600 },
  bold: { value: 700 },
  extrabold: { value: 800 },
  black: { value: 900 }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/lineHeights.mjs
var lineHeights = {
  small: { value: "1.25" },
  medium: { value: "1.5" },
  large: { value: "2" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/opacities.mjs
var opacities = {
  0: { value: "0" },
  10: { value: "0.1" },
  20: { value: "0.2" },
  30: { value: "0.3" },
  40: { value: "0.4" },
  50: { value: "0.5" },
  60: { value: "0.6" },
  70: { value: "0.7" },
  80: { value: "0.8" },
  90: { value: "0.9" },
  100: { value: "1" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/outlineOffsets.mjs
var outlineOffsets = {
  small: { value: "1px" },
  medium: { value: "2px" },
  large: { value: "3px" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/outlineWidths.mjs
var outlineWidths = {
  small: { value: "1px" },
  medium: { value: "2px" },
  large: { value: "3px" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/radii.mjs
var radii = {
  xs: { value: "0.125rem" },
  small: { value: "0.25rem" },
  medium: { value: "0.5rem" },
  large: { value: "1rem" },
  xl: { value: "2rem" },
  xxl: { value: "4rem" },
  xxxl: { value: "8rem" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/shadows.mjs
var shadows = {
  small: {
    value: {
      offsetX: "0px",
      offsetY: "2px",
      blurRadius: "4px",
      color: "{colors.shadow.tertiary.value}"
    }
  },
  medium: {
    value: {
      offsetX: "0px",
      offsetY: "2px",
      blurRadius: "6px",
      color: "{colors.shadow.secondary.value}"
    }
  },
  large: {
    value: {
      offsetX: "0px",
      offsetY: "4px",
      blurRadius: "12px",
      color: "{colors.shadow.primary.value}"
    }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/space.mjs
var space = {
  zero: { value: "0" },
  xxxs: { value: "0.25rem" },
  xxs: { value: "0.375rem" },
  xs: { value: "0.5rem" },
  small: { value: "0.75rem" },
  medium: { value: "1rem" },
  large: { value: "1.5rem" },
  xl: { value: "2.0rem" },
  xxl: { value: "3.0rem" },
  xxxl: { value: "4.5rem" },
  relative: {
    //creating a second set of sizes using em which will be sized relative to a parent instead of the root
    xxxs: { value: "0.25em" },
    xxs: { value: "0.375em" },
    xs: { value: "0.5em" },
    small: { value: "0.75em" },
    medium: { value: "1em" },
    large: { value: "1.5em" },
    xl: { value: "2.0em" },
    xxl: { value: "3.0em" },
    xxxl: { value: "4.5em" },
    full: { value: "100%" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/time.mjs
var time = {
  short: { value: "100ms" },
  medium: { value: "250ms" },
  long: { value: "500ms" }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/transforms.mjs
var transforms = {
  // TODO: make this more generic and cross-platform
  slideX: {
    small: { value: "translateX(0.5em)" },
    medium: { value: "translateX(1em)" },
    large: { value: "translateX(2em)" }
  }
};

// node_modules/@aws-amplify/ui/dist/esm/theme/tokens/index.mjs
var tokens = {
  components,
  borderWidths,
  colors,
  fonts,
  fontSizes,
  fontWeights,
  lineHeights,
  opacities,
  outlineOffsets,
  outlineWidths,
  radii,
  shadows,
  space,
  time,
  transforms
};
var reactNativeTokens = {
  colors,
  borderWidths,
  fontSizes: {
    xxs: fontSizes.xxs,
    xs: fontSizes.xs,
    small: fontSizes.small,
    medium: fontSizes.medium,
    large: fontSizes.large,
    xl: fontSizes.xl,
    xxl: fontSizes.xxl,
    xxxl: fontSizes.xxxl
  },
  fontWeights,
  opacities,
  // React Native doesn't need the relative space values
  space: {
    // use `space.xxxs` to output a value of `2` and avoid odd space numbers
    xxs: space.xxxs,
    xs: space.xs,
    small: space.small,
    medium: space.medium,
    large: space.large,
    xl: space.xl,
    xxl: space.xxl,
    xxxl: space.xxxl
  },
  radii,
  time
};

// node_modules/@aws-amplify/ui/dist/esm/theme/breakpoints.mjs
var breakpoints = {
  values: {
    base: 0,
    small: 480,
    medium: 768,
    large: 992,
    xl: 1280,
    xxl: 1536
  },
  defaultBreakpoint: "base"
};

// node_modules/@aws-amplify/ui/dist/esm/theme/defaultTheme.mjs
var defaultTheme = {
  tokens,
  breakpoints,
  name: "default-theme"
};

// node_modules/@aws-amplify/ui/dist/esm/theme/createTheme/utils.mjs
var import_kebabCase = __toESM(require_kebabCase(), 1);

// node_modules/@aws-amplify/ui/dist/esm/theme/createTheme/constants.mjs
var REFERENCE_REGEX = /\{([^}]+)\}/g;

// node_modules/@aws-amplify/ui/dist/esm/utils/references.mjs
function usesReference(value) {
  const regex = new RegExp(REFERENCE_REGEX);
  if (typeof value === "string") {
    return regex.test(value);
  }
  if (typeof value === "object") {
    let hasReference = false;
    for (const key in value) {
      if (has2(value, key)) {
        const element = value[key];
        let reference = usesReference(element);
        if (reference) {
          hasReference = true;
          break;
        }
      }
    }
    return hasReference;
  }
  return false;
}

// node_modules/@aws-amplify/ui/dist/esm/theme/createTheme/utils.mjs
var CSS_VARIABLE_PREFIX = "amplify";
function propsToString(props) {
  return Object.entries(props).map(([key, value]) => {
    const _value = isDesignToken(value) ? value.toString() : (
      // @ts-ignore
      cssValue({ value })
    );
    return `${(0, import_kebabCase.default)(key)}:${_value}; `;
  }).join(" ");
}
function cssNameTransform({ path: path2 = [] }) {
  return `${(0, import_kebabCase.default)([CSS_VARIABLE_PREFIX, ...path2].join(" "))}`;
}
var SHADOW_PROPERTIES = [
  "offsetX",
  "offsetY",
  "blurRadius",
  "spreadRadius",
  "color"
];
function cssValue(token) {
  const { value } = token;
  if (isString2(value)) {
    return referenceValue(value);
  }
  if (isShadowTokenObject(value)) {
    return SHADOW_PROPERTIES.map((property) => {
      return referenceValue(
        // lookup property against `token` first for custom non-nested value, then lookup
        // property against `value` for design token value
        isShadowTokenObject(token) ? token[property] : value[property]
      );
    }).join(" ");
  }
  return value;
}
function isDesignToken(value) {
  return isObject(value) && has2(value, "value");
}
function isShadowTokenObject(value) {
  return isObject(value) && has2(value, "offsetX");
}
function referenceValue(value) {
  if (!value)
    return "";
  if (usesReference(value)) {
    const path2 = value.replace(/\{|\}/g, "").replace(".value", "").split(".");
    return `var(--${cssNameTransform({ path: path2 })})`;
  }
  return value;
}
var setupToken = ({ token, path: path2 }) => {
  const name2 = `--${cssNameTransform({ path: path2 })}`;
  const { value: original } = token;
  const value = cssValue(token);
  return { name: name2, original, path: path2, value, toString: () => `var(${name2})` };
};
function setupTokens({ tokens: tokens2, path: path2 = [], setupToken: setupToken2 }) {
  if (has2(tokens2, "value")) {
    return setupToken2({ token: tokens2, path: path2 });
  }
  const output = {};
  for (const name2 in tokens2) {
    if (has2(tokens2, name2)) {
      const value = tokens2[name2];
      const nextTokens = isObject(value) ? value : { value };
      output[name2] = setupTokens({
        tokens: nextTokens,
        path: path2.concat(name2),
        setupToken: setupToken2
      });
    }
  }
  return output;
}
function flattenProperties(properties, to_ret) {
  to_ret = to_ret || [];
  for (var name2 in properties) {
    if (has2(properties, name2)) {
      if (isObject(properties[name2]) && "value" in properties[name2]) {
        to_ret.push(properties[name2]);
      } else if (isObject(properties[name2])) {
        flattenProperties(properties[name2], to_ret);
      }
    }
  }
  return to_ret;
}
function deepExtend(objects, collision, path2) {
  if (objects == null)
    return {};
  var src, copyIsArray, copy4, name2, options, clone, target = objects[0] || {}, i = 1, length = objects.length;
  path2 = path2 || [];
  if (typeof target !== "object") {
    target = {};
  }
  for (; i < length; i++) {
    if ((options = objects[i]) != null) {
      for (name2 in options) {
        if (!has2(options, name2))
          continue;
        if (name2 === "__proto__")
          continue;
        src = target[name2];
        copy4 = options[name2];
        if (target === copy4) {
          continue;
        }
        if (copy4 && (isObject(copy4) || (copyIsArray = Array.isArray(copy4)))) {
          if (copyIsArray) {
            copyIsArray = false;
            clone = src && Array.isArray(src) ? src : [];
          } else {
            clone = src && isObject(src) ? src : {};
          }
          var nextPath = path2.slice(0);
          nextPath.push(name2);
          target[name2] = deepExtend([clone, copy4], collision, nextPath);
        } else if (copy4 !== void 0) {
          if (src != null && typeof collision == "function") {
            collision({ target, copy: options, path: path2, key: name2 });
          }
          target[name2] = copy4;
        }
      }
    }
  }
  return target;
}

// node_modules/@aws-amplify/ui/dist/esm/theme/createTheme/createComponentCSS.mjs
function addVars(selector, vars) {
  if (!vars)
    return "";
  return `${selector} { ${Object.entries(vars).map(([key, value]) => {
    return `--${key}:${value}; `;
  }).join(" ")}}
`;
}
function recursiveComponentCSS(baseSelector, theme) {
  let str = "";
  const { _modifiers = {}, _element = {}, _vars, ...props } = theme;
  if (Object.keys(props).length) {
    const [selectors, other] = splitObject(props, (key) => key.startsWith(":") || key.startsWith("["));
    Object.entries(selectors).forEach(([selector, value]) => {
      const { _modifiers: _modifiers2 = {}, _element: _element2 = {}, _vars: _vars2, ...props2 } = value;
      str += `${baseSelector}${selector} { ${propsToString(props2)} }
`;
      str += addVars(`${baseSelector}${selector}`, _vars2);
    });
    str += `${baseSelector} { ${propsToString(other)} }
`;
  }
  str += addVars(baseSelector, _vars);
  Object.entries(_modifiers).forEach(([key, value]) => {
    if (value && Object.keys(value).length) {
      str += recursiveComponentCSS(`${baseSelector}--${key}`, value);
    }
  });
  Object.entries(_element).forEach(([key, value]) => {
    if (value && Object.keys(value).length) {
      str += recursiveComponentCSS(`${baseSelector}__${key}`, value);
    }
  });
  return str;
}
function createComponentCSS({ theme, components: components2 }) {
  let cssText = "";
  const { tokens: tokens2, name: themeName, breakpoints: breakpoints2 } = theme;
  components2.forEach(({ name: name2, theme: theme2, overrides }) => {
    const baseComponentClassName = `amplify-${name2}`;
    const componentClassName = `[data-amplify-theme="${themeName}"] .${baseComponentClassName}`;
    const componentTheme = isFunction3(theme2) ? theme2(tokens2) : theme2;
    cssText += recursiveComponentCSS(componentClassName, componentTheme);
    if (overrides) {
      overrides.forEach((override) => {
        const componentTheme2 = isFunction3(override.theme) ? override.theme(tokens2) : override.theme;
        if ("mediaQuery" in override) {
          cssText += `@media (${override.mediaQuery}) {
 ${recursiveComponentCSS(componentClassName, componentTheme2)} 
}`;
        }
        if ("breakpoint" in override) {
          const breakpoint = breakpoints2.values[override.breakpoint];
          cssText += `
@media (min-width: ${breakpoint}px) {
 ${recursiveComponentCSS(componentClassName, componentTheme2)} 
}`;
        }
        if ("selector" in override) {
          cssText += recursiveComponentCSS(`${override.selector} .${baseComponentClassName}`, componentTheme2);
        }
        if ("colorMode" in override) {
          cssText += `
@media (prefers-color-scheme: ${override.colorMode}) {
${recursiveComponentCSS(`[data-amplify-theme="${themeName}"][data-amplify-color-mode="system"] .${baseComponentClassName}`, componentTheme2)}
}
`;
          cssText += recursiveComponentCSS(`[data-amplify-theme="${themeName}"][data-amplify-color-mode="${override.colorMode}"] .${baseComponentClassName}`, componentTheme2);
        }
      });
    }
  });
  return cssText;
}

// node_modules/@aws-amplify/ui/dist/esm/theme/createTheme/createColorPalette.mjs
function createColorPalette({ keys, value }) {
  return keys.reduce((acc, key) => {
    return {
      ...acc,
      [key]: { value: `{colors.${value}.${key}.value}` }
    };
  }, {});
}

// node_modules/@aws-amplify/ui/dist/esm/theme/createTheme/createAnimationCSS.mjs
function createAnimationCSS({ animations, tokens: tokens2 }) {
  let cssText = "";
  Object.entries(animations).forEach(([key, value]) => {
    cssText += `
  @keyframes ${key} {`;
    Object.entries(value).forEach(([step, properties]) => {
      cssText += `
    ${step} {
`;
      const animationProperties = isFunction3(properties) ? properties(tokens2) : properties;
      cssText += propsToString(animationProperties);
      cssText += `
    }`;
    });
    cssText += `
  }`;
  });
  return cssText;
}

// node_modules/@aws-amplify/ui/dist/esm/theme/createTheme/createTheme.mjs
function createTheme(theme, DefaultTheme = defaultTheme) {
  const mergedTheme = deepExtend([
    {},
    DefaultTheme,
    {
      ...theme,
      components: {}
    }
  ]);
  const { primaryColor, secondaryColor } = mergedTheme;
  if (isString2(primaryColor)) {
    mergedTheme.tokens.colors.primary = createColorPalette({
      keys: Object.keys(mergedTheme.tokens.colors[primaryColor]),
      value: primaryColor
    });
  }
  if (isString2(secondaryColor)) {
    mergedTheme.tokens.colors.secondary = createColorPalette({
      keys: Object.keys(mergedTheme.tokens.colors[secondaryColor]),
      value: secondaryColor
    });
  }
  const tokens2 = setupTokens({
    tokens: mergedTheme.tokens,
    setupToken
  });
  const { breakpoints: breakpoints2, name: name2 } = mergedTheme;
  let cssText = `[data-amplify-theme="${name2}"] {
` + flattenProperties(tokens2).map((token) => `${token.name}: ${token.value};`).join("\n") + `
}
`;
  if (theme == null ? void 0 : theme.components) {
    cssText += createComponentCSS({
      theme: {
        ...mergedTheme,
        tokens: tokens2
      },
      components: theme.components
    });
  }
  let overrides = [];
  if (mergedTheme.animations) {
    cssText += createAnimationCSS({
      animations: mergedTheme.animations,
      tokens: tokens2
    });
  }
  if (mergedTheme.overrides) {
    overrides = mergedTheme.overrides.map((override) => {
      const overrideTokens = setupTokens({
        tokens: override.tokens,
        setupToken
      });
      const customProperties = flattenProperties(overrideTokens).map((token) => `${token.name}: ${token.value};`).join("\n");
      if ("selector" in override) {
        cssText += `
${override.selector} {
${customProperties}
}
`;
      }
      if ("mediaQuery" in override) {
        cssText += `
@media (${override.mediaQuery}) {
  [data-amplify-theme="${name2}"] {
    ${customProperties}
  }
}
`;
      }
      if ("breakpoint" in override) {
        const breakpoint = mergedTheme.breakpoints.values[override.breakpoint];
        cssText += `
@media (min-width: ${breakpoint}px) {
  [data-amplify-theme="${name2}"] {
    ${customProperties}
  }
}
`;
      }
      if ("colorMode" in override) {
        cssText += `
@media (prefers-color-scheme: ${override.colorMode}) {
          [data-amplify-theme="${name2}"][data-amplify-color-mode="system"] {
            ${customProperties}
            color-scheme: ${override.colorMode};
          }
        }
`;
        cssText += `
[data-amplify-theme="${name2}"][data-amplify-color-mode="${override.colorMode}"] {
          ${customProperties}
          color-scheme: ${override.colorMode};
        }
`;
      }
      return {
        ...override,
        tokens: overrideTokens
      };
    });
  }
  return {
    tokens: tokens2,
    breakpoints: breakpoints2,
    name: name2,
    cssText,
    containerProps: ({ colorMode } = {}) => {
      return {
        "data-amplify-theme": name2,
        "data-amplify-color-mode": colorMode
      };
    },
    // keep overrides separate from base theme
    // this allows web platforms to use plain CSS scoped to a
    // selector and only override the CSS vars needed. This
    // means we could generate CSS at build-time in a postcss
    // plugin, or do it at runtime and inject the CSS into a
    // style tag.
    // This also allows RN to dynamically switch themes in a
    // provider.
    overrides
  };
}

// node_modules/@aws-amplify/ui/dist/esm/utils/classNames.mjs
var classNames = (...args) => {
  const classes = [];
  for (const arg of args) {
    if (!arg) {
      continue;
    }
    if (isString2(arg)) {
      classes.push(arg);
      continue;
    }
    if (typeof arg === "number") {
      classes.push(arg.toString());
      continue;
    }
    if (Array.isArray(arg)) {
      classes.push(classNames(...arg));
      continue;
    }
    if (isObject(arg)) {
      if (arg.toString !== Object.prototype.toString && arg.toString() !== "[object Object]") {
        classes.push(arg.toString());
        continue;
      }
      for (const key in arg) {
        if (has2(arg, key) && arg[key]) {
          classes.push(key);
        }
      }
    }
  }
  return classes.join(" ");
};

// node_modules/@aws-amplify/ui/dist/esm/theme/defaultDarkModeOverride.mjs
var darkModeTokens = {
  colors: {
    red: {
      10: tokens.colors.red[100],
      20: tokens.colors.red[90],
      40: tokens.colors.red[80],
      // 60 doesn't change
      80: tokens.colors.red[40],
      90: tokens.colors.red[20],
      100: tokens.colors.red[10]
    },
    orange: {
      10: tokens.colors.orange[100],
      20: tokens.colors.orange[90],
      40: tokens.colors.orange[80],
      // 60 doesn't change
      80: tokens.colors.orange[40],
      90: tokens.colors.orange[20],
      100: tokens.colors.orange[10]
    },
    yellow: {
      10: tokens.colors.yellow[100],
      20: tokens.colors.yellow[90],
      40: tokens.colors.yellow[80],
      // 60 doesn't change
      80: tokens.colors.yellow[40],
      90: tokens.colors.yellow[20],
      100: tokens.colors.yellow[10]
    },
    green: {
      10: tokens.colors.green[100],
      20: tokens.colors.green[90],
      40: tokens.colors.green[80],
      // 60 doesn't change
      80: tokens.colors.green[40],
      90: tokens.colors.green[20],
      100: tokens.colors.green[10]
    },
    teal: {
      10: tokens.colors.teal[100],
      20: tokens.colors.teal[90],
      40: tokens.colors.teal[80],
      // 60 doesn't change
      80: tokens.colors.teal[40],
      90: tokens.colors.teal[20],
      100: tokens.colors.teal[10]
    },
    blue: {
      10: tokens.colors.blue[100],
      20: tokens.colors.blue[90],
      40: tokens.colors.blue[80],
      // 60 doesn't change
      80: tokens.colors.blue[40],
      90: tokens.colors.blue[20],
      100: tokens.colors.blue[10]
    },
    purple: {
      10: tokens.colors.purple[100],
      20: tokens.colors.purple[90],
      40: tokens.colors.purple[80],
      // 60 doesn't change
      80: tokens.colors.purple[40],
      90: tokens.colors.purple[20],
      100: tokens.colors.purple[10]
    },
    pink: {
      10: tokens.colors.pink[100],
      20: tokens.colors.pink[90],
      40: tokens.colors.pink[80],
      // 60 doesn't change
      80: tokens.colors.pink[40],
      90: tokens.colors.pink[20],
      100: tokens.colors.pink[10]
    },
    neutral: {
      10: tokens.colors.neutral[100],
      20: tokens.colors.neutral[90],
      40: tokens.colors.neutral[80],
      // 60 doesn't change
      80: tokens.colors.neutral[40],
      90: tokens.colors.neutral[20],
      100: tokens.colors.neutral[10]
    },
    font: {
      primary: "{colors.white}",
      secondary: "{colors.neutral.100}",
      tertiary: "{colors.neutral.90}",
      inverse: "{colors.neutral.10}"
    },
    background: {
      primary: "{colors.neutral.10}",
      secondary: "{colors.neutral.20}",
      tertiary: "{colors.neutral.40}"
    },
    border: {
      primary: "{colors.neutral.60}",
      secondary: "{colors.neutral.40}",
      tertiary: "{colors.neutral.20}"
    },
    shadow: {
      primary: { value: "hsla(100, 100%, 100%, 0.25)" },
      secondary: { value: "hsla(100, 100%, 100%, 0.15)" },
      tertiary: { value: "hsla(100, 100%, 100%, 0.05)" }
    },
    overlay: {
      5: "hsla(0, 0%, 100%, 0.05)",
      10: "hsla(0, 0%, 100%, 0.1)",
      20: "hsla(0, 0%, 100%, 0.2)",
      30: "hsla(0, 0%, 100%, 0.3)",
      40: "hsla(0, 0%, 100%, 0.4)",
      50: "hsla(0, 0%, 100%, 0.5)",
      60: "hsla(0, 0%, 100%, 0.6)",
      70: "hsla(0, 0%, 100%, 0.7)",
      80: "hsla(0, 0%, 100%, 0.8)",
      90: "hsla(0, 0%, 100%, 0.9)"
    }
  }
};
var defaultDarkModeOverride = {
  colorMode: "dark",
  tokens: darkModeTokens
};
var reactNativeDarkTokens = {
  ...darkModeTokens
};

// node_modules/@aws-amplify/ui/dist/esm/types/primitives/componentClassName.mjs
var ComponentClassName = {
  Accordion: "amplify-accordion",
  AccordionItem: "amplify-accordion__item",
  AccordionItemTrigger: "amplify-accordion__item__trigger",
  AccordionItemContent: "amplify-accordion__item__content",
  AccordionItemIcon: "amplify-accordion__item__icon",
  Alert: "amplify-alert",
  AlertIcon: "amplify-alert__icon",
  AlertHeading: "amplify-alert__heading",
  AlertBody: "amplify-alert__body",
  AlertDismiss: "amplify-alert__dismiss",
  Autocomplete: "amplify-autocomplete",
  AutocompleteMenu: "amplify-autocomplete__menu",
  AutocompleteMenuEmpty: "amplify-autocomplete__menu--empty",
  AutocompleteMenuFooter: "amplify-autocomplete__menu__footer",
  AutocompleteMenuHeader: "amplify-autocomplete__menu__header",
  AutocompleteMenuLoading: "amplify-autocomplete__menu--loading",
  AutocompleteMenuOption: "amplify-autocomplete__menu__option",
  AutocompleteMenuOptions: "amplify-autocomplete__menu__options",
  Avatar: "amplify-avatar",
  AvatarIcon: "amplify-avatar__icon",
  AvatarImage: "amplify-avatar__image",
  AvatarLoader: "amplify-avatar__loader",
  AIConversation: "amplify-ai-conversation",
  AIConversationScrollView: "amplify-ai-conversation__scrollview",
  AIConversationAttachment: "amplify-ai-conversation__attachment",
  AIConversationAttachmentList: "amplify-ai-conversation__attachment__list",
  AIConversationAttachmentImage: "amplify-ai-conversation__attachment__image",
  AIConversationAttachmentName: "amplify-ai-conversation__attachment__name",
  AIConversationAttachmentSize: "amplify-ai-conversation__attachment__size",
  AIConversationAttachmentRemove: "amplify-ai-conversation__attachment__remove",
  AIConversationForm: "amplify-ai-conversation__form",
  AIConversationFormAttach: "amplify-ai-conversation__form__attach",
  AIConversationFormError: "amplify-ai-conversation__form__error",
  AIConversationFormSend: "amplify-ai-conversation__form__send",
  AIConversationFormField: "amplify-ai-conversation__form__field",
  AIConversationFormDropzone: "amplify-ai-conversation__form__dropzone",
  AIConversationMessage: "amplify-ai-conversation__message",
  AIConversationMessageAvatar: "amplify-ai-conversation__message__avatar",
  AIConversationMessageSender: "amplify-ai-conversation__message__sender",
  AIConversationMessageSenderUsername: "amplify-ai-conversation__message__sender__username",
  AIConversationMessageSenderTimestamp: "amplify-ai-conversation__message__sender__timestamp",
  AIConversationMessageBody: "amplify-ai-conversation__message__body",
  AIConversationMessageContent: "amplify-ai-conversation__message__content",
  AIConversationMessageActions: "amplify-ai-conversation__message__actions",
  AIConversationMessageList: "amplify-ai-conversation__message__list",
  AIConversationPrompt: "amplify-ai-conversation__prompt",
  Badge: "amplify-badge",
  Breadcrumbs: "amplify-breadcrumbs",
  BreadcrumbsList: "amplify-breadcrumbs__list",
  BreadcrumbsItem: "amplify-breadcrumbs__item",
  BreadcrumbsSeparator: "amplify-breadcrumbs__separator",
  BreadcrumbsLink: "amplify-breadcrumbs__link",
  Button: "amplify-button",
  ButtonGroup: "amplify-buttongroup",
  ButtonLoaderWrapper: "amplify-button__loader-wrapper",
  Card: "amplify-card",
  Checkbox: "amplify-checkbox",
  CheckboxButton: "amplify-checkbox__button",
  CheckboxIcon: "amplify-checkbox__icon",
  CheckboxInput: "amplify-checkbox__input",
  CheckboxLabel: "amplify-checkbox__label",
  CheckboxField: "amplify-checkboxfield",
  Collection: "amplify-collection",
  CollectionItems: "amplify-collection-items",
  CollectionSearch: "amplify-collection-search",
  CollectionPagination: "amplify-collection-pagination",
  CountryCodeSelect: "amplify-countrycodeselect",
  DialCodeSelect: "amplify-dialcodeselect",
  Divider: "amplify-divider",
  DividerLabel: "amplify-divider--label",
  DropZone: "amplify-dropzone",
  Field: "amplify-field",
  FieldDescription: "amplify-field__description",
  FieldErrorMessage: "amplify-field__error-message",
  FieldGroup: "amplify-field-group",
  FieldGroupControl: "amplify-field-group__control",
  FieldGroupOuterEnd: "amplify-field-group__outer-end",
  FieldGroupOuterStart: "amplify-field-group__outer-start",
  FieldGroupInnerEnd: "amplify-field-group__inner-end",
  FieldGroupInnerStart: "amplify-field-group__inner-start",
  FieldGroupIcon: "amplify-field-group__icon",
  FieldGroupIconButton: "amplify-field-group__icon-button",
  FieldGroupHasInnerEnd: "amplify-field-group--has-inner-end",
  FieldGroupHasInnerStart: "amplify-field-group--has-inner-start",
  FieldShowPassword: "amplify-field__show-password",
  FieldGroupFieldWrapper: "amplify-field-group__field-wrapper",
  Fieldset: "amplify-fieldset",
  FieldsetLegend: "amplify-fieldset__legend",
  FileUploader: "amplify-fileuploader",
  FileUploaderDropZone: "amplify-fileuploader__dropzone",
  FileUploaderDropZoneIcon: "amplify-fileuploader__dropzone__icon",
  FileUploaderDropZoneText: "amplify-fileuploader__dropzone__text",
  FileUploaderFilePicker: "amplify-fileuploader__file__picker",
  FileUploaderFile: "amplify-fileuploader__file",
  FileUploaderFileWrapper: "amplify-fileuploader__file__wrapper",
  FileUploaderFileList: "amplify-fileuploader__file__list",
  FileUploaderFileName: "amplify-fileuploader__file__name",
  FileUploaderFileSize: "amplify-fileuploader__file__size",
  FileUploaderFileInfo: "amplify-fileuploader__file__info",
  FileUploaderFileImage: "amplify-fileuploader__file__image",
  FileUploaderFileMain: "amplify-fileuploader__file__main",
  FileUploaderFileStatus: "amplify-fileuploader__file__status",
  FileUploaderLoader: "amplify-fileuploader__loader",
  FileUploaderPreviewer: "amplify-fileuploader__previewer",
  FileUploaderPreviewerText: "amplify-fileuploader__previewer__text",
  FileUploaderPreviewerActions: "amplify-fileuploader__previewer__actions",
  FileUploaderPreviewerFooter: "amplify-fileuploader__previewer__footer",
  Flex: "amplify-flex",
  Grid: "amplify-grid",
  Heading: "amplify-heading",
  HighlightMatch: "amplify-highlightmatch",
  HighlightMatchHighlighted: "amplify-highlightmatch__highlighted",
  Icon: "amplify-icon",
  Image: "amplify-image",
  Input: "amplify-input",
  Label: "amplify-label",
  Link: "amplify-link",
  Loader: "amplify-loader",
  LoaderLabel: "amplify-loader__label",
  MenuContent: "amplify-menu__content",
  MenuItem: "amplify-menu__content__item",
  MenuTrigger: "amplify-menu__trigger",
  MenuWrapper: "amplify-menu__wrapper",
  Message: "amplify-message",
  MessageIcon: "amplify-message__icon",
  MessageHeading: "amplify-message__heading",
  MessageBody: "amplify-message__body",
  MessageContent: "amplify-message__content",
  MessageDismiss: "amplify-message__dismiss",
  Pagination: "amplify-pagination",
  PaginationItem: "amplify-pagination__item",
  PasswordField: "amplify-passwordfield",
  PhoneNumberField: "amplify-phonenumberfield",
  Placeholder: "amplify-placeholder",
  Radio: "amplify-radio",
  RadioButton: "amplify-radio__button",
  RadioInput: "amplify-radio__input",
  RadioLabel: "amplify-radio__label",
  RadioGroupField: "amplify-radiogroupfield",
  RadioGroup: "amplify-radiogroup",
  Rating: "amplify-rating",
  RatingItem: "amplify-rating__item",
  RatingIcon: "amplify-rating__icon",
  RatingLabel: "amplify-rating__label",
  ScrollView: "amplify-scrollview",
  SearchField: "amplify-searchfield",
  SearchFieldClear: "amplify-searchfield__clear",
  SearchFieldSearch: "amplify-searchfield__search",
  Select: "amplify-select",
  SelectField: "amplify-selectfield",
  SelectWrapper: "amplify-select__wrapper",
  SelectIcon: "amplify-select__icon",
  SliderField: "amplify-sliderfield",
  SliderFieldGroup: "amplify-sliderfield__group",
  SliderFieldLabel: "amplify-sliderfield__label",
  SliderFieldRange: "amplify-sliderfield__range",
  SliderFieldRoot: "amplify-sliderfield__root",
  SliderFieldThumb: "amplify-sliderfield__thumb",
  SliderFieldTrack: "amplify-sliderfield__track",
  StepperField: "amplify-stepperfield",
  StepperFieldButtonDecrease: "amplify-stepperfield__button--decrease",
  StepperFieldButtonIncrease: "amplify-stepperfield__button--increase",
  StepperFieldInput: "amplify-stepperfield__input",
  StorageImage: "amplify-storageimage",
  StorageManager: "amplify-storagemanager",
  StorageManagerDropZone: "amplify-storagemanager__dropzone",
  StorageManagerDropZoneIcon: "amplify-storagemanager__dropzone__icon",
  StorageManagerDropZoneText: "amplify-storagemanager__dropzone__text",
  StorageManagerFilePicker: "amplify-storagemanager__file__picker",
  StorageManagerFile: "amplify-storagemanager__file",
  StorageManagerFileWrapper: "amplify-storagemanager__file__wrapper",
  StorageManagerFileList: "amplify-storagemanager__file__list",
  StorageManagerFileName: "amplify-storagemanager__file__name",
  StorageManagerFileSize: "amplify-storagemanager__file__size",
  StorageManagerFileInfo: "amplify-storagemanager__file__info",
  StorageManagerFileImage: "amplify-storagemanager__file__image",
  StorageManagerFileMain: "amplify-storagemanager__file__main",
  StorageManagerFileStatus: "amplify-storagemanager__file__status",
  StorageManagerLoader: "amplify-storagemanager__loader",
  StorageManagerPreviewer: "amplify-storagemanager__previewer",
  StorageManagerPreviewerText: "amplify-storagemanager__previewer__text",
  StorageManagerPreviewerActions: "amplify-storagemanager__previewer__actions",
  StorageManagerPreviewerFooter: "amplify-storagemanager__previewer__footer",
  SwitchField: "amplify-switchfield",
  SwitchLabel: "amplify-switch__label",
  SwitchThumb: "amplify-switch__thumb",
  SwitchTrack: "amplify-switch__track",
  SwitchWrapper: "amplify-switch__wrapper",
  Table: "amplify-table",
  TableCaption: "amplify-table__caption",
  TableBody: "amplify-table__body",
  TableTd: "amplify-table__td",
  TableTh: "amplify-table__th",
  TableFoot: "amplify-table__foot",
  TableHead: "amplify-table__head",
  TableRow: "amplify-table__row",
  Tabs: "amplify-tabs",
  TabsList: "amplify-tabs__list",
  TabsItem: "amplify-tabs__item",
  TabsPanel: "amplify-tabs__panel",
  Text: "amplify-text",
  Textarea: "amplify-textarea",
  TextAreaField: "amplify-textareafield",
  TextField: "amplify-textfield",
  ToggleButton: "amplify-togglebutton",
  ToggleButtonGroup: "amplify-togglebuttongroup",
  VisuallyHidden: "amplify-visually-hidden"
};

// node_modules/@aws-amplify/ui/dist/esm/utils/setUserAgent/setUserAgent.mjs
var setUserAgent = ({ componentName, packageName, version: version2 }) => {
  const packageData = [`ui-${packageName}`, version2];
  switch (componentName) {
    case "AIConversation": {
      setCustomUserAgent({
        ...AI_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "Authenticator": {
      setCustomUserAgent({
        ...AUTHENTICATOR_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "ChangePassword":
    case "DeleteUser": {
      setCustomUserAgent({
        ...ACCOUNT_SETTINGS_INPUT_BASE,
        additionalDetails: [["AccountSettings"], packageData]
      });
      break;
    }
    case "FileUploader": {
      setCustomUserAgent({
        ...FILE_UPLOADER_BASE_INPUT,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "InAppMessaging": {
      setCustomUserAgent({
        ...IN_APP_MESSAGING_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "LocationSearch": {
      setCustomUserAgent({
        ...LOCATION_SEARCH_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "MapView": {
      setCustomUserAgent({
        ...MAP_VIEW_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "StorageManager": {
      setCustomUserAgent({
        ...STORAGE_MANAGER_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
    case "StorageBrowser": {
      setCustomUserAgent({
        ...STORAGE_BROWSER_INPUT_BASE,
        additionalDetails: [[componentName], packageData]
      });
      break;
    }
  }
  return noop2;
};

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorContext.mjs
var import_react6 = __toESM(require_react(), 1);
var AuthenticatorContext = import_react6.default.createContext(null);

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorProvider.mjs
var createHubHandler = (options) => (data, service) => {
  defaultAuthHubHandler(data, service, options);
};
function AuthenticatorProvider({ children: children2 }) {
  const [authStatus, setAuthStatus] = import_react7.default.useState("configuring");
  import_react7.default.useEffect(() => {
    getCurrentUser2().then(() => {
      setAuthStatus("authenticated");
    }).catch(() => {
      setAuthStatus("unauthenticated");
    });
  }, []);
  const parentProviderVal = (0, import_react7.useContext)(AuthenticatorContext);
  const service = useInterpret(createAuthenticatorMachine);
  const value = (0, import_react7.useMemo)(() => !parentProviderVal ? { authStatus, service } : parentProviderVal, [authStatus, parentProviderVal, service]);
  const { service: activeService } = value;
  (0, import_react7.useEffect)(() => {
    const onSignIn = () => {
      setAuthStatus("authenticated");
    };
    const onSignOut = () => {
      setAuthStatus("unauthenticated");
    };
    const unsubscribe = listenToAuthHub(activeService, createHubHandler({ onSignIn, onSignOut }));
    return unsubscribe;
  }, [activeService]);
  return import_react7.default.createElement(AuthenticatorContext.Provider, { value }, children2);
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/useAuthenticator.mjs
var import_react9 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/constants.mjs
var USE_AUTHENTICATOR_ERROR = "`useAuthenticator` must be used inside an `Authenticator.Provider`.";

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/constants.mjs
var COMPONENT_ROUTE_KEYS = [
  "confirmResetPassword",
  "confirmSignIn",
  "confirmSignUp",
  "confirmVerifyUser",
  "forceNewPassword",
  "forgotPassword",
  "selectMfaType",
  "setupEmail",
  "setupTotp",
  "signIn",
  "signUp",
  "verifyUser"
];

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/utils.mjs
var isComponentRouteKey = (route) => COMPONENT_ROUTE_KEYS.some((componentRoute) => componentRoute === route);

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/utils.mjs
var defaultComparator = () => false;
function areSelectorDepsEqual(currentDeps, nextDeps) {
  if (currentDeps.length !== nextDeps.length) {
    return false;
  }
  return currentDeps.every((currentDep, index3) => {
    const nextDep = nextDeps[index3];
    if (areEmptyArrays(currentDep, nextDep) || areEmptyObjects(currentDep, nextDep)) {
      return true;
    }
    return currentDep === nextDep;
  });
}
var getComparator = (selector) => (currentFacade, nextFacade) => {
  const currentSelectorDeps = selector(currentFacade);
  const nextSelectorDeps = selector(nextFacade);
  return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);
};
var getQRFields = (state) => {
  var _a2, _b, _c;
  return {
    ...(_c = (_b = (_a2 = getActorContext(state)) == null ? void 0 : _a2.formFields) == null ? void 0 : _b.setupTotp) == null ? void 0 : _c.QR
  };
};
var flattenFormFields = (fields) => fields.flatMap(([name2, options]) => ({ name: name2, ...options }));
var convertContactMethodsToFields = (unverifiedUserAttributes = {}) => {
  return unverifiedUserAttributes && Object.entries(unverifiedUserAttributes).map(([name2, value]) => {
    const valueIsString = isString2(value);
    if (!valueIsString || !name2) {
      return {};
    }
    return { name: name2, label: value, type: "radio", value };
  });
};
var convertAllowedMfaTypesToFields = (allowedMfaTypes = []) => {
  return allowedMfaTypes.map((mfaType) => ({
    name: "mfa_type",
    label: authenticatorTextUtil.getMfaTypeLabelByValue(mfaType),
    type: "radio",
    value: mfaType
  }));
};
var getMachineFields = (route, state) => {
  if (isComponentRouteKey(route)) {
    if (route === "verifyUser") {
      return convertContactMethodsToFields(getActorContext(state).unverifiedUserAttributes);
    }
    if (route === "selectMfaType") {
      return convertAllowedMfaTypesToFields(getActorContext(state).allowedMfaTypes);
    }
    return flattenFormFields(getSortedFormFields(route, state));
  }
  return [];
};

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/useAuthenticator.mjs
function useAuthenticator(selector) {
  const context2 = import_react9.default.useContext(AuthenticatorContext);
  if (!context2) {
    throw new Error(USE_AUTHENTICATOR_ERROR);
  }
  const { service } = context2;
  const { send: send3 } = service;
  const xstateSelector = (0, import_react9.useCallback)((state) => ({ ...getServiceFacade({ send: send3, state }) }), [send3]);
  const comparator = selector ? getComparator(selector) : defaultComparator;
  const { authStatus } = context2;
  const facade = useSelector(service, xstateSelector, comparator);
  const { route, totpSecretCode, user, ...rest } = facade;
  const serviceSnapshot = service.getSnapshot();
  const QRFields = route === "setupTotp" ? getQRFields(serviceSnapshot) : null;
  const fields = getMachineFields(route, serviceSnapshot);
  return {
    ...rest,
    authStatus,
    route,
    totpSecretCode,
    user,
    /** @deprecated For internal use only */
    fields,
    QRFields
  };
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/useAuthenticatorRoute.mjs
var import_react14 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/utils.mjs
var import_react13 = __toESM(require_react(), 1);

// node_modules/react-hook-form/dist/index.esm.mjs
var React3 = __toESM(require_react(), 1);
var import_react11 = __toESM(require_react(), 1);
var isCheckBoxInput = (element) => element.type === "checkbox";
var isDateObject = (value) => value instanceof Date;
var isNullOrUndefined = (value) => value == null;
var isObjectType = (value) => typeof value === "object";
var isObject2 = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
var getEventValue = (event2) => isObject2(event2) && event2.target ? isCheckBoxInput(event2.target) ? event2.target.checked : event2.target.value : event2;
var getNodeParentName = (name2) => name2.substring(0, name2.search(/\.\d+(\.|$)/)) || name2;
var isNameInFieldArray = (names, name2) => names.has(getNodeParentName(name2));
var isPlainObject = (tempObject) => {
  const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
  return isObject2(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
};
var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
function cloneObject(data) {
  let copy4;
  const isArray6 = Array.isArray(data);
  const isFileListInstance = typeof FileList !== "undefined" ? data instanceof FileList : false;
  if (data instanceof Date) {
    copy4 = new Date(data);
  } else if (data instanceof Set) {
    copy4 = new Set(data);
  } else if (!(isWeb && (data instanceof Blob || isFileListInstance)) && (isArray6 || isObject2(data))) {
    copy4 = isArray6 ? [] : {};
    if (!isArray6 && !isPlainObject(data)) {
      copy4 = data;
    } else {
      for (const key in data) {
        if (data.hasOwnProperty(key)) {
          copy4[key] = cloneObject(data[key]);
        }
      }
    }
  } else {
    return data;
  }
  return copy4;
}
var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
var isUndefined2 = (val) => val === void 0;
var get = (object, path2, defaultValue2) => {
  if (!path2 || !isObject2(object)) {
    return defaultValue2;
  }
  const result = compact(path2.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object);
  return isUndefined2(result) || result === object ? isUndefined2(object[path2]) ? defaultValue2 : object[path2] : result;
};
var isBoolean = (value) => typeof value === "boolean";
var isKey = (value) => /^\w*$/.test(value);
var stringToPath = (input2) => compact(input2.replace(/["|']|\]/g, "").split(/\.|\[/));
var set = (object, path2, value) => {
  let index3 = -1;
  const tempPath = isKey(path2) ? [path2] : stringToPath(path2);
  const length = tempPath.length;
  const lastIndex = length - 1;
  while (++index3 < length) {
    const key = tempPath[index3];
    let newValue = value;
    if (index3 !== lastIndex) {
      const objValue = object[key];
      newValue = isObject2(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index3 + 1]) ? [] : {};
    }
    if (key === "__proto__" || key === "constructor" || key === "prototype") {
      return;
    }
    object[key] = newValue;
    object = object[key];
  }
};
var EVENTS = {
  BLUR: "blur",
  FOCUS_OUT: "focusout",
  CHANGE: "change"
};
var VALIDATION_MODE = {
  onBlur: "onBlur",
  onChange: "onChange",
  onSubmit: "onSubmit",
  onTouched: "onTouched",
  all: "all"
};
var INPUT_VALIDATION_RULES = {
  max: "max",
  min: "min",
  maxLength: "maxLength",
  minLength: "minLength",
  pattern: "pattern",
  required: "required",
  validate: "validate"
};
var HookFormContext = import_react11.default.createContext(null);
var FormProvider = (props) => {
  const { children: children2, ...data } = props;
  return import_react11.default.createElement(HookFormContext.Provider, { value: data }, children2);
};
var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
  const result = {
    defaultValues: control._defaultValues
  };
  for (const key in formState) {
    Object.defineProperty(result, key, {
      get: () => {
        const _key = key;
        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
        }
        localProxyFormState && (localProxyFormState[_key] = true);
        return formState[_key];
      }
    });
  }
  return result;
};
var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
function deepEqual(object1, object2) {
  if (isPrimitive(object1) || isPrimitive(object2)) {
    return object1 === object2;
  }
  if (isDateObject(object1) && isDateObject(object2)) {
    return object1.getTime() === object2.getTime();
  }
  const keys1 = Object.keys(object1);
  const keys2 = Object.keys(object2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (const key of keys1) {
    const val1 = object1[key];
    if (!keys2.includes(key)) {
      return false;
    }
    if (key !== "ref") {
      const val2 = object2[key];
      if (isDateObject(val1) && isDateObject(val2) || isObject2(val1) && isObject2(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {
        return false;
      }
    }
  }
  return true;
}
var isString3 = (value) => typeof value === "string";
var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue2) => {
  if (isString3(names)) {
    isGlobal && _names.watch.add(names);
    return get(formValues, names, defaultValue2);
  }
  if (Array.isArray(names)) {
    return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));
  }
  isGlobal && (_names.watchAll = true);
  return formValues;
};
var appendErrors = (name2, validateAllFieldCriteria, errors, type, message2) => validateAllFieldCriteria ? {
  ...errors[name2],
  types: {
    ...errors[name2] && errors[name2].types ? errors[name2].types : {},
    [type]: message2 || true
  }
} : {};
var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
var createSubject = () => {
  let _observers = [];
  const next = (value) => {
    for (const observer of _observers) {
      observer.next && observer.next(value);
    }
  };
  const subscribe = (observer) => {
    _observers.push(observer);
    return {
      unsubscribe: () => {
        _observers = _observers.filter((o) => o !== observer);
      }
    };
  };
  const unsubscribe = () => {
    _observers = [];
  };
  return {
    get observers() {
      return _observers;
    },
    next,
    subscribe,
    unsubscribe
  };
};
var isEmptyObject2 = (value) => isObject2(value) && !Object.keys(value).length;
var isFileInput = (element) => element.type === "file";
var isFunction4 = (value) => typeof value === "function";
var isHTMLElement = (value) => {
  if (!isWeb) {
    return false;
  }
  const owner = value ? value.ownerDocument : 0;
  return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
};
var isMultipleSelect = (element) => element.type === `select-multiple`;
var isRadioInput = (element) => element.type === "radio";
var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
var live = (ref) => isHTMLElement(ref) && ref.isConnected;
function baseGet(object, updatePath) {
  const length = updatePath.slice(0, -1).length;
  let index3 = 0;
  while (index3 < length) {
    object = isUndefined2(object) ? index3++ : object[updatePath[index3++]];
  }
  return object;
}
function isEmptyArray2(obj) {
  for (const key in obj) {
    if (obj.hasOwnProperty(key) && !isUndefined2(obj[key])) {
      return false;
    }
  }
  return true;
}
function unset(object, path2) {
  const paths = Array.isArray(path2) ? path2 : isKey(path2) ? [path2] : stringToPath(path2);
  const childObject = paths.length === 1 ? object : baseGet(object, paths);
  const index3 = paths.length - 1;
  const key = paths[index3];
  if (childObject) {
    delete childObject[key];
  }
  if (index3 !== 0 && (isObject2(childObject) && isEmptyObject2(childObject) || Array.isArray(childObject) && isEmptyArray2(childObject))) {
    unset(object, paths.slice(0, -1));
  }
  return object;
}
var objectHasFunction = (data) => {
  for (const key in data) {
    if (isFunction4(data[key])) {
      return true;
    }
  }
  return false;
};
function markFieldsDirty(data, fields = {}) {
  const isParentNodeArray = Array.isArray(data);
  if (isObject2(data) || isParentNodeArray) {
    for (const key in data) {
      if (Array.isArray(data[key]) || isObject2(data[key]) && !objectHasFunction(data[key])) {
        fields[key] = Array.isArray(data[key]) ? [] : {};
        markFieldsDirty(data[key], fields[key]);
      } else if (!isNullOrUndefined(data[key])) {
        fields[key] = true;
      }
    }
  }
  return fields;
}
function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
  const isParentNodeArray = Array.isArray(data);
  if (isObject2(data) || isParentNodeArray) {
    for (const key in data) {
      if (Array.isArray(data[key]) || isObject2(data[key]) && !objectHasFunction(data[key])) {
        if (isUndefined2(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : { ...markFieldsDirty(data[key]) };
        } else {
          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
        }
      } else {
        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);
      }
    }
  }
  return dirtyFieldsFromValues;
}
var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
var defaultResult = {
  value: false,
  isValid: false
};
var validResult = { value: true, isValid: true };
var getCheckboxValue = (options) => {
  if (Array.isArray(options)) {
    if (options.length > 1) {
      const values = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
      return { value: values, isValid: !!values.length };
    }
    return options[0].checked && !options[0].disabled ? (
      // @ts-expect-error expected to work in the browser
      options[0].attributes && !isUndefined2(options[0].attributes.value) ? isUndefined2(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
    ) : defaultResult;
  }
  return defaultResult;
};
var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined2(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString3(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
var defaultReturn = {
  isValid: false,
  value: null
};
var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
  isValid: true,
  value: option.value
} : previous, defaultReturn) : defaultReturn;
function getFieldValue(_f) {
  const ref = _f.ref;
  if (isFileInput(ref)) {
    return ref.files;
  }
  if (isRadioInput(ref)) {
    return getRadioValue(_f.refs).value;
  }
  if (isMultipleSelect(ref)) {
    return [...ref.selectedOptions].map(({ value }) => value);
  }
  if (isCheckBoxInput(ref)) {
    return getCheckboxValue(_f.refs).value;
  }
  return getFieldValueAs(isUndefined2(ref.value) ? _f.ref.value : ref.value, _f);
}
var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
  const fields = {};
  for (const name2 of fieldsNames) {
    const field2 = get(_fields, name2);
    field2 && set(fields, name2, field2._f);
  }
  return {
    criteriaMode,
    names: [...fieldsNames],
    fields,
    shouldUseNativeValidation
  };
};
var isRegex = (value) => value instanceof RegExp;
var getRuleValue = (rule) => isUndefined2(rule) ? rule : isRegex(rule) ? rule.source : isObject2(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
var getValidationModes = (mode) => ({
  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
  isOnBlur: mode === VALIDATION_MODE.onBlur,
  isOnChange: mode === VALIDATION_MODE.onChange,
  isOnAll: mode === VALIDATION_MODE.all,
  isOnTouch: mode === VALIDATION_MODE.onTouched
});
var ASYNC_FUNCTION = "AsyncFunction";
var hasPromiseValidation = (fieldReference) => !!fieldReference && !!fieldReference.validate && !!(isFunction4(fieldReference.validate) && fieldReference.validate.constructor.name === ASYNC_FUNCTION || isObject2(fieldReference.validate) && Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION));
var hasValidation = (options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);
var isWatched = (name2, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name2) || [..._names.watch].some((watchName) => name2.startsWith(watchName) && /^\.\w+/.test(name2.slice(watchName.length))));
var iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
  for (const key of fieldsNames || Object.keys(fields)) {
    const field2 = get(fields, key);
    if (field2) {
      const { _f, ...currentField } = field2;
      if (_f) {
        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {
          return true;
        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {
          return true;
        } else {
          if (iterateFieldsByAction(currentField, action)) {
            break;
          }
        }
      } else if (isObject2(currentField)) {
        if (iterateFieldsByAction(currentField, action)) {
          break;
        }
      }
    }
  }
  return;
};
function schemaErrorLookup(errors, _fields, name2) {
  const error3 = get(errors, name2);
  if (error3 || isKey(name2)) {
    return {
      error: error3,
      name: name2
    };
  }
  const names = name2.split(".");
  while (names.length) {
    const fieldName = names.join(".");
    const field2 = get(_fields, fieldName);
    const foundError = get(errors, fieldName);
    if (field2 && !Array.isArray(field2) && name2 !== fieldName) {
      return { name: name2 };
    }
    if (foundError && foundError.type) {
      return {
        name: fieldName,
        error: foundError
      };
    }
    names.pop();
  }
  return {
    name: name2
  };
}
var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
  updateFormState(formStateData);
  const { name: name2, ...formState } = formStateData;
  return isEmptyObject2(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
};
var shouldSubscribeByName = (name2, signalName, exact) => !name2 || !signalName || name2 === signalName || convertToArrayPayload(name2).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName)));
var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
  if (mode.isOnAll) {
    return false;
  } else if (!isSubmitted && mode.isOnTouch) {
    return !(isTouched || isBlurEvent);
  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
    return !isBlurEvent;
  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
    return isBlurEvent;
  }
  return true;
};
var unsetEmptyArray = (ref, name2) => !compact(get(ref, name2)).length && unset(ref, name2);
var updateFieldArrayRootError = (errors, error3, name2) => {
  const fieldArrayErrors = convertToArrayPayload(get(errors, name2));
  set(fieldArrayErrors, "root", error3[name2]);
  set(errors, name2, fieldArrayErrors);
  return errors;
};
var isMessage = (value) => isString3(value);
function getValidateError(result, ref, type = "validate") {
  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
    return {
      type,
      message: isMessage(result) ? result : "",
      ref
    };
  }
}
var getValueAndMessage = (validationData) => isObject2(validationData) && !isRegex(validationData) ? validationData : {
  value: validationData,
  message: ""
};
var validateField = async (field2, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
  const { ref, refs, required, maxLength, minLength, min: min3, max: max3, pattern, validate: validate2, name: name2, valueAsNumber, mount } = field2._f;
  const inputValue = get(formValues, name2);
  if (!mount || disabledFieldNames.has(name2)) {
    return {};
  }
  const inputRef = refs ? refs[0] : ref;
  const setCustomValidity = (message2) => {
    if (shouldUseNativeValidation && inputRef.reportValidity) {
      inputRef.setCustomValidity(isBoolean(message2) ? "" : message2 || "");
      inputRef.reportValidity();
    }
  };
  const error3 = {};
  const isRadio = isRadioInput(ref);
  const isCheckBox = isCheckBoxInput(ref);
  const isRadioOrCheckbox2 = isRadio || isCheckBox;
  const isEmpty3 = (valueAsNumber || isFileInput(ref)) && isUndefined2(ref.value) && isUndefined2(inputValue) || isHTMLElement(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
  const appendErrorsCurry = appendErrors.bind(null, name2, validateAllFieldCriteria, error3);
  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
    const message2 = exceedMax ? maxLengthMessage : minLengthMessage;
    error3[name2] = {
      type: exceedMax ? maxType : minType,
      message: message2,
      ref,
      ...appendErrorsCurry(exceedMax ? maxType : minType, message2)
    };
  };
  if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty3 || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
    const { value, message: message2 } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
    if (value) {
      error3[name2] = {
        type: INPUT_VALIDATION_RULES.required,
        message: message2,
        ref: inputRef,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message2)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message2);
        return error3;
      }
    }
  }
  if (!isEmpty3 && (!isNullOrUndefined(min3) || !isNullOrUndefined(max3))) {
    let exceedMax;
    let exceedMin;
    const maxOutput = getValueAndMessage(max3);
    const minOutput = getValueAndMessage(min3);
    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
      const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
      if (!isNullOrUndefined(maxOutput.value)) {
        exceedMax = valueNumber > maxOutput.value;
      }
      if (!isNullOrUndefined(minOutput.value)) {
        exceedMin = valueNumber < minOutput.value;
      }
    } else {
      const valueDate = ref.valueAsDate || new Date(inputValue);
      const convertTimeToDate = (time2) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time2);
      const isTime = ref.type == "time";
      const isWeek = ref.type == "week";
      if (isString3(maxOutput.value) && inputValue) {
        exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
      }
      if (isString3(minOutput.value) && inputValue) {
        exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
      }
    }
    if (exceedMax || exceedMin) {
      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error3[name2].message);
        return error3;
      }
    }
  }
  if ((maxLength || minLength) && !isEmpty3 && (isString3(inputValue) || isFieldArray && Array.isArray(inputValue))) {
    const maxLengthOutput = getValueAndMessage(maxLength);
    const minLengthOutput = getValueAndMessage(minLength);
    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
    if (exceedMax || exceedMin) {
      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
      if (!validateAllFieldCriteria) {
        setCustomValidity(error3[name2].message);
        return error3;
      }
    }
  }
  if (pattern && !isEmpty3 && isString3(inputValue)) {
    const { value: patternValue, message: message2 } = getValueAndMessage(pattern);
    if (isRegex(patternValue) && !inputValue.match(patternValue)) {
      error3[name2] = {
        type: INPUT_VALIDATION_RULES.pattern,
        message: message2,
        ref,
        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message2)
      };
      if (!validateAllFieldCriteria) {
        setCustomValidity(message2);
        return error3;
      }
    }
  }
  if (validate2) {
    if (isFunction4(validate2)) {
      const result = await validate2(inputValue, formValues);
      const validateError = getValidateError(result, inputRef);
      if (validateError) {
        error3[name2] = {
          ...validateError,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(validateError.message);
          return error3;
        }
      }
    } else if (isObject2(validate2)) {
      let validationResult = {};
      for (const key in validate2) {
        if (!isEmptyObject2(validationResult) && !validateAllFieldCriteria) {
          break;
        }
        const validateError = getValidateError(await validate2[key](inputValue, formValues), inputRef, key);
        if (validateError) {
          validationResult = {
            ...validateError,
            ...appendErrorsCurry(key, validateError.message)
          };
          setCustomValidity(validateError.message);
          if (validateAllFieldCriteria) {
            error3[name2] = validationResult;
          }
        }
      }
      if (!isEmptyObject2(validationResult)) {
        error3[name2] = {
          ref: inputRef,
          ...validationResult
        };
        if (!validateAllFieldCriteria) {
          return error3;
        }
      }
    }
  }
  setCustomValidity(true);
  return error3;
};
var defaultOptions2 = {
  mode: VALIDATION_MODE.onSubmit,
  reValidateMode: VALIDATION_MODE.onChange,
  shouldFocusError: true
};
function createFormControl(props = {}) {
  let _options = {
    ...defaultOptions2,
    ...props
  };
  let _formState = {
    submitCount: 0,
    isDirty: false,
    isReady: false,
    isLoading: isFunction4(_options.defaultValues),
    isValidating: false,
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    touchedFields: {},
    dirtyFields: {},
    validatingFields: {},
    errors: _options.errors || {},
    disabled: _options.disabled || false
  };
  const _fields = {};
  let _defaultValues = isObject2(_options.defaultValues) || isObject2(_options.values) ? cloneObject(_options.values || _options.defaultValues) || {} : {};
  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
  let _state = {
    action: false,
    mount: false,
    watch: false
  };
  let _names = {
    mount: /* @__PURE__ */ new Set(),
    disabled: /* @__PURE__ */ new Set(),
    unMount: /* @__PURE__ */ new Set(),
    array: /* @__PURE__ */ new Set(),
    watch: /* @__PURE__ */ new Set()
  };
  let delayErrorCallback;
  let timer2 = 0;
  const _proxyFormState = {
    isDirty: false,
    dirtyFields: false,
    validatingFields: false,
    touchedFields: false,
    isValidating: false,
    isValid: false,
    errors: false
  };
  let _proxySubscribeFormState = {
    ..._proxyFormState
  };
  const _subjects = {
    array: createSubject(),
    state: createSubject()
  };
  const validationModeBeforeSubmit = getValidationModes(_options.mode);
  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
  const debounce4 = (callback) => (wait) => {
    clearTimeout(timer2);
    timer2 = setTimeout(callback, wait);
  };
  const _setValid = async (shouldUpdateValid) => {
    if (!_options.disabled && (_proxyFormState.isValid || _proxySubscribeFormState.isValid || shouldUpdateValid)) {
      const isValid = _options.resolver ? isEmptyObject2((await _runSchema()).errors) : await executeBuiltInValidation(_fields, true);
      if (isValid !== _formState.isValid) {
        _subjects.state.next({
          isValid
        });
      }
    }
  };
  const _updateIsValidating = (names, isValidating) => {
    if (!_options.disabled && (_proxyFormState.isValidating || _proxyFormState.validatingFields || _proxySubscribeFormState.isValidating || _proxySubscribeFormState.validatingFields)) {
      (names || Array.from(_names.mount)).forEach((name2) => {
        if (name2) {
          isValidating ? set(_formState.validatingFields, name2, isValidating) : unset(_formState.validatingFields, name2);
        }
      });
      _subjects.state.next({
        validatingFields: _formState.validatingFields,
        isValidating: !isEmptyObject2(_formState.validatingFields)
      });
    }
  };
  const _setFieldArray = (name2, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
    if (args && method && !_options.disabled) {
      _state.action = true;
      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name2))) {
        const fieldValues = method(get(_fields, name2), args.argA, args.argB);
        shouldSetValues && set(_fields, name2, fieldValues);
      }
      if (shouldUpdateFieldsAndState && Array.isArray(get(_formState.errors, name2))) {
        const errors = method(get(_formState.errors, name2), args.argA, args.argB);
        shouldSetValues && set(_formState.errors, name2, errors);
        unsetEmptyArray(_formState.errors, name2);
      }
      if ((_proxyFormState.touchedFields || _proxySubscribeFormState.touchedFields) && shouldUpdateFieldsAndState && Array.isArray(get(_formState.touchedFields, name2))) {
        const touchedFields = method(get(_formState.touchedFields, name2), args.argA, args.argB);
        shouldSetValues && set(_formState.touchedFields, name2, touchedFields);
      }
      if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {
        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
      }
      _subjects.state.next({
        name: name2,
        isDirty: _getDirty(name2, values),
        dirtyFields: _formState.dirtyFields,
        errors: _formState.errors,
        isValid: _formState.isValid
      });
    } else {
      set(_formValues, name2, values);
    }
  };
  const updateErrors = (name2, error3) => {
    set(_formState.errors, name2, error3);
    _subjects.state.next({
      errors: _formState.errors
    });
  };
  const _setErrors = (errors) => {
    _formState.errors = errors;
    _subjects.state.next({
      errors: _formState.errors,
      isValid: false
    });
  };
  const updateValidAndValue = (name2, shouldSkipSetValueAs, value, ref) => {
    const field2 = get(_fields, name2);
    if (field2) {
      const defaultValue2 = get(_formValues, name2, isUndefined2(value) ? get(_defaultValues, name2) : value);
      isUndefined2(defaultValue2) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name2, shouldSkipSetValueAs ? defaultValue2 : getFieldValue(field2._f)) : setFieldValue(name2, defaultValue2);
      _state.mount && _setValid();
    }
  };
  const updateTouchAndDirty = (name2, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
    let shouldUpdateField = false;
    let isPreviousDirty = false;
    const output = {
      name: name2
    };
    if (!_options.disabled) {
      if (!isBlurEvent || shouldDirty) {
        if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {
          isPreviousDirty = _formState.isDirty;
          _formState.isDirty = output.isDirty = _getDirty();
          shouldUpdateField = isPreviousDirty !== output.isDirty;
        }
        const isCurrentFieldPristine = deepEqual(get(_defaultValues, name2), fieldValue);
        isPreviousDirty = !!get(_formState.dirtyFields, name2);
        isCurrentFieldPristine ? unset(_formState.dirtyFields, name2) : set(_formState.dirtyFields, name2, true);
        output.dirtyFields = _formState.dirtyFields;
        shouldUpdateField = shouldUpdateField || (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) && isPreviousDirty !== !isCurrentFieldPristine;
      }
      if (isBlurEvent) {
        const isPreviousFieldTouched = get(_formState.touchedFields, name2);
        if (!isPreviousFieldTouched) {
          set(_formState.touchedFields, name2, isBlurEvent);
          output.touchedFields = _formState.touchedFields;
          shouldUpdateField = shouldUpdateField || (_proxyFormState.touchedFields || _proxySubscribeFormState.touchedFields) && isPreviousFieldTouched !== isBlurEvent;
        }
      }
      shouldUpdateField && shouldRender && _subjects.state.next(output);
    }
    return shouldUpdateField ? output : {};
  };
  const shouldRenderByError = (name2, isValid, error3, fieldState) => {
    const previousFieldError = get(_formState.errors, name2);
    const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) && isBoolean(isValid) && _formState.isValid !== isValid;
    if (_options.delayError && error3) {
      delayErrorCallback = debounce4(() => updateErrors(name2, error3));
      delayErrorCallback(_options.delayError);
    } else {
      clearTimeout(timer2);
      delayErrorCallback = null;
      error3 ? set(_formState.errors, name2, error3) : unset(_formState.errors, name2);
    }
    if ((error3 ? !deepEqual(previousFieldError, error3) : previousFieldError) || !isEmptyObject2(fieldState) || shouldUpdateValid) {
      const updatedFormState = {
        ...fieldState,
        ...shouldUpdateValid && isBoolean(isValid) ? { isValid } : {},
        errors: _formState.errors,
        name: name2
      };
      _formState = {
        ..._formState,
        ...updatedFormState
      };
      _subjects.state.next(updatedFormState);
    }
  };
  const _runSchema = async (name2) => {
    _updateIsValidating(name2, true);
    const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name2 || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
    _updateIsValidating(name2);
    return result;
  };
  const executeSchemaAndUpdateState = async (names) => {
    const { errors } = await _runSchema(names);
    if (names) {
      for (const name2 of names) {
        const error3 = get(errors, name2);
        error3 ? set(_formState.errors, name2, error3) : unset(_formState.errors, name2);
      }
    } else {
      _formState.errors = errors;
    }
    return errors;
  };
  const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context2 = {
    valid: true
  }) => {
    for (const name2 in fields) {
      const field2 = fields[name2];
      if (field2) {
        const { _f, ...fieldValue } = field2;
        if (_f) {
          const isFieldArrayRoot = _names.array.has(_f.name);
          const isPromiseFunction = field2._f && hasPromiseValidation(field2._f);
          if (isPromiseFunction && _proxyFormState.validatingFields) {
            _updateIsValidating([name2], true);
          }
          const fieldError = await validateField(field2, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
          if (isPromiseFunction && _proxyFormState.validatingFields) {
            _updateIsValidating([name2]);
          }
          if (fieldError[_f.name]) {
            context2.valid = false;
            if (shouldOnlyCheckValid) {
              break;
            }
          }
          !shouldOnlyCheckValid && (get(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));
        }
        !isEmptyObject2(fieldValue) && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context2);
      }
    }
    return context2.valid;
  };
  const _removeUnmounted = () => {
    for (const name2 of _names.unMount) {
      const field2 = get(_fields, name2);
      field2 && (field2._f.refs ? field2._f.refs.every((ref) => !live(ref)) : !live(field2._f.ref)) && unregister(name2);
    }
    _names.unMount = /* @__PURE__ */ new Set();
  };
  const _getDirty = (name2, data) => !_options.disabled && (name2 && data && set(_formValues, name2, data), !deepEqual(getValues(), _defaultValues));
  const _getWatch = (names, defaultValue2, isGlobal) => generateWatchOutput(names, _names, {
    ..._state.mount ? _formValues : isUndefined2(defaultValue2) ? _defaultValues : isString3(names) ? { [names]: defaultValue2 } : defaultValue2
  }, isGlobal, defaultValue2);
  const _getFieldArray = (name2) => compact(get(_state.mount ? _formValues : _defaultValues, name2, _options.shouldUnregister ? get(_defaultValues, name2, []) : []));
  const setFieldValue = (name2, value, options = {}) => {
    const field2 = get(_fields, name2);
    let fieldValue = value;
    if (field2) {
      const fieldReference = field2._f;
      if (fieldReference) {
        !fieldReference.disabled && set(_formValues, name2, getFieldValueAs(value, fieldReference));
        fieldValue = isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
        if (isMultipleSelect(fieldReference.ref)) {
          [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
        } else if (fieldReference.refs) {
          if (isCheckBoxInput(fieldReference.ref)) {
            fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
          } else {
            fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
          }
        } else if (isFileInput(fieldReference.ref)) {
          fieldReference.ref.value = "";
        } else {
          fieldReference.ref.value = fieldValue;
          if (!fieldReference.ref.type) {
            _subjects.state.next({
              name: name2,
              values: cloneObject(_formValues)
            });
          }
        }
      }
    }
    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name2, fieldValue, options.shouldTouch, options.shouldDirty, true);
    options.shouldValidate && trigger(name2);
  };
  const setValues = (name2, value, options) => {
    for (const fieldKey in value) {
      const fieldValue = value[fieldKey];
      const fieldName = `${name2}.${fieldKey}`;
      const field2 = get(_fields, fieldName);
      (_names.array.has(name2) || isObject2(fieldValue) || field2 && !field2._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
    }
  };
  const setValue = (name2, value, options = {}) => {
    const field2 = get(_fields, name2);
    const isFieldArray = _names.array.has(name2);
    const cloneValue = cloneObject(value);
    set(_formValues, name2, cloneValue);
    if (isFieldArray) {
      _subjects.array.next({
        name: name2,
        values: cloneObject(_formValues)
      });
      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields || _proxySubscribeFormState.isDirty || _proxySubscribeFormState.dirtyFields) && options.shouldDirty) {
        _subjects.state.next({
          name: name2,
          dirtyFields: getDirtyFields(_defaultValues, _formValues),
          isDirty: _getDirty(name2, cloneValue)
        });
      }
    } else {
      field2 && !field2._f && !isNullOrUndefined(cloneValue) ? setValues(name2, cloneValue, options) : setFieldValue(name2, cloneValue, options);
    }
    isWatched(name2, _names) && _subjects.state.next({ ..._formState });
    _subjects.state.next({
      name: _state.mount ? name2 : void 0,
      values: cloneObject(_formValues)
    });
  };
  const onChange = async (event2) => {
    _state.mount = true;
    const target = event2.target;
    let name2 = target.name;
    let isFieldValueUpdated = true;
    const field2 = get(_fields, name2);
    const _updateIsFieldValueUpdated = (fieldValue) => {
      isFieldValueUpdated = Number.isNaN(fieldValue) || isDateObject(fieldValue) && isNaN(fieldValue.getTime()) || deepEqual(fieldValue, get(_formValues, name2, fieldValue));
    };
    if (field2) {
      let error3;
      let isValid;
      const fieldValue = target.type ? getFieldValue(field2._f) : getEventValue(event2);
      const isBlurEvent = event2.type === EVENTS.BLUR || event2.type === EVENTS.FOCUS_OUT;
      const shouldSkipValidation = !hasValidation(field2._f) && !_options.resolver && !get(_formState.errors, name2) && !field2._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name2), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
      const watched = isWatched(name2, _names, isBlurEvent);
      set(_formValues, name2, fieldValue);
      if (isBlurEvent) {
        field2._f.onBlur && field2._f.onBlur(event2);
        delayErrorCallback && delayErrorCallback(0);
      } else if (field2._f.onChange) {
        field2._f.onChange(event2);
      }
      const fieldState = updateTouchAndDirty(name2, fieldValue, isBlurEvent);
      const shouldRender = !isEmptyObject2(fieldState) || watched;
      !isBlurEvent && _subjects.state.next({
        name: name2,
        type: event2.type,
        values: cloneObject(_formValues)
      });
      if (shouldSkipValidation) {
        if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {
          if (_options.mode === "onBlur") {
            if (isBlurEvent) {
              _setValid();
            }
          } else if (!isBlurEvent) {
            _setValid();
          }
        }
        return shouldRender && _subjects.state.next({ name: name2, ...watched ? {} : fieldState });
      }
      !isBlurEvent && watched && _subjects.state.next({ ..._formState });
      if (_options.resolver) {
        const { errors } = await _runSchema([name2]);
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name2);
          const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name2);
          error3 = errorLookupResult.error;
          name2 = errorLookupResult.name;
          isValid = isEmptyObject2(errors);
        }
      } else {
        _updateIsValidating([name2], true);
        error3 = (await validateField(field2, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name2];
        _updateIsValidating([name2]);
        _updateIsFieldValueUpdated(fieldValue);
        if (isFieldValueUpdated) {
          if (error3) {
            isValid = false;
          } else if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {
            isValid = await executeBuiltInValidation(_fields, true);
          }
        }
      }
      if (isFieldValueUpdated) {
        field2._f.deps && trigger(field2._f.deps);
        shouldRenderByError(name2, isValid, error3, fieldState);
      }
    }
  };
  const _focusInput = (ref, key) => {
    if (get(_formState.errors, key) && ref.focus) {
      ref.focus();
      return 1;
    }
    return;
  };
  const trigger = async (name2, options = {}) => {
    let isValid;
    let validationResult;
    const fieldNames = convertToArrayPayload(name2);
    if (_options.resolver) {
      const errors = await executeSchemaAndUpdateState(isUndefined2(name2) ? name2 : fieldNames);
      isValid = isEmptyObject2(errors);
      validationResult = name2 ? !fieldNames.some((name3) => get(errors, name3)) : isValid;
    } else if (name2) {
      validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
        const field2 = get(_fields, fieldName);
        return await executeBuiltInValidation(field2 && field2._f ? { [fieldName]: field2 } : field2);
      }))).every(Boolean);
      !(!validationResult && !_formState.isValid) && _setValid();
    } else {
      validationResult = isValid = await executeBuiltInValidation(_fields);
    }
    _subjects.state.next({
      ...!isString3(name2) || (_proxyFormState.isValid || _proxySubscribeFormState.isValid) && isValid !== _formState.isValid ? {} : { name: name2 },
      ..._options.resolver || !name2 ? { isValid } : {},
      errors: _formState.errors
    });
    options.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name2 ? fieldNames : _names.mount);
    return validationResult;
  };
  const getValues = (fieldNames) => {
    const values = {
      ..._state.mount ? _formValues : _defaultValues
    };
    return isUndefined2(fieldNames) ? values : isString3(fieldNames) ? get(values, fieldNames) : fieldNames.map((name2) => get(values, name2));
  };
  const getFieldState = (name2, formState) => ({
    invalid: !!get((formState || _formState).errors, name2),
    isDirty: !!get((formState || _formState).dirtyFields, name2),
    error: get((formState || _formState).errors, name2),
    isValidating: !!get(_formState.validatingFields, name2),
    isTouched: !!get((formState || _formState).touchedFields, name2)
  });
  const clearErrors = (name2) => {
    name2 && convertToArrayPayload(name2).forEach((inputName) => unset(_formState.errors, inputName));
    _subjects.state.next({
      errors: name2 ? _formState.errors : {}
    });
  };
  const setError = (name2, error3, options) => {
    const ref = (get(_fields, name2, { _f: {} })._f || {}).ref;
    const currentError = get(_formState.errors, name2) || {};
    const { ref: currentRef, message: message2, type, ...restOfErrorTree } = currentError;
    set(_formState.errors, name2, {
      ...restOfErrorTree,
      ...error3,
      ref
    });
    _subjects.state.next({
      name: name2,
      errors: _formState.errors,
      isValid: false
    });
    options && options.shouldFocus && ref && ref.focus && ref.focus();
  };
  const watch = (name2, defaultValue2) => isFunction4(name2) ? _subjects.state.subscribe({
    next: (payload) => name2(_getWatch(void 0, defaultValue2), payload)
  }) : _getWatch(name2, defaultValue2, true);
  const _subscribe = (props2) => _subjects.state.subscribe({
    next: (formState) => {
      if (shouldSubscribeByName(props2.name, formState.name, props2.exact) && shouldRenderFormState(formState, props2.formState || _proxyFormState, _setFormState, props2.reRenderRoot)) {
        props2.callback({
          values: { ..._formValues },
          ..._formState,
          ...formState
        });
      }
    }
  }).unsubscribe;
  const subscribe = (props2) => {
    _state.mount = true;
    _proxySubscribeFormState = {
      ..._proxySubscribeFormState,
      ...props2.formState
    };
    return _subscribe({
      ...props2,
      formState: _proxySubscribeFormState
    });
  };
  const unregister = (name2, options = {}) => {
    for (const fieldName of name2 ? convertToArrayPayload(name2) : _names.mount) {
      _names.mount.delete(fieldName);
      _names.array.delete(fieldName);
      if (!options.keepValue) {
        unset(_fields, fieldName);
        unset(_formValues, fieldName);
      }
      !options.keepError && unset(_formState.errors, fieldName);
      !options.keepDirty && unset(_formState.dirtyFields, fieldName);
      !options.keepTouched && unset(_formState.touchedFields, fieldName);
      !options.keepIsValidating && unset(_formState.validatingFields, fieldName);
      !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
    }
    _subjects.state.next({
      values: cloneObject(_formValues)
    });
    _subjects.state.next({
      ..._formState,
      ...!options.keepDirty ? {} : { isDirty: _getDirty() }
    });
    !options.keepIsValid && _setValid();
  };
  const _setDisabledField = ({ disabled, name: name2 }) => {
    if (isBoolean(disabled) && _state.mount || !!disabled || _names.disabled.has(name2)) {
      disabled ? _names.disabled.add(name2) : _names.disabled.delete(name2);
    }
  };
  const register = (name2, options = {}) => {
    let field2 = get(_fields, name2);
    const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);
    set(_fields, name2, {
      ...field2 || {},
      _f: {
        ...field2 && field2._f ? field2._f : { ref: { name: name2 } },
        name: name2,
        mount: true,
        ...options
      }
    });
    _names.mount.add(name2);
    if (field2) {
      _setDisabledField({
        disabled: isBoolean(options.disabled) ? options.disabled : _options.disabled,
        name: name2
      });
    } else {
      updateValidAndValue(name2, true, options.value);
    }
    return {
      ...disabledIsDefined ? { disabled: options.disabled || _options.disabled } : {},
      ..._options.progressive ? {
        required: !!options.required,
        min: getRuleValue(options.min),
        max: getRuleValue(options.max),
        minLength: getRuleValue(options.minLength),
        maxLength: getRuleValue(options.maxLength),
        pattern: getRuleValue(options.pattern)
      } : {},
      name: name2,
      onChange,
      onBlur: onChange,
      ref: (ref) => {
        if (ref) {
          register(name2, options);
          field2 = get(_fields, name2);
          const fieldRef = isUndefined2(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
          const refs = field2._f.refs || [];
          if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field2._f.ref) {
            return;
          }
          set(_fields, name2, {
            _f: {
              ...field2._f,
              ...radioOrCheckbox ? {
                refs: [
                  ...refs.filter(live),
                  fieldRef,
                  ...Array.isArray(get(_defaultValues, name2)) ? [{}] : []
                ],
                ref: { type: fieldRef.type, name: name2 }
              } : { ref: fieldRef }
            }
          });
          updateValidAndValue(name2, false, void 0, fieldRef);
        } else {
          field2 = get(_fields, name2, {});
          if (field2._f) {
            field2._f.mount = false;
          }
          (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name2) && _state.action) && _names.unMount.add(name2);
        }
      }
    };
  };
  const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
  const _disableForm = (disabled) => {
    if (isBoolean(disabled)) {
      _subjects.state.next({ disabled });
      iterateFieldsByAction(_fields, (ref, name2) => {
        const currentField = get(_fields, name2);
        if (currentField) {
          ref.disabled = currentField._f.disabled || disabled;
          if (Array.isArray(currentField._f.refs)) {
            currentField._f.refs.forEach((inputRef) => {
              inputRef.disabled = currentField._f.disabled || disabled;
            });
          }
        }
      }, 0, false);
    }
  };
  const handleSubmit2 = (onValid, onInvalid) => async (e) => {
    let onValidError = void 0;
    if (e) {
      e.preventDefault && e.preventDefault();
      e.persist && e.persist();
    }
    let fieldValues = cloneObject(_formValues);
    _subjects.state.next({
      isSubmitting: true
    });
    if (_options.resolver) {
      const { errors, values } = await _runSchema();
      _formState.errors = errors;
      fieldValues = values;
    } else {
      await executeBuiltInValidation(_fields);
    }
    if (_names.disabled.size) {
      for (const name2 of _names.disabled) {
        set(fieldValues, name2, void 0);
      }
    }
    unset(_formState.errors, "root");
    if (isEmptyObject2(_formState.errors)) {
      _subjects.state.next({
        errors: {}
      });
      try {
        await onValid(fieldValues, e);
      } catch (error3) {
        onValidError = error3;
      }
    } else {
      if (onInvalid) {
        await onInvalid({ ..._formState.errors }, e);
      }
      _focusError();
      setTimeout(_focusError);
    }
    _subjects.state.next({
      isSubmitted: true,
      isSubmitting: false,
      isSubmitSuccessful: isEmptyObject2(_formState.errors) && !onValidError,
      submitCount: _formState.submitCount + 1,
      errors: _formState.errors
    });
    if (onValidError) {
      throw onValidError;
    }
  };
  const resetField = (name2, options = {}) => {
    if (get(_fields, name2)) {
      if (isUndefined2(options.defaultValue)) {
        setValue(name2, cloneObject(get(_defaultValues, name2)));
      } else {
        setValue(name2, options.defaultValue);
        set(_defaultValues, name2, cloneObject(options.defaultValue));
      }
      if (!options.keepTouched) {
        unset(_formState.touchedFields, name2);
      }
      if (!options.keepDirty) {
        unset(_formState.dirtyFields, name2);
        _formState.isDirty = options.defaultValue ? _getDirty(name2, cloneObject(get(_defaultValues, name2))) : _getDirty();
      }
      if (!options.keepError) {
        unset(_formState.errors, name2);
        _proxyFormState.isValid && _setValid();
      }
      _subjects.state.next({ ..._formState });
    }
  };
  const _reset = (formValues, keepStateOptions = {}) => {
    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
    const cloneUpdatedValues = cloneObject(updatedValues);
    const isEmptyResetValues = isEmptyObject2(formValues);
    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
    if (!keepStateOptions.keepDefaultValues) {
      _defaultValues = updatedValues;
    }
    if (!keepStateOptions.keepValues) {
      if (keepStateOptions.keepDirtyValues) {
        const fieldsToCheck = /* @__PURE__ */ new Set([
          ..._names.mount,
          ...Object.keys(getDirtyFields(_defaultValues, _formValues))
        ]);
        for (const fieldName of Array.from(fieldsToCheck)) {
          get(_formState.dirtyFields, fieldName) ? set(values, fieldName, get(_formValues, fieldName)) : setValue(fieldName, get(values, fieldName));
        }
      } else {
        if (isWeb && isUndefined2(formValues)) {
          for (const name2 of _names.mount) {
            const field2 = get(_fields, name2);
            if (field2 && field2._f) {
              const fieldReference = Array.isArray(field2._f.refs) ? field2._f.refs[0] : field2._f.ref;
              if (isHTMLElement(fieldReference)) {
                const form = fieldReference.closest("form");
                if (form) {
                  form.reset();
                  break;
                }
              }
            }
          }
        }
        for (const fieldName of _names.mount) {
          setValue(fieldName, get(values, fieldName));
        }
      }
      _formValues = cloneObject(values);
      _subjects.array.next({
        values: { ...values }
      });
      _subjects.state.next({
        values: { ...values }
      });
    }
    _names = {
      mount: keepStateOptions.keepDirtyValues ? _names.mount : /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      disabled: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set(),
      watchAll: false,
      focus: ""
    };
    _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
    _state.watch = !!_options.shouldUnregister;
    _subjects.state.next({
      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
      isDirty: isEmptyResetValues ? false : keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual(formValues, _defaultValues)),
      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
      dirtyFields: isEmptyResetValues ? {} : keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : keepStateOptions.keepDirty ? _formState.dirtyFields : {},
      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
      errors: keepStateOptions.keepErrors ? _formState.errors : {},
      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
      isSubmitting: false
    });
  };
  const reset = (formValues, keepStateOptions) => _reset(isFunction4(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
  const setFocus = (name2, options = {}) => {
    const field2 = get(_fields, name2);
    const fieldReference = field2 && field2._f;
    if (fieldReference) {
      const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
      if (fieldRef.focus) {
        fieldRef.focus();
        options.shouldSelect && isFunction4(fieldRef.select) && fieldRef.select();
      }
    }
  };
  const _setFormState = (updatedFormState) => {
    _formState = {
      ..._formState,
      ...updatedFormState
    };
  };
  const _resetDefaultValues = () => isFunction4(_options.defaultValues) && _options.defaultValues().then((values) => {
    reset(values, _options.resetOptions);
    _subjects.state.next({
      isLoading: false
    });
  });
  const methods = {
    control: {
      register,
      unregister,
      getFieldState,
      handleSubmit: handleSubmit2,
      setError,
      _subscribe,
      _runSchema,
      _getWatch,
      _getDirty,
      _setValid,
      _setFieldArray,
      _setDisabledField,
      _setErrors,
      _getFieldArray,
      _reset,
      _resetDefaultValues,
      _removeUnmounted,
      _disableForm,
      _subjects,
      _proxyFormState,
      get _fields() {
        return _fields;
      },
      get _formValues() {
        return _formValues;
      },
      get _state() {
        return _state;
      },
      set _state(value) {
        _state = value;
      },
      get _defaultValues() {
        return _defaultValues;
      },
      get _names() {
        return _names;
      },
      set _names(value) {
        _names = value;
      },
      get _formState() {
        return _formState;
      },
      get _options() {
        return _options;
      },
      set _options(value) {
        _options = {
          ..._options,
          ...value
        };
      }
    },
    subscribe,
    trigger,
    register,
    handleSubmit: handleSubmit2,
    watch,
    setValue,
    getValues,
    reset,
    resetField,
    clearErrors,
    unregister,
    setError,
    setFocus,
    getFieldState
  };
  return {
    ...methods,
    formControl: methods
  };
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react11.default.useLayoutEffect : import_react11.default.useEffect;
function useForm(props = {}) {
  const _formControl = import_react11.default.useRef(void 0);
  const _values = import_react11.default.useRef(void 0);
  const [formState, updateFormState] = import_react11.default.useState({
    isDirty: false,
    isValidating: false,
    isLoading: isFunction4(props.defaultValues),
    isSubmitted: false,
    isSubmitting: false,
    isSubmitSuccessful: false,
    isValid: false,
    submitCount: 0,
    dirtyFields: {},
    touchedFields: {},
    validatingFields: {},
    errors: props.errors || {},
    disabled: props.disabled || false,
    isReady: false,
    defaultValues: isFunction4(props.defaultValues) ? void 0 : props.defaultValues
  });
  if (!_formControl.current) {
    _formControl.current = {
      ...props.formControl ? props.formControl : createFormControl(props),
      formState
    };
    if (props.formControl && props.defaultValues && !isFunction4(props.defaultValues)) {
      props.formControl.reset(props.defaultValues, props.resetOptions);
    }
  }
  const control = _formControl.current.control;
  control._options = props;
  useIsomorphicLayoutEffect(() => {
    const sub = control._subscribe({
      formState: control._proxyFormState,
      callback: () => updateFormState({ ...control._formState }),
      reRenderRoot: true
    });
    updateFormState((data) => ({
      ...data,
      isReady: true
    }));
    control._formState.isReady = true;
    return sub;
  }, [control]);
  import_react11.default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
  import_react11.default.useEffect(() => {
    if (props.mode) {
      control._options.mode = props.mode;
    }
    if (props.reValidateMode) {
      control._options.reValidateMode = props.reValidateMode;
    }
    if (props.errors && !isEmptyObject2(props.errors)) {
      control._setErrors(props.errors);
    }
  }, [control, props.errors, props.mode, props.reValidateMode]);
  import_react11.default.useEffect(() => {
    props.shouldUnregister && control._subjects.state.next({
      values: control._getWatch()
    });
  }, [control, props.shouldUnregister]);
  import_react11.default.useEffect(() => {
    if (control._proxyFormState.isDirty) {
      const isDirty = control._getDirty();
      if (isDirty !== formState.isDirty) {
        control._subjects.state.next({
          isDirty
        });
      }
    }
  }, [control, formState.isDirty]);
  import_react11.default.useEffect(() => {
    if (props.values && !deepEqual(props.values, _values.current)) {
      control._reset(props.values, control._options.resetOptions);
      _values.current = props.values;
      updateFormState((state) => ({ ...state }));
    } else {
      control._resetDefaultValues();
    }
  }, [control, props.values]);
  import_react11.default.useEffect(() => {
    if (!control._state.mount) {
      control._setValid();
      control._state.mount = true;
    }
    if (control._state.watch) {
      control._state.watch = false;
      control._subjects.state.next({ ...control._formState });
    }
    control._removeUnmounted();
  });
  _formControl.current.formState = getProxyFormState(formState, control);
  return _formControl.current;
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/components/FormCore/FormProvider.mjs
var import_react12 = __toESM(require_react(), 1);
var DEFAULT_MODE = "onTouched";
var FormProvider2 = import_react12.default.forwardRef(function FormProvider3({ children: children2, defaultValues, mode = DEFAULT_MODE }, ref) {
  const formProviderProps = useForm({
    defaultValues,
    mode
  });
  const { getValues, reset } = formProviderProps;
  import_react12.default.useImperativeHandle(ref, () => ({ getValues, reset: () => reset(defaultValues) }), [defaultValues, getValues, reset]);
  return import_react12.default.createElement(FormProvider, { ...formProviderProps }, children2);
});

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/constants.mjs
var COMMON_ROUTE_MACHINE_KEYS = [
  "error",
  "isPending",
  "submitForm",
  "updateBlur",
  "updateForm"
];
var CONFIRM_RESET_PASSWORD_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "hasValidationErrors",
  "resendCode",
  "validationErrors"
];
var CONFIRM_SIGN_IN_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "challengeName",
  "toSignIn"
];
var CONFIRM_SIGN_UP_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "codeDeliveryDetails",
  "resendCode"
];
var CONFIRM_VERIFY_USER_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "skipVerification"
];
var FORCE_NEW_PASSWORD_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "hasValidationErrors",
  "toSignIn",
  "validationErrors"
];
var RESET_PASSWORD_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "toSignIn"
];
var SIGN_IN_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "socialProviders",
  "toFederatedSignIn",
  "toForgotPassword",
  "toSignUp"
];
var SIGN_UP_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "hasValidationErrors",
  "socialProviders",
  "toFederatedSignIn",
  "toSignIn",
  "validationErrors"
];
var SETUP_TOTP_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "toSignIn",
  "totpSecretCode",
  "username"
];
var SETUP_EMAIL_MACHINE_KEY = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "toSignIn"
];
var SELECT_MFA_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "challengeName",
  "toSignIn"
];
var VERIFY_USER_MACHINE_KEYS = [
  ...COMMON_ROUTE_MACHINE_KEYS,
  "skipVerification"
];

// node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorInitMachine/useAuthenticatorInitMachine.mjs
var import_react15 = __toESM(require_react(), 1);
var routeSelector2 = ({ route }) => [route];
function useAuthenticatorInitMachine(data) {
  const { route, initializeMachine } = useAuthenticator(routeSelector2);
  const hasInitialized = import_react15.default.useRef(false);
  import_react15.default.useEffect(() => {
    if (!hasInitialized.current && route === "setup") {
      initializeMachine(data);
      hasInitialized.current = true;
    }
  }, [initializeMachine, route, data]);
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/components/FormCore/useForm.mjs
var import_react16 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/components/FormCore/withFormProvider.mjs
var import_react17 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useControlledReducer.mjs
var import_react19 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/usePreviousValue.mjs
var import_react18 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useDropZone.mjs
var import_react20 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/utils/filterAllowedFiles.mjs
function filterAllowedFiles(files, acceptedFileTypes) {
  if (!acceptedFileTypes || acceptedFileTypes.length === 0 || acceptedFileTypes.includes("*")) {
    return { acceptedFiles: files, rejectedFiles: [] };
  }
  const acceptedFiles = [];
  const rejectedFiles = [];
  function filterFile(file) {
    const { type = "", name: name2 = "" } = file;
    const mimeType = type.toLowerCase();
    const baseMimeType = mimeType.split("/")[0];
    return acceptedFileTypes.some((type2) => {
      const validType = type2.trim().toLowerCase();
      if (validType.charAt(0) === ".") {
        return name2.toLowerCase().endsWith(validType);
      }
      if (validType.endsWith("/*")) {
        return baseMimeType === validType.split("/")[0];
      }
      return mimeType === validType;
    });
  }
  files.forEach((file) => {
    (filterFile(file) ? acceptedFiles : rejectedFiles).push(file);
  });
  return { acceptedFiles, rejectedFiles };
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/utils/processDroppedItems.mjs
var getFileFromEntry = (fileEntry) => {
  return new Promise((resolve) => {
    fileEntry.file(resolve);
  });
};
var readAllDirectoryEntries = async (dirReader) => {
  const entries = [];
  let readBatch = [];
  do {
    readBatch = await new Promise((resolve, reject) => {
      try {
        dirReader.readEntries(resolve, reject);
      } catch (error3) {
        reject(error3);
      }
    });
    entries.push(...readBatch);
  } while (readBatch.length > 0);
  return entries;
};
async function processDroppedItems(dataTransferItems) {
  const files = [];
  const processFileSystemEntry = async (entry) => {
    if (entry.isFile) {
      const file = await getFileFromEntry(entry);
      if (entry.fullPath && !file.webkitRelativePath) {
        Object.defineProperties(file, {
          webkitRelativePath: {
            writable: true
          }
        });
        file.webkitRelativePath = entry.fullPath.replace(/^\//, "");
        Object.defineProperties(file, {
          webkitRelativePath: {
            writable: false
          }
        });
      }
      files.push(file);
    } else if (entry.isDirectory) {
      const dirReader = entry.createReader();
      const dirEntries = await readAllDirectoryEntries(dirReader);
      await Promise.all(dirEntries.map(processFileSystemEntry));
    }
  };
  await Promise.all(dataTransferItems.reduce((acc, item) => {
    const entry = item.webkitGetAsEntry();
    return item.kind === "file" && entry ? [...acc, entry] : acc;
  }, []).map(processFileSystemEntry));
  return files;
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useDropZone.mjs
function useDropZone({ onDropComplete, onDragEnter: _onDragEnter, onDragLeave: _onDragLeave, onDragOver: _onDragOver, onDragStart: _onDragStart, onDrop: _onDrop, acceptedFileTypes = [] }) {
  const [dragState, setDragState] = (0, import_react20.useState)("inactive");
  const onDragStart = (event2) => {
    event2.dataTransfer.clearData();
    if (isFunction3(_onDragStart)) {
      _onDragStart(event2);
    }
  };
  const onDragEnter = (event2) => {
    event2.preventDefault();
    event2.stopPropagation();
    if (isFunction3(_onDragEnter)) {
      _onDragEnter(event2);
    }
  };
  const onDragLeave = (event2) => {
    event2.preventDefault();
    event2.stopPropagation();
    setDragState("inactive");
    if (isFunction3(_onDragLeave)) {
      _onDragLeave(event2);
    }
  };
  const onDragOver = (event2) => {
    event2.preventDefault();
    event2.stopPropagation();
    event2.dataTransfer.dropEffect = "copy";
    if (isFunction3(_onDragOver)) {
      _onDragOver(event2);
    }
    const files = Array.from(event2.dataTransfer.items).map(({ kind, type }) => ({
      kind,
      type
    }));
    const { rejectedFiles } = filterAllowedFiles(files, acceptedFileTypes);
    setDragState(rejectedFiles.length > 0 ? "reject" : "accept");
  };
  const onDrop = (event2) => {
    event2.preventDefault();
    event2.stopPropagation();
    setDragState("inactive");
    const { files, items } = event2.dataTransfer;
    if (isFunction3(_onDrop)) {
      _onDrop(event2);
    }
    const completeDrop = (files2) => {
      const { acceptedFiles, rejectedFiles } = filterAllowedFiles(files2, acceptedFileTypes);
      if (isFunction3(onDropComplete)) {
        onDropComplete({ acceptedFiles, rejectedFiles });
      }
    };
    if (!items) {
      completeDrop(Array.from(files));
    } else {
      processDroppedItems(Array.from(items)).then(completeDrop);
    }
  };
  return {
    onDragStart,
    onDragEnter,
    onDragLeave,
    onDragOver,
    onDrop,
    dragState
  };
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useAsyncReducer.mjs
var import_react21 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useDeprecationWarning.mjs
var React4 = __toESM(require_react(), 1);
var useDeprecationWarning = ({ shouldWarn, message: message2 }) => {
  React4.useEffect(() => {
    if (shouldWarn) {
      console.warn(message2);
    }
  }, [shouldWarn, message2]);
};

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useGetUrl.mjs
var React5 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/runtime/constants.mjs
var NETWORK_ERROR_MESSAGE = "Network Error";
var NETWORK_ERROR_CODE = "ERR_NETWORK";
var ABORT_ERROR_MESSAGE = "Request aborted";
var ABORT_ERROR_CODE = "ERR_ABORTED";
var CANCELED_ERROR_MESSAGE = "canceled";
var CANCELED_ERROR_CODE = "ERR_CANCELED";
var CONTENT_SHA256_HEADER = "x-amz-content-sha256";

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/runtime/contentSha256middleware.mjs
var contentSha256MiddlewareFactory = () => (next) => async function contentSha256Middleware(request) {
  if (request.headers[CONTENT_SHA256_HEADER]) {
    return next(request);
  } else {
    const hash = await getHashedPayload(request.body);
    request.headers[CONTENT_SHA256_HEADER] = hash;
    return next(request);
  }
};

// node_modules/@aws-amplify/storage/dist/esm/errors/StorageError.mjs
var StorageError = class _StorageError extends AmplifyError {
  constructor(params) {
    super(params);
    this.constructor = _StorageError;
    Object.setPrototypeOf(this, _StorageError.prototype);
  }
};

// node_modules/@aws-amplify/storage/dist/esm/errors/CanceledError.mjs
var CanceledError = class _CanceledError extends StorageError {
  constructor(params = {}) {
    super({
      name: "CanceledError",
      message: "Upload is canceled by user",
      ...params
    });
    this.constructor = _CanceledError;
    Object.setPrototypeOf(this, _CanceledError.prototype);
  }
};

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/runtime/xhrTransferHandler.mjs
var logger16 = new ConsoleLogger("xhr-http-handler");
var xhrTransferHandler = (request, options) => {
  const { url, method, headers, body } = request;
  const { onDownloadProgress, onUploadProgress, responseType, abortSignal } = options;
  return new Promise((resolve, reject) => {
    let xhr = new XMLHttpRequest();
    xhr.open(method.toUpperCase(), url.toString());
    Object.entries(headers).filter(([header]) => !FORBIDDEN_HEADERS.includes(header)).forEach(([header, value]) => {
      xhr.setRequestHeader(header, value);
    });
    xhr.responseType = responseType;
    if (onDownloadProgress) {
      xhr.addEventListener("progress", (event2) => {
        onDownloadProgress(convertToTransferProgressEvent(event2));
        logger16.debug(event2);
      });
    }
    if (onUploadProgress) {
      xhr.upload.addEventListener("progress", (event2) => {
        onUploadProgress(convertToTransferProgressEvent(event2));
        logger16.debug(event2);
      });
    }
    xhr.addEventListener("error", () => {
      const networkError = new StorageError({
        message: NETWORK_ERROR_MESSAGE,
        name: NETWORK_ERROR_CODE
      });
      logger16.error(NETWORK_ERROR_MESSAGE);
      reject(networkError);
      xhr = null;
    });
    xhr.addEventListener("abort", () => {
      if (!xhr || (abortSignal == null ? void 0 : abortSignal.aborted))
        return;
      const error3 = buildHandlerError(ABORT_ERROR_MESSAGE, ABORT_ERROR_CODE);
      logger16.error(ABORT_ERROR_MESSAGE);
      reject(error3);
      xhr = null;
    });
    xhr.addEventListener("readystatechange", () => {
      if (!xhr || xhr.readyState !== xhr.DONE) {
        return;
      }
      const onloadend = () => {
        if (!xhr)
          return;
        const responseHeaders = convertResponseHeaders(xhr.getAllResponseHeaders());
        const { responseType: loadEndResponseType } = xhr;
        const responseBlob = xhr.response;
        const responseText = loadEndResponseType === "text" ? xhr.responseText : "";
        const bodyMixIn = {
          blob: () => Promise.resolve(responseBlob),
          text: withMemoization(() => loadEndResponseType === "blob" ? readBlobAsText(responseBlob) : Promise.resolve(responseText)),
          json: () => Promise.reject(
            // S3 does not support JSON response. So fail-fast here with nicer error message.
            new Error("Parsing response to JSON is not implemented. Please use response.text() instead.")
          )
        };
        const response = {
          statusCode: xhr.status,
          headers: responseHeaders,
          // The xhr.responseType is only set to 'blob' for streaming binary S3 object data. The streaming data is
          // exposed via public interface of Storage.get(). So we need to return the response as a Blob object for
          // backward compatibility. In other cases, the response payload is only used internally, we return it is
          // {@link ResponseBodyMixin}
          body: xhr.responseType === "blob" ? Object.assign(responseBlob, bodyMixIn) : bodyMixIn
        };
        resolve(response);
        xhr = null;
      };
      setTimeout(onloadend);
    });
    if (abortSignal) {
      const onCanceled = () => {
        if (!xhr) {
          return;
        }
        const canceledError = new CanceledError({
          name: CANCELED_ERROR_CODE,
          message: CANCELED_ERROR_MESSAGE
        });
        reject(canceledError);
        xhr.abort();
        xhr = null;
      };
      abortSignal.aborted ? onCanceled() : abortSignal.addEventListener("abort", onCanceled);
    }
    if (typeof ReadableStream === "function" && body instanceof ReadableStream) {
      throw new Error("ReadableStream request payload is not supported.");
    }
    xhr.send(body ?? null);
  });
};
var convertToTransferProgressEvent = (event2) => ({
  transferredBytes: event2.loaded,
  totalBytes: event2.lengthComputable ? event2.total : void 0
});
var buildHandlerError = (message2, name2) => {
  const error3 = new Error(message2);
  error3.name = name2;
  return error3;
};
var convertResponseHeaders = (xhrHeaders) => {
  if (!xhrHeaders) {
    return {};
  }
  return xhrHeaders.split("\r\n").reduce((headerMap, line) => {
    const parts = line.split(": ");
    const header = parts.shift();
    const value = parts.join(": ");
    headerMap[header.toLowerCase()] = value;
    return headerMap;
  }, {});
};
var readBlobAsText = (blob) => {
  const reader = new FileReader();
  return new Promise((resolve, reject) => {
    reader.onloadend = () => {
      if (reader.readyState !== FileReader.DONE) {
        return;
      }
      resolve(reader.result);
    };
    reader.onerror = () => {
      reject(reader.error);
    };
    reader.readAsText(blob);
  });
};
var FORBIDDEN_HEADERS = ["host"];

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/runtime/s3TransferHandler/xhr.mjs
var s3TransferHandler = composeTransferHandler(xhrTransferHandler, [
  contentSha256MiddlewareFactory,
  userAgentMiddlewareFactory,
  amzSdkInvocationIdHeaderMiddlewareFactory,
  retryMiddlewareFactory,
  amzSdkRequestHeaderMiddlewareFactory,
  signingMiddlewareFactory
]);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/apis/internal/uploadData/index.mjs
var import_fast_xml_parser16 = __toESM(require_fast_xml_parser(), 1);
var import_buffer17 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/errors/types/validation.mjs
var StorageValidationErrorCode;
(function(StorageValidationErrorCode2) {
  StorageValidationErrorCode2["NoCredentials"] = "NoCredentials";
  StorageValidationErrorCode2["NoIdentityId"] = "NoIdentityId";
  StorageValidationErrorCode2["NoKey"] = "NoKey";
  StorageValidationErrorCode2["NoSourceKey"] = "NoSourceKey";
  StorageValidationErrorCode2["NoDestinationKey"] = "NoDestinationKey";
  StorageValidationErrorCode2["NoSourcePath"] = "NoSourcePath";
  StorageValidationErrorCode2["NoDestinationPath"] = "NoDestinationPath";
  StorageValidationErrorCode2["NoBucket"] = "NoBucket";
  StorageValidationErrorCode2["NoRegion"] = "NoRegion";
  StorageValidationErrorCode2["InvalidStorageBucket"] = "InvalidStorageBucket";
  StorageValidationErrorCode2["InvalidCopyOperationStorageBucket"] = "InvalidCopyOperationStorageBucket";
  StorageValidationErrorCode2["InvalidStorageOperationPrefixInput"] = "InvalidStorageOperationPrefixInput";
  StorageValidationErrorCode2["InvalidStorageOperationInput"] = "InvalidStorageOperationInput";
  StorageValidationErrorCode2["InvalidAWSAccountID"] = "InvalidAWSAccountID";
  StorageValidationErrorCode2["InvalidStoragePathInput"] = "InvalidStoragePathInput";
  StorageValidationErrorCode2["InvalidUploadSource"] = "InvalidUploadSource";
  StorageValidationErrorCode2["ObjectIsTooLarge"] = "ObjectIsTooLarge";
  StorageValidationErrorCode2["UrlExpirationMaxLimitExceed"] = "UrlExpirationMaxLimitExceed";
  StorageValidationErrorCode2["InvalidLocationCredentialsCacheSize"] = "InvalidLocationCredentialsCacheSize";
  StorageValidationErrorCode2["LocationCredentialsStoreDestroyed"] = "LocationCredentialsStoreDestroyed";
  StorageValidationErrorCode2["InvalidS3Uri"] = "InvalidS3Uri";
  StorageValidationErrorCode2["InvalidCustomEndpoint"] = "InvalidCustomEndpoint";
  StorageValidationErrorCode2["ForcePathStyleEndpointNotSupported"] = "ForcePathStyleEndpointNotSupported";
  StorageValidationErrorCode2["DnsIncompatibleBucketName"] = "DnsIncompatibleBucketName";
})(StorageValidationErrorCode || (StorageValidationErrorCode = {}));
var validationErrorMap2 = {
  [StorageValidationErrorCode.NoCredentials]: {
    message: "Credentials should not be empty."
  },
  [StorageValidationErrorCode.NoIdentityId]: {
    message: "Missing identity ID when accessing objects in protected or private access level."
  },
  [StorageValidationErrorCode.NoKey]: {
    message: "Missing key in api call."
  },
  [StorageValidationErrorCode.NoSourceKey]: {
    message: "Missing source key in copy api call."
  },
  [StorageValidationErrorCode.NoDestinationKey]: {
    message: "Missing destination key in copy api call."
  },
  [StorageValidationErrorCode.NoSourcePath]: {
    message: "Missing source path in copy api call."
  },
  [StorageValidationErrorCode.NoDestinationPath]: {
    message: "Missing destination path in copy api call."
  },
  [StorageValidationErrorCode.NoBucket]: {
    message: "Missing bucket name while accessing object."
  },
  [StorageValidationErrorCode.NoRegion]: {
    message: "Missing region while accessing object."
  },
  [StorageValidationErrorCode.UrlExpirationMaxLimitExceed]: {
    message: "Url Expiration can not be greater than 7 Days."
  },
  [StorageValidationErrorCode.ObjectIsTooLarge]: {
    message: "Object size cannot not be greater than 5TB."
  },
  [StorageValidationErrorCode.InvalidUploadSource]: {
    message: "Upload source type can only be a `Blob`, `File`, `ArrayBuffer`, or `string`."
  },
  [StorageValidationErrorCode.InvalidStorageOperationInput]: {
    message: "Path or key parameter must be specified in the input. Both can not be specified at the same time."
  },
  [StorageValidationErrorCode.InvalidAWSAccountID]: {
    message: "Invalid AWS account ID was provided."
  },
  [StorageValidationErrorCode.InvalidStorageOperationPrefixInput]: {
    message: "Both path and prefix can not be specified at the same time."
  },
  [StorageValidationErrorCode.InvalidStoragePathInput]: {
    message: "Input `path` does not allow a leading slash (/)."
  },
  [StorageValidationErrorCode.InvalidLocationCredentialsCacheSize]: {
    message: "locationCredentialsCacheSize must be a positive integer."
  },
  [StorageValidationErrorCode.LocationCredentialsStoreDestroyed]: {
    message: `Location-specific credentials store has been destroyed.`
  },
  [StorageValidationErrorCode.InvalidS3Uri]: {
    message: "Invalid S3 URI."
  },
  [StorageValidationErrorCode.InvalidStorageBucket]: {
    message: "Unable to lookup bucket from provided name in Amplify configuration."
  },
  [StorageValidationErrorCode.InvalidCopyOperationStorageBucket]: {
    message: "Missing bucket option in either source or destination."
  },
  [StorageValidationErrorCode.InvalidCustomEndpoint]: {
    message: "Invalid S3 custom endpoint."
  },
  [StorageValidationErrorCode.ForcePathStyleEndpointNotSupported]: {
    message: "Path style URLs are not supported with S3 Transfer Acceleration."
  },
  [StorageValidationErrorCode.DnsIncompatibleBucketName]: {
    message: `The bucket name isn't DNS compatible.`
  }
};

// node_modules/@aws-amplify/storage/dist/esm/errors/utils/assertValidationError.mjs
function assertValidationError2(assertion, name2) {
  const { message: message2, recoverySuggestion } = validationErrorMap2[name2];
  if (!assertion) {
    throw new StorageError({ name: name2, message: message2, recoverySuggestion });
  }
}

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/constants.mjs
var LOCAL_TESTING_S3_ENDPOINT = "http://localhost:20005";
var MAX_URL_EXPIRATION = 7 * 24 * 60 * 60 * 1e3;
var MiB = 1024 * 1024;
var GiB = 1024 * MiB;
var TiB = 1024 * GiB;
var DEFAULT_PART_SIZE = 5 * MiB;
var MAX_OBJECT_SIZE = 5 * TiB;

// node_modules/@aws-amplify/storage/dist/esm/utils/logger.mjs
var logger17 = new ConsoleLogger("Storage");

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/md5.mjs
var import_fast_xml_parser = __toESM(require_fast_xml_parser(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/runtime/xmlParser/dom.mjs
var parser = {
  parse: (xmlStr) => {
    const domParser = new DOMParser();
    const xml = domParser.parseFromString(xmlStr, "text/xml");
    const parsedObj = parseXmlNode(xml);
    const rootKey = Object.keys(parsedObj)[0];
    return parsedObj[rootKey];
  }
};
var parseXmlNode = (node) => {
  var _a2;
  if (isDocumentNode(node)) {
    return {
      [node.documentElement.nodeName]: parseXmlNode(node.documentElement)
    };
  }
  if (node.nodeType === Node.TEXT_NODE) {
    return (_a2 = node.nodeValue) == null ? void 0 : _a2.trim();
  }
  if (isElementNode(node)) {
    if (isTextOnlyElementNode(node)) {
      return node.childNodes[0].nodeValue;
    }
    const nodeValue = {};
    for (const attr of node.attributes) {
      if (!isNamespaceAttributeName(attr.nodeName)) {
        nodeValue[attr.nodeName] = attr.nodeValue;
      }
    }
    if (node.children.length > 0) {
      for (const child of node.children) {
        const childValue = parseXmlNode(child);
        if (childValue === void 0) {
          continue;
        }
        const childName = child.nodeName;
        if (nodeValue[childName] === void 0) {
          nodeValue[childName] = childValue;
        } else if (Array.isArray(nodeValue[childName])) {
          nodeValue[childName].push(childValue);
        } else {
          nodeValue[childName] = [nodeValue[childName], childValue];
        }
      }
    }
    return Object.keys(nodeValue).length === 0 ? "" : nodeValue;
  }
};
var isElementNode = (node) => node.nodeType === Node.ELEMENT_NODE;
var isDocumentNode = (node) => node.nodeType === Node.DOCUMENT_NODE;
var isTextOnlyElementNode = (node) => {
  var _a2;
  return hasOnlyNamespaceAttributes(node) && node.children.length === 0 && ((_a2 = node.firstChild) == null ? void 0 : _a2.nodeType) === Node.TEXT_NODE;
};
var hasOnlyNamespaceAttributes = (node) => {
  for (const attr of node.attributes) {
    if (!isNamespaceAttributeName(attr.nodeName)) {
      return false;
    }
  }
  return true;
};
var isNamespaceAttributeName = (name2) => name2 === "xmlns" || name2.startsWith("xmlns:");

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/utils/parsePayload.mjs
var import_buffer2 = __toESM(require_buffer(), 1);
var createXmlErrorParser = ({ noErrorWrapping = false } = {}) => async (response) => {
  if (!response || response.statusCode < 300) {
    return;
  }
  const { statusCode } = response;
  const body = await parseXmlBody(response);
  const errorLocation = noErrorWrapping ? body : body.Error;
  const code = (errorLocation == null ? void 0 : errorLocation.Code) ? errorLocation.Code : statusCode === 404 ? "NotFound" : statusCode.toString();
  const message2 = (errorLocation == null ? void 0 : errorLocation.message) ?? (errorLocation == null ? void 0 : errorLocation.Message) ?? code;
  const error3 = new Error(message2);
  return Object.assign(error3, {
    name: code,
    $metadata: parseMetadata(response)
  });
};
var parseXmlBody = async (response) => {
  if (!response.body) {
    throw new Error("S3 aborted request.");
  }
  const data = await response.body.text();
  if ((data == null ? void 0 : data.length) > 0) {
    try {
      return parser.parse(data);
    } catch (error3) {
      throw new Error(`Failed to parse XML response: ${error3}`);
    }
  }
  return {};
};

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/base.mjs
var import_fast_xml_parser2 = __toESM(require_fast_xml_parser(), 1);
var import_buffer3 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/utils/createRetryDecider.mjs
var createRetryDecider = (errorParser) => async (response, error3, middlewareContext) => {
  const defaultRetryDecider = getRetryDecider(errorParser);
  const defaultRetryDecision = await defaultRetryDecider(response, error3);
  if (!response) {
    return { retryable: defaultRetryDecision.retryable };
  }
  const parsedError = await errorParser(response);
  const errorCode = parsedError == null ? void 0 : parsedError.name;
  const errorMessage = parsedError == null ? void 0 : parsedError.message;
  const isCredentialsExpired = isCredentialsExpiredError(errorCode, errorMessage);
  return {
    retryable: defaultRetryDecision.retryable || // If we know the previous retry attempt sets isCredentialsExpired in the
    // middleware context, we don't want to retry anymore.
    !!(isCredentialsExpired && !(middlewareContext == null ? void 0 : middlewareContext.isCredentialsExpired)),
    isCredentialsExpiredError: isCredentialsExpired
  };
};
var INVALID_TOKEN_ERROR_CODES = [
  "RequestExpired",
  "ExpiredTokenException",
  "ExpiredToken"
];
var isCredentialsExpiredError = (errorCode, errorMessage) => {
  const isExpiredTokenError = !!errorCode && INVALID_TOKEN_ERROR_CODES.includes(errorCode);
  const isExpiredSignatureError = !!errorCode && !!errorMessage && errorCode.includes("Signature") && errorMessage.includes("expired");
  return isExpiredTokenError || isExpiredSignatureError;
};

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/base.mjs
var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$/;
var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
var DOTS_PATTERN = /\.\./;
var SERVICE_NAME3 = "s3";
var endpointResolver3 = (options, apiInput) => {
  const { region, useAccelerateEndpoint, customEndpoint, forcePathStyle } = options;
  let endpoint;
  if (customEndpoint) {
    if (customEndpoint === LOCAL_TESTING_S3_ENDPOINT) {
      endpoint = new AmplifyUrl(customEndpoint);
    }
    assertValidationError2(!customEndpoint.includes("://"), StorageValidationErrorCode.InvalidCustomEndpoint);
    endpoint = new AmplifyUrl(`https://${customEndpoint}`);
  } else if (useAccelerateEndpoint) {
    assertValidationError2(!forcePathStyle, StorageValidationErrorCode.ForcePathStyleEndpointNotSupported);
    endpoint = new AmplifyUrl(`https://s3-accelerate.${getDnsSuffix(region)}`);
  } else {
    endpoint = new AmplifyUrl(`https://s3.${region}.${getDnsSuffix(region)}`);
  }
  if (apiInput == null ? void 0 : apiInput.Bucket) {
    assertValidationError2(isDnsCompatibleBucketName(apiInput.Bucket), StorageValidationErrorCode.DnsIncompatibleBucketName);
    if (forcePathStyle || apiInput.Bucket.includes(".")) {
      endpoint.pathname = `/${apiInput.Bucket}`;
    } else {
      endpoint.host = `${apiInput.Bucket}.${endpoint.host}`;
    }
  }
  return { url: endpoint };
};
var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
var parseXmlError = createXmlErrorParser({ noErrorWrapping: true });
var retryDecider = createRetryDecider(parseXmlError);
var defaultConfig4 = {
  service: SERVICE_NAME3,
  endpointResolver: endpointResolver3,
  retryDecider,
  computeDelay: jitteredBackoff2,
  userAgentValue: getAmplifyUserAgent(),
  useAccelerateEndpoint: false,
  uriEscapePath: false
  // Required by S3. See https://github.com/aws/aws-sdk-js-v3/blob/9ba012dfa3a3429aa2db0f90b3b0b3a7a31f9bc3/packages/signature-v4/src/SignatureV4.ts#L76-L83
};

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/getObject.mjs
var import_fast_xml_parser3 = __toESM(require_fast_xml_parser(), 1);
var import_buffer4 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/utils/deserializeHelpers.mjs
var map2 = (obj, instructions) => {
  const result = {};
  for (const [key, instruction] of Object.entries(instructions)) {
    const [accessor, deserializer] = Array.isArray(instruction) ? instruction : [instruction];
    if (Object.prototype.hasOwnProperty.call(obj, accessor)) {
      result[key] = deserializer ? deserializer(obj[accessor]) : String(obj[accessor]);
    }
  }
  return result;
};
var deserializeNumber = (value) => value ? Number(value) : void 0;
var deserializeBoolean = (value) => {
  return value ? value === "true" : void 0;
};
var deserializeTimestamp = (value) => {
  return value ? new Date(value) : void 0;
};
var emptyArrayGuard = (value, deserializer) => {
  if (value === "") {
    return [];
  }
  const valueArray = (Array.isArray(value) ? value : [value]).filter((e) => e != null);
  return deserializer(valueArray);
};
var deserializeMetadata = (headers) => {
  const objectMetadataHeaderPrefix = "x-amz-meta-";
  const deserialized = Object.keys(headers).filter((header) => header.startsWith(objectMetadataHeaderPrefix)).reduce((acc, header) => {
    acc[header.replace(objectMetadataHeaderPrefix, "")] = headers[header];
    return acc;
  }, {});
  return Object.keys(deserialized).length > 0 ? deserialized : void 0;
};
var buildStorageServiceError = (error3) => new StorageError({
  name: error3.name,
  message: error3.message,
  metadata: error3.$metadata
});
var deserializeCompletedPartList = (input2) => input2.map((item) => map2(item, {
  PartNumber: ["PartNumber", deserializeNumber],
  ETag: "ETag",
  ChecksumCRC32: "ChecksumCRC32"
}));

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/utils/serializeHelpers.mjs
var assignStringVariables = (values) => {
  const queryParams = {};
  for (const [key, value] of Object.entries(values)) {
    if (value != null) {
      queryParams[key] = value.toString();
    }
  }
  return queryParams;
};
var serializeObjectConfigsToHeaders = async (input2) => {
  var _a2;
  return {
    ...assignStringVariables({
      "x-amz-acl": input2.ACL,
      "cache-control": input2.CacheControl,
      "content-disposition": input2.ContentDisposition,
      "content-language": input2.ContentLanguage,
      "content-encoding": input2.ContentEncoding,
      "content-type": input2.ContentType,
      expires: (_a2 = input2.Expires) == null ? void 0 : _a2.toUTCString(),
      "x-amz-tagging": input2.Tagging,
      ...serializeMetadata(input2.Metadata)
    })
  };
};
var serializeMetadata = (metadata = {}) => Object.keys(metadata).reduce((acc, suffix) => {
  acc[`x-amz-meta-${suffix.toLowerCase()}`] = metadata[suffix];
  return acc;
}, {});
var serializePathnameObjectKey = (url, key) => {
  return url.pathname.replace(/\/$/, "") + `/${key.split("/").map(extendedEncodeURIComponent).join("/")}`;
};
function validateS3RequiredParameter(assertion, paramName) {
  if (!assertion) {
    throw new StorageError({
      name: AmplifyErrorCode.Unknown,
      message: "An unknown error has occurred.",
      underlyingError: new TypeError(`Expected a non-null value for S3 parameter ${paramName}`),
      recoverySuggestion: "This is likely to be a bug. Please reach out to library authors."
    });
  }
}

// node_modules/@aws-amplify/storage/dist/esm/errors/IntegrityError.mjs
var IntegrityError = class _IntegrityError extends StorageError {
  constructor(params) {
    super({
      name: AmplifyErrorCode.Unknown,
      message: "An unknown error has occurred.",
      recoverySuggestion: "This may be a bug. Please reach out to library authors.",
      metadata: params == null ? void 0 : params.metadata
    });
    this.constructor = _IntegrityError;
    Object.setPrototypeOf(this, _IntegrityError.prototype);
  }
};

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/validateObjectUrl.mjs
function validateObjectUrl({ bucketName, key, objectURL }) {
  if (!bucketName || !key || !objectURL) {
    throw new IntegrityError();
  }
  const bucketWithDots = bucketName.includes(".");
  const encodedBucketName = extendedEncodeURIComponent(bucketName);
  const encodedKey = key.split("/").map(extendedEncodeURIComponent).join("/");
  const isPathStyleUrl = objectURL.pathname === `/${encodedBucketName}/${encodedKey}`;
  const isSubdomainUrl = objectURL.hostname.startsWith(`${encodedBucketName}.`) && objectURL.pathname === `/${encodedKey}`;
  if (!(isPathStyleUrl || !bucketWithDots && isSubdomainUrl)) {
    throw new IntegrityError();
  }
}

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/getObject.mjs
var getObjectSerializer = async (input2, endpoint) => {
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  url.search = new AmplifyUrlSearchParams({
    "x-id": "GetObject"
  }).toString();
  validateObjectUrl({
    bucketName: input2.Bucket,
    key: input2.Key,
    objectURL: url
  });
  return {
    method: "GET",
    headers: {
      ...input2.Range && { Range: input2.Range },
      ...assignStringVariables({
        "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner
      })
    },
    url
  };
};
var getObjectDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    return {
      ...map2(response.headers, {
        DeleteMarker: ["x-amz-delete-marker", deserializeBoolean],
        AcceptRanges: "accept-ranges",
        Expiration: "x-amz-expiration",
        Restore: "x-amz-restore",
        LastModified: ["last-modified", deserializeTimestamp],
        ContentLength: ["content-length", deserializeNumber],
        ETag: "etag",
        ChecksumCRC32: "x-amz-checksum-crc32",
        ChecksumCRC32C: "x-amz-checksum-crc32c",
        ChecksumSHA1: "x-amz-checksum-sha1",
        ChecksumSHA256: "x-amz-checksum-sha256",
        MissingMeta: ["x-amz-missing-meta", deserializeNumber],
        VersionId: "x-amz-version-id",
        CacheControl: "cache-control",
        ContentDisposition: "content-disposition",
        ContentEncoding: "content-encoding",
        ContentLanguage: "content-language",
        ContentRange: "content-range",
        ContentType: "content-type",
        Expires: ["expires", deserializeTimestamp],
        WebsiteRedirectLocation: "x-amz-website-redirect-location",
        ServerSideEncryption: "x-amz-server-side-encryption",
        SSECustomerAlgorithm: "x-amz-server-side-encryption-customer-algorithm",
        SSECustomerKeyMD5: "x-amz-server-side-encryption-customer-key-md5",
        SSEKMSKeyId: "x-amz-server-side-encryption-aws-kms-key-id",
        BucketKeyEnabled: [
          "x-amz-server-side-encryption-bucket-key-enabled",
          deserializeBoolean
        ],
        StorageClass: "x-amz-storage-class",
        RequestCharged: "x-amz-request-charged",
        ReplicationStatus: "x-amz-replication-status",
        PartsCount: ["x-amz-mp-parts-count", deserializeNumber],
        TagCount: ["x-amz-tagging-count", deserializeNumber],
        ObjectLockMode: "x-amz-object-lock-mode",
        ObjectLockRetainUntilDate: [
          "x-amz-object-lock-retain-until-date",
          deserializeTimestamp
        ],
        ObjectLockLegalHoldStatus: "x-amz-object-lock-legal-hold"
      }),
      Metadata: deserializeMetadata(response.headers),
      $metadata: parseMetadata(response),
      // @ts-expect-error The body is a CompatibleHttpResponse type because the lower-level handler is XHR instead of
      // fetch, which represents payload in Blob instread of ReadableStream.
      Body: response.body
    };
  }
};
var getObject = composeServiceApi(s3TransferHandler, getObjectSerializer, getObjectDeserializer, { ...defaultConfig4, responseType: "blob" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/listObjectsV2.mjs
var import_fast_xml_parser4 = __toESM(require_fast_xml_parser(), 1);
var import_buffer5 = __toESM(require_buffer(), 1);
var listObjectsV2Serializer = (input2, endpoint) => {
  const headers = assignStringVariables({
    "x-amz-request-payer": input2.RequestPayer,
    "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner
  });
  const query = assignStringVariables({
    "list-type": "2",
    "continuation-token": input2.ContinuationToken,
    delimiter: input2.Delimiter,
    "encoding-type": input2.EncodingType,
    "fetch-owner": input2.FetchOwner,
    "max-keys": input2.MaxKeys,
    prefix: input2.Prefix,
    "start-after": input2.StartAfter
  });
  const url = new AmplifyUrl(endpoint.url.toString());
  url.search = new AmplifyUrlSearchParams(query).toString();
  return {
    method: "GET",
    headers,
    url
  };
};
var listObjectsV2Deserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    const parsed = await parseXmlBody(response);
    const contents = map2(parsed, {
      CommonPrefixes: [
        "CommonPrefixes",
        (value) => emptyArrayGuard(value, deserializeCommonPrefixList)
      ],
      Contents: [
        "Contents",
        (value) => emptyArrayGuard(value, deserializeObjectList)
      ],
      ContinuationToken: "ContinuationToken",
      Delimiter: "Delimiter",
      EncodingType: "EncodingType",
      IsTruncated: ["IsTruncated", deserializeBoolean],
      KeyCount: ["KeyCount", deserializeNumber],
      MaxKeys: ["MaxKeys", deserializeNumber],
      Name: "Name",
      NextContinuationToken: "NextContinuationToken",
      Prefix: "Prefix",
      StartAfter: "StartAfter"
    });
    const output = {
      $metadata: parseMetadata(response),
      ...contents
    };
    validateCorroboratingElements(output);
    return output;
  }
};
var deserializeCommonPrefixList = (output) => output.map(deserializeCommonPrefix);
var deserializeCommonPrefix = (output) => map2(output, {
  Prefix: "Prefix"
});
var deserializeObjectList = (output) => output.map(deserializeObject);
var deserializeObject = (output) => map2(output, {
  Key: "Key",
  LastModified: ["LastModified", deserializeTimestamp],
  ETag: "ETag",
  ChecksumAlgorithm: [
    "ChecksumAlgorithm",
    (value) => emptyArrayGuard(value, deserializeChecksumAlgorithmList)
  ],
  Size: ["Size", deserializeNumber],
  StorageClass: "StorageClass",
  Owner: ["Owner", deserializeOwner]
});
var deserializeChecksumAlgorithmList = (output) => output.map((entry) => String(entry));
var deserializeOwner = (output) => map2(output, { DisplayName: "DisplayName", ID: "ID" });
var validateCorroboratingElements = (response) => {
  const { IsTruncated, KeyCount, Contents = [], CommonPrefixes = [], NextContinuationToken } = response;
  const validTruncation = IsTruncated && !!NextContinuationToken || !IsTruncated && !NextContinuationToken;
  const validNumberOfKeysReturned = KeyCount === Contents.length + CommonPrefixes.length;
  if (!validTruncation || !validNumberOfKeysReturned) {
    throw new IntegrityError({ metadata: response.$metadata });
  }
};
var listObjectsV2 = composeServiceApi(s3TransferHandler, listObjectsV2Serializer, listObjectsV2Deserializer, { ...defaultConfig4, responseType: "text" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/putObject.mjs
var import_fast_xml_parser5 = __toESM(require_fast_xml_parser(), 1);
var import_buffer6 = __toESM(require_buffer(), 1);
var putObjectSerializer = async (input2, endpoint) => {
  const headers = {
    ...await serializeObjectConfigsToHeaders({
      ...input2,
      ContentType: input2.ContentType ?? "application/octet-stream"
    }),
    ...assignStringVariables({
      "content-md5": input2.ContentMD5,
      "x-amz-checksum-crc32": input2.ChecksumCRC32,
      "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner,
      "If-None-Match": input2.IfNoneMatch
    })
  };
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  url.search = new AmplifyUrlSearchParams({
    "x-id": "PutObject"
  }).toString();
  validateObjectUrl({
    bucketName: input2.Bucket,
    key: input2.Key,
    objectURL: url
  });
  return {
    method: "PUT",
    headers,
    url,
    body: input2.Body
  };
};
var putObjectDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    return {
      ...map2(response.headers, {
        ETag: "etag",
        VersionId: "x-amz-version-id"
      }),
      $metadata: parseMetadata(response)
    };
  }
};
var putObject = composeServiceApi(s3TransferHandler, putObjectSerializer, putObjectDeserializer, { ...defaultConfig4, responseType: "text" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/createMultipartUpload.mjs
var import_fast_xml_parser6 = __toESM(require_fast_xml_parser(), 1);
var import_buffer7 = __toESM(require_buffer(), 1);
var createMultipartUploadSerializer = async (input2, endpoint) => {
  const headers = {
    ...await serializeObjectConfigsToHeaders(input2),
    ...assignStringVariables({
      "x-amz-checksum-algorithm": input2.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner
    })
  };
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  url.search = "uploads";
  validateObjectUrl({
    bucketName: input2.Bucket,
    key: input2.Key,
    objectURL: url
  });
  return {
    method: "POST",
    headers,
    url
  };
};
var createMultipartUploadDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    const parsed = await parseXmlBody(response);
    const contents = map2(parsed, {
      UploadId: "UploadId"
    });
    return {
      $metadata: parseMetadata(response),
      ...contents
    };
  }
};
var createMultipartUpload = composeServiceApi(s3TransferHandler, createMultipartUploadSerializer, createMultipartUploadDeserializer, { ...defaultConfig4, responseType: "text" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/uploadPart.mjs
var import_fast_xml_parser7 = __toESM(require_fast_xml_parser(), 1);
var import_buffer8 = __toESM(require_buffer(), 1);
var uploadPartSerializer = async (input2, endpoint) => {
  const headers = {
    ...assignStringVariables({
      "x-amz-checksum-crc32": input2.ChecksumCRC32,
      "content-md5": input2.ContentMD5,
      "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner
    }),
    "content-type": "application/octet-stream"
  };
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  validateS3RequiredParameter(!!input2.PartNumber, "PartNumber");
  validateS3RequiredParameter(!!input2.UploadId, "UploadId");
  url.search = new AmplifyUrlSearchParams({
    partNumber: input2.PartNumber + "",
    uploadId: input2.UploadId
  }).toString();
  validateObjectUrl({
    bucketName: input2.Bucket,
    key: input2.Key,
    objectURL: url
  });
  return {
    method: "PUT",
    headers,
    url,
    body: input2.Body
  };
};
var uploadPartDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    return {
      ...map2(response.headers, {
        ETag: "etag"
      }),
      $metadata: parseMetadata(response)
    };
  }
};
var uploadPart = composeServiceApi(s3TransferHandler, uploadPartSerializer, uploadPartDeserializer, { ...defaultConfig4, responseType: "text" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/completeMultipartUpload.mjs
var import_fast_xml_parser8 = __toESM(require_fast_xml_parser(), 1);
var import_buffer10 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/validateMultipartUploadXML.mjs
var import_buffer9 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/utils/integrityHelpers.mjs
var isNil2 = (value) => {
  return value === void 0 || value === null;
};
var bothNilOrEqual = (original, output) => {
  return isNil2(original) && isNil2(output) || original === output;
};
var isObject3 = (value) => {
  return value != null && typeof value === "object" && !Array.isArray(value);
};
var isEqual = (object, other) => {
  if (Array.isArray(object) && !Array.isArray(other)) {
    return false;
  }
  if (!Array.isArray(object) && Array.isArray(other)) {
    return false;
  }
  if (Array.isArray(object) && Array.isArray(other)) {
    return object.length === other.length && object.every((val, ix) => isEqual(val, other[ix]));
  }
  if (!isObject3(object) || !isObject3(other)) {
    return object === other;
  }
  const objectKeys2 = Object.keys(object);
  const otherKeys = Object.keys(other);
  if (objectKeys2.length !== otherKeys.length) {
    return false;
  }
  return objectKeys2.every((key) => {
    return otherKeys.includes(key) && isEqual(object[key], other[key]);
  });
};

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/validateMultipartUploadXML.mjs
function validateMultipartUploadXML(input2, xml) {
  if (!input2.Parts) {
    throw new IntegrityError();
  }
  const parsedXML = parser.parse(xml);
  const mappedCompletedMultipartUpload = map2(parsedXML, {
    Parts: [
      "Part",
      (value) => emptyArrayGuard(value, deserializeCompletedPartList)
    ]
  });
  if (!isEqual(input2, mappedCompletedMultipartUpload)) {
    throw new IntegrityError();
  }
}

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/completeMultipartUpload.mjs
var INVALID_PARAMETER_ERROR_MSG = "Invalid parameter for CompleteMultipartUpload API";
var MISSING_ETAG_ERROR_MSG = "ETag missing from multipart upload";
var MISSING_ETAG_ERROR_SUGGESTION = "Please ensure S3 bucket CORS configuration includes ETag as part of its `ExposeHeaders` element";
var completeMultipartUploadSerializer = async (input2, endpoint) => {
  const headers = {
    "content-type": "application/xml",
    ...assignStringVariables({
      "x-amz-checksum-crc32": input2.ChecksumCRC32,
      "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner,
      "If-None-Match": input2.IfNoneMatch
    })
  };
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  validateS3RequiredParameter(!!input2.UploadId, "UploadId");
  url.search = new AmplifyUrlSearchParams({
    uploadId: input2.UploadId
  }).toString();
  validateS3RequiredParameter(!!input2.MultipartUpload, "MultipartUpload");
  validateObjectUrl({
    bucketName: input2.Bucket,
    key: input2.Key,
    objectURL: url
  });
  const xml = serializeCompletedMultipartUpload(input2.MultipartUpload);
  validateMultipartUploadXML(input2.MultipartUpload, xml);
  return {
    method: "POST",
    headers,
    url,
    body: '<?xml version="1.0" encoding="UTF-8"?>' + xml
  };
};
var serializeCompletedMultipartUpload = (input2) => {
  var _a2;
  if (!((_a2 = input2.Parts) == null ? void 0 : _a2.length)) {
    throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input2)}`);
  }
  return `<CompleteMultipartUpload xmlns="http://s3.amazonaws.com/doc/2006-03-01/">${input2.Parts.map(serializeCompletedPartList).join("")}</CompleteMultipartUpload>`;
};
var serializeCompletedPartList = (input2) => {
  if (input2.PartNumber == null) {
    throw new Error(`${INVALID_PARAMETER_ERROR_MSG}: ${JSON.stringify(input2)}`);
  }
  if (!input2.ETag) {
    throw new Error(`${MISSING_ETAG_ERROR_MSG}: ${JSON.stringify(input2)}. ${MISSING_ETAG_ERROR_SUGGESTION}`);
  }
  const eTag = `<ETag>${input2.ETag}</ETag>`;
  const partNumber = `<PartNumber>${input2.PartNumber}</PartNumber>`;
  const checksumCRC32 = input2.ChecksumCRC32 ? `<ChecksumCRC32>${input2.ChecksumCRC32}</ChecksumCRC32>` : "";
  return `<Part>${eTag}${partNumber}${checksumCRC32}</Part>`;
};
var parseXmlBodyOrThrow = async (response) => {
  const parsed = await parseXmlBody(response);
  if (parsed.Code !== void 0 && parsed.Message !== void 0) {
    const error3 = await parseXmlError({
      ...response,
      statusCode: 500
      // To workaround the >=300 status code check common to other APIs.
    });
    error3.$metadata.httpStatusCode = response.statusCode;
    throw buildStorageServiceError(error3);
  }
  return parsed;
};
var completeMultipartUploadDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    const parsed = await parseXmlBodyOrThrow(response);
    const contents = map2(parsed, {
      ETag: "ETag",
      Key: "Key",
      Location: "Location"
    });
    return {
      $metadata: parseMetadata(response),
      ...contents
    };
  }
};
var retryWhenErrorWith200StatusCode = async (response, error3, middlewareContext) => {
  if (!response) {
    return { retryable: false };
  }
  if (response.statusCode === 200) {
    if (!response.body) {
      return { retryable: true };
    }
    const parsed = await parseXmlBody(response);
    if (parsed.Code !== void 0 && parsed.Message !== void 0) {
      return { retryable: true };
    }
    return { retryable: false };
  }
  return retryDecider(response, error3, middlewareContext);
};
var completeMultipartUpload = composeServiceApi(s3TransferHandler, completeMultipartUploadSerializer, completeMultipartUploadDeserializer, {
  ...defaultConfig4,
  responseType: "text",
  retryDecider: retryWhenErrorWith200StatusCode
});

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/listParts.mjs
var import_fast_xml_parser9 = __toESM(require_fast_xml_parser(), 1);
var import_buffer11 = __toESM(require_buffer(), 1);
var listPartsSerializer = async (input2, endpoint) => {
  const headers = {};
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  validateS3RequiredParameter(!!input2.UploadId, "UploadId");
  url.search = new AmplifyUrlSearchParams({
    "x-id": "ListParts",
    uploadId: input2.UploadId
  }).toString();
  return {
    method: "GET",
    headers,
    url
  };
};
var listPartsDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    const parsed = await parseXmlBody(response);
    const contents = map2(parsed, {
      UploadId: "UploadId",
      Parts: [
        "Part",
        (value) => emptyArrayGuard(value, deserializeCompletedPartList)
      ]
    });
    return {
      $metadata: parseMetadata(response),
      ...contents
    };
  }
};
var listParts = composeServiceApi(s3TransferHandler, listPartsSerializer, listPartsDeserializer, { ...defaultConfig4, responseType: "text" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/abortMultipartUpload.mjs
var import_fast_xml_parser10 = __toESM(require_fast_xml_parser(), 1);
var import_buffer12 = __toESM(require_buffer(), 1);
var abortMultipartUploadSerializer = (input2, endpoint) => {
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  validateS3RequiredParameter(!!input2.UploadId, "UploadId");
  url.search = new AmplifyUrlSearchParams({
    "x-id": "AbortMultipartUpload",
    uploadId: input2.UploadId
  }).toString();
  validateObjectUrl({
    bucketName: input2.Bucket,
    key: input2.Key,
    objectURL: url
  });
  const headers = {
    ...assignStringVariables({
      "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner
    })
  };
  return {
    method: "DELETE",
    headers,
    url
  };
};
var abortMultipartUploadDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    return {
      $metadata: parseMetadata(response)
    };
  }
};
var abortMultipartUpload = composeServiceApi(s3TransferHandler, abortMultipartUploadSerializer, abortMultipartUploadDeserializer, { ...defaultConfig4, responseType: "text" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/copyObject.mjs
var import_fast_xml_parser11 = __toESM(require_fast_xml_parser(), 1);
var import_buffer13 = __toESM(require_buffer(), 1);
var copyObjectSerializer = async (input2, endpoint) => {
  var _a2;
  const headers = {
    ...await serializeObjectConfigsToHeaders(input2),
    ...assignStringVariables({
      "x-amz-copy-source": input2.CopySource,
      "x-amz-metadata-directive": input2.MetadataDirective,
      "x-amz-copy-source-if-match": input2.CopySourceIfMatch,
      "x-amz-copy-source-if-unmodified-since": (_a2 = input2.CopySourceIfUnmodifiedSince) == null ? void 0 : _a2.toUTCString(),
      "x-amz-source-expected-bucket-owner": input2.ExpectedSourceBucketOwner,
      "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner
    })
  };
  validateCopyObjectHeaders(input2, headers);
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  url.search = new AmplifyUrlSearchParams({
    "x-id": "CopyObject"
  }).toString();
  validateObjectUrl({
    bucketName: input2.Bucket,
    key: input2.Key,
    objectURL: url
  });
  return {
    method: "PUT",
    headers,
    url
  };
};
var validateCopyObjectHeaders = (input2, headers) => {
  var _a2;
  const validations = [
    headers["x-amz-copy-source"] === input2.CopySource,
    bothNilOrEqual(input2.MetadataDirective, headers["x-amz-metadata-directive"]),
    bothNilOrEqual(input2.CopySourceIfMatch, headers["x-amz-copy-source-if-match"]),
    bothNilOrEqual((_a2 = input2.CopySourceIfUnmodifiedSince) == null ? void 0 : _a2.toUTCString(), headers["x-amz-copy-source-if-unmodified-since"])
  ];
  if (validations.some((validation) => !validation)) {
    throw new IntegrityError();
  }
};
var copyObjectDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    await parseXmlBody(response);
    return {
      $metadata: parseMetadata(response)
    };
  }
};
var copyObject = composeServiceApi(s3TransferHandler, copyObjectSerializer, copyObjectDeserializer, { ...defaultConfig4, responseType: "text" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/headObject.mjs
var import_fast_xml_parser12 = __toESM(require_fast_xml_parser(), 1);
var import_buffer14 = __toESM(require_buffer(), 1);
var headObjectSerializer = async (input2, endpoint) => {
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  validateObjectUrl({
    bucketName: input2.Bucket,
    key: input2.Key,
    objectURL: url
  });
  const headers = assignStringVariables({
    "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner
  });
  return {
    method: "HEAD",
    headers,
    url
  };
};
var headObjectDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    const contents = {
      ...map2(response.headers, {
        ContentLength: ["content-length", deserializeNumber],
        ContentType: "content-type",
        ETag: "etag",
        LastModified: ["last-modified", deserializeTimestamp],
        VersionId: "x-amz-version-id"
      }),
      Metadata: deserializeMetadata(response.headers)
    };
    return {
      $metadata: parseMetadata(response),
      ...contents
    };
  }
};
var headObject = composeServiceApi(s3TransferHandler, headObjectSerializer, headObjectDeserializer, { ...defaultConfig4, responseType: "text" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/client/s3data/deleteObject.mjs
var import_fast_xml_parser13 = __toESM(require_fast_xml_parser(), 1);
var import_buffer15 = __toESM(require_buffer(), 1);
var deleteObjectSerializer = (input2, endpoint) => {
  const url = new AmplifyUrl(endpoint.url.toString());
  validateS3RequiredParameter(!!input2.Key, "Key");
  url.pathname = serializePathnameObjectKey(url, input2.Key);
  url.search = new AmplifyUrlSearchParams({
    "x-id": "DeleteObject"
  }).toString();
  validateObjectUrl({
    bucketName: input2.Bucket,
    key: input2.Key,
    objectURL: url
  });
  const headers = assignStringVariables({
    "x-amz-expected-bucket-owner": input2.ExpectedBucketOwner
  });
  return {
    method: "DELETE",
    headers,
    url
  };
};
var deleteObjectDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    throw buildStorageServiceError(await parseXmlError(response));
  } else {
    const content = map2(response.headers, {
      DeleteMarker: ["x-amz-delete-marker", deserializeBoolean],
      VersionId: "x-amz-version-id",
      RequestCharged: "x-amz-request-charged"
    });
    return {
      ...content,
      $metadata: parseMetadata(response)
    };
  }
};
var deleteObject = composeServiceApi(s3TransferHandler, deleteObjectSerializer, deleteObjectDeserializer, { ...defaultConfig4, responseType: "text" });

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/crc32.mjs
var import_crc_32 = __toESM(require_crc32(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/hexUtils.mjs
var import_fast_xml_parser14 = __toESM(require_fast_xml_parser(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/utils/crc32.mjs
var CHUNK_SIZE = 1024 * 1024;

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/apis/internal/uploadData/multipart/uploadHandlers.mjs
var import_fast_xml_parser15 = __toESM(require_fast_xml_parser(), 1);
var import_buffer16 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/apis/internal/uploadData/multipart/uploadCache.mjs
var ONE_HOUR = 1e3 * 60 * 60;

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/apis/internal/downloadData.mjs
var import_fast_xml_parser17 = __toESM(require_fast_xml_parser(), 1);
var import_buffer18 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/apis/internal/remove.mjs
var import_fast_xml_parser18 = __toESM(require_fast_xml_parser(), 1);
var import_buffer19 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/apis/internal/list.mjs
var import_fast_xml_parser19 = __toESM(require_fast_xml_parser(), 1);
var import_buffer20 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/apis/internal/getProperties.mjs
var import_fast_xml_parser20 = __toESM(require_fast_xml_parser(), 1);
var import_buffer21 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/apis/internal/copy.mjs
var import_fast_xml_parser21 = __toESM(require_fast_xml_parser(), 1);
var import_buffer22 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/storage/dist/esm/providers/s3/apis/internal/getUrl.mjs
var import_fast_xml_parser22 = __toESM(require_fast_xml_parser(), 1);
var import_buffer23 = __toESM(require_buffer(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useSetUserAgent.mjs
var import_react22 = __toESM(require_react(), 1);
function useSetUserAgent({ componentName, packageName, version: version2 }) {
  (0, import_react22.useEffect)(() => {
    const clearUserAgent = setUserAgent({
      componentName,
      packageName,
      version: version2
    });
    return clearUserAgent;
  }, [componentName, packageName, version2]);
}

// node_modules/@aws-amplify/ui-react-core/dist/esm/hooks/useTimeout.mjs
var import_react23 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react-core/dist/esm/utils/createContextUtilities.mjs
var import_react24 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/hooks/useAuth.mjs
var React6 = __toESM(require_react(), 1);
var useAuth = () => {
  const [result, setResult] = React6.useState({
    error: void 0,
    isLoading: true,
    user: void 0
  });
  const fetchCurrentUser = React6.useCallback(async () => {
    setResult((prevResult) => ({ ...prevResult, isLoading: true }));
    try {
      const user = await getCurrentUser2();
      setResult({ user, isLoading: false });
    } catch (e) {
      const error3 = e;
      setResult({ error: error3, isLoading: false });
    }
  }, []);
  const handleAuth = React6.useCallback(({ payload }) => {
    switch (payload.event) {
      case "signedIn":
      case "signUp":
      case "autoSignIn": {
        setResult({ user: payload.data, isLoading: false });
        break;
      }
      case "signedOut": {
        setResult({ user: void 0, isLoading: false });
        break;
      }
      case "tokenRefresh_failure":
      case "signIn_failure": {
        setResult({ error: payload.data, isLoading: false });
        break;
      }
      case "autoSignIn_failure": {
        setResult({ error: new Error(payload.message), isLoading: false });
        break;
      }
      case "tokenRefresh": {
        fetchCurrentUser();
        break;
      }
    }
  }, [fetchCurrentUser]);
  React6.useEffect(() => {
    const unsubscribe = Hub.listen("auth", handleAuth, "useAuth");
    fetchCurrentUser();
    return unsubscribe;
  }, [handleAuth, fetchCurrentUser]);
  return {
    ...result,
    /** @deprecated Fetch is handled automatically, do not use this directly */
    fetch: fetchCurrentUser
  };
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/ThemeProvider/ThemeContext.mjs
var React7 = __toESM(require_react(), 1);
var ThemeContext = React7.createContext({
  theme: createTheme(),
  colorMode: void 0
});

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Alert/AlertIcon.mjs
var React20 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/Icon.mjs
var React13 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/View/View.mjs
var React12 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/styleUtils.mjs
var React10 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/types/style.mjs
var ComponentPropsToStylePropsMap = {
  alignContent: "alignContent",
  alignItems: "alignItems",
  alignSelf: "alignSelf",
  area: "gridArea",
  aspectRatio: "aspectRatio",
  autoColumns: "gridAutoColumns",
  autoFlow: "gridAutoFlow",
  autoRows: "gridAutoRows",
  backgroundColor: "backgroundColor",
  backgroundImage: "backgroundImage",
  basis: "flexBasis",
  border: "border",
  borderRadius: "borderRadius",
  borderColor: "borderColor",
  borderWidth: "borderWidth",
  borderStyle: "borderStyle",
  bottom: "bottom",
  boxShadow: "boxShadow",
  color: "color",
  column: "gridColumn",
  columnEnd: "gridColumnEnd",
  columnGap: "columnGap",
  columnSpan: "gridColumn",
  columnStart: "gridColumnStart",
  direction: "flexDirection",
  display: "display",
  flex: "flex",
  fontFamily: "fontFamily",
  fontSize: "fontSize",
  fontStyle: "fontStyle",
  fontWeight: "fontWeight",
  gap: "gap",
  grow: "flexGrow",
  height: "height",
  justifyContent: "justifyContent",
  left: "left",
  letterSpacing: "letterSpacing",
  lineHeight: "lineHeight",
  margin: "margin",
  marginBlock: "marginBlock",
  marginBlockEnd: "marginBlockEnd",
  marginBlockStart: "marginBlockStart",
  marginBottom: "marginBlockEnd",
  marginInline: "marginInline",
  marginInlineEnd: "marginInlineEnd",
  marginInlineStart: "marginInlineStart",
  marginLeft: "marginInlineStart",
  marginRight: "marginInlineEnd",
  marginTop: "marginBlockStart",
  maxHeight: "maxHeight",
  maxWidth: "maxWidth",
  minHeight: "minHeight",
  minWidth: "minWidth",
  objectFit: "objectFit",
  objectPosition: "objectPosition",
  opacity: "opacity",
  order: "order",
  overflow: "overflow",
  padding: "padding",
  paddingBlock: "paddingBlock",
  paddingBlockEnd: "paddingBlockEnd",
  paddingBlockStart: "paddingBlockStart",
  paddingBottom: "paddingBlockEnd",
  paddingInline: "paddingInline",
  paddingInlineEnd: "paddingInlineEnd",
  paddingInlineStart: "paddingInlineStart",
  paddingLeft: "paddingInlineStart",
  paddingRight: "paddingInlineEnd",
  paddingTop: "paddingBlockStart",
  position: "position",
  resize: "resize",
  right: "right",
  row: "gridRow",
  rowEnd: "gridRowEnd",
  rowGap: "rowGap",
  rowSpan: "gridRow",
  rowStart: "gridRowStart",
  shrink: "flexShrink",
  templateAreas: "gridTemplateAreas",
  templateColumns: "gridTemplateColumns",
  templateRows: "gridTemplateRows",
  textAlign: "textAlign",
  textDecoration: "textDecoration",
  textTransform: "textTransform",
  top: "top",
  transform: "transform",
  transformOrigin: "transformOrigin",
  width: "width",
  whiteSpace: "whiteSpace",
  wrap: "flexWrap"
};
var ComponentPropsToStylePropsMapKeys = Object.keys(ComponentPropsToStylePropsMap);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/constants.mjs
var ComponentText = {
  Alert: {
    dismissButtonLabel: "Dismiss alert"
  },
  Autocomplete: {
    emptyText: "No options found",
    loadingText: "Loading options..."
  },
  Collection: {
    searchButtonLabel: "Search",
    searchNoResultsFound: "No results found"
  },
  Fields: {
    clearButtonLabel: "Clear input"
  },
  Message: {
    dismissLabel: "Dismiss message"
  },
  PaginationItem: {
    currentPageLabel: "Page",
    nextLabel: "Go to next page",
    pageLabel: "Go to page",
    previousLabel: "Go to previous page"
  },
  PhoneNumberField: {
    countryCodeLabel: "Country code"
  },
  SearchField: {
    searchButtonLabel: "Search"
  },
  PasswordField: {
    passwordIsHidden: "Password is hidden",
    passwordIsShown: "Password is shown",
    showPassword: "Show password"
  },
  StepperField: {
    increaseButtonLabel: "Increase to",
    decreaseButtonLabel: "Decrease to"
  }
};
var stylePropsToThemeKeys = {
  backgroundColor: "colors",
  borderColor: "colors",
  borderWidth: "borderWidths",
  color: "colors",
  borderRadius: "radii",
  fontSize: "fontSizes",
  fontWeight: "fontWeights",
  fontFamily: "fonts",
  lineHeight: "lineHeights",
  opacity: "opacities",
  boxShadow: "shadows",
  transform: "transforms",
  left: "space",
  right: "space",
  top: "space",
  bottom: "space",
  height: "space",
  width: "space",
  letterSpacing: "space",
  margin: "space",
  marginBlock: "space",
  marginBlockEnd: "space",
  marginBlockStart: "space",
  marginInline: "space",
  marginInlineEnd: "space",
  marginInlineStart: "space",
  marginLeft: "space",
  marginRight: "space",
  marginTop: "space",
  marginBottom: "space",
  maxHeight: "space",
  maxWidth: "space",
  minHeight: "space",
  minWidth: "space",
  padding: "space",
  paddingBlock: "space",
  paddingBlockEnd: "space",
  paddingBlockStart: "space",
  paddingInline: "space",
  paddingInlineEnd: "space",
  paddingInlineStart: "space",
  paddingLeft: "space",
  paddingRight: "space",
  paddingTop: "space",
  paddingBottom: "space",
  gap: "space",
  columnGap: "space",
  rowGap: "space"
};
var ESCAPE_KEY = "Escape";
var ENTER_KEY = "Enter";
var ARROW_UP = "ArrowUp";
var ARROW_DOWN = "ArrowDown";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/types/theme.mjs
var isThemeStylePropKey = (key) => {
  return key in stylePropsToThemeKeys;
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/utils.mjs
var strHasLength = (str) => typeof str === "string" && str.length > 0;
var isEmptyString = (value) => typeof value === "string" && value.length === 0;
var isNullOrEmptyString = (value) => value == null || isEmptyString(value);
var getConsecutiveIntArray = (start3, end) => {
  const length = end - start3 + 1;
  return Array.from({ length }, (_, idx) => idx + start3);
};
var objectKeys = (obj) => {
  return Object.keys(obj);
};
var getCSSVariableIfValueIsThemeKey = (propKey, value, tokens2) => {
  if (typeof value !== "string") {
    return value;
  }
  if (value.includes(" ")) {
    return value.split(" ").map((val) => getCSSVariableIfValueIsThemeKey(propKey, val, tokens2)).join(" ");
  }
  if (isThemeStylePropKey(propKey)) {
    const path2 = value.split(".");
    const tokenKey = stylePropsToThemeKeys[propKey];
    let tokenProps = tokens2[tokenKey];
    for (let i = 0; i < path2.length; i++) {
      if (tokenProps) {
        tokenProps = tokenProps[path2[i]];
        continue;
      }
      break;
    }
    return isDesignToken(tokenProps) ? `var(--${cssNameTransform({
      path: [stylePropsToThemeKeys[propKey], ...path2]
    })})` : value;
  }
  return value;
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/responsive/utils.mjs
var getClosestValueByBreakpoint = ({ breakpoint, breakpoints: breakpoints2, values }) => {
  const value = values[breakpoint];
  if (value !== void 0) {
    return value;
  }
  const breakpointsDesc = objectKeys(breakpoints2).sort((a, b) => breakpoints2[b] - breakpoints2[a]);
  const lowerBreakpoints = breakpointsDesc.slice(breakpointsDesc.indexOf(breakpoint));
  for (const breakpoint2 of lowerBreakpoints) {
    const value2 = values[breakpoint2];
    if (value2 !== void 0) {
      return value2;
    }
  }
  return null;
};
var valueObjToBreakpoints = (obj) => {
  return objectKeys(obj).reduce((acc, key) => key in defaultTheme.breakpoints.values ? { ...acc, [key]: obj[key] } : acc, {});
};
var getValueAtCurrentBreakpoint = ({ breakpoint, breakpoints: breakpoints2, values }) => {
  let breakpointCompatValues = {};
  const breakpointsAscending = objectKeys(breakpoints2).sort((a, b) => breakpoints2[a] - breakpoints2[b]);
  if (Array.isArray(values)) {
    values.forEach((value, index3) => {
      breakpointCompatValues[breakpointsAscending[index3]] = value;
    });
  } else if (typeof values === "object") {
    breakpointCompatValues = valueObjToBreakpoints(values);
  }
  return getClosestValueByBreakpoint({
    breakpoint,
    breakpoints: breakpoints2,
    values: breakpointCompatValues
  });
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/responsive/useBreakpoint.mjs
var React8 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/responsive/getMediaQueries.mjs
var getMediaQueries = ({ breakpoints: breakpoints2 }) => {
  const sortedBreakpoints = objectKeys(breakpoints2).sort((a, b) => breakpoints2[b] - breakpoints2[a]);
  return sortedBreakpoints.map((breakpoint, index3) => {
    let query = "";
    const minWidth = breakpoints2[breakpoint];
    const nextBreakpoint = sortedBreakpoints[index3 - 1];
    const maxWidth = nextBreakpoint ? breakpoints2[nextBreakpoint] - 1 : null;
    if (minWidth >= 0) {
      query = `(min-width: ${minWidth}px)`;
    }
    if (maxWidth !== null) {
      if (query) {
        query += " and ";
      }
      query += `(max-width: ${maxWidth}px)`;
    }
    return {
      breakpoint,
      query,
      maxWidth,
      minWidth
    };
  });
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/responsive/useBreakpoint.mjs
var useIsomorphicEffect = typeof window === "undefined" ? React8.useEffect : React8.useLayoutEffect;
var useBreakpoint = ({ breakpoints: breakpoints2, defaultBreakpoint }) => {
  const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
  const matchMedia = supportMatchMedia ? window.matchMedia : null;
  const mediaQueries = React8.useMemo(() => getMediaQueries({ breakpoints: breakpoints2 }), [breakpoints2]);
  const [breakpoint, setBreakpoint] = React8.useState(defaultBreakpoint);
  const updateBreakpoint = React8.useCallback((matches, breakpoint2) => {
    if (matches) {
      setBreakpoint(breakpoint2);
    }
  }, [setBreakpoint]);
  useIsomorphicEffect(() => {
    if (!matchMedia)
      return;
    const unsubscribeList = mediaQueries.map(({ query, breakpoint: breakpoint2 }) => {
      const queryList = matchMedia(query);
      updateBreakpoint(queryList.matches, breakpoint2);
      const handleMediaChange = (event2) => {
        if (event2.matches) {
          setBreakpoint(breakpoint2);
        }
      };
      queryList.addEventListener("change", handleMediaChange);
      return () => queryList.removeEventListener("change", handleMediaChange);
    });
    return () => {
      unsubscribeList.forEach((unsubscribe) => unsubscribe());
    };
  }, [breakpoints2, setBreakpoint, matchMedia, mediaQueries]);
  React8.useDebugValue(breakpoint, (breakpoint2) => breakpoint2);
  return breakpoint;
};

// node_modules/@aws-amplify/ui-react/dist/esm/hooks/useTheme.mjs
var React9 = __toESM(require_react(), 1);
var getThemeFromContext = (context2) => {
  if (typeof context2 === "undefined" || typeof context2.theme === "undefined") {
    return createTheme();
  }
  return context2.theme;
};
var useTheme = () => {
  const context2 = React9.useContext(ThemeContext);
  return getThemeFromContext(context2);
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/getStyleValue.mjs
var getStyleValue = ({ value, propKey, tokens: tokens2 }) => {
  if (isDesignToken(value)) {
    return value.toString();
  }
  if (isString2(value)) {
    return isString2(propKey) ? getCSSVariableIfValueIsThemeKey(propKey, value, tokens2) : value;
  }
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/shared/styleUtils.mjs
var isSpanPrimitiveValue = (spanValue) => {
  return spanValue === "auto" || typeof spanValue === "number" && !isNaN(spanValue) || typeof spanValue === "string" && !isNaN(parseFloat(spanValue));
};
var getGridSpan = (spanValue) => {
  return spanValue === "auto" ? "auto" : `span ${spanValue}`;
};
var convertGridSpan = (spanValue) => {
  if (isSpanPrimitiveValue(spanValue)) {
    return getGridSpan(spanValue);
  }
  if (Array.isArray(spanValue)) {
    return spanValue.map((value) => getGridSpan(value));
  }
  if (typeof spanValue === "object" && spanValue != null) {
    return Object.entries(spanValue).reduce((acc, [key, value]) => ({ ...acc, [key]: getGridSpan(value) }), {});
  }
  return null;
};
var useTransformStyleProps = (props) => {
  const { rowSpan, columnSpan, row, column, ...rest } = props;
  const { rowFromSpanValue, columnFromSpanValue } = React10.useMemo(() => {
    return {
      rowFromSpanValue: convertGridSpan(rowSpan),
      columnFromSpanValue: convertGridSpan(columnSpan)
    };
  }, [rowSpan, columnSpan]);
  return {
    row: !isNullOrEmptyString(row) ? row : rowFromSpanValue,
    column: !isNullOrEmptyString(column) ? column : columnFromSpanValue,
    ...rest
  };
};
var isComponentStyleProp = (key) => {
  return key in ComponentPropsToStylePropsMap;
};
var convertStylePropsToStyleObj = ({ props = {}, style = {}, breakpoint, breakpoints: breakpoints2, tokens: tokens2 }) => {
  const nonStyleProps = {};
  Object.keys(props).filter((propKey) => props[propKey] !== null).forEach((propKey) => {
    if (isComponentStyleProp(propKey)) {
      const values = props[propKey];
      if (values === null || values === void 0 || isEmptyString(values))
        return;
      const reactStyleProp = ComponentPropsToStylePropsMap[propKey];
      let value = "";
      if (isDesignToken(values)) {
        value = values.toString();
      } else if (typeof values === "string") {
        value = getCSSVariableIfValueIsThemeKey(propKey, values, tokens2);
      } else if (typeof values === "number") {
        value = values;
      } else if (typeof values === "object") {
        value = getStyleValue({
          propKey,
          tokens: tokens2,
          value: getValueAtCurrentBreakpoint({
            values,
            breakpoint,
            breakpoints: breakpoints2
          })
        });
      }
      style = {
        ...style,
        [reactStyleProp]: value
      };
    } else if (typeof props[propKey] !== "undefined") {
      nonStyleProps[propKey] = props[propKey];
    }
  });
  return { propStyles: style, nonStyleProps };
};
var useStyles = (props, style) => {
  const { breakpoints: { values: breakpoints2, defaultBreakpoint }, tokens: tokens2 } = useTheme();
  const breakpoint = useBreakpoint({
    breakpoints: breakpoints2,
    defaultBreakpoint
  });
  const propStyles = useTransformStyleProps(props);
  return React10.useMemo(() => convertStylePropsToStyleObj({
    props: propStyles,
    style,
    breakpoint,
    breakpoints: breakpoints2,
    tokens: tokens2
  }), [propStyles, style, breakpoints2, breakpoint, tokens2]);
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/primitiveWithForwardRef.mjs
var React11 = __toESM(require_react(), 1);
var primitiveWithForwardRef = (primitive) => React11.forwardRef(primitive);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/View/View.mjs
var ViewPrimitive = ({ as = "div", children: children2, testId, ariaLabel, isDisabled, style, inert, ...rest }, ref) => {
  const { propStyles, nonStyleProps } = useStyles(rest, style);
  return React12.createElement(as, {
    "aria-label": ariaLabel,
    "data-testid": testId,
    disabled: isDisabled,
    ref,
    inert: inert ? "" : null,
    style: propStyles,
    ...nonStyleProps
  }, children2);
};
var View = primitiveWithForwardRef(ViewPrimitive);
View.displayName = "View";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/Icon.mjs
var defaultViewBox = { minX: 0, minY: 0, width: 24, height: 24 };
var IconPrimitive = ({
  className,
  // as can be used to render other icon react components too
  as = "svg",
  fill = "currentColor",
  pathData,
  viewBox = defaultViewBox,
  children: children2,
  paths,
  ...rest
}, ref) => {
  const minX = viewBox.minX ? viewBox.minX : defaultViewBox.minX;
  const minY = viewBox.minY ? viewBox.minY : defaultViewBox.minY;
  const width = viewBox.width ? viewBox.width : defaultViewBox.width;
  const height = viewBox.height ? viewBox.height : defaultViewBox.height;
  let _children;
  if (children2) {
    _children = children2;
  }
  if (paths) {
    _children = paths.map((path2, index3) => React13.createElement("path", { ...path2, key: index3 }));
  }
  if (pathData) {
    _children = React13.createElement("path", { d: pathData, fill });
  }
  return React13.createElement(View, { as, className: classNames(ComponentClassName.Icon, className), ref, viewBox: `${minX} ${minY} ${width} ${height}`, ...rest }, _children);
};
var Icon = primitiveWithForwardRef(IconPrimitive);
Icon.displayName = "Icon";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/context/IconsContext.mjs
var React14 = __toESM(require_react(), 1);
var IconsContext = React14.createContext({});

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/context/useIcons.mjs
var React15 = __toESM(require_react(), 1);
function useIcons(component) {
  const context2 = React15.useContext(IconsContext);
  if (component && context2) {
    return context2[component];
  }
  return void 0;
}

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconCheckCircle.mjs
var React16 = __toESM(require_react(), 1);
var IconCheckCircle = (props) => {
  const { className, ...rest } = props;
  return React16.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React16.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React16.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20ZM16.59 7.58L10 14.17L7.41 11.59L6 13L10 17L18 9L16.59 7.58Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconError.mjs
var React17 = __toESM(require_react(), 1);
var IconError = (props) => {
  const { className, ...rest } = props;
  return React17.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React17.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React17.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconInfo.mjs
var React18 = __toESM(require_react(), 1);
var IconInfo = (props) => {
  const { className, ...rest } = props;
  return React18.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React18.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React18.createElement("path", { d: "M11 7H13V9H11V7ZM11 11H13V17H11V11ZM12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconWarning.mjs
var React19 = __toESM(require_react(), 1);
var IconWarning = (props) => {
  const { className, ...rest } = props;
  return React19.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React19.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React19.createElement("path", { d: "M1 21H23L12 2L1 21ZM13 18H11V16H13V18ZM13 14H11V10H13V14Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Alert/AlertIcon.mjs
var AlertIcon = ({ variation, ariaHidden, ariaLabel, role }) => {
  const icons = useIcons("alert");
  let icon2;
  switch (variation) {
    case "info":
      icon2 = (icons == null ? void 0 : icons.info) ?? React20.createElement(IconInfo, { "aria-hidden": ariaHidden, "aria-label": ariaLabel, role });
      break;
    case "error":
      icon2 = (icons == null ? void 0 : icons.error) ?? React20.createElement(IconError, { "aria-hidden": ariaHidden, "aria-label": ariaLabel, role });
      break;
    case "warning":
      icon2 = (icons == null ? void 0 : icons.warning) ?? React20.createElement(IconWarning, { "aria-hidden": ariaHidden, "aria-label": ariaLabel, role });
      break;
    case "success":
      icon2 = (icons == null ? void 0 : icons.success) ?? React20.createElement(IconCheckCircle, { "aria-hidden": ariaHidden, "aria-label": ariaLabel, role });
      break;
  }
  return icon2 ? React20.createElement("span", { className: ComponentClassName.AlertIcon }, icon2) : null;
};
AlertIcon.displayName = "AlertIcon";

// node_modules/@aws-amplify/ui-react/dist/esm/components/FileSelect/FileSelect.mjs
var import_react25 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/useStableId.mjs
var React22 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/useLayoutEffect.mjs
var React21 = __toESM(require_react(), 1);
var useLayoutEffect4 = (globalThis == null ? void 0 : globalThis.document) ? React21.useLayoutEffect : () => {
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/useStableId.mjs
var AUTO_GENERATED_ID_PREFIX = "amplify-id";
var useReactId = (
  // disable eslint below to allow usage of casting React to `any`, which ensures that TS
  // does not get confused about the existence of `useId` in React 17 and below
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  React22["useId".toString()] || (() => void 0)
);
var count2 = 0;
var useStableId = (id) => {
  const [stableId, setStableId] = React22.useState(useReactId());
  useLayoutEffect4(() => {
    if (!id) {
      setStableId((reactId) => reactId ?? String(count2++));
    }
  }, [id]);
  return id ?? (stableId ? `${AUTO_GENERATED_ID_PREFIX}-${stableId}` : "");
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/FileSelect/FileSelect.mjs
var INPUT_TYPE = "file";
var TEST_ID = "amplify-file-select";
var DEFAULT_PROPS = {
  style: { display: "none" },
  type: "file",
  "data-testid": TEST_ID
};
var FileSelect = import_react25.default.forwardRef(function FileSelect2({ multiple = true, type = "FILE", testId = "amplify-file-select", ...props }, ref) {
  return import_react25.default.createElement("input", { ...DEFAULT_PROPS, ...props, ...type === "FOLDER" ? { webkitdirectory: "" } : void 0, "data-testid": testId, multiple, ref, type: INPUT_TYPE });
});

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Field/FieldClearButton.mjs
var React30 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/FieldGroupIcon/FieldGroupIcon.mjs
var React23 = __toESM(require_react(), 1);
var FieldGroupIconPrimitive = ({ className, children: children2, isVisible = true, excludeFromTabOrder = false, ...rest }, ref) => {
  return isVisible ? React23.createElement(View, { className: classNames(ComponentClassName.FieldGroupIcon, className), ref, tabIndex: excludeFromTabOrder ? -1 : void 0, ...rest }, children2) : null;
};
var FieldGroupIcon = primitiveWithForwardRef(FieldGroupIconPrimitive);
FieldGroupIcon.displayName = "FieldGroupIcon";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/FieldGroupIcon/FieldGroupIconButton.mjs
var React28 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Button/Button.mjs
var React27 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Fieldset/useFieldset.mjs
var React24 = __toESM(require_react(), 1);
var FieldsetContext = React24.createContext({
  isFieldsetDisabled: false
});
var useFieldset = () => React24.useContext(FieldsetContext);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Flex/Flex.mjs
var React25 = __toESM(require_react(), 1);
var FlexPrimitive = ({ className, children: children2, ...rest }, ref) => React25.createElement(View, { className: classNames(ComponentClassName.Flex, className), ref, ...rest }, children2);
var Flex = primitiveWithForwardRef(FlexPrimitive);
Flex.displayName = "Flex";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Loader/Loader.mjs
var React26 = __toESM(require_react(), 1);
var LINEAR_EMPTY = "linear-empty";
var LINEAR_FILLED = "linear-filled";
var CIRCULAR_EMPTY = "circular-empty";
var CIRCULAR_FILLED = "circular-filled";
var CIRCULAR_STROKE_WIDTH = 8;
var RADIUS = 42;
var CIRCUMFERENCE = 2 * RADIUS * Math.PI;
var LoaderPrimitive = ({ className, filledColor, emptyColor, size: size4, variation, isDeterminate = false, isPercentageTextHidden = false, percentage = 0, ...rest }, ref) => {
  percentage = Math.min(percentage, 100);
  percentage = Math.max(percentage, 0);
  const percent = `${percentage}%`;
  const componentClasses = classNames(ComponentClassName.Loader, classNameModifier(ComponentClassName.Loader, size4), classNameModifier(ComponentClassName.Loader, variation), classNameModifierByFlag(ComponentClassName.Loader, "determinate", isDeterminate), className);
  const linearLoader = React26.createElement(
    "g",
    null,
    React26.createElement("line", { x1: "0", x2: "100%", y1: "50%", y2: "50%", style: { stroke: String(emptyColor) }, "data-testid": LINEAR_EMPTY }),
    React26.createElement("line", { x1: "0", x2: isDeterminate ? percent : "100%", y1: "50%", y2: "50%", style: {
      // To get rid of the visible stroke linecap when percentage is 0
      stroke: isDeterminate && percentage === 0 ? "none" : filledColor ? String(filledColor) : void 0
    }, "data-testid": LINEAR_FILLED }),
    isDeterminate ? React26.createElement("text", {
      "aria-live": "polite",
      className: classNames(ComponentClassName.LoaderLabel, isPercentageTextHidden ? ComponentClassName.VisuallyHidden : null),
      // -1% offset makes the text position look nicest
      x: `${-1 + percentage}%`,
      y: "200%"
    }, percent) : null
  );
  const circularLoader = React26.createElement(
    "g",
    null,
    React26.createElement("circle", { cx: "50%", cy: "50%", r: `${RADIUS}%`, strokeWidth: `${CIRCULAR_STROKE_WIDTH}%`, style: { stroke: String(emptyColor) }, "data-testid": CIRCULAR_EMPTY }),
    React26.createElement("circle", { cx: "50%", cy: "50%", r: `${RADIUS}%`, strokeWidth: `${CIRCULAR_STROKE_WIDTH}%`, style: {
      stroke: String(filledColor),
      strokeDasharray: isDeterminate ? `${CIRCUMFERENCE}% ${CIRCUMFERENCE}%` : void 0,
      strokeDashoffset: isDeterminate ? `${CIRCUMFERENCE - CIRCUMFERENCE * percentage / 100}%` : void 0
    }, "data-testid": CIRCULAR_FILLED }),
    isDeterminate ? React26.createElement("text", {
      "aria-live": "polite",
      className: classNames(ComponentClassName.LoaderLabel, isPercentageTextHidden ? ComponentClassName.VisuallyHidden : null),
      // this x and y make text position look nicest
      x: "130%",
      y: "80%"
    }, percent) : null
  );
  return React26.createElement(View, { as: "svg", "aria-valuenow": isDeterminate ? percentage : void 0, className: componentClasses, ref, role: "progressbar", ...rest }, variation === "linear" ? linearLoader : circularLoader);
};
var Loader = primitiveWithForwardRef(LoaderPrimitive);
Loader.displayName = "Loader";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Button/Button.mjs
var supportedVariations = ["link", "primary", void 0];
var ButtonPrimitive = ({ className, children: children2, colorTheme, isFullWidth = false, isDisabled, isLoading, loadingText = "", size: size4, type = "button", variation, ...rest }, ref) => {
  const colorThemeModifier = supportedVariations.includes(variation) && colorTheme ? `${variation ?? "outlined"}--${colorTheme}` : void 0;
  const { isFieldsetDisabled } = useFieldset();
  const shouldBeDisabled = isFieldsetDisabled ? isFieldsetDisabled : isDisabled ?? isLoading ?? rest["disabled"];
  const componentClasses = classNames(ComponentClassName.Button, ComponentClassName.FieldGroupControl, classNameModifier(ComponentClassName.Button, variation), classNameModifier(ComponentClassName.Button, colorThemeModifier), classNameModifier(ComponentClassName.Button, size4), classNameModifierByFlag(ComponentClassName.Button, "disabled", shouldBeDisabled), classNameModifierByFlag(ComponentClassName.Button, "loading", isLoading), classNameModifierByFlag(ComponentClassName.Button, "fullwidth", isFullWidth), className);
  return React27.createElement(View, { ref, as: "button", className: componentClasses, isDisabled: shouldBeDisabled, type, ...rest }, isLoading ? React27.createElement(
    Flex,
    { as: "span", className: ComponentClassName.ButtonLoaderWrapper },
    React27.createElement(Loader, { size: size4 }),
    loadingText ? loadingText : null
  ) : children2);
};
var Button = primitiveWithForwardRef(ButtonPrimitive);
Button.displayName = "Button";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/FieldGroupIcon/FieldGroupIconButton.mjs
var FieldGroupIconButtonPrimitive = ({ children: children2, className, ...rest }, ref) => React28.createElement(FieldGroupIcon, { as: Button, className: classNames(ComponentClassName.FieldGroupIconButton, className), ref, ...rest }, children2);
var FieldGroupIconButton = primitiveWithForwardRef(FieldGroupIconButtonPrimitive);
FieldGroupIconButton.displayName = "FieldGroupIconButton";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconClose.mjs
var React29 = __toESM(require_react(), 1);
var IconClose = (props) => {
  const { className, size: size4, ...rest } = props;
  return React29.createElement(
    View,
    { as: "span", width: size4 ?? "1em", height: size4 ?? "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React29.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", style: size4 ? { width: size4, height: size4 } : void 0 },
      React29.createElement("path", { d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Field/FieldClearButton.mjs
var ariaLabelText = ComponentText.Fields.clearButtonLabel;
var FieldClearButtonPrimitive = ({ ariaLabel = ariaLabelText, size: size4, ...rest }, ref) => {
  const icons = useIcons("field");
  return React30.createElement(FieldGroupIconButton, { ariaLabel, size: size4, ref, ...rest }, (icons == null ? void 0 : icons.clear) ?? React30.createElement(IconClose, null));
};
var FieldClearButton = primitiveWithForwardRef(FieldClearButtonPrimitive);
FieldClearButton.displayName = "FieldClearButton";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Field/FieldDescription.mjs
var React32 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Text/Text.mjs
var React31 = __toESM(require_react(), 1);
var TextPrimitive = ({ as = "p", className, children: children2, isTruncated, variation, ...rest }, ref) => {
  const componentClasses = classNames(ComponentClassName.Text, classNameModifier(ComponentClassName.Text, variation), classNameModifierByFlag(ComponentClassName.Text, "truncated", isTruncated), className);
  return React31.createElement(View, { as, className: componentClasses, ref, ...rest }, children2);
};
var Text = primitiveWithForwardRef(TextPrimitive);
Text.displayName = "Text";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Field/FieldDescription.mjs
var QA_FIELD_DESCRIPTION = "qa-field-description";
var FieldDescription = ({ descriptiveText, labelHidden, ...rest }) => descriptiveText ? React32.createElement(Text, { "data-testid": QA_FIELD_DESCRIPTION, className: classNames(ComponentClassName.FieldDescription, {
  [ComponentClassName.VisuallyHidden]: labelHidden
}), ...rest }, descriptiveText) : null;
FieldDescription.displayName = "FieldDescription";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Field/FieldErrorMessage.mjs
var React33 = __toESM(require_react(), 1);
var FieldErrorMessage = ({ errorMessage, hasError, ...rest }) => {
  return hasError && errorMessage ? React33.createElement(Text, { className: ComponentClassName.FieldErrorMessage, ...rest }, errorMessage) : null;
};
FieldErrorMessage.displayName = "FieldErrorMessage";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Field/Field.mjs
var React35 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Label/Label.mjs
var React34 = __toESM(require_react(), 1);
var LabelPrimitive = ({ children: children2, className, visuallyHidden, ...rest }, ref) => {
  return React34.createElement(View, { as: "label", className: classNames(ComponentClassName.Label, className, {
    [ComponentClassName.VisuallyHidden]: visuallyHidden
  }), ref, ...rest }, children2);
};
var Label = primitiveWithForwardRef(LabelPrimitive);
Label.displayName = "Label";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Field/Field.mjs
var FieldPrimitive = (props, ref) => {
  const { className, size: size4, testId, children: children2, label, labelHidden, errorMessage, hasError, descriptiveText, ...rest } = props;
  return React35.createElement(
    Flex,
    { className: classNames(ComponentClassName.Field, classNameModifier(ComponentClassName.Field, size4), className), testId, ref, ...rest },
    label ? React35.createElement(Label, { visuallyHidden: labelHidden }, label) : null,
    React35.createElement(FieldDescription, { labelHidden, descriptiveText }),
    children2,
    errorMessage ? React35.createElement(FieldErrorMessage, { hasError, errorMessage }) : null
  );
};
var Field = primitiveWithForwardRef(FieldPrimitive);
Field.displayName = "Field";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Alert/Alert.mjs
var React36 = __toESM(require_react(), 1);
var AlertPrimitive = ({ buttonRef, children: children2, className, dismissButtonLabel = ComponentText.Alert.dismissButtonLabel, hasIcon = true, heading: heading2, isDismissible = false, onDismiss, variation, ...rest }, ref) => {
  const [dismissed, setDismissed] = React36.useState(false);
  const icons = useIcons("alert");
  const dismissAlert = React36.useCallback(() => {
    setDismissed(!dismissed);
    if (isFunction3(onDismiss)) {
      onDismiss();
    }
  }, [setDismissed, onDismiss, dismissed]);
  return !dismissed ? React36.createElement(
    Flex,
    { className: classNames(ComponentClassName.Alert, className, classNameModifier(ComponentClassName.Alert, variation)), ref, role: "alert", ...rest },
    hasIcon && React36.createElement(AlertIcon, { variation, ariaHidden: true }),
    React36.createElement(
      View,
      { flex: "1" },
      heading2 && React36.createElement(View, { className: ComponentClassName.AlertHeading }, heading2),
      React36.createElement(View, { className: ComponentClassName.AlertBody }, children2)
    ),
    isDismissible && React36.createElement(Button, { ariaLabel: dismissButtonLabel, variation: "link", className: ComponentClassName.AlertDismiss, onClick: dismissAlert, ref: buttonRef }, (icons == null ? void 0 : icons.close) ?? React36.createElement(IconClose, { "aria-hidden": "true" }))
  ) : null;
};
var Alert = primitiveWithForwardRef(AlertPrimitive);
Alert.displayName = "Alert";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Autocomplete/Autocomplete.mjs
var React50 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Autocomplete/AutocompleteOption.mjs
var React37 = __toESM(require_react(), 1);
var AutocompleteOptionPrimitive = ({ children: children2, className, isActive, ...rest }, ref) => {
  return React37.createElement(View, { "aria-selected": isActive, as: "li", role: "option", className: classNames(ComponentClassName.AutocompleteMenuOption, classNameModifierByFlag(ComponentClassName.AutocompleteMenuOption, "active", isActive), className), ref, ...rest }, children2);
};
var AutocompleteOption = primitiveWithForwardRef(AutocompleteOptionPrimitive);
AutocompleteOption.displayName = "AutocompleteOption";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Autocomplete/AutocompleteMenu.mjs
var React40 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/ScrollView/ScrollView.mjs
var React39 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/hooks/useComposeRefsCallback.mjs
var React38 = __toESM(require_react(), 1);
function useComposeRefsCallback({ externalRef, internalRef }) {
  return React38.useCallback((node) => {
    if (isFunction3(externalRef)) {
      externalRef(node);
    } else if (externalRef) {
      externalRef.current = node;
    }
    internalRef.current = node;
  }, [externalRef, internalRef]);
}

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/ScrollView/ScrollView.mjs
var ScrollViewPrimitive = ({ children: children2, className, orientation, autoScroll, ...rest }, externalRef) => {
  const internalRef = React39.useRef(null);
  const composedRefs = useComposeRefsCallback({
    externalRef,
    internalRef
  });
  React39.useEffect(() => {
    var _a2, _b, _c;
    if (autoScroll) {
      (_c = internalRef.current) == null ? void 0 : _c.scrollTo({
        top: (_a2 = internalRef.current) == null ? void 0 : _a2.scrollHeight,
        left: (_b = internalRef.current) == null ? void 0 : _b.scrollWidth,
        behavior: autoScroll
      });
    }
  }, [
    children2,
    autoScroll
  ]);
  return React39.createElement(View, { className: classNames(ComponentClassName.ScrollView, classNameModifier(ComponentClassName.ScrollView, orientation), className), ref: composedRefs, ...rest }, children2);
};
var ScrollView = primitiveWithForwardRef(ScrollViewPrimitive);
ScrollView.displayName = "ScrollView";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Autocomplete/AutocompleteMenu.mjs
var MenuHeader = ({ children: children2 }) => {
  if (!children2) {
    return null;
  }
  return React40.createElement(View, { className: ComponentClassName.AutocompleteMenuHeader }, children2);
};
var MenuFooter = ({ children: children2 }) => {
  if (!children2) {
    return null;
  }
  return React40.createElement(View, { className: ComponentClassName.AutocompleteMenuFooter }, children2);
};
var MenuLoading = ({ children: children2 }) => {
  return React40.createElement(View, { className: ComponentClassName.AutocompleteMenuLoading }, children2 ?? React40.createElement(
    React40.Fragment,
    null,
    React40.createElement(Loader, null),
    ComponentText.Autocomplete.loadingText
  ));
};
var MenuEmpty = ({ children: children2 }) => React40.createElement(View, { className: ComponentClassName.AutocompleteMenuEmpty }, children2 ?? ComponentText.Autocomplete.emptyText);
var AutocompleteMenuPrimitive = ({ ariaLabel, children: children2, Header: Header12 = null, Footer: Footer12 = null, LoadingIndicator = null, Empty = null, isLoading, listboxId, ...rest }, ref) => {
  return React40.createElement(ScrollView, { className: ComponentClassName.AutocompleteMenu, ref, ...rest }, isLoading ? React40.createElement(MenuLoading, null, LoadingIndicator) : React40.createElement(
    React40.Fragment,
    null,
    React40.createElement(MenuHeader, null, Header12),
    children2.length > 0 ? React40.createElement(ScrollView, { as: "ul", ariaLabel, className: ComponentClassName.AutocompleteMenuOptions, id: listboxId, role: "listbox" }, children2) : React40.createElement(MenuEmpty, null, Empty),
    React40.createElement(MenuFooter, null, Footer12)
  ));
};
var AutocompleteMenu = primitiveWithForwardRef(AutocompleteMenuPrimitive);
AutocompleteMenu.displayName = "AutocompleteMenu";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Autocomplete/useAutocomplete.mjs
var React41 = __toESM(require_react(), 1);
var DEFAULT_KEYS = /* @__PURE__ */ new Set([ARROW_DOWN, ARROW_UP, ENTER_KEY, ESCAPE_KEY]);
var useAutocomplete = ({ defaultValue: defaultValue2 = "", value, options, optionFilter, onBlur, onChange, onClear, onClick, onSelect, onSubmit }) => {
  const isControlled = value !== void 0;
  const [internalValue, setInternalValue] = React41.useState(defaultValue2);
  const composedValue = isControlled ? value : internalValue;
  const [isMenuOpen, setIsMenuOpen] = React41.useState(false);
  const [activeOption, setActiveOption] = React41.useState(null);
  const isCustomFiltering = isFunction3(optionFilter);
  const filteredOptions = React41.useMemo(() => {
    const defaultFilter = (option) => {
      const { label } = option;
      return label == null ? void 0 : label.toLocaleLowerCase().includes(composedValue == null ? void 0 : composedValue.toLocaleLowerCase());
    };
    const filter2 = isCustomFiltering ? (option) => optionFilter(option, composedValue) : defaultFilter;
    return (options == null ? void 0 : options.filter(filter2)) ?? [];
  }, [composedValue, optionFilter, isCustomFiltering, options]);
  const autocompleteId = useStableId();
  const listboxId = useStableId();
  const menuId = useStableId();
  const optionBaseId = useStableId();
  const activeIndex = filteredOptions.findIndex((option) => option === activeOption);
  const activeOptionId = (activeOption == null ? void 0 : activeOption.id) ?? (activeIndex !== -1 ? `${optionBaseId}-option-${activeIndex}` : void 0);
  const handleOnBlur = React41.useCallback((event2) => {
    setIsMenuOpen(false);
    setActiveOption(null);
    if (isFunction3(onBlur)) {
      onBlur(event2);
    }
  }, [onBlur]);
  const handleOnChange = React41.useCallback((event2) => {
    setActiveOption(null);
    setIsMenuOpen(true);
    if (!isControlled) {
      setInternalValue(event2.target.value);
    }
    if (isFunction3(onChange)) {
      onChange(event2);
    }
  }, [isControlled, onChange]);
  const handleOnClear = React41.useCallback(() => {
    if (!isControlled) {
      setInternalValue("");
    }
    if (isFunction3(onClear)) {
      onClear();
    }
  }, [isControlled, onClear]);
  const handleOnClick = React41.useCallback((event2) => {
    setIsMenuOpen(true);
    if (isFunction3(onClick)) {
      onClick(event2);
    }
  }, [onClick]);
  const handleOnKeyDown = (event2) => {
    const { key } = event2;
    if (!DEFAULT_KEYS.has(key)) {
      return;
    }
    event2.preventDefault();
    switch (key) {
      case ESCAPE_KEY: {
        if (isMenuOpen) {
          setIsMenuOpen(false);
          setActiveOption(null);
        } else {
          handleOnClear();
        }
        break;
      }
      case ENTER_KEY: {
        if (!activeOption) {
          if (isFunction3(onSubmit)) {
            onSubmit(composedValue);
          }
        } else {
          const { label } = activeOption;
          if (!isControlled) {
            setInternalValue(label);
          }
          if (isFunction3(onSelect)) {
            onSelect(activeOption);
          }
        }
        setIsMenuOpen(false);
        setActiveOption(null);
        break;
      }
      case ARROW_DOWN: {
        if (filteredOptions.length <= 0) {
          return;
        }
        setIsMenuOpen(true);
        const newActiveIndex = activeIndex >= filteredOptions.length - 1 ? 0 : activeIndex + 1;
        setActiveOption(filteredOptions[newActiveIndex]);
        break;
      }
      case ARROW_UP: {
        if (filteredOptions.length <= 0) {
          return;
        }
        setIsMenuOpen(true);
        const newActiveIndex = activeIndex <= 0 ? filteredOptions.length - 1 : activeIndex - 1;
        setActiveOption(filteredOptions[newActiveIndex]);
      }
    }
  };
  React41.useEffect(() => {
    const autocompleteElement = document.getElementById(autocompleteId);
    const menuElement = document.getElementById(menuId);
    if (menuElement && isMenuOpen && autocompleteElement) {
      const { bottom } = menuElement.getBoundingClientRect();
      const { offsetParent, offsetTop } = autocompleteElement;
      if (offsetParent === document.body && bottom > document.documentElement.clientHeight) {
        window.scrollTo({
          top: Math.min(
            bottom - document.documentElement.clientHeight + window.scrollY + 20,
            // Add 20 gap between menu bottom and window viewport bottom
            offsetTop
          ),
          behavior: "smooth"
        });
      }
    }
  }, [autocompleteId, isMenuOpen, menuId]);
  React41.useEffect(() => {
    const listboxElement = document.getElementById(listboxId);
    const activeOptionElement = strHasLength(activeOptionId) ? document.getElementById(activeOptionId) : null;
    if (activeOptionElement && listboxElement) {
      const { scrollTop, clientHeight } = listboxElement;
      const { offsetHeight, offsetTop } = activeOptionElement;
      const { top, bottom } = activeOptionElement.getBoundingClientRect();
      if (scrollTop > offsetTop) {
        listboxElement.scrollTop = offsetTop;
      }
      if (scrollTop + clientHeight < offsetTop + offsetHeight) {
        listboxElement.scrollTop = offsetTop + offsetHeight - clientHeight;
      }
      if (top < 0 || bottom > document.documentElement.clientHeight) {
        activeOptionElement.scrollIntoView({
          behavior: "smooth",
          block: "nearest"
        });
      }
    }
  }, [activeOptionId, listboxId]);
  return {
    activeOptionId,
    autocompleteId,
    composedValue,
    filteredOptions,
    handleOnBlur,
    handleOnClear,
    handleOnClick,
    handleOnChange,
    handleOnKeyDown,
    isControlled,
    isCustomFiltering,
    isMenuOpen,
    listboxId,
    menuId,
    optionBaseId,
    setActiveOption,
    setIsMenuOpen,
    setInternalValue
  };
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/HighlightMatch/HighlightMatch.mjs
var React42 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/getUniqueComponentId.mjs
var getUniqueComponentId = (id, suffix) => id && suffix ? `${id}-${suffix}` : void 0;

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/HighlightMatch/HighlightMatch.mjs
var HighlightMatchPrimitive = ({ children: children2, className, query, testId, ...rest }, ref) => {
  const matchTestId = getUniqueComponentId(testId, "match");
  const startIndex = children2 == null ? void 0 : children2.toLocaleLowerCase().indexOf(query == null ? void 0 : query.toLocaleLowerCase());
  if (strHasLength(query) && startIndex !== -1) {
    const match = children2.substring(startIndex, startIndex + query.length);
    return React42.createElement(
      View,
      { as: "span", className: classNames(className, ComponentClassName.HighlightMatch), testId, ref, ...rest },
      children2.substring(0, startIndex),
      React42.createElement(View, { as: "strong", className: ComponentClassName.HighlightMatchHighlighted, testId: matchTestId }, match),
      children2.substring(startIndex + query.length)
    );
  }
  return React42.createElement(View, { as: "span", testId }, children2);
};
var HighlightMatch = primitiveWithForwardRef(HighlightMatchPrimitive);
HighlightMatch.displayName = "HighlightMatch";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SearchField/SearchField.mjs
var React49 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconSearch.mjs
var React43 = __toESM(require_react(), 1);
var IconSearch = (props) => {
  const { className, ...rest } = props;
  return React43.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React43.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React43.createElement("path", { d: "M15.5 14H14.71L14.43 13.73C15.41 12.59 16 11.11 16 9.5C16 5.91 13.09 3 9.5 3C5.91 3 3 5.91 3 9.5C3 13.09 5.91 16 9.5 16C11.11 16 12.59 15.41 13.73 14.43L14 14.71V15.5L19 20.49L20.49 19L15.5 14V14ZM9.5 14C7.01 14 5 11.99 5 9.5C5 7.01 7.01 5 9.5 5C11.99 5 14 7.01 14 9.5C14 11.99 11.99 14 9.5 14Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SearchField/SearchFieldButton.mjs
var React44 = __toESM(require_react(), 1);
var ariaLabelText2 = ComponentText.SearchField.searchButtonLabel;
var SearchFieldButtonPrimitive = ({ size: size4, ...props }, ref) => {
  const icons = useIcons("searchField");
  return React44.createElement(FieldGroupIconButton, { ariaLabel: ariaLabelText2, className: ComponentClassName.SearchFieldSearch, size: size4, ref, type: "submit", ...props }, (icons == null ? void 0 : icons.search) ?? React44.createElement(IconSearch, null));
};
var SearchFieldButton = primitiveWithForwardRef(SearchFieldButtonPrimitive);
SearchFieldButton.displayName = "SearchFieldButton";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/TextField/TextField.mjs
var React47 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/FieldGroup/FieldGroup.mjs
var React45 = __toESM(require_react(), 1);
var FieldGroupPrimitive = ({ children: children2, className, innerEndComponent, innerStartComponent, orientation = "horizontal", outerEndComponent, outerStartComponent, variation, ...rest }, ref) => {
  const hasInnerStartComponent = innerStartComponent != null;
  const hasInnerEndComponent = innerEndComponent != null;
  const fieldGroupHasInnerStartClassName = hasInnerStartComponent ? ComponentClassName.FieldGroupHasInnerStart : null;
  const fieldGroupHasInnerEndClassName = hasInnerEndComponent ? ComponentClassName.FieldGroupHasInnerEnd : null;
  const componentClasses = classNames(ComponentClassName.FieldGroup, fieldGroupHasInnerStartClassName, fieldGroupHasInnerEndClassName, classNameModifier(ComponentClassName.FieldGroup, orientation), className);
  return React45.createElement(
    Flex,
    { className: componentClasses, ref, ...rest },
    outerStartComponent && React45.createElement(View, { className: classNames(ComponentClassName.FieldGroupOuterStart, classNameModifier(ComponentClassName.FieldGroupOuterStart, variation)) }, outerStartComponent),
    React45.createElement(
      View,
      { className: classNames(ComponentClassName.FieldGroupFieldWrapper, classNameModifier(ComponentClassName.FieldGroupFieldWrapper, orientation)) },
      innerStartComponent && React45.createElement(View, { className: ComponentClassName.FieldGroupInnerStart }, innerStartComponent),
      children2,
      innerEndComponent && React45.createElement(View, { className: ComponentClassName.FieldGroupInnerEnd }, innerEndComponent)
    ),
    outerEndComponent && React45.createElement(View, { className: classNames(ComponentClassName.FieldGroupOuterEnd, classNameModifier(ComponentClassName.FieldGroupOuterEnd, variation)) }, outerEndComponent)
  );
};
var FieldGroup = primitiveWithForwardRef(FieldGroupPrimitive);
FieldGroup.displayName = "FieldGroup";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Input/Input.mjs
var React46 = __toESM(require_react(), 1);
var InputPrimitive = ({ autoComplete, checked, className, defaultChecked, defaultValue: defaultValue2, id, isDisabled, isReadOnly, isRequired, size: size4, type = "text", hasError = false, value, variation, ...rest }, ref) => {
  const componentClasses = classNames(ComponentClassName.Input, ComponentClassName.FieldGroupControl, classNameModifier(ComponentClassName.Input, variation), classNameModifierByFlag(ComponentClassName.Input, "error", hasError), classNameModifier(ComponentClassName.Input, size4), className);
  const { isFieldsetDisabled } = useFieldset();
  return React46.createElement(View, { "aria-invalid": hasError, as: "input", autoComplete, checked, className: componentClasses, defaultChecked, defaultValue: defaultValue2, isDisabled: isFieldsetDisabled ? isFieldsetDisabled : isDisabled, id, readOnly: isReadOnly, ref, required: isRequired, type, value, ...rest });
};
var Input = primitiveWithForwardRef(InputPrimitive);
Input.displayName = "Input";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/splitPrimitiveProps.mjs
var isStyleKey = (prop) => {
  return prop in ComponentPropsToStylePropsMap;
};
var splitPrimitiveProps = (props) => {
  const splitProps = {
    styleProps: {},
    rest: {}
  };
  Object.keys(props).forEach((prop) => {
    if (isStyleKey(prop)) {
      splitProps.styleProps = {
        ...splitProps.styleProps,
        [prop]: props[prop]
      };
    } else {
      splitProps.rest = {
        ...splitProps.rest,
        [prop]: props[prop]
      };
    }
  });
  return splitProps;
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/utils/createSpaceSeparatedIds.mjs
var createSpaceSeparatedIds = (ids) => {
  const joinedIds = ids.filter((id) => id !== void 0).join(" ");
  return joinedIds.length > 0 ? joinedIds : void 0;
};

// node_modules/@aws-amplify/ui-react/dist/esm/helpers/constants.mjs
typeof Symbol !== "undefined" && isFunction3(Symbol.for) ? Symbol.for("amplify_default") : "@@amplify_default";
var ERROR_SUFFIX = "error";
var DESCRIPTION_SUFFIX = "description";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/TextField/TextField.mjs
var TextFieldPrimitive = (props, ref) => {
  const { className, descriptiveText, errorMessage, hasError = false, id, innerEndComponent, innerStartComponent, label, labelHidden = false, outerEndComponent, outerStartComponent, size: size4, testId, variation, inputStyles, ..._rest } = props;
  const fieldId = useStableId(id);
  const stableId = useStableId();
  const descriptionId = descriptiveText ? getUniqueComponentId(stableId, DESCRIPTION_SUFFIX) : void 0;
  const errorId = hasError ? getUniqueComponentId(stableId, ERROR_SUFFIX) : void 0;
  const ariaDescribedBy = createSpaceSeparatedIds([errorId, descriptionId]);
  const { styleProps, rest } = splitPrimitiveProps(_rest);
  return React47.createElement(
    Flex,
    { className: classNames(ComponentClassName.Field, classNameModifier(ComponentClassName.Field, size4), ComponentClassName.TextField, className), testId, ...styleProps },
    React47.createElement(Label, { htmlFor: fieldId, visuallyHidden: labelHidden }, label),
    React47.createElement(FieldDescription, { id: descriptionId, labelHidden, descriptiveText }),
    React47.createElement(
      FieldGroup,
      { outerStartComponent, outerEndComponent, innerStartComponent, innerEndComponent, variation },
      React47.createElement(Input, { "aria-describedby": ariaDescribedBy, hasError, id: fieldId, ref, size: size4, variation, ...inputStyles, ...rest })
    ),
    React47.createElement(FieldErrorMessage, { id: errorId, hasError, errorMessage })
  );
};
var TextField = primitiveWithForwardRef(TextFieldPrimitive);
TextField.displayName = "TextField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SearchField/useSearchField.mjs
var React48 = __toESM(require_react(), 1);
var DEFAULT_KEYS2 = /* @__PURE__ */ new Set([ESCAPE_KEY, ENTER_KEY]);
var useSearchField = ({ defaultValue: defaultValue2 = "", value, onChange, onClear, onSubmit, externalRef }) => {
  const isControlled = value !== void 0;
  const [internalValue, setInternalValue] = React48.useState(defaultValue2);
  const composedValue = isControlled ? value : internalValue;
  const internalRef = React48.useRef(null);
  const composedRefs = useComposeRefsCallback({
    externalRef,
    internalRef
  });
  const onClearHandler = React48.useCallback(() => {
    var _a2;
    if (!isControlled) {
      setInternalValue("");
    }
    (_a2 = internalRef == null ? void 0 : internalRef.current) == null ? void 0 : _a2.focus();
    if (isFunction3(onClear)) {
      onClear();
    }
  }, [isControlled, setInternalValue, onClear]);
  const onSubmitHandler = React48.useCallback((value2) => {
    if (isFunction3(onSubmit)) {
      onSubmit(value2);
    }
  }, [onSubmit]);
  const onKeyDown = React48.useCallback((event2) => {
    const { key } = event2;
    if (!DEFAULT_KEYS2.has(key)) {
      return;
    }
    event2.preventDefault();
    if (key === ESCAPE_KEY) {
      onClearHandler();
    } else if (key === ENTER_KEY) {
      onSubmitHandler(composedValue);
    }
  }, [composedValue, onClearHandler, onSubmitHandler]);
  const handleOnChange = React48.useCallback((event2) => {
    if (!isControlled) {
      setInternalValue(event2.target.value);
    }
    if (isFunction3(onChange)) {
      onChange(event2);
    }
  }, [isControlled, onChange, setInternalValue]);
  const onClick = React48.useCallback(() => {
    onSubmitHandler(composedValue);
  }, [onSubmitHandler, composedValue]);
  return {
    composedValue,
    onClearHandler,
    onKeyDown,
    onClick,
    handleOnChange,
    composedRefs
  };
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SearchField/SearchField.mjs
var SearchFieldPrimitive = ({ autoComplete = "off", className, isDisabled, clearButtonLabel, labelHidden = true, name: name2 = "q", hasSearchButton = true, hasSearchIcon = false, onChange, onClear, onSubmit, searchButtonRef, size: size4, defaultValue: defaultValue2, value, ...rest }, ref) => {
  const { composedValue, onClearHandler, onKeyDown, onClick, handleOnChange, composedRefs } = useSearchField({
    defaultValue: defaultValue2,
    value,
    onChange,
    onClear,
    onSubmit,
    externalRef: ref
  });
  const SearchButton = hasSearchButton ? React49.createElement(SearchFieldButton, { isDisabled, onClick, ref: searchButtonRef, size: size4 }) : void 0;
  const SearchIcon = hasSearchIcon ? React49.createElement(
    FieldGroupIcon,
    null,
    React49.createElement(IconSearch, null)
  ) : void 0;
  return React49.createElement(TextField, { autoComplete, className: classNames(ComponentClassName.SearchField, className), labelHidden, innerStartComponent: SearchIcon, innerEndComponent: React49.createElement(FieldClearButton, { ariaLabel: clearButtonLabel, isVisible: !isDisabled && strHasLength(composedValue), onClick: onClearHandler, size: size4, variation: "link" }), isDisabled, name: name2, onChange: handleOnChange, onKeyDown, outerEndComponent: SearchButton, ref: composedRefs, size: size4, value: composedValue, ...rest });
};
var SearchField = primitiveWithForwardRef(SearchFieldPrimitive);
SearchField.displayName = "SearchField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Autocomplete/Autocomplete.mjs
var AutocompletePrimitive = ({ className, defaultValue: defaultValue2, value, isLoading = false, menuSlots = {}, options, optionFilter, onBlur, onChange, onClear, onClick, onSelect, onSubmit, renderOption, testId, ...rest }, ref) => {
  const { activeOptionId, autocompleteId, composedValue, filteredOptions, handleOnBlur, handleOnClear, handleOnClick, handleOnChange, handleOnKeyDown, isControlled, isCustomFiltering, isMenuOpen, listboxId, menuId, optionBaseId, setActiveOption, setIsMenuOpen, setInternalValue } = useAutocomplete({
    defaultValue: defaultValue2,
    value,
    options,
    optionFilter,
    onBlur,
    onChange,
    onClear,
    onClick,
    onSelect,
    onSubmit
  });
  const comboboxProps = {
    role: "combobox",
    "aria-activedescendant": activeOptionId,
    "aria-autocomplete": "list",
    "aria-controls": isMenuOpen ? menuId : void 0,
    "aria-expanded": isMenuOpen,
    "aria-haspopup": "listbox",
    "aria-owns": isMenuOpen ? menuId : void 0
  };
  const Options = filteredOptions.map((option, idx) => {
    const { id, label, ...rest2 } = option;
    const handleOnClick2 = () => {
      setIsMenuOpen(false);
      setActiveOption(null);
      if (!isControlled) {
        setInternalValue(label);
      }
      if (isFunction3(onSelect)) {
        onSelect(option);
      }
    };
    const handleOnMouseDown = (event2) => {
      event2.preventDefault();
    };
    const handleOnMouseMove = () => {
      setActiveOption(option);
    };
    const optionId = id ?? `${optionBaseId}-option-${idx}`;
    const isActive = optionId === activeOptionId;
    return React50.createElement(AutocompleteOption, { isActive, id: optionId, key: optionId, onClick: handleOnClick2, onMouseDown: handleOnMouseDown, onMouseMove: handleOnMouseMove, ...rest2 }, isFunction3(renderOption) ? renderOption(option, composedValue) : isCustomFiltering ? label : React50.createElement(HighlightMatch, { query: composedValue }, label));
  });
  return React50.createElement(
    View,
    { className: classNames(ComponentClassName.Autocomplete, className), id: autocompleteId, testId },
    React50.createElement(SearchField, { hasSearchButton: false, hasSearchIcon: true, onBlur: handleOnBlur, onChange: handleOnChange, onClear: handleOnClear, onClick: handleOnClick, onKeyDown: handleOnKeyDown, ref, value: composedValue, ...comboboxProps, ...rest }),
    isMenuOpen ? React50.createElement(AutocompleteMenu, { id: menuId, isLoading, listboxId, ...menuSlots }, Options) : null
  );
};
var Autocomplete = primitiveWithForwardRef(AutocompletePrimitive);
Autocomplete.displayName = "Autocomplete";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Avatar/Avatar.mjs
var React53 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconUser.mjs
var React51 = __toESM(require_react(), 1);
var IconUser = (props) => {
  const { className, ...rest } = props;
  return React51.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React51.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React51.createElement("path", { d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Image/Image.mjs
var React52 = __toESM(require_react(), 1);
var ImagePrimitive = ({ className, ...rest }, ref) => React52.createElement(View, { as: "img", ref, className: classNames(ComponentClassName.Image, className), ...rest });
var Image = primitiveWithForwardRef(ImagePrimitive);
Image.displayName = "Image";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Avatar/Avatar.mjs
var AvatarPrimitive = ({ className, children: children2, variation, colorTheme, size: size4, src, alt, isLoading, ...rest }, ref) => {
  const icons = useIcons("avatar");
  const icon2 = (icons == null ? void 0 : icons.user) ?? React53.createElement(IconUser, null);
  const componentClasses = classNames(ComponentClassName.Avatar, className, classNameModifier(ComponentClassName.Avatar, variation), classNameModifier(ComponentClassName.Avatar, size4), classNameModifier(ComponentClassName.Avatar, colorTheme));
  return React53.createElement(
    View,
    { as: "span", className: componentClasses, ref, ...rest },
    src ? React53.createElement(Image, { className: ComponentClassName.AvatarImage, src, alt }) : children2 ?? React53.createElement(View, { as: "span", className: ComponentClassName.AvatarIcon, "aria-hidden": "true" }, icon2),
    isLoading ? React53.createElement(Loader, { className: ComponentClassName.AvatarLoader }) : null
  );
};
var Avatar = primitiveWithForwardRef(AvatarPrimitive);
Avatar.displayName = "Avatar";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Badge/Badge.mjs
var React54 = __toESM(require_react(), 1);
var BadgePrimitive = ({ className, children: children2, variation, size: size4, ...rest }, ref) => {
  const componentClasses = classNames(ComponentClassName.Badge, className, classNameModifier(ComponentClassName.Badge, variation), classNameModifier(ComponentClassName.Badge, size4));
  return React54.createElement(View, { as: "span", className: componentClasses, ref, ...rest }, children2);
};
var Badge = primitiveWithForwardRef(BadgePrimitive);
Badge.displayName = "Badge";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Breadcrumbs/Breadcrumbs.mjs
var React60 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Breadcrumbs/BreadcrumbItem.mjs
var React55 = __toESM(require_react(), 1);
var BreadcrumbItemPrimitive = ({ className, children: children2, as = "li", ...rest }, ref) => {
  const componentClasses = classNames(ComponentClassName.BreadcrumbsItem, className);
  return React55.createElement(View, { ...rest, as, className: componentClasses, ref }, children2);
};
var BreadcrumbItem = primitiveWithForwardRef(BreadcrumbItemPrimitive);
BreadcrumbItem.displayName = "Breadcrumbs.Item";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Breadcrumbs/BreadcrumbLink.mjs
var React57 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Link/Link.mjs
var React56 = __toESM(require_react(), 1);
var LinkPrimitive = ({ as = "a", children: children2, className, isExternal, ...rest }, ref) => {
  return React56.createElement(View, { as, className: classNames(ComponentClassName.Link, className), ref, rel: isExternal ? "noopener noreferrer" : void 0, target: isExternal ? "_blank" : void 0, ...rest }, children2);
};
var Link = primitiveWithForwardRef(LinkPrimitive);
Link.displayName = "Link";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Breadcrumbs/BreadcrumbLink.mjs
var BreadcrumbLinkPrimitive = ({ className, children: children2, href, isCurrent, ...rest }, ref) => {
  const componentClasses = classNames(ComponentClassName.BreadcrumbsLink, classNameModifierByFlag(ComponentClassName.BreadcrumbsLink, "current", isCurrent), className);
  if (isCurrent) {
    const ariaCurrent = rest["aria-current"] ?? "page";
    const as = rest.as ?? "span";
    return React57.createElement(Text, { ...rest, as, "aria-current": ariaCurrent, className: componentClasses, ref }, children2);
  } else {
    return React57.createElement(Link, { ...rest, className: componentClasses, ref, href }, children2);
  }
};
var BreadcrumbLink = primitiveWithForwardRef(BreadcrumbLinkPrimitive);
BreadcrumbLink.displayName = "Breadcrumbs.Link";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Breadcrumbs/BreadcrumbSeparator.mjs
var React58 = __toESM(require_react(), 1);
var BreadcrumbSeparatorPrimitive = ({ className, children: children2 = "/", as = "span", ...rest }, ref) => {
  const ariaHidden = rest["aria-hidden"] ?? "true";
  return React58.createElement(View, { ...rest, as, ref, "aria-hidden": ariaHidden, className: classNames(ComponentClassName.BreadcrumbsSeparator, className) }, children2);
};
var BreadcrumbSeparator = primitiveWithForwardRef(BreadcrumbSeparatorPrimitive);
BreadcrumbSeparator.displayName = "Breadcrumbs.Separator";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Breadcrumbs/BreadcrumbContainer.mjs
var React59 = __toESM(require_react(), 1);
var BreadcrumbContainerPrimitive = ({ className, children: children2, ...rest }, ref) => {
  const componentClasses = classNames(ComponentClassName.Breadcrumbs, className);
  const ariaLabel = rest["aria-label"] ?? "Breadcrumb";
  return React59.createElement(
    View,
    { ...rest, as: "nav", "aria-label": ariaLabel, className: componentClasses, ref },
    React59.createElement(View, { as: "ol", className: ComponentClassName.BreadcrumbsList }, children2)
  );
};
var BreadcrumbContainer = primitiveWithForwardRef(BreadcrumbContainerPrimitive);
BreadcrumbContainer.displayName = "Breadcrumbs.Container";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Breadcrumbs/Breadcrumbs.mjs
var BreadcrumbsPrimitive = ({ className, items, separator = React60.createElement(BreadcrumbSeparator, null), ...rest }, ref) => {
  const ariaLabel = rest["aria-label"] ?? "Breadcrumb";
  return React60.createElement(BreadcrumbContainer, { ...rest, "aria-label": ariaLabel, className, ref }, items == null ? void 0 : items.map(({ href, label }, idx) => {
    const isCurrent = items.length - 1 === idx;
    return React60.createElement(
      BreadcrumbItem,
      { key: `${href}${idx}` },
      React60.createElement(BreadcrumbLink, { href, isCurrent }, label),
      isCurrent ? null : separator
    );
  }));
};
var Breadcrumbs = Object.assign(primitiveWithForwardRef(BreadcrumbsPrimitive), {
  Item: BreadcrumbItem,
  Link: BreadcrumbLink,
  Separator: BreadcrumbSeparator,
  Container: BreadcrumbContainer
});
Breadcrumbs.displayName = "Breadcrumbs";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/ButtonGroup/ButtonGroup.mjs
var React61 = __toESM(require_react(), 1);
var ButtonGroupPrimitive = ({ className, children: children2, isDisabled: _isDisabled = false, role = "group", size: _size, variation: _variation, ...rest }, ref) => React61.createElement(Flex, { className: classNames(ComponentClassName.ButtonGroup, className), role, ref, ...rest }, React61.Children.map(children2, (child) => {
  if (React61.isValidElement(child)) {
    const { size: size4 = _size, variation = _variation, isDisabled = _isDisabled } = child.props;
    return React61.cloneElement(child, { isDisabled, size: size4, variation });
  }
  return child;
}));
var ButtonGroup = primitiveWithForwardRef(ButtonGroupPrimitive);
ButtonGroup.displayName = "ButtonGroup";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Card/Card.mjs
var React62 = __toESM(require_react(), 1);
var CardPrimitive = ({ className, children: children2, variation, ...rest }, ref) => {
  return React62.createElement(View, { className: classNames(ComponentClassName.Card, classNameModifier(ComponentClassName.Card, variation), className), ref, ...rest }, children2);
};
var Card = primitiveWithForwardRef(CardPrimitive);
Card.displayName = "Card";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Checkbox/Checkbox.mjs
var React66 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconCheck.mjs
var React63 = __toESM(require_react(), 1);
var IconCheck = (props) => {
  const { className, ...rest } = props;
  return React63.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React63.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React63.createElement("path", { d: "M9.00016 16.1698L4.83016 11.9998L3.41016 13.4098L9.00016 18.9998L21.0002 6.99984L19.5902 5.58984L9.00016 16.1698Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconIndeterminate.mjs
var React64 = __toESM(require_react(), 1);
var IconIndeterminate = (props) => {
  const { className, ...rest } = props;
  return React64.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React64.createElement(
      "svg",
      { xmlns: "http://www.w3.org/2000/svg", height: "24", width: "24", viewBox: "0 0 24 24" },
      React64.createElement("line", { x1: "4", x2: "20", y1: "12", y2: "12", stroke: "currentColor", strokeWidth: "3" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/VisuallyHidden/VisuallyHidden.mjs
var React65 = __toESM(require_react(), 1);
var VisuallyHiddenPrimitive = ({ as = "span", children: children2, className, ...rest }, ref) => React65.createElement(View, { as, className: classNames(ComponentClassName.VisuallyHidden, className), ref, ...rest }, children2);
var VisuallyHidden = primitiveWithForwardRef(VisuallyHiddenPrimitive);
VisuallyHidden.displayName = "VisuallyHidden";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Checkbox/Checkbox.mjs
var CheckboxPrimitive = ({ checked: controlledChecked, className, defaultChecked, hasError, isDisabled, isIndeterminate: isIndeterminate2, label, labelHidden, labelPosition, onBlur: _onBlur, onFocus: _onFocus, onChange: _onChange, testId, inputStyles, ..._rest }, ref) => {
  const { styleProps, rest } = splitPrimitiveProps(_rest);
  const [focused, setFocused] = React66.useState(false);
  const icons = useIcons("checkbox");
  const { isFieldsetDisabled } = useFieldset();
  const shouldBeDisabled = isFieldsetDisabled ? isFieldsetDisabled : isDisabled;
  const isControlled = controlledChecked !== void 0;
  const [localChecked, setLocalChecked] = React66.useState(() => (
    // if controlled, initialize to `controlledChecked` else `defaultChecked`
    isControlled ? controlledChecked : defaultChecked
  ));
  const checked = isControlled ? controlledChecked : localChecked;
  const onChange = (e) => {
    if (isFunction3(_onChange)) {
      _onChange(e);
    }
    if (!isControlled) {
      setLocalChecked(e.target.checked);
    }
  };
  const onFocus = (e) => {
    if (isFunction3(_onFocus)) {
      _onFocus(e);
    }
    setFocused(true);
  };
  const onBlur = (e) => {
    if (isFunction3(_onBlur)) {
      _onBlur(e);
    }
    setFocused(false);
  };
  const dataId = useStableId();
  React66.useEffect(() => {
    const input2 = document.querySelector(`[data-id="${dataId}"]`);
    if (input2 && typeof isIndeterminate2 === "boolean") {
      input2.indeterminate = isIndeterminate2;
    }
  }, [dataId, isIndeterminate2]);
  const buttonTestId = getUniqueComponentId(testId, ComponentClassName.CheckboxButton);
  const iconTestId = getUniqueComponentId(testId, ComponentClassName.CheckboxIcon);
  const labelTestId = getUniqueComponentId(testId, ComponentClassName.CheckboxLabel);
  const flexClasses = classNames(ComponentClassName.CheckboxButton, classNameModifierByFlag(ComponentClassName.CheckboxButton, "disabled", shouldBeDisabled), classNameModifierByFlag(ComponentClassName.CheckboxButton, "error", hasError), classNameModifierByFlag(ComponentClassName.CheckboxButton, "focused", focused));
  const iconClasses = classNames(ComponentClassName.CheckboxIcon, classNameModifierByFlag(ComponentClassName.CheckboxIcon, "checked", checked), classNameModifierByFlag(ComponentClassName.CheckboxIcon, "disabled", shouldBeDisabled), classNameModifierByFlag(ComponentClassName.CheckboxIcon, "indeterminate", isIndeterminate2));
  const iconProps = {
    className: classNames(iconClasses),
    "data-checked": localChecked,
    "data-disabled": shouldBeDisabled,
    "data-testid": iconTestId
  };
  const checkedIcon = (icons == null ? void 0 : icons.checked) ? React66.createElement(View, { as: "span", className: classNames(iconClasses) }, icons.checked) : React66.createElement(IconCheck, { ...iconProps });
  const indeterminateIcon = (icons == null ? void 0 : icons.indeterminate) ? React66.createElement(View, { as: "span", className: classNames(iconClasses) }, icons.indeterminate) : React66.createElement(IconIndeterminate, { ...iconProps });
  return React66.createElement(
    Flex,
    { as: "label", className: classNames(ComponentClassName.Checkbox, classNameModifierByFlag(ComponentClassName.Checkbox, "disabled", shouldBeDisabled), labelPosition ? `amplify-label-${labelPosition}` : null, className), testId, ...styleProps },
    React66.createElement(
      VisuallyHidden,
      null,
      React66.createElement(Input, { checked: controlledChecked, className: ComponentClassName.CheckboxInput, "data-id": dataId, defaultChecked, isDisabled: shouldBeDisabled, onBlur, onChange, onFocus, ref, type: "checkbox", ...rest })
    ),
    label && React66.createElement(Text, { as: "span", className: classNames(ComponentClassName.CheckboxLabel, classNameModifierByFlag(ComponentClassName.CheckboxLabel, `disabled`, shouldBeDisabled), {
      [ComponentClassName.VisuallyHidden]: labelHidden
    }), "data-disabled": shouldBeDisabled, testId: labelTestId }, label),
    React66.createElement(Flex, { "aria-hidden": "true", as: "span", className: flexClasses, "data-checked": checked, "data-disabled": shouldBeDisabled, "data-focus": focused, "data-error": hasError, testId: buttonTestId, ...inputStyles }, isIndeterminate2 ? indeterminateIcon : checkedIcon)
  );
};
var Checkbox = primitiveWithForwardRef(CheckboxPrimitive);
Checkbox.displayName = "Checkbox";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/CheckboxField/CheckboxField.mjs
var React67 = __toESM(require_react(), 1);
var CheckboxFieldPrimitive = ({ className, errorMessage, hasError = false, labelHidden = false, labelPosition, testId, size: size4, ...rest }, ref) => {
  const checkboxTestId = getUniqueComponentId(testId, ComponentClassName.Checkbox);
  return React67.createElement(
    Flex,
    { className: classNames(ComponentClassName.Field, ComponentClassName.CheckboxField, classNameModifier(ComponentClassName.Field, size4), className), testId },
    React67.createElement(Checkbox, { hasError, labelHidden, testId: checkboxTestId, labelPosition, ref, ...rest }),
    React67.createElement(FieldErrorMessage, { hasError, errorMessage })
  );
};
var CheckboxField = primitiveWithForwardRef(CheckboxFieldPrimitive);
CheckboxField.displayName = "CheckboxField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Collection/Collection.mjs
var React76 = __toESM(require_react(), 1);
var import_debounce2 = __toESM(require_debounce(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Grid/Grid.mjs
var React68 = __toESM(require_react(), 1);
var GridPrimitive = ({ className, children: children2, ...rest }, ref) => React68.createElement(View, { className: classNames(ComponentClassName.Grid, className), ref, ...rest }, children2);
var Grid = primitiveWithForwardRef(GridPrimitive);
Grid.displayName = "Grid";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Pagination/Pagination.mjs
var React74 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Pagination/usePaginationItems.mjs
var React73 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Pagination/useRange.mjs
var React69 = __toESM(require_react(), 1);
var ELLIPSIS = "...";
var useRange = (currentPageParam, totalPagesParam, siblingCountParam = 1) => {
  const range2 = React69.useMemo(() => {
    const currentPage = Math.max(currentPageParam, 1);
    const siblingCount = Math.max(siblingCountParam, 1);
    const totalPages = Math.max(currentPage, totalPagesParam);
    const firstPage = 1;
    const lastPage = totalPages;
    const maxNumOfItems = 5 + 2 * siblingCount;
    if (totalPages < maxNumOfItems) {
      return getConsecutiveIntArray(1, totalPages);
    }
    const leftSiblingPage = Math.max(currentPage - siblingCount, firstPage);
    const rightSiblingPage = Math.min(currentPage + siblingCount, lastPage);
    const shouldRenderStartEllipsis = leftSiblingPage > 2;
    const shouldRenderEndEllipsis = rightSiblingPage < lastPage - 1;
    if (shouldRenderStartEllipsis && !shouldRenderEndEllipsis) {
      const rightItemCount = 3 + 2 * siblingCount;
      const rightRange = getConsecutiveIntArray(lastPage - rightItemCount + 1, lastPage);
      return [firstPage, ELLIPSIS, ...rightRange];
    }
    if (!shouldRenderStartEllipsis && shouldRenderEndEllipsis) {
      const leftItemCount = 3 + 2 * siblingCount;
      const leftRange = getConsecutiveIntArray(firstPage, leftItemCount);
      return [...leftRange, ELLIPSIS, lastPage];
    }
    const middleRange = getConsecutiveIntArray(leftSiblingPage, rightSiblingPage);
    return [firstPage, ELLIPSIS, ...middleRange, ELLIPSIS, lastPage];
  }, [currentPageParam, totalPagesParam, siblingCountParam]);
  return range2;
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Pagination/PaginationItem.mjs
var React72 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconChevronLeft.mjs
var React70 = __toESM(require_react(), 1);
var IconChevronLeft = (props) => {
  const { className, ...rest } = props;
  return React70.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React70.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React70.createElement("path", { d: "M15.41 7.41L14 6L8 12L14 18L15.41 16.59L10.83 12L15.41 7.41Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconChevronRight.mjs
var React71 = __toESM(require_react(), 1);
var IconChevronRight = (props) => {
  const { className, ...rest } = props;
  return React71.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React71.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React71.createElement("path", { d: "M9.99984 6L8.58984 7.41L13.1698 12L8.58984 16.59L9.99984 18L15.9998 12L9.99984 6Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Pagination/PaginationItem.mjs
var PAGINATION_CURRENT_TEST_ID = "current";
var PAGINATION_ELLIPSIS_TEST_ID = "ellipsis";
var PaginationItem = ({ type, page, currentPage, currentPageLabel = ComponentText.PaginationItem.currentPageLabel, isDisabled, onClick, ariaLabel, ...rest }) => {
  const icons = useIcons("pagination");
  const nextClasses = classNames(ComponentClassName.PaginationItem, classNameModifier(ComponentClassName.PaginationItem, "link"), classNameModifierByFlag(ComponentClassName.PaginationItem, "disabled", isDisabled));
  const previousClasses = classNames(ComponentClassName.PaginationItem, classNameModifier(ComponentClassName.PaginationItem, "link"), classNameModifierByFlag(ComponentClassName.PaginationItem, "disabled", isDisabled));
  switch (type) {
    case "page":
      return React72.createElement(View, { as: "li" }, page === currentPage ? React72.createElement(
        Button,
        { "aria-current": "page", size: "small", variation: "link", className: classNames(ComponentClassName.PaginationItem, classNameModifier(ComponentClassName.PaginationItem, "current")), testId: PAGINATION_CURRENT_TEST_ID, ...rest },
        React72.createElement(
          VisuallyHidden,
          null,
          currentPageLabel,
          ":"
        ),
        page
      ) : React72.createElement(Button, { className: ComponentClassName.PaginationItem, size: "small", variation: "link", onClick: () => {
        onClick == null ? void 0 : onClick();
      }, ariaLabel, ...rest }, page));
    case "next":
      return React72.createElement(
        View,
        { as: "li" },
        React72.createElement(Button, { className: nextClasses, size: "small", variation: "link", isDisabled, onClick: () => {
          onClick == null ? void 0 : onClick();
        }, ariaLabel, ...rest }, (icons == null ? void 0 : icons.next) ?? React72.createElement(IconChevronRight, null))
      );
    case "previous":
      return React72.createElement(
        View,
        { as: "li" },
        React72.createElement(Button, { className: previousClasses, size: "small", variation: "link", isDisabled, onClick: () => {
          onClick == null ? void 0 : onClick();
        }, ariaLabel, ...rest }, (icons == null ? void 0 : icons.previous) ?? React72.createElement(IconChevronLeft, null))
      );
    case "ellipsis":
      return React72.createElement(
        View,
        { as: "li" },
        React72.createElement(Flex, { as: "span", className: classNameModifier(ComponentClassName.PaginationItem, "ellipsis"), testId: PAGINATION_ELLIPSIS_TEST_ID, ...rest }, "…")
      );
  }
  return React72.createElement(View, { as: "li" });
};
PaginationItem.displayName = "PaginationItem";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Pagination/usePaginationItems.mjs
var usePaginationItems = ({ currentPage, totalPages, hasMorePages, siblingCount, currentPageLabel = ComponentText.PaginationItem.currentPageLabel, pageLabel = ComponentText.PaginationItem.pageLabel, previousLabel = ComponentText.PaginationItem.previousLabel, nextLabel = ComponentText.PaginationItem.nextLabel, onNext, onPrevious, onChange }) => {
  const previousItem = React73.createElement(PaginationItem, { type: "previous", key: "previous", currentPage, onClick: onPrevious, isDisabled: currentPage <= 1, ariaLabel: previousLabel });
  const nextItem = React73.createElement(PaginationItem, { type: "next", key: "next", currentPage, onClick: onNext, isDisabled: currentPage >= totalPages && !hasMorePages, ariaLabel: nextLabel });
  const range2 = useRange(currentPage, totalPages, siblingCount);
  const pageItems = React73.useMemo(() => range2.map((item, idx) => {
    if (item === ELLIPSIS) {
      return React73.createElement(PaginationItem, { type: "ellipsis", key: idx === 1 ? "start-ellipsis" : "end-ellipsis" });
    }
    return (
      // Note: Do NOT use index for `key` and instead use page number
      // otherwise, react cannot update the component correctly with its diff mechanism
      React73.createElement(PaginationItem, {
        key: item,
        type: "page",
        page: item,
        currentPage,
        currentPageLabel,
        onClick: () => onChange == null ? void 0 : onChange(item, currentPage),
        /**
         * @todo We should consider how we would support interpolation in our string translations.
         * This works for "Go to page 31" or "translatedText {s}" as the supplied string
         * But for Arabic or Japanese or some other languages the supplied string might look like: "{s} translatedText".
         */
        ariaLabel: `${pageLabel} ${item}`
      })
    );
  }), [range2, currentPage, currentPageLabel, pageLabel, onChange]);
  return [previousItem, ...pageItems, nextItem];
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Pagination/Pagination.mjs
var PaginationPrimitive = ({ className, currentPage = 1, totalPages, hasMorePages = false, siblingCount, currentPageLabel, pageLabel, previousLabel, nextLabel, onNext, onPrevious, onChange, ...rest }, ref) => {
  const paginationItems = usePaginationItems({
    currentPage,
    totalPages,
    hasMorePages,
    siblingCount,
    currentPageLabel,
    pageLabel,
    previousLabel,
    nextLabel,
    onNext,
    onPrevious,
    onChange
  });
  return React74.createElement(
    View,
    { as: "nav", className: classNames(ComponentClassName.Pagination, className), ref, ...rest },
    React74.createElement(Flex, { as: "ol", justifyContent: "center", alignItems: "center", gap: "inherit" }, paginationItems)
  );
};
var Pagination = primitiveWithForwardRef(PaginationPrimitive);
Pagination.displayName = "Pagination";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Pagination/usePagination.mjs
var React75 = __toESM(require_react(), 1);
var usePagination = (props) => {
  const { currentPage: initialPage = 1, totalPages, hasMorePages = false, siblingCount = 1 } = props;
  const sanitizedInitialPage = Math.max(initialPage, 1);
  const sanitizedTotalPages = Math.max(sanitizedInitialPage, totalPages);
  const [currentPage, setCurrentPage] = React75.useState(sanitizedInitialPage);
  React75.useEffect(() => {
    setCurrentPage(sanitizedInitialPage);
  }, [sanitizedInitialPage, sanitizedTotalPages]);
  const onNext = React75.useCallback(() => {
    if (currentPage < sanitizedTotalPages) {
      setCurrentPage(currentPage + 1);
    }
  }, [currentPage, sanitizedTotalPages]);
  const onPrevious = React75.useCallback(() => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  }, [currentPage]);
  const onChange = React75.useCallback((newPageIndex) => {
    if (typeof newPageIndex === "number") {
      setCurrentPage(newPageIndex);
    }
  }, []);
  return {
    currentPage,
    hasMorePages,
    onChange,
    onNext,
    onPrevious,
    // The sibling count should not be less than 1
    siblingCount: Math.max(siblingCount, 1),
    totalPages: sanitizedTotalPages
  };
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Collection/utils.mjs
var getItemsAtPage = (items, page, itemsPerPage) => {
  if (page < 1 || itemsPerPage < 1) {
    return [];
  }
  const startIndex = (page - 1) * itemsPerPage;
  return items.slice(startIndex, startIndex + itemsPerPage);
};
var itemHasText = (item, text2) => {
  if (strHasLength(item)) {
    return item.toLowerCase().includes(text2.toLowerCase());
  }
  if (typeof item === "object" && item !== null) {
    return Object.values(item).some((subItem) => itemHasText(subItem, text2));
  }
  return false;
};
var getPageCount = (totalItems, itemsPerPage) => Math.ceil(totalItems / itemsPerPage);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Collection/Collection.mjs
var DEFAULT_PAGE_SIZE = 10;
var TYPEAHEAD_DELAY_MS = 300;
var ListCollection = ({ children: children2, direction = "column", items, ...rest }) => React76.createElement(Flex, { direction, ...rest }, Array.isArray(items) ? items.map(children2) : null);
var GridCollection = ({ children: children2, items, ...rest }) => React76.createElement(Grid, { ...rest }, Array.isArray(items) ? items.map(children2) : null);
var renderCollectionOrNoResultsFound = (collection2, items, searchNoResultsFound) => {
  if (items.length) {
    return collection2;
  }
  if (searchNoResultsFound) {
    return searchNoResultsFound;
  }
  return React76.createElement(
    Flex,
    { justifyContent: "center" },
    React76.createElement(Text, null, ComponentText.Collection.searchNoResultsFound)
  );
};
var Collection = ({ className, isSearchable, isPaginated, items, itemsPerPage = DEFAULT_PAGE_SIZE, searchFilter = itemHasText, searchLabel = ComponentText.Collection.searchButtonLabel, searchNoResultsFound, searchPlaceholder, type = "list", testId, ...rest }) => {
  const [searchText, setSearchText] = React76.useState();
  const onSearch = React76.useCallback((0, import_debounce2.default)(setSearchText, TYPEAHEAD_DELAY_MS), [setSearchText]);
  items = Array.isArray(items) ? items : [];
  if (isSearchable && strHasLength(searchText)) {
    items = items.filter((item) => searchFilter(item, searchText));
  }
  const pagination2 = usePagination({
    totalPages: getPageCount(items.length, itemsPerPage)
  });
  if (isPaginated) {
    items = getItemsAtPage(items, pagination2.currentPage, itemsPerPage);
  }
  const collection2 = type === "list" ? React76.createElement(ListCollection, { className: ComponentClassName.CollectionItems, items, ...rest }) : type === "grid" ? React76.createElement(GridCollection, { className: ComponentClassName.CollectionItems, items, ...rest }) : null;
  return React76.createElement(
    Flex,
    { testId, className: classNames(ComponentClassName.Collection, className) },
    isSearchable ? React76.createElement(
      Flex,
      { className: ComponentClassName.CollectionSearch },
      React76.createElement(SearchField, { label: searchLabel, placeholder: searchPlaceholder, onChange: (e) => onSearch(e.target.value), onClear: () => setSearchText("") })
    ) : null,
    renderCollectionOrNoResultsFound(collection2, items, searchNoResultsFound),
    isPaginated ? React76.createElement(
      Flex,
      { className: ComponentClassName.CollectionPagination },
      React76.createElement(Pagination, { ...pagination2 })
    ) : null
  );
};
Collection.displayName = "Collection";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Divider/Divider.mjs
var React77 = __toESM(require_react(), 1);
var DividerPrimitive = ({ className, orientation = "horizontal", size: size4, label, ...rest }, ref) => {
  const componentClasses = classNames(ComponentClassName.Divider, classNameModifier(ComponentClassName.Divider, orientation), classNameModifier(ComponentClassName.Divider, size4), className);
  return React77.createElement(View, { "aria-orientation": orientation, as: "hr", className: componentClasses, "data-label": label, ref, ...rest });
};
var Divider = primitiveWithForwardRef(DividerPrimitive);
Divider.displayName = "Divider";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/DropZone/DropZone.mjs
var React80 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/DropZone/DropZoneProvider.mjs
var React78 = __toESM(require_react(), 1);
var DropZoneContext = React78.createContext("inactive");
var DropZoneProvider = ({ value, children: children2 }) => {
  return React78.createElement(DropZoneContext.Provider, { value }, children2);
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/DropZone/DropZoneContainer.mjs
var import_react26 = __toESM(require_react(), 1);
var Container = ({ className, children: children2, testId, isDisabled, onDragEnter, onDragLeave, onDragOver, onDragStart, onDrop, ...rest }, ref) => {
  const dragState = import_react26.default.useContext(DropZoneContext);
  const dragProps = isDisabled ? {} : { onDragEnter, onDragLeave, onDragOver, onDragStart, onDrop };
  return import_react26.default.createElement(View, { ...rest, ...dragProps, isDisabled, className: classNames(className, classNameModifierByFlag(ComponentClassName.DropZone, "rejected", dragState === "reject"), classNameModifierByFlag(ComponentClassName.DropZone, "accepted", dragState === "accept"), classNameModifierByFlag(ComponentClassName.DropZone, "disabled", isDisabled), ComponentClassName.DropZone), "data-testid": testId, ref }, children2);
};
var DropZoneContainer = primitiveWithForwardRef(Container);
DropZoneContainer.displayName = "DropZoneContainer";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/DropZone/DropZoneChildren.mjs
var React79 = __toESM(require_react(), 1);
var Accepted = ({ children: children2 }) => {
  const dragState = React79.useContext(DropZoneContext);
  if (!dragState) {
    throw new Error("`DropZone.Accept` must be used inside a DropZone");
  }
  return dragState === "accept" ? React79.createElement(React79.Fragment, null, children2) : null;
};
var Rejected = ({ children: children2 }) => {
  const dragState = React79.useContext(DropZoneContext);
  if (!dragState) {
    throw new Error("`DropZone.Rejected` must be used inside a DropZone");
  }
  return dragState === "reject" ? React79.createElement(React79.Fragment, null, children2) : null;
};
var Default = ({ children: children2 }) => {
  const dragState = React79.useContext(DropZoneContext);
  if (!dragState) {
    throw new Error("`DropZone.Default` must be used inside a DropZone");
  }
  return dragState === "inactive" ? React79.createElement(React79.Fragment, null, children2) : null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/DropZone/DropZone.mjs
var DropZonePrimitive = ({ children: children2, testId, isDisabled, acceptedFileTypes, onDropComplete, ...rest }, ref) => {
  const { dragState, onDragEnter, onDragLeave, onDragOver, onDragStart, onDrop } = useDropZone({
    acceptedFileTypes,
    onDropComplete,
    ...rest
  });
  return React80.createElement(
    DropZoneProvider,
    { value: dragState },
    React80.createElement(DropZoneContainer, { ...rest, testId, isDisabled, onDragStart, onDragEnter, onDragLeave, onDrop, onDragOver, ref }, children2)
  );
};
var DropZone = Object.assign(primitiveWithForwardRef(DropZonePrimitive), {
  Accepted,
  Rejected,
  Default
});
DropZone.displayName = "DropZone";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/Accordion.mjs
var React88 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/AccordionItem.mjs
var React82 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/AccordionContext.mjs
var React81 = __toESM(require_react(), 1);
var AccordionContext = React81.createContext(void 0);
var AccordionItemContext = React81.createContext(void 0);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/AccordionItem.mjs
var AccordionItemPrimitive = ({ children: children2, className, value, as = "details", ...rest }, ref) => {
  var _a2;
  const context2 = React82.useContext(AccordionContext);
  const open = value ? (_a2 = context2 == null ? void 0 : context2.value) == null ? void 0 : _a2.includes(value) : void 0;
  return React82.createElement(
    AccordionItemContext.Provider,
    { value },
    React82.createElement(View, { ...rest, open, ref, as, className: classNames(ComponentClassName.AccordionItem, className) }, children2)
  );
};
var AccordionItem = primitiveWithForwardRef(AccordionItemPrimitive);
AccordionItem.displayName = "AccordionItem";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/AccordionContent.mjs
var React83 = __toESM(require_react(), 1);
var AccordionContentPrimitive = ({ className, children: children2, ...rest }, ref) => {
  return React83.createElement(View, { ...rest, className: classNames(ComponentClassName.AccordionItemContent, className), ref }, children2);
};
var AccordionContent = primitiveWithForwardRef(AccordionContentPrimitive);
AccordionContent.displayName = "Accordion.Content";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/AccordionTrigger.mjs
var React84 = __toESM(require_react(), 1);
var AccordionTriggerPrimitive = ({ children: children2, className, ...rest }, ref) => {
  const context2 = React84.useContext(AccordionContext);
  const value = React84.useContext(AccordionItemContext);
  const handleOnClick = (e) => {
    if (isFunction3(rest.onClick)) {
      rest.onClick(e);
    }
    if ((context2 == null ? void 0 : context2.setValue) && value) {
      e.preventDefault();
      context2.setValue(value);
    }
  };
  return React84.createElement(View, { ...rest, ref, as: "summary", className: classNames(ComponentClassName.AccordionItemTrigger, className), onClick: handleOnClick }, children2);
};
var AccordionTrigger = primitiveWithForwardRef(AccordionTriggerPrimitive);
AccordionTrigger.displayName = "Accordion.Trigger";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/AccordionIcon.mjs
var React86 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconExpandMore.mjs
var React85 = __toESM(require_react(), 1);
var IconExpandMore = (props) => {
  const { className, ...rest } = props;
  return React85.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React85.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React85.createElement("path", { d: "M16.59 8.58984L12 13.1698L7.41 8.58984L6 9.99984L12 15.9998L18 9.99984L16.59 8.58984Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/AccordionIcon.mjs
var AccordionIconPrimitive = ({ className, as = "span", ...rest }, ref) => {
  const icons = useIcons("accordion");
  return React86.createElement(View, { ...rest, ref, as, className: classNames(ComponentClassName.AccordionItemIcon, className), "aria-hidden": "true" }, (icons == null ? void 0 : icons.more) ?? React86.createElement(IconExpandMore, null));
};
var AccordionIcon = primitiveWithForwardRef(AccordionIconPrimitive);
AccordionIcon.displayName = "Accordion.Icon";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/AccordionContainer.mjs
var React87 = __toESM(require_react(), 1);
var AccordionContainerPrimitive = ({ children: children2, className, defaultValue: defaultValue2, allowMultiple, preventCollapse, onValueChange, testId, value: controlledValue, ...rest }, ref) => {
  const isControlled = controlledValue !== void 0;
  const [localValue, setLocalValue] = React87.useState(() => isControlled ? controlledValue : defaultValue2 ?? []);
  const value = isControlled ? controlledValue : localValue;
  const setValue = React87.useCallback((_value) => {
    let newValue;
    if (value.includes(_value)) {
      newValue = !preventCollapse || value.length > 1 ? value.filter((v) => v !== _value) : value;
    } else {
      newValue = allowMultiple ? [...value, _value] : [_value];
    }
    if (isFunction3(onValueChange)) {
      onValueChange(newValue);
    }
    if (!isControlled) {
      setLocalValue(newValue);
    }
  }, [onValueChange, value, isControlled, allowMultiple, preventCollapse]);
  const contextValue = React87.useMemo(() => {
    return {
      value,
      setValue
    };
  }, [value, setValue]);
  return React87.createElement(
    AccordionContext.Provider,
    { value: contextValue },
    React87.createElement(View, { ...rest, className: classNames(ComponentClassName.Accordion, className), "data-testid": testId, ref }, children2)
  );
};
var AccordionContainer = primitiveWithForwardRef(AccordionContainerPrimitive);
AccordionContainer.displayName = "Accordion.Container";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Accordion/Accordion.mjs
var AccordionPrimitive = ({ items, ...rest }, ref) => {
  return React88.createElement(AccordionContainer, { ref, ...rest }, items == null ? void 0 : items.map(({ content, trigger, value }) => React88.createElement(
    AccordionItem,
    { key: value, value },
    React88.createElement(
      AccordionTrigger,
      null,
      trigger,
      React88.createElement(AccordionIcon, null)
    ),
    React88.createElement(AccordionContent, null, content)
  )));
};
var Accordion = Object.assign(primitiveWithForwardRef(AccordionPrimitive), {
  Container: AccordionContainer,
  Content: AccordionContent,
  Icon: AccordionIcon,
  Item: AccordionItem,
  Trigger: AccordionTrigger
});
Accordion.displayName = "Accordion";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Fieldset/Fieldset.mjs
var React89 = __toESM(require_react(), 1);
var FieldsetPrimitive = ({ children: children2, className, isDisabled, legend, legendHidden, size: size4, testId, variation = "plain", ...rest }, ref) => {
  const { isFieldsetDisabled } = useFieldset();
  const shouldBeDisabled = isFieldsetDisabled ? isFieldsetDisabled : isDisabled;
  const value = React89.useMemo(() => ({
    isFieldsetDisabled: shouldBeDisabled
  }), [shouldBeDisabled]);
  const fieldsetClasses = classNames(ComponentClassName.Fieldset, classNameModifier(ComponentClassName.Fieldset, variation), classNameModifier(ComponentClassName.Fieldset, size4), className);
  const legendClasses = classNames(ComponentClassName.FieldsetLegend, classNameModifier(ComponentClassName.FieldsetLegend, size4), {
    [ComponentClassName.VisuallyHidden]: legendHidden
  });
  return React89.createElement(
    FieldsetContext.Provider,
    { value },
    React89.createElement(
      Flex,
      { as: "fieldset", className: fieldsetClasses, ref, disabled: shouldBeDisabled, testId, ...rest },
      React89.createElement(VisuallyHidden, { as: "legend" }, legend),
      React89.createElement(View, { as: "div", "aria-hidden": "true", className: legendClasses }, legend),
      children2
    )
  );
};
var Fieldset = primitiveWithForwardRef(FieldsetPrimitive);
Fieldset.displayName = "Fieldset";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Heading/Heading.mjs
var React90 = __toESM(require_react(), 1);
var headingLevels = {
  1: "h1",
  2: "h2",
  3: "h3",
  4: "h4",
  5: "h5",
  6: "h6"
};
var HeadingPrimitive = ({ className, children: children2, isTruncated, level = 6, ...rest }, ref) => React90.createElement(View, { as: headingLevels[level], className: classNames(ComponentClassName.Heading, classNameModifier(ComponentClassName.Heading, level), classNameModifierByFlag(ComponentClassName.Heading, "truncated", isTruncated), className), ref, ...rest }, children2);
var Heading = primitiveWithForwardRef(HeadingPrimitive);
Heading.displayName = "Heading";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Menu/Menu.mjs
var React126 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs
var React123 = __toESM(require_react(), 1);

// node_modules/@radix-ui/primitive/dist/index.mjs
function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event2) {
    originalEventHandler == null ? void 0 : originalEventHandler(event2);
    if (checkForDefaultPrevented === false || !event2.defaultPrevented) {
      return ourEventHandler == null ? void 0 : ourEventHandler(event2);
    }
  };
}

// node_modules/@radix-ui/react-compose-refs/dist/index.mjs
var React91 = __toESM(require_react(), 1);
function setRef(ref, value) {
  if (typeof ref === "function") {
    return ref(value);
  } else if (ref !== null && ref !== void 0) {
    ref.current = value;
  }
}
function composeRefs(...refs) {
  return (node) => {
    let hasCleanup = false;
    const cleanups = refs.map((ref) => {
      const cleanup = setRef(ref, node);
      if (!hasCleanup && typeof cleanup == "function") {
        hasCleanup = true;
      }
      return cleanup;
    });
    if (hasCleanup) {
      return () => {
        for (let i = 0; i < cleanups.length; i++) {
          const cleanup = cleanups[i];
          if (typeof cleanup == "function") {
            cleanup();
          } else {
            setRef(refs[i], null);
          }
        }
      };
    }
  };
}
function useComposedRefs(...refs) {
  return React91.useCallback(composeRefs(...refs), refs);
}

// node_modules/@radix-ui/react-context/dist/index.mjs
var React92 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function createContextScope(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function createContext32(rootComponentName, defaultContext) {
    const BaseContext = React92.createContext(defaultContext);
    const index3 = defaultContexts.length;
    defaultContexts = [...defaultContexts, defaultContext];
    const Provider = (props) => {
      var _a2;
      const { scope, children: children2, ...context2 } = props;
      const Context = ((_a2 = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _a2[index3]) || BaseContext;
      const value = React92.useMemo(() => context2, Object.values(context2));
      return (0, import_jsx_runtime.jsx)(Context.Provider, { value, children: children2 });
    };
    Provider.displayName = rootComponentName + "Provider";
    function useContext22(consumerName, scope) {
      var _a2;
      const Context = ((_a2 = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _a2[index3]) || BaseContext;
      const context2 = React92.useContext(Context);
      if (context2)
        return context2;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    return [Provider, useContext22];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return React92.createContext(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope == null ? void 0 : scope[scopeName]) || scopeContexts;
      return React92.useMemo(
        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),
        [scope, contexts]
      );
    };
  };
  createScope.scopeName = scopeName;
  return [createContext32, composeContextScopes(createScope, ...createContextScopeDeps)];
}
function composeContextScopes(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope = () => {
    const scopeHooks = scopes.map((createScope2) => ({
      useScope: createScope2(),
      scopeName: createScope2.scopeName
    }));
    return function useComposedScopes(overrideScopes) {
      const nextScopes = scopeHooks.reduce((nextScopes2, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return { ...nextScopes2, ...currentScope };
      }, {});
      return React92.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);
    };
  };
  createScope.scopeName = baseScope.scopeName;
  return createScope;
}

// node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
var React95 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs
var React93 = __toESM(require_react(), 1);
var useLayoutEffect22 = (globalThis == null ? void 0 : globalThis.document) ? React93.useLayoutEffect : () => {
};

// node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
var React210 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-use-effect-event/dist/index.mjs
var React94 = __toESM(require_react(), 1);
var useReactEffectEvent = React94[" useEffectEvent ".trim().toString()];
var useReactInsertionEffect = React94[" useInsertionEffect ".trim().toString()];

// node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
var useInsertionEffect = React95[" useInsertionEffect ".trim().toString()] || useLayoutEffect22;
function useControllableState({
  prop,
  defaultProp,
  onChange = () => {
  },
  caller
}) {
  const [uncontrolledProp, setUncontrolledProp, onChangeRef] = useUncontrolledState({
    defaultProp,
    onChange
  });
  const isControlled = prop !== void 0;
  const value = isControlled ? prop : uncontrolledProp;
  if (true) {
    const isControlledRef = React95.useRef(prop !== void 0);
    React95.useEffect(() => {
      const wasControlled = isControlledRef.current;
      if (wasControlled !== isControlled) {
        const from2 = wasControlled ? "controlled" : "uncontrolled";
        const to = isControlled ? "controlled" : "uncontrolled";
        console.warn(
          `${caller} is changing from ${from2} to ${to}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`
        );
      }
      isControlledRef.current = isControlled;
    }, [isControlled, caller]);
  }
  const setValue = React95.useCallback(
    (nextValue) => {
      var _a2;
      if (isControlled) {
        const value2 = isFunction5(nextValue) ? nextValue(prop) : nextValue;
        if (value2 !== prop) {
          (_a2 = onChangeRef.current) == null ? void 0 : _a2.call(onChangeRef, value2);
        }
      } else {
        setUncontrolledProp(nextValue);
      }
    },
    [isControlled, prop, setUncontrolledProp, onChangeRef]
  );
  return [value, setValue];
}
function useUncontrolledState({
  defaultProp,
  onChange
}) {
  const [value, setValue] = React95.useState(defaultProp);
  const prevValueRef = React95.useRef(value);
  const onChangeRef = React95.useRef(onChange);
  useInsertionEffect(() => {
    onChangeRef.current = onChange;
  }, [onChange]);
  React95.useEffect(() => {
    var _a2;
    if (prevValueRef.current !== value) {
      (_a2 = onChangeRef.current) == null ? void 0 : _a2.call(onChangeRef, value);
      prevValueRef.current = value;
    }
  }, [value, prevValueRef]);
  return [value, setValue, onChangeRef];
}
function isFunction5(value) {
  return typeof value === "function";
}
var SYNC_STATE = Symbol("RADIX:SYNC_STATE");

// node_modules/@radix-ui/react-primitive/dist/index.mjs
var React97 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);

// node_modules/@radix-ui/react-slot/dist/index.mjs
var React96 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
function createSlot(ownerName) {
  const SlotClone = createSlotClone(ownerName);
  const Slot22 = React96.forwardRef((props, forwardedRef) => {
    const { children: children2, ...slotProps } = props;
    const childrenArray = React96.Children.toArray(children2);
    const slottable = childrenArray.find(isSlottable);
    if (slottable) {
      const newElement = slottable.props.children;
      const newChildren = childrenArray.map((child) => {
        if (child === slottable) {
          if (React96.Children.count(newElement) > 1)
            return React96.Children.only(null);
          return React96.isValidElement(newElement) ? newElement.props.children : null;
        } else {
          return child;
        }
      });
      return (0, import_jsx_runtime2.jsx)(SlotClone, { ...slotProps, ref: forwardedRef, children: React96.isValidElement(newElement) ? React96.cloneElement(newElement, void 0, newChildren) : null });
    }
    return (0, import_jsx_runtime2.jsx)(SlotClone, { ...slotProps, ref: forwardedRef, children: children2 });
  });
  Slot22.displayName = `${ownerName}.Slot`;
  return Slot22;
}
var Slot = createSlot("Slot");
function createSlotClone(ownerName) {
  const SlotClone = React96.forwardRef((props, forwardedRef) => {
    const { children: children2, ...slotProps } = props;
    if (React96.isValidElement(children2)) {
      const childrenRef = getElementRef(children2);
      const props2 = mergeProps(slotProps, children2.props);
      if (children2.type !== React96.Fragment) {
        props2.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;
      }
      return React96.cloneElement(children2, props2);
    }
    return React96.Children.count(children2) > 1 ? React96.Children.only(null) : null;
  });
  SlotClone.displayName = `${ownerName}.SlotClone`;
  return SlotClone;
}
var SLOTTABLE_IDENTIFIER = Symbol("radix.slottable");
function createSlottable(ownerName) {
  const Slottable2 = ({ children: children2 }) => {
    return (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: children2 });
  };
  Slottable2.displayName = `${ownerName}.Slottable`;
  Slottable2.__radixId = SLOTTABLE_IDENTIFIER;
  return Slottable2;
}
var Slottable = createSlottable("Slottable");
function isSlottable(child) {
  return React96.isValidElement(child) && typeof child.type === "function" && "__radixId" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;
}
function mergeProps(slotProps, childProps) {
  const overrideProps = { ...childProps };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue) {
        overrideProps[propName] = (...args) => {
          childPropValue(...args);
          slotPropValue(...args);
        };
      } else if (slotPropValue) {
        overrideProps[propName] = slotPropValue;
      }
    } else if (propName === "style") {
      overrideProps[propName] = { ...slotPropValue, ...childPropValue };
    } else if (propName === "className") {
      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
    }
  }
  return { ...slotProps, ...overrideProps };
}
function getElementRef(element) {
  var _a2, _b;
  let getter = (_a2 = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a2.get;
  let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.ref;
  }
  getter = (_b = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b.get;
  mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.props.ref;
  }
  return element.props.ref || element.ref;
}

// node_modules/@radix-ui/react-primitive/dist/index.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var NODES = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "select",
  "span",
  "svg",
  "ul"
];
var Primitive = NODES.reduce((primitive, node) => {
  const Slot3 = createSlot(`Primitive.${node}`);
  const Node2 = React97.forwardRef((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? Slot3 : node;
    if (typeof window !== "undefined") {
      window[Symbol.for("radix-ui")] = true;
    }
    return (0, import_jsx_runtime3.jsx)(Comp, { ...primitiveProps, ref: forwardedRef });
  });
  Node2.displayName = `Primitive.${node}`;
  return { ...primitive, [node]: Node2 };
}, {});
function dispatchDiscreteCustomEvent(target, event2) {
  if (target)
    ReactDOM.flushSync(() => target.dispatchEvent(event2));
}

// node_modules/@radix-ui/react-menu/dist/index.mjs
var React122 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-collection/dist/index.mjs
var import_react27 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_react28 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
function createCollection(name2) {
  const PROVIDER_NAME = name2 + "CollectionProvider";
  const [createCollectionContext, createCollectionScope4] = createContextScope(PROVIDER_NAME);
  const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(
    PROVIDER_NAME,
    { collectionRef: { current: null }, itemMap: /* @__PURE__ */ new Map() }
  );
  const CollectionProvider = (props) => {
    const { scope, children: children2 } = props;
    const ref = import_react27.default.useRef(null);
    const itemMap = import_react27.default.useRef(/* @__PURE__ */ new Map()).current;
    return (0, import_jsx_runtime4.jsx)(CollectionProviderImpl, { scope, itemMap, collectionRef: ref, children: children2 });
  };
  CollectionProvider.displayName = PROVIDER_NAME;
  const COLLECTION_SLOT_NAME = name2 + "CollectionSlot";
  const CollectionSlotImpl = createSlot(COLLECTION_SLOT_NAME);
  const CollectionSlot = import_react27.default.forwardRef(
    (props, forwardedRef) => {
      const { scope, children: children2 } = props;
      const context2 = useCollectionContext(COLLECTION_SLOT_NAME, scope);
      const composedRefs = useComposedRefs(forwardedRef, context2.collectionRef);
      return (0, import_jsx_runtime4.jsx)(CollectionSlotImpl, { ref: composedRefs, children: children2 });
    }
  );
  CollectionSlot.displayName = COLLECTION_SLOT_NAME;
  const ITEM_SLOT_NAME = name2 + "CollectionItemSlot";
  const ITEM_DATA_ATTR = "data-radix-collection-item";
  const CollectionItemSlotImpl = createSlot(ITEM_SLOT_NAME);
  const CollectionItemSlot = import_react27.default.forwardRef(
    (props, forwardedRef) => {
      const { scope, children: children2, ...itemData } = props;
      const ref = import_react27.default.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      const context2 = useCollectionContext(ITEM_SLOT_NAME, scope);
      import_react27.default.useEffect(() => {
        context2.itemMap.set(ref, { ref, ...itemData });
        return () => void context2.itemMap.delete(ref);
      });
      return (0, import_jsx_runtime4.jsx)(CollectionItemSlotImpl, { ...{ [ITEM_DATA_ATTR]: "" }, ref: composedRefs, children: children2 });
    }
  );
  CollectionItemSlot.displayName = ITEM_SLOT_NAME;
  function useCollection4(scope) {
    const context2 = useCollectionContext(name2 + "CollectionConsumer", scope);
    const getItems = import_react27.default.useCallback(() => {
      const collectionNode = context2.collectionRef.current;
      if (!collectionNode)
        return [];
      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
      const items = Array.from(context2.itemMap.values());
      const orderedItems = items.sort(
        (a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current)
      );
      return orderedItems;
    }, [context2.collectionRef, context2.itemMap]);
    return getItems;
  }
  return [
    { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },
    useCollection4,
    createCollectionScope4
  ];
}

// node_modules/@radix-ui/react-direction/dist/index.mjs
var React99 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var DirectionContext = React99.createContext(void 0);
var DirectionProvider = (props) => {
  const { dir, children: children2 } = props;
  return (0, import_jsx_runtime6.jsx)(DirectionContext.Provider, { value: dir, children: children2 });
};
function useDirection(localDir) {
  const globalDir = React99.useContext(DirectionContext);
  return localDir || globalDir || "ltr";
}

// node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
var React102 = __toESM(require_react(), 1);

// node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
var React100 = __toESM(require_react(), 1);
function useCallbackRef(callback) {
  const callbackRef = React100.useRef(callback);
  React100.useEffect(() => {
    callbackRef.current = callback;
  });
  return React100.useMemo(() => (...args) => {
    var _a2;
    return (_a2 = callbackRef.current) == null ? void 0 : _a2.call(callbackRef, ...args);
  }, []);
}

// node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs
var React101 = __toESM(require_react(), 1);
function useEscapeKeydown(onEscapeKeyDownProp, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
  const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);
  React101.useEffect(() => {
    const handleKeyDown = (event2) => {
      if (event2.key === "Escape") {
        onEscapeKeyDown(event2);
      }
    };
    ownerDocument.addEventListener("keydown", handleKeyDown, { capture: true });
    return () => ownerDocument.removeEventListener("keydown", handleKeyDown, { capture: true });
  }, [onEscapeKeyDown, ownerDocument]);
}

// node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var DISMISSABLE_LAYER_NAME = "DismissableLayer";
var CONTEXT_UPDATE = "dismissableLayer.update";
var POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
var FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
var originalBodyPointerEvents;
var DismissableLayerContext = React102.createContext({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set()
});
var DismissableLayer = React102.forwardRef(
  (props, forwardedRef) => {
    const {
      disableOutsidePointerEvents = false,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      onDismiss,
      ...layerProps
    } = props;
    const context2 = React102.useContext(DismissableLayerContext);
    const [node, setNode] = React102.useState(null);
    const ownerDocument = (node == null ? void 0 : node.ownerDocument) ?? (globalThis == null ? void 0 : globalThis.document);
    const [, force] = React102.useState({});
    const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
    const layers = Array.from(context2.layers);
    const [highestLayerWithOutsidePointerEventsDisabled] = [...context2.layersWithOutsidePointerEventsDisabled].slice(-1);
    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
    const index3 = node ? layers.indexOf(node) : -1;
    const isBodyPointerEventsDisabled = context2.layersWithOutsidePointerEventsDisabled.size > 0;
    const isPointerEventsEnabled = index3 >= highestLayerWithOutsidePointerEventsDisabledIndex;
    const pointerDownOutside = usePointerDownOutside((event2) => {
      const target = event2.target;
      const isPointerDownOnBranch = [...context2.branches].some((branch) => branch.contains(target));
      if (!isPointerEventsEnabled || isPointerDownOnBranch)
        return;
      onPointerDownOutside == null ? void 0 : onPointerDownOutside(event2);
      onInteractOutside == null ? void 0 : onInteractOutside(event2);
      if (!event2.defaultPrevented)
        onDismiss == null ? void 0 : onDismiss();
    }, ownerDocument);
    const focusOutside = useFocusOutside((event2) => {
      const target = event2.target;
      const isFocusInBranch = [...context2.branches].some((branch) => branch.contains(target));
      if (isFocusInBranch)
        return;
      onFocusOutside == null ? void 0 : onFocusOutside(event2);
      onInteractOutside == null ? void 0 : onInteractOutside(event2);
      if (!event2.defaultPrevented)
        onDismiss == null ? void 0 : onDismiss();
    }, ownerDocument);
    useEscapeKeydown((event2) => {
      const isHighestLayer = index3 === context2.layers.size - 1;
      if (!isHighestLayer)
        return;
      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(event2);
      if (!event2.defaultPrevented && onDismiss) {
        event2.preventDefault();
        onDismiss();
      }
    }, ownerDocument);
    React102.useEffect(() => {
      if (!node)
        return;
      if (disableOutsidePointerEvents) {
        if (context2.layersWithOutsidePointerEventsDisabled.size === 0) {
          originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
          ownerDocument.body.style.pointerEvents = "none";
        }
        context2.layersWithOutsidePointerEventsDisabled.add(node);
      }
      context2.layers.add(node);
      dispatchUpdate();
      return () => {
        if (disableOutsidePointerEvents && context2.layersWithOutsidePointerEventsDisabled.size === 1) {
          ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;
        }
      };
    }, [node, ownerDocument, disableOutsidePointerEvents, context2]);
    React102.useEffect(() => {
      return () => {
        if (!node)
          return;
        context2.layers.delete(node);
        context2.layersWithOutsidePointerEventsDisabled.delete(node);
        dispatchUpdate();
      };
    }, [node, context2]);
    React102.useEffect(() => {
      const handleUpdate = () => force({});
      document.addEventListener(CONTEXT_UPDATE, handleUpdate);
      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);
    }, []);
    return (0, import_jsx_runtime7.jsx)(
      Primitive.div,
      {
        ...layerProps,
        ref: composedRefs,
        style: {
          pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
          ...props.style
        },
        onFocusCapture: composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),
        onBlurCapture: composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),
        onPointerDownCapture: composeEventHandlers(
          props.onPointerDownCapture,
          pointerDownOutside.onPointerDownCapture
        )
      }
    );
  }
);
DismissableLayer.displayName = DISMISSABLE_LAYER_NAME;
var BRANCH_NAME = "DismissableLayerBranch";
var DismissableLayerBranch = React102.forwardRef((props, forwardedRef) => {
  const context2 = React102.useContext(DismissableLayerContext);
  const ref = React102.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  React102.useEffect(() => {
    const node = ref.current;
    if (node) {
      context2.branches.add(node);
      return () => {
        context2.branches.delete(node);
      };
    }
  }, [context2.branches]);
  return (0, import_jsx_runtime7.jsx)(Primitive.div, { ...props, ref: composedRefs });
});
DismissableLayerBranch.displayName = BRANCH_NAME;
function usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside);
  const isPointerInsideReactTreeRef = React102.useRef(false);
  const handleClickRef = React102.useRef(() => {
  });
  React102.useEffect(() => {
    const handlePointerDown = (event2) => {
      if (event2.target && !isPointerInsideReactTreeRef.current) {
        let handleAndDispatchPointerDownOutsideEvent2 = function() {
          handleAndDispatchCustomEvent(
            POINTER_DOWN_OUTSIDE,
            handlePointerDownOutside,
            eventDetail,
            { discrete: true }
          );
        };
        var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;
        const eventDetail = { originalEvent: event2 };
        if (event2.pointerType === "touch") {
          ownerDocument.removeEventListener("click", handleClickRef.current);
          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
          ownerDocument.addEventListener("click", handleClickRef.current, { once: true });
        } else {
          handleAndDispatchPointerDownOutsideEvent2();
        }
      } else {
        ownerDocument.removeEventListener("click", handleClickRef.current);
      }
      isPointerInsideReactTreeRef.current = false;
    };
    const timerId = window.setTimeout(() => {
      ownerDocument.addEventListener("pointerdown", handlePointerDown);
    }, 0);
    return () => {
      window.clearTimeout(timerId);
      ownerDocument.removeEventListener("pointerdown", handlePointerDown);
      ownerDocument.removeEventListener("click", handleClickRef.current);
    };
  }, [ownerDocument, handlePointerDownOutside]);
  return {
    // ensures we check React component tree (not just DOM tree)
    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
  };
}
function useFocusOutside(onFocusOutside, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
  const handleFocusOutside = useCallbackRef(onFocusOutside);
  const isFocusInsideReactTreeRef = React102.useRef(false);
  React102.useEffect(() => {
    const handleFocus = (event2) => {
      if (event2.target && !isFocusInsideReactTreeRef.current) {
        const eventDetail = { originalEvent: event2 };
        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
          discrete: false
        });
      }
    };
    ownerDocument.addEventListener("focusin", handleFocus);
    return () => ownerDocument.removeEventListener("focusin", handleFocus);
  }, [ownerDocument, handleFocusOutside]);
  return {
    onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
    onBlurCapture: () => isFocusInsideReactTreeRef.current = false
  };
}
function dispatchUpdate() {
  const event2 = new CustomEvent(CONTEXT_UPDATE);
  document.dispatchEvent(event2);
}
function handleAndDispatchCustomEvent(name2, handler, detail, { discrete }) {
  const target = detail.originalEvent.target;
  const event2 = new CustomEvent(name2, { bubbles: false, cancelable: true, detail });
  if (handler)
    target.addEventListener(name2, handler, { once: true });
  if (discrete) {
    dispatchDiscreteCustomEvent(target, event2);
  } else {
    target.dispatchEvent(event2);
  }
}

// node_modules/@radix-ui/react-focus-guards/dist/index.mjs
var React103 = __toESM(require_react(), 1);
var count3 = 0;
function useFocusGuards() {
  React103.useEffect(() => {
    const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
    document.body.insertAdjacentElement("afterbegin", edgeGuards[0] ?? createFocusGuard());
    document.body.insertAdjacentElement("beforeend", edgeGuards[1] ?? createFocusGuard());
    count3++;
    return () => {
      if (count3 === 1) {
        document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
      }
      count3--;
    };
  }, []);
}
function createFocusGuard() {
  const element = document.createElement("span");
  element.setAttribute("data-radix-focus-guard", "");
  element.tabIndex = 0;
  element.style.outline = "none";
  element.style.opacity = "0";
  element.style.position = "fixed";
  element.style.pointerEvents = "none";
  return element;
}

// node_modules/@radix-ui/react-focus-scope/dist/index.mjs
var React104 = __toESM(require_react(), 1);
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
var AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
var EVENT_OPTIONS = { bubbles: false, cancelable: true };
var FOCUS_SCOPE_NAME = "FocusScope";
var FocusScope = React104.forwardRef((props, forwardedRef) => {
  const {
    loop = false,
    trapped = false,
    onMountAutoFocus: onMountAutoFocusProp,
    onUnmountAutoFocus: onUnmountAutoFocusProp,
    ...scopeProps
  } = props;
  const [container, setContainer] = React104.useState(null);
  const onMountAutoFocus = useCallbackRef(onMountAutoFocusProp);
  const onUnmountAutoFocus = useCallbackRef(onUnmountAutoFocusProp);
  const lastFocusedElementRef = React104.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, (node) => setContainer(node));
  const focusScope = React104.useRef({
    paused: false,
    pause() {
      this.paused = true;
    },
    resume() {
      this.paused = false;
    }
  }).current;
  React104.useEffect(() => {
    if (trapped) {
      let handleFocusIn2 = function(event2) {
        if (focusScope.paused || !container)
          return;
        const target = event2.target;
        if (container.contains(target)) {
          lastFocusedElementRef.current = target;
        } else {
          focus(lastFocusedElementRef.current, { select: true });
        }
      }, handleFocusOut2 = function(event2) {
        if (focusScope.paused || !container)
          return;
        const relatedTarget = event2.relatedTarget;
        if (relatedTarget === null)
          return;
        if (!container.contains(relatedTarget)) {
          focus(lastFocusedElementRef.current, { select: true });
        }
      }, handleMutations2 = function(mutations) {
        const focusedElement = document.activeElement;
        if (focusedElement !== document.body)
          return;
        for (const mutation of mutations) {
          if (mutation.removedNodes.length > 0)
            focus(container);
        }
      };
      var handleFocusIn = handleFocusIn2, handleFocusOut = handleFocusOut2, handleMutations = handleMutations2;
      document.addEventListener("focusin", handleFocusIn2);
      document.addEventListener("focusout", handleFocusOut2);
      const mutationObserver = new MutationObserver(handleMutations2);
      if (container)
        mutationObserver.observe(container, { childList: true, subtree: true });
      return () => {
        document.removeEventListener("focusin", handleFocusIn2);
        document.removeEventListener("focusout", handleFocusOut2);
        mutationObserver.disconnect();
      };
    }
  }, [trapped, container, focusScope.paused]);
  React104.useEffect(() => {
    if (container) {
      focusScopesStack.add(focusScope);
      const previouslyFocusedElement = document.activeElement;
      const hasFocusedCandidate = container.contains(previouslyFocusedElement);
      if (!hasFocusedCandidate) {
        const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);
        container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        container.dispatchEvent(mountEvent);
        if (!mountEvent.defaultPrevented) {
          focusFirst(removeLinks(getTabbableCandidates(container)), { select: true });
          if (document.activeElement === previouslyFocusedElement) {
            focus(container);
          }
        }
      }
      return () => {
        container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
        setTimeout(() => {
          const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS);
          container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          container.dispatchEvent(unmountEvent);
          if (!unmountEvent.defaultPrevented) {
            focus(previouslyFocusedElement ?? document.body, { select: true });
          }
          container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
          focusScopesStack.remove(focusScope);
        }, 0);
      };
    }
  }, [container, onMountAutoFocus, onUnmountAutoFocus, focusScope]);
  const handleKeyDown = React104.useCallback(
    (event2) => {
      if (!loop && !trapped)
        return;
      if (focusScope.paused)
        return;
      const isTabKey = event2.key === "Tab" && !event2.altKey && !event2.ctrlKey && !event2.metaKey;
      const focusedElement = document.activeElement;
      if (isTabKey && focusedElement) {
        const container2 = event2.currentTarget;
        const [first2, last3] = getTabbableEdges(container2);
        const hasTabbableElementsInside = first2 && last3;
        if (!hasTabbableElementsInside) {
          if (focusedElement === container2)
            event2.preventDefault();
        } else {
          if (!event2.shiftKey && focusedElement === last3) {
            event2.preventDefault();
            if (loop)
              focus(first2, { select: true });
          } else if (event2.shiftKey && focusedElement === first2) {
            event2.preventDefault();
            if (loop)
              focus(last3, { select: true });
          }
        }
      }
    },
    [loop, trapped, focusScope.paused]
  );
  return (0, import_jsx_runtime8.jsx)(Primitive.div, { tabIndex: -1, ...scopeProps, ref: composedRefs, onKeyDown: handleKeyDown });
});
FocusScope.displayName = FOCUS_SCOPE_NAME;
function focusFirst(candidates, { select: select2 = false } = {}) {
  const previouslyFocusedElement = document.activeElement;
  for (const candidate of candidates) {
    focus(candidate, { select: select2 });
    if (document.activeElement !== previouslyFocusedElement)
      return;
  }
}
function getTabbableEdges(container) {
  const candidates = getTabbableCandidates(container);
  const first2 = findVisible(candidates, container);
  const last3 = findVisible(candidates.reverse(), container);
  return [first2, last3];
}
function getTabbableCandidates(container) {
  const nodes = [];
  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
}
function findVisible(elements, container) {
  for (const element of elements) {
    if (!isHidden(element, { upTo: container }))
      return element;
  }
}
function isHidden(node, { upTo }) {
  if (getComputedStyle(node).visibility === "hidden")
    return true;
  while (node) {
    if (upTo !== void 0 && node === upTo)
      return false;
    if (getComputedStyle(node).display === "none")
      return true;
    node = node.parentElement;
  }
  return false;
}
function isSelectableInput(element) {
  return element instanceof HTMLInputElement && "select" in element;
}
function focus(element, { select: select2 = false } = {}) {
  if (element && element.focus) {
    const previouslyFocusedElement = document.activeElement;
    element.focus({ preventScroll: true });
    if (element !== previouslyFocusedElement && isSelectableInput(element) && select2)
      element.select();
  }
}
var focusScopesStack = createFocusScopesStack();
function createFocusScopesStack() {
  let stack = [];
  return {
    add(focusScope) {
      const activeFocusScope = stack[0];
      if (focusScope !== activeFocusScope) {
        activeFocusScope == null ? void 0 : activeFocusScope.pause();
      }
      stack = arrayRemove(stack, focusScope);
      stack.unshift(focusScope);
    },
    remove(focusScope) {
      var _a2;
      stack = arrayRemove(stack, focusScope);
      (_a2 = stack[0]) == null ? void 0 : _a2.resume();
    }
  };
}
function arrayRemove(array, item) {
  const updatedArray = [...array];
  const index3 = updatedArray.indexOf(item);
  if (index3 !== -1) {
    updatedArray.splice(index3, 1);
  }
  return updatedArray;
}
function removeLinks(items) {
  return items.filter((item) => item.tagName !== "A");
}

// node_modules/@radix-ui/react-id/dist/index.mjs
var React105 = __toESM(require_react(), 1);
var useReactId2 = React105[" useId ".trim().toString()] || (() => void 0);
var count4 = 0;
function useId(deterministicId) {
  const [id, setId] = React105.useState(useReactId2());
  useLayoutEffect22(() => {
    if (!deterministicId)
      setId((reactId) => reactId ?? String(count4++));
  }, [deterministicId]);
  return deterministicId || (id ? `radix-${id}` : "");
}

// node_modules/@radix-ui/react-popper/dist/index.mjs
var React109 = __toESM(require_react(), 1);

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min2 = Math.min;
var max2 = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start3, value, end) {
  return max2(start3, min2(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list3 = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list3 = list3.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list3 = list3.concat(list3.map(getOppositeAlignmentPlacement));
    }
  }
  return list3;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config2) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config2;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name: name2,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name2]: {
        ...middlewareData[name2],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min2(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min2(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max3 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset4 = clamp(min$1, center, max3);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset4 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max3 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset4,
        centerOffset: center - offset4 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
var hide = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "hide",
    options,
    async fn(state) {
      const {
        rects
      } = state;
      const {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min3 = mainAxisCoord + overflow[minSide];
        const max3 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min3, mainAxisCoord, max3);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min3 = crossAxisCoord + overflow[minSide];
        const max3 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min3, crossAxisCoord, max3);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};
var limitShift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset4 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset4, state);
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};
var size = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      var _state$middlewareData, _state$middlewareData2;
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min2(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min2(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
        availableWidth = maximumClippingWidth;
      }
      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
        availableHeight = maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max2(overflow.left, 0);
        const xMax = max2(overflow.right, 0);
        const yMin = max2(overflow.top, 0);
        const yMax = max2(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max2(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max2(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement2(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement2(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement2(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list3, traverseIframes) {
  var _node$ownerDocument2;
  if (list3 === void 0) {
    list3 = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list3.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list3.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement2(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement2(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
    // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect)
  ));
  const y = htmlRect.top + scroll.scrollTop;
  return {
    x,
    y
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement2(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement2(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max2(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max2(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max2(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement2(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max2(rect.top, accRect.top);
    accRect.right = min2(rect.right, accRect.right);
    accRect.bottom = min2(rect.bottom, accRect.bottom);
    accRect.left = max2(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement2(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement2(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement2(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function rectsAreEqual(a, b) {
  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip2, threshold) {
    if (skip2 === void 0) {
      skip2 = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip2) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max2(0, min2(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update2, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame: animationFrame2 = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update2, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update2);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update2) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update2();
    });
    if (referenceEl && !animationFrame2) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame2 ? getBoundingClientRect(reference) : null;
  if (animationFrame2) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update2();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update2();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update2);
      ancestorResize && ancestor.removeEventListener("resize", update2);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame2) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var size2 = size;
var hide2 = hide;
var arrow2 = arrow;
var limitShift2 = limitShift;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React106 = __toESM(require_react(), 1);
var import_react29 = __toESM(require_react(), 1);
var ReactDOM2 = __toESM(require_react_dom(), 1);
var index2 = typeof document !== "undefined" ? import_react29.useLayoutEffect : import_react29.useEffect;
function deepEqual2(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b.toString()) {
    return true;
  }
  let length;
  let i;
  let keys;
  if (a && b && typeof a === "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b.length)
        return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual2(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual2(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React106.useRef(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React106.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React106.useState(middleware);
  if (!deepEqual2(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React106.useState(null);
  const [_floating, _setFloating] = React106.useState(null);
  const setReference = React106.useCallback((node) => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React106.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React106.useRef(null);
  const floatingRef = React106.useRef(null);
  const dataRef = React106.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const openRef = useLatestRef(open);
  const update2 = React106.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config2 = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config2.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config2).then((data2) => {
      const fullData = {
        ...data2,
        // The floating element's position may be recomputed while it's closed
        // but still mounted (such as when transitioning out). To ensure
        // `isPositioned` will be `false` initially on the next open, avoid
        // setting it to `true` when `open === false` (must be specified).
        isPositioned: openRef.current !== false
      };
      if (isMountedRef.current && !deepEqual2(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM2.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef, openRef]);
  index2(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React106.useRef(false);
  index2(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index2(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update2);
      }
      update2();
    }
  }, [referenceEl, floatingEl, update2, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React106.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React106.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React106.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React106.useMemo(() => ({
    ...data,
    update: update2,
    refs,
    elements,
    floatingStyles
  }), [data, update2, refs, elements, floatingStyles]);
}
var arrow$1 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow2({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow2({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var offset3 = (options, deps) => ({
  ...offset2(options),
  options: [options, deps]
});
var shift3 = (options, deps) => ({
  ...shift2(options),
  options: [options, deps]
});
var limitShift3 = (options, deps) => ({
  ...limitShift2(options),
  options: [options, deps]
});
var flip3 = (options, deps) => ({
  ...flip2(options),
  options: [options, deps]
});
var size3 = (options, deps) => ({
  ...size2(options),
  options: [options, deps]
});
var hide3 = (options, deps) => ({
  ...hide2(options),
  options: [options, deps]
});
var arrow3 = (options, deps) => ({
  ...arrow$1(options),
  options: [options, deps]
});

// node_modules/@radix-ui/react-arrow/dist/index.mjs
var React107 = __toESM(require_react(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var NAME = "Arrow";
var Arrow = React107.forwardRef((props, forwardedRef) => {
  const { children: children2, width = 10, height = 5, ...arrowProps } = props;
  return (0, import_jsx_runtime9.jsx)(
    Primitive.svg,
    {
      ...arrowProps,
      ref: forwardedRef,
      width,
      height,
      viewBox: "0 0 30 10",
      preserveAspectRatio: "none",
      children: props.asChild ? children2 : (0, import_jsx_runtime9.jsx)("polygon", { points: "0,0 30,0 15,10" })
    }
  );
});
Arrow.displayName = NAME;
var Root = Arrow;

// node_modules/@radix-ui/react-use-size/dist/index.mjs
var React108 = __toESM(require_react(), 1);
function useSize(element) {
  const [size4, setSize] = React108.useState(void 0);
  useLayoutEffect22(() => {
    if (element) {
      setSize({ width: element.offsetWidth, height: element.offsetHeight });
      const resizeObserver = new ResizeObserver((entries) => {
        if (!Array.isArray(entries)) {
          return;
        }
        if (!entries.length) {
          return;
        }
        const entry = entries[0];
        let width;
        let height;
        if ("borderBoxSize" in entry) {
          const borderSizeEntry = entry["borderBoxSize"];
          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
          width = borderSize["inlineSize"];
          height = borderSize["blockSize"];
        } else {
          width = element.offsetWidth;
          height = element.offsetHeight;
        }
        setSize({ width, height });
      });
      resizeObserver.observe(element, { box: "border-box" });
      return () => resizeObserver.unobserve(element);
    } else {
      setSize(void 0);
    }
  }, [element]);
  return size4;
}

// node_modules/@radix-ui/react-popper/dist/index.mjs
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var POPPER_NAME = "Popper";
var [createPopperContext, createPopperScope] = createContextScope(POPPER_NAME);
var [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);
var Popper = (props) => {
  const { __scopePopper, children: children2 } = props;
  const [anchor, setAnchor] = React109.useState(null);
  return (0, import_jsx_runtime10.jsx)(PopperProvider, { scope: __scopePopper, anchor, onAnchorChange: setAnchor, children: children2 });
};
Popper.displayName = POPPER_NAME;
var ANCHOR_NAME = "PopperAnchor";
var PopperAnchor = React109.forwardRef(
  (props, forwardedRef) => {
    const { __scopePopper, virtualRef, ...anchorProps } = props;
    const context2 = usePopperContext(ANCHOR_NAME, __scopePopper);
    const ref = React109.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    React109.useEffect(() => {
      context2.onAnchorChange((virtualRef == null ? void 0 : virtualRef.current) || ref.current);
    });
    return virtualRef ? null : (0, import_jsx_runtime10.jsx)(Primitive.div, { ...anchorProps, ref: composedRefs });
  }
);
PopperAnchor.displayName = ANCHOR_NAME;
var CONTENT_NAME = "PopperContent";
var [PopperContentProvider, useContentContext] = createPopperContext(CONTENT_NAME);
var PopperContent = React109.forwardRef(
  (props, forwardedRef) => {
    var _a2, _b, _c, _d, _e, _f;
    const {
      __scopePopper,
      side = "bottom",
      sideOffset = 0,
      align = "center",
      alignOffset = 0,
      arrowPadding = 0,
      avoidCollisions = true,
      collisionBoundary = [],
      collisionPadding: collisionPaddingProp = 0,
      sticky = "partial",
      hideWhenDetached = false,
      updatePositionStrategy = "optimized",
      onPlaced,
      ...contentProps
    } = props;
    const context2 = usePopperContext(CONTENT_NAME, __scopePopper);
    const [content, setContent] = React109.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
    const [arrow4, setArrow] = React109.useState(null);
    const arrowSize = useSize(arrow4);
    const arrowWidth = (arrowSize == null ? void 0 : arrowSize.width) ?? 0;
    const arrowHeight = (arrowSize == null ? void 0 : arrowSize.height) ?? 0;
    const desiredPlacement = side + (align !== "center" ? "-" + align : "");
    const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : { top: 0, right: 0, bottom: 0, left: 0, ...collisionPaddingProp };
    const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [collisionBoundary];
    const hasExplicitBoundaries = boundary.length > 0;
    const detectOverflowOptions = {
      padding: collisionPadding,
      boundary: boundary.filter(isNotNull),
      // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
      altBoundary: hasExplicitBoundaries
    };
    const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({
      // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
      strategy: "fixed",
      placement: desiredPlacement,
      whileElementsMounted: (...args) => {
        const cleanup = autoUpdate(...args, {
          animationFrame: updatePositionStrategy === "always"
        });
        return cleanup;
      },
      elements: {
        reference: context2.anchor
      },
      middleware: [
        offset3({ mainAxis: sideOffset + arrowHeight, alignmentAxis: alignOffset }),
        avoidCollisions && shift3({
          mainAxis: true,
          crossAxis: false,
          limiter: sticky === "partial" ? limitShift3() : void 0,
          ...detectOverflowOptions
        }),
        avoidCollisions && flip3({ ...detectOverflowOptions }),
        size3({
          ...detectOverflowOptions,
          apply: ({ elements, rects, availableWidth, availableHeight }) => {
            const { width: anchorWidth, height: anchorHeight } = rects.reference;
            const contentStyle = elements.floating.style;
            contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
            contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
            contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
            contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
          }
        }),
        arrow4 && arrow3({ element: arrow4, padding: arrowPadding }),
        transformOrigin({ arrowWidth, arrowHeight }),
        hideWhenDetached && hide3({ strategy: "referenceHidden", ...detectOverflowOptions })
      ]
    });
    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
    const handlePlaced = useCallbackRef(onPlaced);
    useLayoutEffect22(() => {
      if (isPositioned) {
        handlePlaced == null ? void 0 : handlePlaced();
      }
    }, [isPositioned, handlePlaced]);
    const arrowX = (_a2 = middlewareData.arrow) == null ? void 0 : _a2.x;
    const arrowY = (_b = middlewareData.arrow) == null ? void 0 : _b.y;
    const cannotCenterArrow = ((_c = middlewareData.arrow) == null ? void 0 : _c.centerOffset) !== 0;
    const [contentZIndex, setContentZIndex] = React109.useState();
    useLayoutEffect22(() => {
      if (content)
        setContentZIndex(window.getComputedStyle(content).zIndex);
    }, [content]);
    return (0, import_jsx_runtime10.jsx)(
      "div",
      {
        ref: refs.setFloating,
        "data-radix-popper-content-wrapper": "",
        style: {
          ...floatingStyles,
          transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
          // keep off the page when measuring
          minWidth: "max-content",
          zIndex: contentZIndex,
          ["--radix-popper-transform-origin"]: [
            (_d = middlewareData.transformOrigin) == null ? void 0 : _d.x,
            (_e = middlewareData.transformOrigin) == null ? void 0 : _e.y
          ].join(" "),
          // hide the content if using the hide middleware and should be hidden
          // set visibility to hidden and disable pointer events so the UI behaves
          // as if the PopperContent isn't there at all
          ...((_f = middlewareData.hide) == null ? void 0 : _f.referenceHidden) && {
            visibility: "hidden",
            pointerEvents: "none"
          }
        },
        dir: props.dir,
        children: (0, import_jsx_runtime10.jsx)(
          PopperContentProvider,
          {
            scope: __scopePopper,
            placedSide,
            onArrowChange: setArrow,
            arrowX,
            arrowY,
            shouldHideArrow: cannotCenterArrow,
            children: (0, import_jsx_runtime10.jsx)(
              Primitive.div,
              {
                "data-side": placedSide,
                "data-align": placedAlign,
                ...contentProps,
                ref: composedRefs,
                style: {
                  ...contentProps.style,
                  // if the PopperContent hasn't been placed yet (not all measurements done)
                  // we prevent animations so that users's animation don't kick in too early referring wrong sides
                  animation: !isPositioned ? "none" : void 0
                }
              }
            )
          }
        )
      }
    );
  }
);
PopperContent.displayName = CONTENT_NAME;
var ARROW_NAME = "PopperArrow";
var OPPOSITE_SIDE = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
var PopperArrow = React109.forwardRef(function PopperArrow2(props, forwardedRef) {
  const { __scopePopper, ...arrowProps } = props;
  const contentContext = useContentContext(ARROW_NAME, __scopePopper);
  const baseSide = OPPOSITE_SIDE[contentContext.placedSide];
  return (
    // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
    // doesn't report size as we'd expect on SVG elements.
    // it reports their bounding box which is effectively the largest path inside the SVG.
    (0, import_jsx_runtime10.jsx)(
      "span",
      {
        ref: contentContext.onArrowChange,
        style: {
          position: "absolute",
          left: contentContext.arrowX,
          top: contentContext.arrowY,
          [baseSide]: 0,
          transformOrigin: {
            top: "",
            right: "0 0",
            bottom: "center 0",
            left: "100% 0"
          }[contentContext.placedSide],
          transform: {
            top: "translateY(100%)",
            right: "translateY(50%) rotate(90deg) translateX(-50%)",
            bottom: `rotate(180deg)`,
            left: "translateY(50%) rotate(-90deg) translateX(50%)"
          }[contentContext.placedSide],
          visibility: contentContext.shouldHideArrow ? "hidden" : void 0
        },
        children: (0, import_jsx_runtime10.jsx)(
          Root,
          {
            ...arrowProps,
            ref: forwardedRef,
            style: {
              ...arrowProps.style,
              // ensures the element can be measured correctly (mostly for if SVG)
              display: "block"
            }
          }
        )
      }
    )
  );
});
PopperArrow.displayName = ARROW_NAME;
function isNotNull(value) {
  return value !== null;
}
var transformOrigin = (options) => ({
  name: "transformOrigin",
  options,
  fn(data) {
    var _a2, _b, _c;
    const { placement, rects, middlewareData } = data;
    const cannotCenterArrow = ((_a2 = middlewareData.arrow) == null ? void 0 : _a2.centerOffset) !== 0;
    const isArrowHidden = cannotCenterArrow;
    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
    const noArrowAlign = { start: "0%", center: "50%", end: "100%" }[placedAlign];
    const arrowXCenter = (((_b = middlewareData.arrow) == null ? void 0 : _b.x) ?? 0) + arrowWidth / 2;
    const arrowYCenter = (((_c = middlewareData.arrow) == null ? void 0 : _c.y) ?? 0) + arrowHeight / 2;
    let x = "";
    let y = "";
    if (placedSide === "bottom") {
      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y = `${-arrowHeight}px`;
    } else if (placedSide === "top") {
      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
      y = `${rects.floating.height + arrowHeight}px`;
    } else if (placedSide === "right") {
      x = `${-arrowHeight}px`;
      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    } else if (placedSide === "left") {
      x = `${rects.floating.width + arrowHeight}px`;
      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
    }
    return { data: { x, y } };
  }
});
function getSideAndAlignFromPlacement(placement) {
  const [side, align = "center"] = placement.split("-");
  return [side, align];
}
var Root2 = Popper;
var Anchor = PopperAnchor;
var Content = PopperContent;
var Arrow2 = PopperArrow;

// node_modules/@radix-ui/react-portal/dist/index.mjs
var React110 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var PORTAL_NAME = "Portal";
var Portal = React110.forwardRef((props, forwardedRef) => {
  var _a2;
  const { container: containerProp, ...portalProps } = props;
  const [mounted, setMounted] = React110.useState(false);
  useLayoutEffect22(() => setMounted(true), []);
  const container = containerProp || mounted && ((_a2 = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : _a2.body);
  return container ? import_react_dom2.default.createPortal((0, import_jsx_runtime11.jsx)(Primitive.div, { ...portalProps, ref: forwardedRef }), container) : null;
});
Portal.displayName = PORTAL_NAME;

// node_modules/@radix-ui/react-presence/dist/index.mjs
var React212 = __toESM(require_react(), 1);
var React111 = __toESM(require_react(), 1);
function useStateMachine(initialState, machine) {
  return React111.useReducer((state, event2) => {
    const nextState = machine[state][event2];
    return nextState ?? state;
  }, initialState);
}
var Presence = (props) => {
  const { present, children: children2 } = props;
  const presence = usePresence(present);
  const child = typeof children2 === "function" ? children2({ present: presence.isPresent }) : React212.Children.only(children2);
  const ref = useComposedRefs(presence.ref, getElementRef2(child));
  const forceMount = typeof children2 === "function";
  return forceMount || presence.isPresent ? React212.cloneElement(child, { ref }) : null;
};
Presence.displayName = "Presence";
function usePresence(present) {
  const [node, setNode] = React212.useState();
  const stylesRef = React212.useRef(null);
  const prevPresentRef = React212.useRef(present);
  const prevAnimationNameRef = React212.useRef("none");
  const initialState = present ? "mounted" : "unmounted";
  const [state, send3] = useStateMachine(initialState, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  React212.useEffect(() => {
    const currentAnimationName = getAnimationName(stylesRef.current);
    prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
  }, [state]);
  useLayoutEffect22(() => {
    const styles = stylesRef.current;
    const wasPresent = prevPresentRef.current;
    const hasPresentChanged = wasPresent !== present;
    if (hasPresentChanged) {
      const prevAnimationName = prevAnimationNameRef.current;
      const currentAnimationName = getAnimationName(styles);
      if (present) {
        send3("MOUNT");
      } else if (currentAnimationName === "none" || (styles == null ? void 0 : styles.display) === "none") {
        send3("UNMOUNT");
      } else {
        const isAnimating = prevAnimationName !== currentAnimationName;
        if (wasPresent && isAnimating) {
          send3("ANIMATION_OUT");
        } else {
          send3("UNMOUNT");
        }
      }
      prevPresentRef.current = present;
    }
  }, [present, send3]);
  useLayoutEffect22(() => {
    if (node) {
      let timeoutId;
      const ownerWindow = node.ownerDocument.defaultView ?? window;
      const handleAnimationEnd = (event2) => {
        const currentAnimationName = getAnimationName(stylesRef.current);
        const isCurrentAnimation = currentAnimationName.includes(event2.animationName);
        if (event2.target === node && isCurrentAnimation) {
          send3("ANIMATION_END");
          if (!prevPresentRef.current) {
            const currentFillMode = node.style.animationFillMode;
            node.style.animationFillMode = "forwards";
            timeoutId = ownerWindow.setTimeout(() => {
              if (node.style.animationFillMode === "forwards") {
                node.style.animationFillMode = currentFillMode;
              }
            });
          }
        }
      };
      const handleAnimationStart = (event2) => {
        if (event2.target === node) {
          prevAnimationNameRef.current = getAnimationName(stylesRef.current);
        }
      };
      node.addEventListener("animationstart", handleAnimationStart);
      node.addEventListener("animationcancel", handleAnimationEnd);
      node.addEventListener("animationend", handleAnimationEnd);
      return () => {
        ownerWindow.clearTimeout(timeoutId);
        node.removeEventListener("animationstart", handleAnimationStart);
        node.removeEventListener("animationcancel", handleAnimationEnd);
        node.removeEventListener("animationend", handleAnimationEnd);
      };
    } else {
      send3("ANIMATION_END");
    }
  }, [node, send3]);
  return {
    isPresent: ["mounted", "unmountSuspended"].includes(state),
    ref: React212.useCallback((node2) => {
      stylesRef.current = node2 ? getComputedStyle(node2) : null;
      setNode(node2);
    }, [])
  };
}
function getAnimationName(styles) {
  return (styles == null ? void 0 : styles.animationName) || "none";
}
function getElementRef2(element) {
  var _a2, _b;
  let getter = (_a2 = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a2.get;
  let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.ref;
  }
  getter = (_b = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b.get;
  mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
  if (mayWarn) {
    return element.props.ref;
  }
  return element.props.ref || element.ref;
}

// node_modules/@radix-ui/react-roving-focus/dist/index.mjs
var React112 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
var EVENT_OPTIONS2 = { bubbles: false, cancelable: true };
var GROUP_NAME = "RovingFocusGroup";
var [Collection2, useCollection, createCollectionScope] = createCollection(GROUP_NAME);
var [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(
  GROUP_NAME,
  [createCollectionScope]
);
var [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME);
var RovingFocusGroup = React112.forwardRef(
  (props, forwardedRef) => {
    return (0, import_jsx_runtime12.jsx)(Collection2.Provider, { scope: props.__scopeRovingFocusGroup, children: (0, import_jsx_runtime12.jsx)(Collection2.Slot, { scope: props.__scopeRovingFocusGroup, children: (0, import_jsx_runtime12.jsx)(RovingFocusGroupImpl, { ...props, ref: forwardedRef }) }) });
  }
);
RovingFocusGroup.displayName = GROUP_NAME;
var RovingFocusGroupImpl = React112.forwardRef((props, forwardedRef) => {
  const {
    __scopeRovingFocusGroup,
    orientation,
    loop = false,
    dir,
    currentTabStopId: currentTabStopIdProp,
    defaultCurrentTabStopId,
    onCurrentTabStopIdChange,
    onEntryFocus,
    preventScrollOnEntryFocus = false,
    ...groupProps
  } = props;
  const ref = React112.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const direction = useDirection(dir);
  const [currentTabStopId, setCurrentTabStopId] = useControllableState({
    prop: currentTabStopIdProp,
    defaultProp: defaultCurrentTabStopId ?? null,
    onChange: onCurrentTabStopIdChange,
    caller: GROUP_NAME
  });
  const [isTabbingBackOut, setIsTabbingBackOut] = React112.useState(false);
  const handleEntryFocus = useCallbackRef(onEntryFocus);
  const getItems = useCollection(__scopeRovingFocusGroup);
  const isClickFocusRef = React112.useRef(false);
  const [focusableItemsCount, setFocusableItemsCount] = React112.useState(0);
  React112.useEffect(() => {
    const node = ref.current;
    if (node) {
      node.addEventListener(ENTRY_FOCUS, handleEntryFocus);
      return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
    }
  }, [handleEntryFocus]);
  return (0, import_jsx_runtime12.jsx)(
    RovingFocusProvider,
    {
      scope: __scopeRovingFocusGroup,
      orientation,
      dir: direction,
      loop,
      currentTabStopId,
      onItemFocus: React112.useCallback(
        (tabStopId) => setCurrentTabStopId(tabStopId),
        [setCurrentTabStopId]
      ),
      onItemShiftTab: React112.useCallback(() => setIsTabbingBackOut(true), []),
      onFocusableItemAdd: React112.useCallback(
        () => setFocusableItemsCount((prevCount) => prevCount + 1),
        []
      ),
      onFocusableItemRemove: React112.useCallback(
        () => setFocusableItemsCount((prevCount) => prevCount - 1),
        []
      ),
      children: (0, import_jsx_runtime12.jsx)(
        Primitive.div,
        {
          tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
          "data-orientation": orientation,
          ...groupProps,
          ref: composedRefs,
          style: { outline: "none", ...props.style },
          onMouseDown: composeEventHandlers(props.onMouseDown, () => {
            isClickFocusRef.current = true;
          }),
          onFocus: composeEventHandlers(props.onFocus, (event2) => {
            const isKeyboardFocus = !isClickFocusRef.current;
            if (event2.target === event2.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
              const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS2);
              event2.currentTarget.dispatchEvent(entryFocusEvent);
              if (!entryFocusEvent.defaultPrevented) {
                const items = getItems().filter((item) => item.focusable);
                const activeItem = items.find((item) => item.active);
                const currentItem = items.find((item) => item.id === currentTabStopId);
                const candidateItems = [activeItem, currentItem, ...items].filter(
                  Boolean
                );
                const candidateNodes = candidateItems.map((item) => item.ref.current);
                focusFirst2(candidateNodes, preventScrollOnEntryFocus);
              }
            }
            isClickFocusRef.current = false;
          }),
          onBlur: composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))
        }
      )
    }
  );
});
var ITEM_NAME = "RovingFocusGroupItem";
var RovingFocusGroupItem = React112.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeRovingFocusGroup,
      focusable = true,
      active = false,
      tabStopId,
      children: children2,
      ...itemProps
    } = props;
    const autoId = useId();
    const id = tabStopId || autoId;
    const context2 = useRovingFocusContext(ITEM_NAME, __scopeRovingFocusGroup);
    const isCurrentTabStop = context2.currentTabStopId === id;
    const getItems = useCollection(__scopeRovingFocusGroup);
    const { onFocusableItemAdd, onFocusableItemRemove, currentTabStopId } = context2;
    React112.useEffect(() => {
      if (focusable) {
        onFocusableItemAdd();
        return () => onFocusableItemRemove();
      }
    }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);
    return (0, import_jsx_runtime12.jsx)(
      Collection2.ItemSlot,
      {
        scope: __scopeRovingFocusGroup,
        id,
        focusable,
        active,
        children: (0, import_jsx_runtime12.jsx)(
          Primitive.span,
          {
            tabIndex: isCurrentTabStop ? 0 : -1,
            "data-orientation": context2.orientation,
            ...itemProps,
            ref: forwardedRef,
            onMouseDown: composeEventHandlers(props.onMouseDown, (event2) => {
              if (!focusable)
                event2.preventDefault();
              else
                context2.onItemFocus(id);
            }),
            onFocus: composeEventHandlers(props.onFocus, () => context2.onItemFocus(id)),
            onKeyDown: composeEventHandlers(props.onKeyDown, (event2) => {
              if (event2.key === "Tab" && event2.shiftKey) {
                context2.onItemShiftTab();
                return;
              }
              if (event2.target !== event2.currentTarget)
                return;
              const focusIntent = getFocusIntent(event2, context2.orientation, context2.dir);
              if (focusIntent !== void 0) {
                if (event2.metaKey || event2.ctrlKey || event2.altKey || event2.shiftKey)
                  return;
                event2.preventDefault();
                const items = getItems().filter((item) => item.focusable);
                let candidateNodes = items.map((item) => item.ref.current);
                if (focusIntent === "last")
                  candidateNodes.reverse();
                else if (focusIntent === "prev" || focusIntent === "next") {
                  if (focusIntent === "prev")
                    candidateNodes.reverse();
                  const currentIndex = candidateNodes.indexOf(event2.currentTarget);
                  candidateNodes = context2.loop ? wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                }
                setTimeout(() => focusFirst2(candidateNodes));
              }
            }),
            children: typeof children2 === "function" ? children2({ isCurrentTabStop, hasTabStop: currentTabStopId != null }) : children2
          }
        )
      }
    );
  }
);
RovingFocusGroupItem.displayName = ITEM_NAME;
var MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last"
};
function getDirectionAwareKey(key, dir) {
  if (dir !== "rtl")
    return key;
  return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
}
function getFocusIntent(event2, orientation, dir) {
  const key = getDirectionAwareKey(event2.key, dir);
  if (orientation === "vertical" && ["ArrowLeft", "ArrowRight"].includes(key))
    return void 0;
  if (orientation === "horizontal" && ["ArrowUp", "ArrowDown"].includes(key))
    return void 0;
  return MAP_KEY_TO_FOCUS_INTENT[key];
}
function focusFirst2(candidates, preventScroll = false) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
      return;
    candidate.focus({ preventScroll });
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
      return;
  }
}
function wrapArray(array, startIndex) {
  return array.map((_, index3) => array[(startIndex + index3) % array.length]);
}
var Root3 = RovingFocusGroup;
var Item = RovingFocusGroupItem;

// node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = function(node) {
  return node && (node.host || unwrapHost(node.parentNode));
};
var correctTargets = function(parent, targets) {
  return targets.map(function(target) {
    if (parent.contains(target)) {
      return target;
    }
    var correctedTarget = unwrapHost(target);
    if (correctedTarget && parent.contains(correctedTarget)) {
      return correctedTarget;
    }
    console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
    return null;
  }).filter(function(x) {
    return Boolean(x);
  });
};
var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
  var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = /* @__PURE__ */ new Set();
  var elementsToStop = new Set(targets);
  var keep = function(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node) {
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        try {
          var attr = node.getAttribute(controlAttribute);
          var alreadyHidden = attr !== null && attr !== "false";
          var counterValue = (counterMap.get(node) || 0) + 1;
          var markerValue = (markerCounter.get(node) || 0) + 1;
          counterMap.set(node, counterValue);
          markerCounter.set(node, markerValue);
          hiddenNodes.push(node);
          if (counterValue === 1 && alreadyHidden) {
            uncontrolledNodes.set(node, true);
          }
          if (markerValue === 1) {
            node.setAttribute(markerName, "true");
          }
          if (!alreadyHidden) {
            node.setAttribute(controlAttribute, "true");
          }
        } catch (e) {
          console.error("aria-hidden: cannot operate on ", node, e);
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node) {
      var counterValue = counterMap.get(node) - 1;
      var markerValue = markerCounter.get(node) - 1;
      counterMap.set(node, counterValue);
      markerCounter.set(node, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node)) {
          node.removeAttribute(controlAttribute);
        }
        uncontrolledNodes.delete(node);
      }
      if (!markerValue) {
        node.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      markerMap = {};
    }
  };
};
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  var activeParentNode = parentNode || getDefaultParent(originalTarget);
  if (!activeParentNode) {
    return function() {
      return null;
    };
  }
  targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
  return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
};

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var React121 = __toESM(require_react());

// node_modules/react-remove-scroll/dist/es2015/UI.js
var React117 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react30 = __toESM(require_react());
function useCallbackRef2(initialValue, callback) {
  var ref = (0, import_react30.useState)(function() {
    return {
      // value
      value: initialValue,
      // last callback
      callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last3 = ref.value;
          if (last3 !== value) {
            ref.value = value;
            ref.callback(value, last3);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
var React113 = __toESM(require_react());
var useIsomorphicLayoutEffect2 = typeof window !== "undefined" ? React113.useLayoutEffect : React113.useEffect;
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs(refs, defaultValue2) {
  var callbackRef = useCallbackRef2(defaultValue2 || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
  useIsomorphicLayoutEffect2(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}

// node_modules/use-sidecar/dist/es2015/hoc.js
var React114 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/hook.js
var import_react31 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a) {
  return a;
}
function innerCreateMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer2 = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer2.length) {
        return buffer2[buffer2.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer2.push(item);
      return function() {
        buffer2 = buffer2.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer2.length) {
        var cbs = buffer2;
        buffer2 = [];
        cbs.forEach(cb);
      }
      buffer2 = {
        push: function(x) {
          return cb(x);
        },
        filter: function() {
          return buffer2;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer2.length) {
        var cbs = buffer2;
        buffer2 = [];
        cbs.forEach(cb);
        pendingQueue = buffer2;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer2 = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter2) {
          pendingQueue = pendingQueue.filter(filter2);
          return buffer2;
        }
      };
    }
  };
  return medium;
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign3({ async: true, ssr: false }, options);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/renderProp.js
var React115 = __toESM(require_react());
var import_react32 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/exports.js
var React116 = __toESM(require_react());
var SideCar = function(_a2) {
  var sideCar = _a2.sideCar, rest = __rest3(_a2, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React116.createElement(Target, __assign3({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}

// node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React117.forwardRef(function(props, parentRef) {
  var ref = React117.useRef(null);
  var _a2 = React117.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a2[0], setCallbacks = _a2[1];
  var forwardProps = props.forwardProps, children2 = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container2 = _b === void 0 ? "div" : _b, gapMode = props.gapMode, rest = __rest3(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign3(__assign3({}, rest), callbacks);
  return React117.createElement(
    React117.Fragment,
    null,
    enabled && React117.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
    forwardProps ? React117.cloneElement(React117.Children.only(children2), __assign3(__assign3({}, containerProps), { ref: containerRef })) : React117.createElement(Container2, __assign3({}, containerProps, { className, ref: containerRef }), children2)
  );
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React120 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React119 = __toESM(require_react());

// node_modules/react-style-singleton/dist/es2015/hook.js
var React118 = __toESM(require_react());

// node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};

// node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css;
  } else {
    tag.appendChild(document.createTextNode(css));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function() {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles, isDynamic) {
    React118.useEffect(function() {
      sheet.add(styles);
      return function() {
        sheet.remove();
      };
    }, [styles && isDynamic]);
  };
};

// node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle = styleHookSingleton();
  var Sheet = function(_a2) {
    var styles = _a2.styles, dynamic = _a2.dynamic;
    useStyle(styles, dynamic);
    return null;
  };
  return Sheet;
};

// node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse2 = function(x) {
  return parseInt(x || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse2(left), parse2(top), parse2(right)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var lockAttribute = "data-scroll-locked";
var getStyles = function(_a2, allowRelative, gapMode, important) {
  var left = _a2.left, top = _a2.top, right = _a2.right, gap = _a2.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
};
var getCurrentUseCounter = function() {
  var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
  return isFinite(counter) ? counter : 0;
};
var useLockAttribute = function() {
  React119.useEffect(function() {
    document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
    return function() {
      var newCounter = getCurrentUseCounter() - 1;
      if (newCounter <= 0) {
        document.body.removeAttribute(lockAttribute);
      } else {
        document.body.setAttribute(lockAttribute, newCounter.toString());
      }
    };
  }, []);
};
var RemoveScrollBar = function(_a2) {
  var noRelative = _a2.noRelative, noImportant = _a2.noImportant, _b = _a2.gapMode, gapMode = _b === void 0 ? "margin" : _b;
  useLockAttribute();
  var gap = React119.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  return React119.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};

// node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var options;
var nonPassive = passiveSupported ? { passive: false } : false;

// node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var alwaysContainsScroll = function(node) {
  return node.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node, overflow) {
  if (!(node instanceof Element)) {
    return false;
  }
  var styles = window.getComputedStyle(node);
  return (
    // not-not-scrollable
    styles[overflow] !== "hidden" && // contains scroll inside self
    !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
  );
};
var elementCouldBeVScrolled = function(node) {
  return elementCanBeScrolled(node, "overflowY");
};
var elementCouldBeHScrolled = function(node) {
  return elementCanBeScrolled(node, "overflowX");
};
var locationCouldBeScrolled = function(axis, node) {
  var ownerDocument = node.ownerDocument;
  var current = node;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a2 = getScrollVariables(axis, current), scrollHeight = _a2[1], clientHeight = _a2[2];
      if (scrollHeight > clientHeight) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== ownerDocument.body);
  return false;
};
var getVScrollVariables = function(_a2) {
  var scrollTop = _a2.scrollTop, scrollHeight = _a2.scrollHeight, clientHeight = _a2.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a2) {
  var scrollLeft = _a2.scrollLeft, scrollWidth = _a2.scrollWidth, clientWidth = _a2.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node) {
  return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function(axis, node) {
  return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
};
var getDirectionFactor = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event2, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event2.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a2 = getScrollVariables(axis, target), position = _a2[0], scroll_1 = _a2[1], capacity = _a2[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position;
    if (position || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position;
      }
    }
    if (target instanceof ShadowRoot) {
      target = target.host;
    } else {
      target = target.parentNode;
    }
  } while (
    // portaled content
    !targetInLock && target !== document.body || // self content
    targetInLock && (endTarget.contains(target) || endTarget === target)
  );
  if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event2) {
  return "changedTouches" in event2 ? [event2.changedTouches[0].clientX, event2.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event2) {
  return [event2.deltaX, event2.deltaY];
};
var extractRef = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x, y) {
  return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function(id) {
  return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React120.useRef([]);
  var touchStartRef = React120.useRef([0, 0]);
  var activeAxis = React120.useRef();
  var id = React120.useState(idCounter++)[0];
  var Style3 = React120.useState(styleSingleton)[0];
  var lastProps = React120.useRef(props);
  React120.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React120.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id));
      var allow_1 = __spreadArray2([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React120.useCallback(function(event2, parent) {
    if ("touches" in event2 && event2.touches.length === 2 || event2.type === "wheel" && event2.ctrlKey) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event2);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event2 ? event2.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event2 ? event2.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event2.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event2 && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event2 && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event2, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React120.useCallback(function(_event) {
    var event2 = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style3) {
      return;
    }
    var delta = "deltaY" in event2 ? getDeltaXY(event2) : getTouchXY(event2);
    var sourceEvent = shouldPreventQueue.current.filter(function(e) {
      return e.name === event2.type && (e.target === event2.target || event2.target === e.shadowParent) && deltaCompare(e.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event2.cancelable) {
        event2.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
        return node.contains(event2.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event2, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event2.cancelable) {
          event2.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = React120.useCallback(function(name2, delta, target, should) {
    var event2 = { name: name2, delta, target, should, shadowParent: getOutermostShadowParent(target) };
    shouldPreventQueue.current.push(event2);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
        return e !== event2;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React120.useCallback(function(event2) {
    touchStartRef.current = getTouchXY(event2);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React120.useCallback(function(event2) {
    shouldCancel(event2.type, getDeltaXY(event2), event2.target, shouldCancelEvent(event2, props.lockRef.current));
  }, []);
  var scrollTouchMove = React120.useCallback(function(event2) {
    shouldCancel(event2.type, getTouchXY(event2), event2.target, shouldCancelEvent(event2, props.lockRef.current));
  }, []);
  React120.useEffect(function() {
    lockStack.push(Style3);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style3;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React120.createElement(
    React120.Fragment,
    null,
    inert ? React120.createElement(Style3, { styles: generateStyle(id) }) : null,
    removeScrollBar ? React120.createElement(RemoveScrollBar, { gapMode: props.gapMode }) : null
  );
}
function getOutermostShadowParent(node) {
  var shadowParent = null;
  while (node !== null) {
    if (node instanceof ShadowRoot) {
      shadowParent = node.host;
      node = node.host;
    }
    node = node.parentNode;
  }
  return shadowParent;
}

// node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React121.forwardRef(function(props, ref) {
  return React121.createElement(RemoveScroll, __assign3({}, props, { ref, sideCar: sidecar_default }));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default = ReactRemoveScroll;

// node_modules/@radix-ui/react-menu/dist/index.mjs
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var SELECTION_KEYS = ["Enter", " "];
var FIRST_KEYS = ["ArrowDown", "PageUp", "Home"];
var LAST_KEYS = ["ArrowUp", "PageDown", "End"];
var FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
var SUB_OPEN_KEYS = {
  ltr: [...SELECTION_KEYS, "ArrowRight"],
  rtl: [...SELECTION_KEYS, "ArrowLeft"]
};
var SUB_CLOSE_KEYS = {
  ltr: ["ArrowLeft"],
  rtl: ["ArrowRight"]
};
var MENU_NAME = "Menu";
var [Collection3, useCollection2, createCollectionScope2] = createCollection(MENU_NAME);
var [createMenuContext, createMenuScope] = createContextScope(MENU_NAME, [
  createCollectionScope2,
  createPopperScope,
  createRovingFocusGroupScope
]);
var usePopperScope = createPopperScope();
var useRovingFocusGroupScope = createRovingFocusGroupScope();
var [MenuProvider, useMenuContext] = createMenuContext(MENU_NAME);
var [MenuRootProvider, useMenuRootContext] = createMenuContext(MENU_NAME);
var Menu = (props) => {
  const { __scopeMenu, open = false, children: children2, dir, onOpenChange, modal = true } = props;
  const popperScope = usePopperScope(__scopeMenu);
  const [content, setContent] = React122.useState(null);
  const isUsingKeyboardRef = React122.useRef(false);
  const handleOpenChange = useCallbackRef(onOpenChange);
  const direction = useDirection(dir);
  React122.useEffect(() => {
    const handleKeyDown = () => {
      isUsingKeyboardRef.current = true;
      document.addEventListener("pointerdown", handlePointer, { capture: true, once: true });
      document.addEventListener("pointermove", handlePointer, { capture: true, once: true });
    };
    const handlePointer = () => isUsingKeyboardRef.current = false;
    document.addEventListener("keydown", handleKeyDown, { capture: true });
    return () => {
      document.removeEventListener("keydown", handleKeyDown, { capture: true });
      document.removeEventListener("pointerdown", handlePointer, { capture: true });
      document.removeEventListener("pointermove", handlePointer, { capture: true });
    };
  }, []);
  return (0, import_jsx_runtime13.jsx)(Root2, { ...popperScope, children: (0, import_jsx_runtime13.jsx)(
    MenuProvider,
    {
      scope: __scopeMenu,
      open,
      onOpenChange: handleOpenChange,
      content,
      onContentChange: setContent,
      children: (0, import_jsx_runtime13.jsx)(
        MenuRootProvider,
        {
          scope: __scopeMenu,
          onClose: React122.useCallback(() => handleOpenChange(false), [handleOpenChange]),
          isUsingKeyboardRef,
          dir: direction,
          modal,
          children: children2
        }
      )
    }
  ) });
};
Menu.displayName = MENU_NAME;
var ANCHOR_NAME2 = "MenuAnchor";
var MenuAnchor = React122.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...anchorProps } = props;
    const popperScope = usePopperScope(__scopeMenu);
    return (0, import_jsx_runtime13.jsx)(Anchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
  }
);
MenuAnchor.displayName = ANCHOR_NAME2;
var PORTAL_NAME2 = "MenuPortal";
var [PortalProvider, usePortalContext] = createMenuContext(PORTAL_NAME2, {
  forceMount: void 0
});
var MenuPortal = (props) => {
  const { __scopeMenu, forceMount, children: children2, container } = props;
  const context2 = useMenuContext(PORTAL_NAME2, __scopeMenu);
  return (0, import_jsx_runtime13.jsx)(PortalProvider, { scope: __scopeMenu, forceMount, children: (0, import_jsx_runtime13.jsx)(Presence, { present: forceMount || context2.open, children: (0, import_jsx_runtime13.jsx)(Portal, { asChild: true, container, children: children2 }) }) });
};
MenuPortal.displayName = PORTAL_NAME2;
var CONTENT_NAME2 = "MenuContent";
var [MenuContentProvider, useMenuContentContext] = createMenuContext(CONTENT_NAME2);
var MenuContent = React122.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext(CONTENT_NAME2, props.__scopeMenu);
    const { forceMount = portalContext.forceMount, ...contentProps } = props;
    const context2 = useMenuContext(CONTENT_NAME2, props.__scopeMenu);
    const rootContext = useMenuRootContext(CONTENT_NAME2, props.__scopeMenu);
    return (0, import_jsx_runtime13.jsx)(Collection3.Provider, { scope: props.__scopeMenu, children: (0, import_jsx_runtime13.jsx)(Presence, { present: forceMount || context2.open, children: (0, import_jsx_runtime13.jsx)(Collection3.Slot, { scope: props.__scopeMenu, children: rootContext.modal ? (0, import_jsx_runtime13.jsx)(MenuRootContentModal, { ...contentProps, ref: forwardedRef }) : (0, import_jsx_runtime13.jsx)(MenuRootContentNonModal, { ...contentProps, ref: forwardedRef }) }) }) });
  }
);
var MenuRootContentModal = React122.forwardRef(
  (props, forwardedRef) => {
    const context2 = useMenuContext(CONTENT_NAME2, props.__scopeMenu);
    const ref = React122.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    React122.useEffect(() => {
      const content = ref.current;
      if (content)
        return hideOthers(content);
    }, []);
    return (0, import_jsx_runtime13.jsx)(
      MenuContentImpl,
      {
        ...props,
        ref: composedRefs,
        trapFocus: context2.open,
        disableOutsidePointerEvents: context2.open,
        disableOutsideScroll: true,
        onFocusOutside: composeEventHandlers(
          props.onFocusOutside,
          (event2) => event2.preventDefault(),
          { checkForDefaultPrevented: false }
        ),
        onDismiss: () => context2.onOpenChange(false)
      }
    );
  }
);
var MenuRootContentNonModal = React122.forwardRef((props, forwardedRef) => {
  const context2 = useMenuContext(CONTENT_NAME2, props.__scopeMenu);
  return (0, import_jsx_runtime13.jsx)(
    MenuContentImpl,
    {
      ...props,
      ref: forwardedRef,
      trapFocus: false,
      disableOutsidePointerEvents: false,
      disableOutsideScroll: false,
      onDismiss: () => context2.onOpenChange(false)
    }
  );
});
var Slot2 = createSlot("MenuContent.ScrollLock");
var MenuContentImpl = React122.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeMenu,
      loop = false,
      trapFocus,
      onOpenAutoFocus,
      onCloseAutoFocus,
      disableOutsidePointerEvents,
      onEntryFocus,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      onDismiss,
      disableOutsideScroll,
      ...contentProps
    } = props;
    const context2 = useMenuContext(CONTENT_NAME2, __scopeMenu);
    const rootContext = useMenuRootContext(CONTENT_NAME2, __scopeMenu);
    const popperScope = usePopperScope(__scopeMenu);
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);
    const getItems = useCollection2(__scopeMenu);
    const [currentItemId, setCurrentItemId] = React122.useState(null);
    const contentRef = React122.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef, context2.onContentChange);
    const timerRef = React122.useRef(0);
    const searchRef = React122.useRef("");
    const pointerGraceTimerRef = React122.useRef(0);
    const pointerGraceIntentRef = React122.useRef(null);
    const pointerDirRef = React122.useRef("right");
    const lastPointerXRef = React122.useRef(0);
    const ScrollLockWrapper = disableOutsideScroll ? Combination_default : React122.Fragment;
    const scrollLockWrapperProps = disableOutsideScroll ? { as: Slot2, allowPinchZoom: true } : void 0;
    const handleTypeaheadSearch = (key) => {
      var _a2, _b;
      const search = searchRef.current + key;
      const items = getItems().filter((item) => !item.disabled);
      const currentItem = document.activeElement;
      const currentMatch = (_a2 = items.find((item) => item.ref.current === currentItem)) == null ? void 0 : _a2.textValue;
      const values = items.map((item) => item.textValue);
      const nextMatch = getNextMatch(values, search, currentMatch);
      const newItem = (_b = items.find((item) => item.textValue === nextMatch)) == null ? void 0 : _b.ref.current;
      (function updateSearch(value) {
        searchRef.current = value;
        window.clearTimeout(timerRef.current);
        if (value !== "")
          timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
      })(search);
      if (newItem) {
        setTimeout(() => newItem.focus());
      }
    };
    React122.useEffect(() => {
      return () => window.clearTimeout(timerRef.current);
    }, []);
    useFocusGuards();
    const isPointerMovingToSubmenu = React122.useCallback((event2) => {
      var _a2, _b;
      const isMovingTowards = pointerDirRef.current === ((_a2 = pointerGraceIntentRef.current) == null ? void 0 : _a2.side);
      return isMovingTowards && isPointerInGraceArea(event2, (_b = pointerGraceIntentRef.current) == null ? void 0 : _b.area);
    }, []);
    return (0, import_jsx_runtime13.jsx)(
      MenuContentProvider,
      {
        scope: __scopeMenu,
        searchRef,
        onItemEnter: React122.useCallback(
          (event2) => {
            if (isPointerMovingToSubmenu(event2))
              event2.preventDefault();
          },
          [isPointerMovingToSubmenu]
        ),
        onItemLeave: React122.useCallback(
          (event2) => {
            var _a2;
            if (isPointerMovingToSubmenu(event2))
              return;
            (_a2 = contentRef.current) == null ? void 0 : _a2.focus();
            setCurrentItemId(null);
          },
          [isPointerMovingToSubmenu]
        ),
        onTriggerLeave: React122.useCallback(
          (event2) => {
            if (isPointerMovingToSubmenu(event2))
              event2.preventDefault();
          },
          [isPointerMovingToSubmenu]
        ),
        pointerGraceTimerRef,
        onPointerGraceIntentChange: React122.useCallback((intent) => {
          pointerGraceIntentRef.current = intent;
        }, []),
        children: (0, import_jsx_runtime13.jsx)(ScrollLockWrapper, { ...scrollLockWrapperProps, children: (0, import_jsx_runtime13.jsx)(
          FocusScope,
          {
            asChild: true,
            trapped: trapFocus,
            onMountAutoFocus: composeEventHandlers(onOpenAutoFocus, (event2) => {
              var _a2;
              event2.preventDefault();
              (_a2 = contentRef.current) == null ? void 0 : _a2.focus({ preventScroll: true });
            }),
            onUnmountAutoFocus: onCloseAutoFocus,
            children: (0, import_jsx_runtime13.jsx)(
              DismissableLayer,
              {
                asChild: true,
                disableOutsidePointerEvents,
                onEscapeKeyDown,
                onPointerDownOutside,
                onFocusOutside,
                onInteractOutside,
                onDismiss,
                children: (0, import_jsx_runtime13.jsx)(
                  Root3,
                  {
                    asChild: true,
                    ...rovingFocusGroupScope,
                    dir: rootContext.dir,
                    orientation: "vertical",
                    loop,
                    currentTabStopId: currentItemId,
                    onCurrentTabStopIdChange: setCurrentItemId,
                    onEntryFocus: composeEventHandlers(onEntryFocus, (event2) => {
                      if (!rootContext.isUsingKeyboardRef.current)
                        event2.preventDefault();
                    }),
                    preventScrollOnEntryFocus: true,
                    children: (0, import_jsx_runtime13.jsx)(
                      Content,
                      {
                        role: "menu",
                        "aria-orientation": "vertical",
                        "data-state": getOpenState(context2.open),
                        "data-radix-menu-content": "",
                        dir: rootContext.dir,
                        ...popperScope,
                        ...contentProps,
                        ref: composedRefs,
                        style: { outline: "none", ...contentProps.style },
                        onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event2) => {
                          const target = event2.target;
                          const isKeyDownInside = target.closest("[data-radix-menu-content]") === event2.currentTarget;
                          const isModifierKey = event2.ctrlKey || event2.altKey || event2.metaKey;
                          const isCharacterKey = event2.key.length === 1;
                          if (isKeyDownInside) {
                            if (event2.key === "Tab")
                              event2.preventDefault();
                            if (!isModifierKey && isCharacterKey)
                              handleTypeaheadSearch(event2.key);
                          }
                          const content = contentRef.current;
                          if (event2.target !== content)
                            return;
                          if (!FIRST_LAST_KEYS.includes(event2.key))
                            return;
                          event2.preventDefault();
                          const items = getItems().filter((item) => !item.disabled);
                          const candidateNodes = items.map((item) => item.ref.current);
                          if (LAST_KEYS.includes(event2.key))
                            candidateNodes.reverse();
                          focusFirst3(candidateNodes);
                        }),
                        onBlur: composeEventHandlers(props.onBlur, (event2) => {
                          if (!event2.currentTarget.contains(event2.target)) {
                            window.clearTimeout(timerRef.current);
                            searchRef.current = "";
                          }
                        }),
                        onPointerMove: composeEventHandlers(
                          props.onPointerMove,
                          whenMouse((event2) => {
                            const target = event2.target;
                            const pointerXHasChanged = lastPointerXRef.current !== event2.clientX;
                            if (event2.currentTarget.contains(target) && pointerXHasChanged) {
                              const newDir = event2.clientX > lastPointerXRef.current ? "right" : "left";
                              pointerDirRef.current = newDir;
                              lastPointerXRef.current = event2.clientX;
                            }
                          })
                        )
                      }
                    )
                  }
                )
              }
            )
          }
        ) })
      }
    );
  }
);
MenuContent.displayName = CONTENT_NAME2;
var GROUP_NAME2 = "MenuGroup";
var MenuGroup = React122.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...groupProps } = props;
    return (0, import_jsx_runtime13.jsx)(Primitive.div, { role: "group", ...groupProps, ref: forwardedRef });
  }
);
MenuGroup.displayName = GROUP_NAME2;
var LABEL_NAME = "MenuLabel";
var MenuLabel = React122.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...labelProps } = props;
    return (0, import_jsx_runtime13.jsx)(Primitive.div, { ...labelProps, ref: forwardedRef });
  }
);
MenuLabel.displayName = LABEL_NAME;
var ITEM_NAME2 = "MenuItem";
var ITEM_SELECT = "menu.itemSelect";
var MenuItem = React122.forwardRef(
  (props, forwardedRef) => {
    const { disabled = false, onSelect, ...itemProps } = props;
    const ref = React122.useRef(null);
    const rootContext = useMenuRootContext(ITEM_NAME2, props.__scopeMenu);
    const contentContext = useMenuContentContext(ITEM_NAME2, props.__scopeMenu);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const isPointerDownRef = React122.useRef(false);
    const handleSelect = () => {
      const menuItem = ref.current;
      if (!disabled && menuItem) {
        const itemSelectEvent = new CustomEvent(ITEM_SELECT, { bubbles: true, cancelable: true });
        menuItem.addEventListener(ITEM_SELECT, (event2) => onSelect == null ? void 0 : onSelect(event2), { once: true });
        dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);
        if (itemSelectEvent.defaultPrevented) {
          isPointerDownRef.current = false;
        } else {
          rootContext.onClose();
        }
      }
    };
    return (0, import_jsx_runtime13.jsx)(
      MenuItemImpl,
      {
        ...itemProps,
        ref: composedRefs,
        disabled,
        onClick: composeEventHandlers(props.onClick, handleSelect),
        onPointerDown: (event2) => {
          var _a2;
          (_a2 = props.onPointerDown) == null ? void 0 : _a2.call(props, event2);
          isPointerDownRef.current = true;
        },
        onPointerUp: composeEventHandlers(props.onPointerUp, (event2) => {
          var _a2;
          if (!isPointerDownRef.current)
            (_a2 = event2.currentTarget) == null ? void 0 : _a2.click();
        }),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event2) => {
          const isTypingAhead = contentContext.searchRef.current !== "";
          if (disabled || isTypingAhead && event2.key === " ")
            return;
          if (SELECTION_KEYS.includes(event2.key)) {
            event2.currentTarget.click();
            event2.preventDefault();
          }
        })
      }
    );
  }
);
MenuItem.displayName = ITEM_NAME2;
var MenuItemImpl = React122.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, disabled = false, textValue, ...itemProps } = props;
    const contentContext = useMenuContentContext(ITEM_NAME2, __scopeMenu);
    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);
    const ref = React122.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const [isFocused, setIsFocused] = React122.useState(false);
    const [textContent, setTextContent] = React122.useState("");
    React122.useEffect(() => {
      const menuItem = ref.current;
      if (menuItem) {
        setTextContent((menuItem.textContent ?? "").trim());
      }
    }, [itemProps.children]);
    return (0, import_jsx_runtime13.jsx)(
      Collection3.ItemSlot,
      {
        scope: __scopeMenu,
        disabled,
        textValue: textValue ?? textContent,
        children: (0, import_jsx_runtime13.jsx)(Item, { asChild: true, ...rovingFocusGroupScope, focusable: !disabled, children: (0, import_jsx_runtime13.jsx)(
          Primitive.div,
          {
            role: "menuitem",
            "data-highlighted": isFocused ? "" : void 0,
            "aria-disabled": disabled || void 0,
            "data-disabled": disabled ? "" : void 0,
            ...itemProps,
            ref: composedRefs,
            onPointerMove: composeEventHandlers(
              props.onPointerMove,
              whenMouse((event2) => {
                if (disabled) {
                  contentContext.onItemLeave(event2);
                } else {
                  contentContext.onItemEnter(event2);
                  if (!event2.defaultPrevented) {
                    const item = event2.currentTarget;
                    item.focus({ preventScroll: true });
                  }
                }
              })
            ),
            onPointerLeave: composeEventHandlers(
              props.onPointerLeave,
              whenMouse((event2) => contentContext.onItemLeave(event2))
            ),
            onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),
            onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))
          }
        ) })
      }
    );
  }
);
var CHECKBOX_ITEM_NAME = "MenuCheckboxItem";
var MenuCheckboxItem = React122.forwardRef(
  (props, forwardedRef) => {
    const { checked = false, onCheckedChange, ...checkboxItemProps } = props;
    return (0, import_jsx_runtime13.jsx)(ItemIndicatorProvider, { scope: props.__scopeMenu, checked, children: (0, import_jsx_runtime13.jsx)(
      MenuItem,
      {
        role: "menuitemcheckbox",
        "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
        ...checkboxItemProps,
        ref: forwardedRef,
        "data-state": getCheckedState(checked),
        onSelect: composeEventHandlers(
          checkboxItemProps.onSelect,
          () => onCheckedChange == null ? void 0 : onCheckedChange(isIndeterminate(checked) ? true : !checked),
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
MenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;
var RADIO_GROUP_NAME = "MenuRadioGroup";
var [RadioGroupProvider, useRadioGroupContext] = createMenuContext(
  RADIO_GROUP_NAME,
  { value: void 0, onValueChange: () => {
  } }
);
var MenuRadioGroup = React122.forwardRef(
  (props, forwardedRef) => {
    const { value, onValueChange, ...groupProps } = props;
    const handleValueChange = useCallbackRef(onValueChange);
    return (0, import_jsx_runtime13.jsx)(RadioGroupProvider, { scope: props.__scopeMenu, value, onValueChange: handleValueChange, children: (0, import_jsx_runtime13.jsx)(MenuGroup, { ...groupProps, ref: forwardedRef }) });
  }
);
MenuRadioGroup.displayName = RADIO_GROUP_NAME;
var RADIO_ITEM_NAME = "MenuRadioItem";
var MenuRadioItem = React122.forwardRef(
  (props, forwardedRef) => {
    const { value, ...radioItemProps } = props;
    const context2 = useRadioGroupContext(RADIO_ITEM_NAME, props.__scopeMenu);
    const checked = value === context2.value;
    return (0, import_jsx_runtime13.jsx)(ItemIndicatorProvider, { scope: props.__scopeMenu, checked, children: (0, import_jsx_runtime13.jsx)(
      MenuItem,
      {
        role: "menuitemradio",
        "aria-checked": checked,
        ...radioItemProps,
        ref: forwardedRef,
        "data-state": getCheckedState(checked),
        onSelect: composeEventHandlers(
          radioItemProps.onSelect,
          () => {
            var _a2;
            return (_a2 = context2.onValueChange) == null ? void 0 : _a2.call(context2, value);
          },
          { checkForDefaultPrevented: false }
        )
      }
    ) });
  }
);
MenuRadioItem.displayName = RADIO_ITEM_NAME;
var ITEM_INDICATOR_NAME = "MenuItemIndicator";
var [ItemIndicatorProvider, useItemIndicatorContext] = createMenuContext(
  ITEM_INDICATOR_NAME,
  { checked: false }
);
var MenuItemIndicator = React122.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, forceMount, ...itemIndicatorProps } = props;
    const indicatorContext = useItemIndicatorContext(ITEM_INDICATOR_NAME, __scopeMenu);
    return (0, import_jsx_runtime13.jsx)(
      Presence,
      {
        present: forceMount || isIndeterminate(indicatorContext.checked) || indicatorContext.checked === true,
        children: (0, import_jsx_runtime13.jsx)(
          Primitive.span,
          {
            ...itemIndicatorProps,
            ref: forwardedRef,
            "data-state": getCheckedState(indicatorContext.checked)
          }
        )
      }
    );
  }
);
MenuItemIndicator.displayName = ITEM_INDICATOR_NAME;
var SEPARATOR_NAME = "MenuSeparator";
var MenuSeparator = React122.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...separatorProps } = props;
    return (0, import_jsx_runtime13.jsx)(
      Primitive.div,
      {
        role: "separator",
        "aria-orientation": "horizontal",
        ...separatorProps,
        ref: forwardedRef
      }
    );
  }
);
MenuSeparator.displayName = SEPARATOR_NAME;
var ARROW_NAME2 = "MenuArrow";
var MenuArrow = React122.forwardRef(
  (props, forwardedRef) => {
    const { __scopeMenu, ...arrowProps } = props;
    const popperScope = usePopperScope(__scopeMenu);
    return (0, import_jsx_runtime13.jsx)(Arrow2, { ...popperScope, ...arrowProps, ref: forwardedRef });
  }
);
MenuArrow.displayName = ARROW_NAME2;
var SUB_NAME = "MenuSub";
var [MenuSubProvider, useMenuSubContext] = createMenuContext(SUB_NAME);
var MenuSub = (props) => {
  const { __scopeMenu, children: children2, open = false, onOpenChange } = props;
  const parentMenuContext = useMenuContext(SUB_NAME, __scopeMenu);
  const popperScope = usePopperScope(__scopeMenu);
  const [trigger, setTrigger] = React122.useState(null);
  const [content, setContent] = React122.useState(null);
  const handleOpenChange = useCallbackRef(onOpenChange);
  React122.useEffect(() => {
    if (parentMenuContext.open === false)
      handleOpenChange(false);
    return () => handleOpenChange(false);
  }, [parentMenuContext.open, handleOpenChange]);
  return (0, import_jsx_runtime13.jsx)(Root2, { ...popperScope, children: (0, import_jsx_runtime13.jsx)(
    MenuProvider,
    {
      scope: __scopeMenu,
      open,
      onOpenChange: handleOpenChange,
      content,
      onContentChange: setContent,
      children: (0, import_jsx_runtime13.jsx)(
        MenuSubProvider,
        {
          scope: __scopeMenu,
          contentId: useId(),
          triggerId: useId(),
          trigger,
          onTriggerChange: setTrigger,
          children: children2
        }
      )
    }
  ) });
};
MenuSub.displayName = SUB_NAME;
var SUB_TRIGGER_NAME = "MenuSubTrigger";
var MenuSubTrigger = React122.forwardRef(
  (props, forwardedRef) => {
    const context2 = useMenuContext(SUB_TRIGGER_NAME, props.__scopeMenu);
    const rootContext = useMenuRootContext(SUB_TRIGGER_NAME, props.__scopeMenu);
    const subContext = useMenuSubContext(SUB_TRIGGER_NAME, props.__scopeMenu);
    const contentContext = useMenuContentContext(SUB_TRIGGER_NAME, props.__scopeMenu);
    const openTimerRef = React122.useRef(null);
    const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;
    const scope = { __scopeMenu: props.__scopeMenu };
    const clearOpenTimer = React122.useCallback(() => {
      if (openTimerRef.current)
        window.clearTimeout(openTimerRef.current);
      openTimerRef.current = null;
    }, []);
    React122.useEffect(() => clearOpenTimer, [clearOpenTimer]);
    React122.useEffect(() => {
      const pointerGraceTimer = pointerGraceTimerRef.current;
      return () => {
        window.clearTimeout(pointerGraceTimer);
        onPointerGraceIntentChange(null);
      };
    }, [pointerGraceTimerRef, onPointerGraceIntentChange]);
    return (0, import_jsx_runtime13.jsx)(MenuAnchor, { asChild: true, ...scope, children: (0, import_jsx_runtime13.jsx)(
      MenuItemImpl,
      {
        id: subContext.triggerId,
        "aria-haspopup": "menu",
        "aria-expanded": context2.open,
        "aria-controls": subContext.contentId,
        "data-state": getOpenState(context2.open),
        ...props,
        ref: composeRefs(forwardedRef, subContext.onTriggerChange),
        onClick: (event2) => {
          var _a2;
          (_a2 = props.onClick) == null ? void 0 : _a2.call(props, event2);
          if (props.disabled || event2.defaultPrevented)
            return;
          event2.currentTarget.focus();
          if (!context2.open)
            context2.onOpenChange(true);
        },
        onPointerMove: composeEventHandlers(
          props.onPointerMove,
          whenMouse((event2) => {
            contentContext.onItemEnter(event2);
            if (event2.defaultPrevented)
              return;
            if (!props.disabled && !context2.open && !openTimerRef.current) {
              contentContext.onPointerGraceIntentChange(null);
              openTimerRef.current = window.setTimeout(() => {
                context2.onOpenChange(true);
                clearOpenTimer();
              }, 100);
            }
          })
        ),
        onPointerLeave: composeEventHandlers(
          props.onPointerLeave,
          whenMouse((event2) => {
            var _a2, _b;
            clearOpenTimer();
            const contentRect = (_a2 = context2.content) == null ? void 0 : _a2.getBoundingClientRect();
            if (contentRect) {
              const side = (_b = context2.content) == null ? void 0 : _b.dataset.side;
              const rightSide = side === "right";
              const bleed = rightSide ? -5 : 5;
              const contentNearEdge = contentRect[rightSide ? "left" : "right"];
              const contentFarEdge = contentRect[rightSide ? "right" : "left"];
              contentContext.onPointerGraceIntentChange({
                area: [
                  // Apply a bleed on clientX to ensure that our exit point is
                  // consistently within polygon bounds
                  { x: event2.clientX + bleed, y: event2.clientY },
                  { x: contentNearEdge, y: contentRect.top },
                  { x: contentFarEdge, y: contentRect.top },
                  { x: contentFarEdge, y: contentRect.bottom },
                  { x: contentNearEdge, y: contentRect.bottom }
                ],
                side
              });
              window.clearTimeout(pointerGraceTimerRef.current);
              pointerGraceTimerRef.current = window.setTimeout(
                () => contentContext.onPointerGraceIntentChange(null),
                300
              );
            } else {
              contentContext.onTriggerLeave(event2);
              if (event2.defaultPrevented)
                return;
              contentContext.onPointerGraceIntentChange(null);
            }
          })
        ),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event2) => {
          var _a2;
          const isTypingAhead = contentContext.searchRef.current !== "";
          if (props.disabled || isTypingAhead && event2.key === " ")
            return;
          if (SUB_OPEN_KEYS[rootContext.dir].includes(event2.key)) {
            context2.onOpenChange(true);
            (_a2 = context2.content) == null ? void 0 : _a2.focus();
            event2.preventDefault();
          }
        })
      }
    ) });
  }
);
MenuSubTrigger.displayName = SUB_TRIGGER_NAME;
var SUB_CONTENT_NAME = "MenuSubContent";
var MenuSubContent = React122.forwardRef(
  (props, forwardedRef) => {
    const portalContext = usePortalContext(CONTENT_NAME2, props.__scopeMenu);
    const { forceMount = portalContext.forceMount, ...subContentProps } = props;
    const context2 = useMenuContext(CONTENT_NAME2, props.__scopeMenu);
    const rootContext = useMenuRootContext(CONTENT_NAME2, props.__scopeMenu);
    const subContext = useMenuSubContext(SUB_CONTENT_NAME, props.__scopeMenu);
    const ref = React122.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    return (0, import_jsx_runtime13.jsx)(Collection3.Provider, { scope: props.__scopeMenu, children: (0, import_jsx_runtime13.jsx)(Presence, { present: forceMount || context2.open, children: (0, import_jsx_runtime13.jsx)(Collection3.Slot, { scope: props.__scopeMenu, children: (0, import_jsx_runtime13.jsx)(
      MenuContentImpl,
      {
        id: subContext.contentId,
        "aria-labelledby": subContext.triggerId,
        ...subContentProps,
        ref: composedRefs,
        align: "start",
        side: rootContext.dir === "rtl" ? "left" : "right",
        disableOutsidePointerEvents: false,
        disableOutsideScroll: false,
        trapFocus: false,
        onOpenAutoFocus: (event2) => {
          var _a2;
          if (rootContext.isUsingKeyboardRef.current)
            (_a2 = ref.current) == null ? void 0 : _a2.focus();
          event2.preventDefault();
        },
        onCloseAutoFocus: (event2) => event2.preventDefault(),
        onFocusOutside: composeEventHandlers(props.onFocusOutside, (event2) => {
          if (event2.target !== subContext.trigger)
            context2.onOpenChange(false);
        }),
        onEscapeKeyDown: composeEventHandlers(props.onEscapeKeyDown, (event2) => {
          rootContext.onClose();
          event2.preventDefault();
        }),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event2) => {
          var _a2;
          const isKeyDownInside = event2.currentTarget.contains(event2.target);
          const isCloseKey = SUB_CLOSE_KEYS[rootContext.dir].includes(event2.key);
          if (isKeyDownInside && isCloseKey) {
            context2.onOpenChange(false);
            (_a2 = subContext.trigger) == null ? void 0 : _a2.focus();
            event2.preventDefault();
          }
        })
      }
    ) }) }) });
  }
);
MenuSubContent.displayName = SUB_CONTENT_NAME;
function getOpenState(open) {
  return open ? "open" : "closed";
}
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function getCheckedState(checked) {
  return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}
function focusFirst3(candidates) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) {
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
      return;
    candidate.focus();
    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
      return;
  }
}
function wrapArray2(array, startIndex) {
  return array.map((_, index3) => array[(startIndex + index3) % array.length]);
}
function getNextMatch(values, search, currentMatch) {
  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);
  const normalizedSearch = isRepeated ? search[0] : search;
  const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
  let wrappedValues = wrapArray2(values, Math.max(currentMatchIndex, 0));
  const excludeCurrentMatch = normalizedSearch.length === 1;
  if (excludeCurrentMatch)
    wrappedValues = wrappedValues.filter((v) => v !== currentMatch);
  const nextMatch = wrappedValues.find(
    (value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase())
  );
  return nextMatch !== currentMatch ? nextMatch : void 0;
}
function isPointInPolygon(point, polygon) {
  const { x, y } = point;
  let inside = false;
  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    const ii = polygon[i];
    const jj = polygon[j];
    const xi = ii.x;
    const yi = ii.y;
    const xj = jj.x;
    const yj = jj.y;
    const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect)
      inside = !inside;
  }
  return inside;
}
function isPointerInGraceArea(event2, area) {
  if (!area)
    return false;
  const cursorPos = { x: event2.clientX, y: event2.clientY };
  return isPointInPolygon(cursorPos, area);
}
function whenMouse(handler) {
  return (event2) => event2.pointerType === "mouse" ? handler(event2) : void 0;
}
var Root32 = Menu;
var Anchor2 = MenuAnchor;
var Portal2 = MenuPortal;
var Content2 = MenuContent;
var Group = MenuGroup;
var Label2 = MenuLabel;
var Item2 = MenuItem;
var CheckboxItem = MenuCheckboxItem;
var RadioGroup = MenuRadioGroup;
var RadioItem = MenuRadioItem;
var ItemIndicator = MenuItemIndicator;
var Separator = MenuSeparator;
var Arrow22 = MenuArrow;
var SubTrigger = MenuSubTrigger;
var SubContent = MenuSubContent;

// node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var DROPDOWN_MENU_NAME = "DropdownMenu";
var [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(
  DROPDOWN_MENU_NAME,
  [createMenuScope]
);
var useMenuScope = createMenuScope();
var [DropdownMenuProvider, useDropdownMenuContext] = createDropdownMenuContext(DROPDOWN_MENU_NAME);
var DropdownMenu = (props) => {
  const {
    __scopeDropdownMenu,
    children: children2,
    dir,
    open: openProp,
    defaultOpen,
    onOpenChange,
    modal = true
  } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  const triggerRef = React123.useRef(null);
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen ?? false,
    onChange: onOpenChange,
    caller: DROPDOWN_MENU_NAME
  });
  return (0, import_jsx_runtime14.jsx)(
    DropdownMenuProvider,
    {
      scope: __scopeDropdownMenu,
      triggerId: useId(),
      triggerRef,
      contentId: useId(),
      open,
      onOpenChange: setOpen,
      onOpenToggle: React123.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
      modal,
      children: (0, import_jsx_runtime14.jsx)(Root32, { ...menuScope, open, onOpenChange: setOpen, dir, modal, children: children2 })
    }
  );
};
DropdownMenu.displayName = DROPDOWN_MENU_NAME;
var TRIGGER_NAME = "DropdownMenuTrigger";
var DropdownMenuTrigger = React123.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;
    const context2 = useDropdownMenuContext(TRIGGER_NAME, __scopeDropdownMenu);
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return (0, import_jsx_runtime14.jsx)(Anchor2, { asChild: true, ...menuScope, children: (0, import_jsx_runtime14.jsx)(
      Primitive.button,
      {
        type: "button",
        id: context2.triggerId,
        "aria-haspopup": "menu",
        "aria-expanded": context2.open,
        "aria-controls": context2.open ? context2.contentId : void 0,
        "data-state": context2.open ? "open" : "closed",
        "data-disabled": disabled ? "" : void 0,
        disabled,
        ...triggerProps,
        ref: composeRefs(forwardedRef, context2.triggerRef),
        onPointerDown: composeEventHandlers(props.onPointerDown, (event2) => {
          if (!disabled && event2.button === 0 && event2.ctrlKey === false) {
            context2.onOpenToggle();
            if (!context2.open)
              event2.preventDefault();
          }
        }),
        onKeyDown: composeEventHandlers(props.onKeyDown, (event2) => {
          if (disabled)
            return;
          if (["Enter", " "].includes(event2.key))
            context2.onOpenToggle();
          if (event2.key === "ArrowDown")
            context2.onOpenChange(true);
          if (["Enter", " ", "ArrowDown"].includes(event2.key))
            event2.preventDefault();
        })
      }
    ) });
  }
);
DropdownMenuTrigger.displayName = TRIGGER_NAME;
var PORTAL_NAME3 = "DropdownMenuPortal";
var DropdownMenuPortal = (props) => {
  const { __scopeDropdownMenu, ...portalProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return (0, import_jsx_runtime14.jsx)(Portal2, { ...menuScope, ...portalProps });
};
DropdownMenuPortal.displayName = PORTAL_NAME3;
var CONTENT_NAME3 = "DropdownMenuContent";
var DropdownMenuContent = React123.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...contentProps } = props;
    const context2 = useDropdownMenuContext(CONTENT_NAME3, __scopeDropdownMenu);
    const menuScope = useMenuScope(__scopeDropdownMenu);
    const hasInteractedOutsideRef = React123.useRef(false);
    return (0, import_jsx_runtime14.jsx)(
      Content2,
      {
        id: context2.contentId,
        "aria-labelledby": context2.triggerId,
        ...menuScope,
        ...contentProps,
        ref: forwardedRef,
        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event2) => {
          var _a2;
          if (!hasInteractedOutsideRef.current)
            (_a2 = context2.triggerRef.current) == null ? void 0 : _a2.focus();
          hasInteractedOutsideRef.current = false;
          event2.preventDefault();
        }),
        onInteractOutside: composeEventHandlers(props.onInteractOutside, (event2) => {
          const originalEvent = event2.detail.originalEvent;
          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
          if (!context2.modal || isRightClick)
            hasInteractedOutsideRef.current = true;
        }),
        style: {
          ...props.style,
          // re-namespace exposed content custom properties
          ...{
            "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
            "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
            "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
            "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
            "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
          }
        }
      }
    );
  }
);
DropdownMenuContent.displayName = CONTENT_NAME3;
var GROUP_NAME3 = "DropdownMenuGroup";
var DropdownMenuGroup = React123.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...groupProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return (0, import_jsx_runtime14.jsx)(Group, { ...menuScope, ...groupProps, ref: forwardedRef });
  }
);
DropdownMenuGroup.displayName = GROUP_NAME3;
var LABEL_NAME2 = "DropdownMenuLabel";
var DropdownMenuLabel = React123.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...labelProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return (0, import_jsx_runtime14.jsx)(Label2, { ...menuScope, ...labelProps, ref: forwardedRef });
  }
);
DropdownMenuLabel.displayName = LABEL_NAME2;
var ITEM_NAME3 = "DropdownMenuItem";
var DropdownMenuItem = React123.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...itemProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return (0, import_jsx_runtime14.jsx)(Item2, { ...menuScope, ...itemProps, ref: forwardedRef });
  }
);
DropdownMenuItem.displayName = ITEM_NAME3;
var CHECKBOX_ITEM_NAME2 = "DropdownMenuCheckboxItem";
var DropdownMenuCheckboxItem = React123.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...checkboxItemProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return (0, import_jsx_runtime14.jsx)(CheckboxItem, { ...menuScope, ...checkboxItemProps, ref: forwardedRef });
});
DropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME2;
var RADIO_GROUP_NAME2 = "DropdownMenuRadioGroup";
var DropdownMenuRadioGroup = React123.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...radioGroupProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return (0, import_jsx_runtime14.jsx)(RadioGroup, { ...menuScope, ...radioGroupProps, ref: forwardedRef });
});
DropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME2;
var RADIO_ITEM_NAME2 = "DropdownMenuRadioItem";
var DropdownMenuRadioItem = React123.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...radioItemProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return (0, import_jsx_runtime14.jsx)(RadioItem, { ...menuScope, ...radioItemProps, ref: forwardedRef });
});
DropdownMenuRadioItem.displayName = RADIO_ITEM_NAME2;
var INDICATOR_NAME = "DropdownMenuItemIndicator";
var DropdownMenuItemIndicator = React123.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...itemIndicatorProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return (0, import_jsx_runtime14.jsx)(ItemIndicator, { ...menuScope, ...itemIndicatorProps, ref: forwardedRef });
});
DropdownMenuItemIndicator.displayName = INDICATOR_NAME;
var SEPARATOR_NAME2 = "DropdownMenuSeparator";
var DropdownMenuSeparator = React123.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...separatorProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return (0, import_jsx_runtime14.jsx)(Separator, { ...menuScope, ...separatorProps, ref: forwardedRef });
});
DropdownMenuSeparator.displayName = SEPARATOR_NAME2;
var ARROW_NAME3 = "DropdownMenuArrow";
var DropdownMenuArrow = React123.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDropdownMenu, ...arrowProps } = props;
    const menuScope = useMenuScope(__scopeDropdownMenu);
    return (0, import_jsx_runtime14.jsx)(Arrow22, { ...menuScope, ...arrowProps, ref: forwardedRef });
  }
);
DropdownMenuArrow.displayName = ARROW_NAME3;
var SUB_TRIGGER_NAME2 = "DropdownMenuSubTrigger";
var DropdownMenuSubTrigger = React123.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subTriggerProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return (0, import_jsx_runtime14.jsx)(SubTrigger, { ...menuScope, ...subTriggerProps, ref: forwardedRef });
});
DropdownMenuSubTrigger.displayName = SUB_TRIGGER_NAME2;
var SUB_CONTENT_NAME2 = "DropdownMenuSubContent";
var DropdownMenuSubContent = React123.forwardRef((props, forwardedRef) => {
  const { __scopeDropdownMenu, ...subContentProps } = props;
  const menuScope = useMenuScope(__scopeDropdownMenu);
  return (0, import_jsx_runtime14.jsx)(
    SubContent,
    {
      ...menuScope,
      ...subContentProps,
      ref: forwardedRef,
      style: {
        ...props.style,
        // re-namespace exposed content custom properties
        ...{
          "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
          "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
          "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
        }
      }
    }
  );
});
DropdownMenuSubContent.displayName = SUB_CONTENT_NAME2;

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconMenu.mjs
var React124 = __toESM(require_react(), 1);
var IconMenu = (props) => {
  const { className, ...rest } = props;
  return React124.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React124.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React124.createElement("path", { d: "M3 18H21V16H3V18ZM3 13H21V11H3V13ZM3 6V8H21V6H3Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Menu/MenuButton.mjs
var React125 = __toESM(require_react(), 1);
var MenuButtonPrimitive = ({ ariaLabel, className, children: children2, isDisabled = false, isLoading, size: size4, style, type = "button", variation, testId, ...rest }, ref) => {
  const { propStyles, nonStyleProps } = useStyles(rest, style);
  const componentClasses = classNames(ComponentClassName.Button, classNameModifier(ComponentClassName.Button, size4), classNameModifier(ComponentClassName.Button, variation), className);
  return React125.createElement(Button, { ref, className: componentClasses, disabled: isDisabled || isLoading, isDisabled: isDisabled || isLoading, type, testId, "aria-label": ariaLabel, style: propStyles, ...nonStyleProps }, children2);
};
var MenuButton = primitiveWithForwardRef(MenuButtonPrimitive);
MenuButton.displayName = "MenuButton";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Menu/Menu.mjs
var MENU_TRIGGER_TEST_ID = "amplify-menu-trigger-test-id";
var MENU_ITEMS_GROUP_TEST_ID = "amplify-menu-items-group-test-id";
var MenuPrimitive = ({ menuAlign = "start", children: children2, className, isOpen, size: size4, trigger, triggerClassName, ariaLabel, onOpenChange, isDisabled, ...rest }, ref) => {
  const icons = useIcons("menu");
  return React126.createElement(
    DropdownMenu,
    { onOpenChange, open: isOpen },
    React126.createElement(DropdownMenuTrigger, { disabled: isDisabled, asChild: true }, trigger ?? React126.createElement(MenuButton, { ariaLabel, size: size4, testId: MENU_TRIGGER_TEST_ID, className: classNames(ComponentClassName.MenuTrigger, triggerClassName) }, (icons == null ? void 0 : icons.menu) ?? React126.createElement(IconMenu, null))),
    React126.createElement(
      DropdownMenuContent,
      { align: menuAlign, className: ComponentClassName.MenuWrapper },
      React126.createElement(ButtonGroup, { className: classNames(ComponentClassName.MenuContent, className), ref, isDisabled, size: size4, testId: MENU_ITEMS_GROUP_TEST_ID, ...rest }, children2)
    )
  );
};
var Menu2 = primitiveWithForwardRef(MenuPrimitive);
Menu2.displayName = "Menu";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Menu/MenuItem.mjs
var React127 = __toESM(require_react(), 1);
var MENU_ITEM_TEST_ID = "amplify-menu-item-test-id";
var MenuItemPrimitive = ({ children: children2, className, ...rest }, ref) => {
  return React127.createElement(
    DropdownMenuItem,
    { asChild: true, ref },
    React127.createElement(MenuButton, {
      className: classNames(ComponentClassName.MenuItem, className),
      testId: MENU_ITEM_TEST_ID,
      ...rest,
      variation: "menu"
      // ensures `menu` variation is not overwritten
    }, children2)
  );
};
var MenuItem2 = primitiveWithForwardRef(MenuItemPrimitive);
MenuItem2.displayName = "MenuItem";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Message/Message.mjs
var React134 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Message/MessageHeading.mjs
var React128 = __toESM(require_react(), 1);
var MessageHeadingPrimitive = ({ children: children2, className, ...rest }, ref) => {
  return React128.createElement(Flex, { className: classNames(ComponentClassName.MessageHeading, className), ref, ...rest }, children2);
};
var MessageHeading = primitiveWithForwardRef(MessageHeadingPrimitive);
MessageHeading.displayName = "MessageHeading";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Message/MessageIcon.mjs
var React130 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Message/useMessage.mjs
var React129 = __toESM(require_react(), 1);
var MessageContext = React129.createContext({
  dismissed: false,
  setDismissed: () => {
  }
});
var useMessage = () => React129.useContext(MessageContext);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Message/MessageIcon.mjs
var MessageIconPrimitive = ({ className, ...rest }, ref) => {
  const icons = useIcons("message");
  const { colorTheme } = useMessage();
  let icon2;
  switch (colorTheme) {
    case "info":
      icon2 = (icons == null ? void 0 : icons.info) ?? React130.createElement(IconInfo, null);
      break;
    case "error":
      icon2 = (icons == null ? void 0 : icons.error) ?? React130.createElement(IconError, null);
      break;
    case "warning":
      icon2 = (icons == null ? void 0 : icons.warning) ?? React130.createElement(IconWarning, null);
      break;
    case "success":
      icon2 = (icons == null ? void 0 : icons.success) ?? React130.createElement(IconCheckCircle, null);
      break;
  }
  return icon2 ? React130.createElement(View, { className: classNames(ComponentClassName.MessageIcon, className), "aria-hidden": "true", ref, ...rest }, icon2) : null;
};
var MessageIcon = primitiveWithForwardRef(MessageIconPrimitive);
MessageIcon.displayName = "MessageIcon";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Message/MessageDismiss.mjs
var React131 = __toESM(require_react(), 1);
var MessageDismissPrimitive = ({ onDismiss, dismissLabel, hasIcon = true, children: children2, className, ...rest }, ref) => {
  const { setDismissed } = useMessage();
  const icons = useIcons("message");
  const dismissMessage = React131.useCallback(() => {
    setDismissed(true);
    if (isFunction3(onDismiss)) {
      onDismiss();
    }
  }, [setDismissed, onDismiss]);
  return React131.createElement(
    Button,
    { variation: "link", colorTheme: "overlay", className: classNames(ComponentClassName.MessageDismiss, className), ref, onClick: dismissMessage, ...rest },
    hasIcon ? (icons == null ? void 0 : icons.close) ?? React131.createElement(IconClose, { "aria-hidden": "true" }) : null,
    children2 ? children2 : React131.createElement(VisuallyHidden, null, dismissLabel ? dismissLabel : ComponentText.Message.dismissLabel)
  );
};
var MessageDismiss = primitiveWithForwardRef(MessageDismissPrimitive);
MessageDismiss.displayName = "MessageContent";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Message/MessageContent.mjs
var React132 = __toESM(require_react(), 1);
var MessageContentPrimitive = ({ children: children2, className, ...rest }, ref) => {
  return React132.createElement(Flex, { className: classNames(ComponentClassName.MessageContent, className), ref, ...rest }, children2);
};
var MessageContent = primitiveWithForwardRef(MessageContentPrimitive);
MessageContent.displayName = "MessageContent";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Message/MessageContainer.mjs
var React133 = __toESM(require_react(), 1);
var MessageContainerPrimitive = ({ children: children2, className, colorTheme = "neutral", variation = "filled", ...rest }, ref) => {
  const [dismissed, setDismissed] = React133.useState(false);
  const value = React133.useMemo(() => ({
    colorTheme,
    dismissed,
    setDismissed
  }), [colorTheme, dismissed]);
  return React133.createElement(MessageContext.Provider, { value }, !dismissed ? React133.createElement(Flex, { className: classNames(ComponentClassName.Message, classNameModifier(ComponentClassName.Message, variation), classNameModifier(ComponentClassName.Message, colorTheme), className), ref, ...rest }, children2) : null);
};
var MessageContainer = primitiveWithForwardRef(MessageContainerPrimitive);
MessageContainer.displayName = "MessageContainer";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Message/Message.mjs
var MessagePrimitive = ({ children: children2, heading: heading2, dismissLabel, isDismissible, onDismiss, hasIcon = true, colorTheme = "neutral", variation = "filled", ...rest }, ref) => {
  return React134.createElement(
    MessageContainer,
    { colorTheme, variation, ref, ...rest },
    hasIcon ? React134.createElement(MessageIcon, null) : null,
    React134.createElement(
      MessageContent,
      null,
      heading2 ? React134.createElement(MessageHeading, null, heading2) : null,
      children2
    ),
    isDismissible ? React134.createElement(MessageDismiss, { onDismiss, dismissLabel }) : null
  );
};
var Message = primitiveWithForwardRef(MessagePrimitive);
Message.displayName = "Message";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/PasswordField/PasswordField.mjs
var React138 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/PasswordField/ShowPasswordButton.mjs
var React137 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconVisibilityOff.mjs
var React135 = __toESM(require_react(), 1);
var IconVisibilityOff = (props) => {
  const { className, ...rest } = props;
  return React135.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React135.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React135.createElement("path", { d: "M12 6.0002C15.79 6.0002 19.17 8.1302 20.82 11.5002C20.23 12.7202 19.4 13.7702 18.41 14.6202L19.82 16.0302C21.21 14.8002 22.31 13.2602 23 11.5002C21.27 7.1102 17 4.0002 12 4.0002C10.73 4.0002 9.51 4.2002 8.36 4.5702L10.01 6.2202C10.66 6.0902 11.32 6.0002 12 6.0002ZM10.93 7.14019L13 9.2102C13.57 9.4602 14.03 9.9202 14.28 10.4902L16.35 12.5602C16.43 12.2202 16.49 11.8602 16.49 11.4902C16.5 9.0102 14.48 7.0002 12 7.0002C11.63 7.0002 11.28 7.05019 10.93 7.14019ZM2.01 3.8702L4.69 6.5502C3.06 7.8302 1.77 9.5302 1 11.5002C2.73 15.8902 7 19.0002 12 19.0002C13.52 19.0002 14.98 18.7102 16.32 18.1802L19.74 21.6002L21.15 20.1902L3.42 2.4502L2.01 3.8702ZM9.51 11.3702L12.12 13.9802C12.08 13.9902 12.04 14.0002 12 14.0002C10.62 14.0002 9.5 12.8802 9.5 11.5002C9.5 11.4502 9.51 11.4202 9.51 11.3702V11.3702ZM6.11 7.97019L7.86 9.7202C7.63 10.2702 7.5 10.8702 7.5 11.5002C7.5 13.9802 9.52 16.0002 12 16.0002C12.63 16.0002 13.23 15.8702 13.77 15.6402L14.75 16.6202C13.87 16.8602 12.95 17.0002 12 17.0002C8.21 17.0002 4.83 14.8702 3.18 11.5002C3.88 10.0702 4.9 8.89019 6.11 7.97019Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconVisibility.mjs
var React136 = __toESM(require_react(), 1);
var IconVisibility = (props) => {
  const { className, ...rest } = props;
  return React136.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React136.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React136.createElement("path", { d: "M12 6C15.79 6 19.17 8.13 20.82 11.5C19.17 14.87 15.79 17 12 17C8.21 17 4.83 14.87 3.18 11.5C4.83 8.13 8.21 6 12 6ZM12 4C7 4 2.73 7.11 1 11.5C2.73 15.89 7 19 12 19C17 19 21.27 15.89 23 11.5C21.27 7.11 17 4 12 4ZM12 9C13.38 9 14.5 10.12 14.5 11.5C14.5 12.88 13.38 14 12 14C10.62 14 9.5 12.88 9.5 11.5C9.5 10.12 10.62 9 12 9ZM12 7C9.52 7 7.5 9.02 7.5 11.5C7.5 13.98 9.52 16 12 16C14.48 16 16.5 13.98 16.5 11.5C16.5 9.02 14.48 7 12 7Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/PasswordField/ShowPasswordButton.mjs
var { passwordIsHidden, passwordIsShown, showPassword } = ComponentText.PasswordField;
var ShowPasswordButtonPrimitive = ({ fieldType, passwordIsHiddenLabel = passwordIsHidden, passwordIsShownLabel = passwordIsShown, showPasswordButtonLabel = showPassword, size: size4, hasError, ...rest }, ref) => {
  const icons = useIcons("passwordField");
  const showPasswordButtonClass = classNames(ComponentClassName.FieldShowPassword, classNameModifierByFlag(ComponentClassName.FieldShowPassword, "error", hasError));
  const icon2 = fieldType === "password" ? (icons == null ? void 0 : icons.visibility) ?? React137.createElement(IconVisibility, { "aria-hidden": "true" }) : (icons == null ? void 0 : icons.visibilityOff) ?? React137.createElement(IconVisibilityOff, { "aria-hidden": "true" });
  return React137.createElement(
    Button,
    { "aria-checked": fieldType !== "password", ariaLabel: showPasswordButtonLabel, className: showPasswordButtonClass, colorTheme: hasError ? "error" : void 0, ref, role: "switch", size: size4, ...rest },
    React137.createElement(VisuallyHidden, { "aria-live": "polite" }, fieldType === "password" ? passwordIsHiddenLabel : passwordIsShownLabel),
    icon2
  );
};
var ShowPasswordButton = primitiveWithForwardRef(ShowPasswordButtonPrimitive);
ShowPasswordButton.displayName = "ShowPasswordButton";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/PasswordField/PasswordField.mjs
var PasswordFieldPrimitive = ({ autoComplete = "current-password", label, className, hideShowPassword = false, passwordIsHiddenLabel, passwordIsShownLabel, showPasswordButtonLabel, showPasswordButtonRef, size: size4, hasError, ...rest }, ref) => {
  const [type, setType] = React138.useState("password");
  const showPasswordOnClick = React138.useCallback(() => {
    if (type === "password") {
      setType("text");
    } else {
      setType("password");
    }
  }, [setType, type]);
  return React138.createElement(TextField, { autoComplete, outerEndComponent: hideShowPassword ? null : React138.createElement(ShowPasswordButton, { fieldType: type, onClick: showPasswordOnClick, passwordIsHiddenLabel, passwordIsShownLabel, ref: showPasswordButtonRef, size: size4, showPasswordButtonLabel, hasError }), size: size4, type, label, className: classNames(ComponentClassName.PasswordField, className), ref, hasError, ...rest });
};
var PasswordField = primitiveWithForwardRef(PasswordFieldPrimitive);
PasswordField.displayName = "PasswordField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/PhoneNumberField/PhoneNumberField.mjs
var React142 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/PhoneNumberField/DialCodeSelect.mjs
var React141 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SelectField/SelectField.mjs
var React140 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Select/Select.mjs
var React139 = __toESM(require_react(), 1);
var SelectPrimitive = ({ autoComplete, className, size: size4, variation, value, defaultValue: defaultValue2, hasError, icon: icon2, iconColor, children: children2, placeholder: placeholder2, isDisabled, isRequired, isMultiple = false, selectSize = 1, ...rest }, ref) => {
  const DEFAULT_PLACEHOLDER_VALUE = "";
  const shouldSetDefaultPlaceholderValue = value === void 0 && defaultValue2 === void 0 && placeholder2;
  const isExpanded = isMultiple || selectSize > 1;
  const componentClasses = classNames(ComponentClassName.Select, ComponentClassName.FieldGroupControl, classNameModifier(ComponentClassName.Select, size4), classNameModifier(ComponentClassName.Select, variation), classNameModifierByFlag(ComponentClassName.Select, "error", hasError), classNameModifierByFlag(ComponentClassName.Select, "expanded", isExpanded), className);
  const icons = useIcons("select");
  const { isFieldsetDisabled } = useFieldset();
  return React139.createElement(
    View,
    { className: ComponentClassName.SelectWrapper },
    React139.createElement(
      View,
      { "aria-invalid": hasError, as: "select", autoComplete, value, defaultValue: shouldSetDefaultPlaceholderValue ? DEFAULT_PLACEHOLDER_VALUE : defaultValue2, isDisabled: isFieldsetDisabled ? isFieldsetDisabled : isDisabled, multiple: isMultiple, size: selectSize, required: isRequired, className: componentClasses, ref, ...rest },
      placeholder2 && React139.createElement("option", { value: "" }, placeholder2),
      children2
    ),
    isExpanded ? null : React139.createElement(Flex, { className: classNames(ComponentClassName.SelectIcon, classNameModifier(ComponentClassName.SelectIcon, size4)), color: iconColor, "aria-hidden": "true" }, icon2 ?? (icons == null ? void 0 : icons.expand) ?? React139.createElement(IconExpandMore, null))
  );
};
var Select = primitiveWithForwardRef(SelectPrimitive);
Select.displayName = "Select";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SelectField/SelectField.mjs
var selectFieldChildren = ({ children: children2, options }) => {
  if (children2) {
    if (options == null ? void 0 : options.length) {
      console.warn("Amplify UI: <SelectField> component  defaults to rendering children over `options`. When using the `options` prop, omit children.");
    }
    return children2;
  }
  return options == null ? void 0 : options.map((option, index3) => React140.createElement("option", { label: option, value: option, key: `${option}-${index3}` }, option));
};
var SelectFieldPrimitive = (props, ref) => {
  const { children: children2, className, descriptiveText, errorMessage, hasError = false, id, label, labelHidden = false, options, size: size4, testId, inputStyles, ..._rest } = props;
  const fieldId = useStableId(id);
  const stableId = useStableId();
  const descriptionId = descriptiveText ? getUniqueComponentId(stableId, DESCRIPTION_SUFFIX) : void 0;
  const errorId = hasError ? getUniqueComponentId(stableId, ERROR_SUFFIX) : void 0;
  const ariaDescribedBy = createSpaceSeparatedIds([errorId, descriptionId]);
  const { styleProps, rest } = splitPrimitiveProps(_rest);
  return React140.createElement(
    Flex,
    { className: classNames(ComponentClassName.Field, classNameModifier(ComponentClassName.Field, size4), ComponentClassName.SelectField, className), testId, ...styleProps },
    React140.createElement(Label, { htmlFor: fieldId, visuallyHidden: labelHidden }, label),
    React140.createElement(FieldDescription, { id: descriptionId, labelHidden, descriptiveText }),
    React140.createElement(Select, { "aria-describedby": ariaDescribedBy, hasError, id: fieldId, ref, size: size4, ...rest, ...inputStyles }, selectFieldChildren({ children: children2, options })),
    React140.createElement(FieldErrorMessage, { id: errorId, hasError, errorMessage })
  );
};
var SelectField = primitiveWithForwardRef(SelectFieldPrimitive);
SelectField.displayName = "SelectField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/PhoneNumberField/DialCodeSelect.mjs
var DialCodeSelectPrimitive = ({ className, dialCodeList, isReadOnly, ...props }, ref) => {
  const dialList = dialCodeList ?? countryDialCodes;
  const dialCodeOptions = React141.useMemo(() => dialList.map((dialCode) => (
    // Regarding the `disabled` attribute, see comment in SelectField below
    React141.createElement("option", { key: dialCode, value: dialCode, disabled: isReadOnly }, dialCode)
  )), [dialList, isReadOnly]);
  return React141.createElement(
    SelectField,
    { "aria-disabled": isReadOnly, autoComplete: "tel-country-code", className: classNames(ComponentClassName.CountryCodeSelect, ComponentClassName.DialCodeSelect, className), labelHidden: true, ref, ...props },
    dialCodeOptions
  );
};
var DialCodeSelect = primitiveWithForwardRef(DialCodeSelectPrimitive);
DialCodeSelect.displayName = "DialCodeSelect";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/PhoneNumberField/PhoneNumberField.mjs
var PhoneNumberFieldPrimitive = ({ autoComplete = "tel-national", className, defaultDialCode, dialCodeLabel = ComponentText.PhoneNumberField.countryCodeLabel, dialCodeList, dialCodeName, dialCodeRef, hasError, isDisabled, isReadOnly, onDialCodeChange, onInput, size: size4, variation, ...rest }, ref) => {
  return React142.createElement(TextField, { outerStartComponent: React142.createElement(DialCodeSelect, { defaultValue: defaultDialCode, dialCodeList, className, hasError, isDisabled, isReadOnly, label: dialCodeLabel, name: dialCodeName, onChange: onDialCodeChange, ref: dialCodeRef, size: size4, variation }), autoComplete, className: classNames(ComponentClassName.PhoneNumberField, className), hasError, isDisabled, isReadOnly, onInput, ref, size: size4, type: "tel", variation, ...rest });
};
var PhoneNumberField = primitiveWithForwardRef(PhoneNumberFieldPrimitive);
PhoneNumberField.displayName = "PhoneNumberField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Placeholder/Placeholder.mjs
var React143 = __toESM(require_react(), 1);
var CSS_VAR_START_COLOR = "--amplify-components-placeholder-start-color";
var CSS_VAR_END_COLOR = "--amplify-components-placeholder-end-color";
var PlaceholderPrimitive = ({ className, children: children2, endColor, isLoaded, size: size4, startColor, ...rest }, ref) => {
  if (isLoaded) {
    return React143.createElement(React143.Fragment, null, children2);
  }
  return React143.createElement(View, { className: classNames(ComponentClassName.Placeholder, classNameModifier(ComponentClassName.Placeholder, size4), className), ref, style: {
    [CSS_VAR_START_COLOR]: startColor && `${startColor}`,
    [CSS_VAR_END_COLOR]: endColor && `${endColor}`
  }, ...rest });
};
var Placeholder = primitiveWithForwardRef(PlaceholderPrimitive);
Placeholder.displayName = "Placeholder";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Radio/Radio.mjs
var React144 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/RadioGroupField/context.mjs
var import_react33 = __toESM(require_react(), 1);
var defaultValue = { name: "default" };
var RadioGroupContext = import_react33.default.createContext(defaultValue);
var useRadioGroupContext2 = () => {
  return (0, import_react33.useContext)(RadioGroupContext);
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Radio/Radio.mjs
var RadioPrimitive = ({ children: children2, className, id, isDisabled = false, testId, value, labelPosition: radioLabelPosition, ...rest }, ref) => {
  const { currentValue, defaultValue: defaultValue2, name: name2, hasError, isGroupDisabled = false, isRequired, isReadOnly, onChange, size: size4, labelPosition: groupLabelPosition } = useRadioGroupContext2();
  const { isFieldsetDisabled } = useFieldset();
  const shouldBeDisabled = isFieldsetDisabled ? isFieldsetDisabled : isGroupDisabled || isDisabled || isReadOnly && defaultValue2 !== value;
  const checked = currentValue !== void 0 ? value === currentValue : void 0;
  const defaultChecked = defaultValue2 !== void 0 ? value === defaultValue2 : void 0;
  const labelPosition = radioLabelPosition ? radioLabelPosition : groupLabelPosition;
  return React144.createElement(
    Flex,
    { as: "label", className: classNames(ComponentClassName.Radio, classNameModifierByFlag(ComponentClassName.Radio, `disabled`, shouldBeDisabled), labelPosition ? `amplify-label-${labelPosition}` : null, className) },
    children2 && React144.createElement(Text, { as: "span", className: classNames(ComponentClassName.RadioLabel, classNameModifierByFlag(ComponentClassName.RadioLabel, `disabled`, shouldBeDisabled)) }, children2),
    React144.createElement(Input, { checked, className: classNames(ComponentClassName.VisuallyHidden, ComponentClassName.RadioInput), defaultChecked, hasError, id, isDisabled: shouldBeDisabled, isReadOnly, isRequired, onChange, ref, type: "radio", name: name2, value, ...rest }),
    React144.createElement(Flex, { "aria-hidden": "true", as: "span", className: classNames(ComponentClassName.RadioButton, classNameModifier(ComponentClassName.RadioButton, size4)), testId })
  );
};
var Radio = primitiveWithForwardRef(RadioPrimitive);
Radio.displayName = "Radio";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/RadioGroupField/RadioGroupField.mjs
var React145 = __toESM(require_react(), 1);
var RadioGroupFieldPrimitive = ({ children: children2, className, defaultValue: defaultValue2, descriptiveText, errorMessage, hasError = false, id, isDisabled, isRequired, isReadOnly, legend, legendHidden = false, labelPosition, onChange, name: name2, size: size4, testId, value, variation, ...rest }, ref) => {
  const fieldId = useStableId(id);
  const stableId = useStableId();
  const descriptionId = descriptiveText ? getUniqueComponentId(stableId, DESCRIPTION_SUFFIX) : void 0;
  const errorId = hasError ? getUniqueComponentId(stableId, ERROR_SUFFIX) : void 0;
  const ariaDescribedBy = createSpaceSeparatedIds([errorId, descriptionId]);
  const radioGroupTestId = getUniqueComponentId(testId, ComponentClassName.RadioGroup);
  const radioGroupContextValue = React145.useMemo(() => ({
    currentValue: value,
    defaultValue: defaultValue2,
    hasError,
    isRequired,
    isReadOnly,
    isGroupDisabled: isDisabled,
    onChange,
    size: size4,
    name: name2,
    labelPosition
  }), [
    defaultValue2,
    hasError,
    isDisabled,
    isRequired,
    isReadOnly,
    onChange,
    size4,
    name2,
    value,
    labelPosition
  ]);
  return React145.createElement(
    Fieldset,
    { className: classNames(ComponentClassName.Field, classNameModifier(ComponentClassName.Field, size4), ComponentClassName.RadioGroupField, className), isDisabled, legend, legendHidden, ref, role: "radiogroup", size: size4, testId, variation, ...rest },
    React145.createElement(FieldDescription, { id: descriptionId, labelHidden: legendHidden, descriptiveText }),
    React145.createElement(
      Flex,
      { "aria-describedby": ariaDescribedBy, className: ComponentClassName.RadioGroup, id: fieldId, testId: radioGroupTestId },
      React145.createElement(RadioGroupContext.Provider, { value: radioGroupContextValue }, children2)
    ),
    React145.createElement(FieldErrorMessage, { id: errorId, hasError, errorMessage })
  );
};
var RadioGroupField = primitiveWithForwardRef(RadioGroupFieldPrimitive);
RadioGroupField.displayName = "RadioGroupField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Rating/Rating.mjs
var React149 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconStar.mjs
var React146 = __toESM(require_react(), 1);
var IconStar = (props) => {
  const { className, ...rest } = props;
  return React146.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React146.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React146.createElement("path", { d: "M12 17.27L18.18 21L16.54 13.97L22 9.24L14.81 8.63L12 2L9.19 8.63L2 9.24L7.46 13.97L5.82 21L12 17.27Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Rating/utils.mjs
var isIconFilled = (currentIconIndex, ratingValue) => {
  if (currentIconIndex <= ratingValue)
    return true;
  return false;
};
var isIconEmpty = (currentIconIndex, ratingValue) => {
  if (currentIconIndex - 1 >= ratingValue)
    return true;
  return false;
};
var isIconMixed = (currentIconIndex, ratingValue) => {
  if (currentIconIndex > ratingValue && currentIconIndex - 1 < ratingValue) {
    return true;
  }
  return false;
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Rating/RatingIcon.mjs
var React147 = __toESM(require_react(), 1);
var RatingIcon = ({ icon: icon2, fill, className }) => {
  return React147.createElement(
    View,
    { as: "span", className: ComponentClassName.RatingItem, "aria-hidden": "true" },
    React147.createElement(View, { as: "span", className: classNames(ComponentClassName.RatingIcon, className), color: fill }, icon2)
  );
};
RatingIcon.displayName = "RatingIcon";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Rating/RatingMixedIcon.mjs
var React148 = __toESM(require_react(), 1);
var RatingMixedIcon = ({ emptyColor, emptyIcon, fillColor, fillIcon, value }) => {
  const widthPercentage = `${value % 1 * 100}%`;
  return React148.createElement(
    View,
    { as: "span", className: ComponentClassName.RatingItem, "aria-hidden": "true" },
    React148.createElement(View, { as: "span", className: classNames(ComponentClassName.RatingIcon, classNameModifier(ComponentClassName.RatingIcon, "empty")), color: emptyColor }, emptyIcon),
    React148.createElement(View, { as: "span", className: classNames(ComponentClassName.RatingIcon, classNameModifier(ComponentClassName.RatingIcon, "filled")), width: widthPercentage, color: fillColor }, fillIcon)
  );
};
RatingMixedIcon.displayName = "RatingMixedIcon";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Rating/Rating.mjs
var RATING_DEFAULT_MAX_VALUE = 5;
var RATING_DEFAULT_VALUE = 0;
var RatingPrimitive = ({ className, emptyColor, emptyIcon, fillColor, icon: icon2, maxValue = RATING_DEFAULT_MAX_VALUE, size: size4, value = RATING_DEFAULT_VALUE, ...rest }, ref) => {
  const icons = useIcons("rating");
  const filledIcon = icon2 ?? (icons == null ? void 0 : icons.filled) ?? React149.createElement(IconStar, null);
  const _emptyIcon = emptyIcon ?? icon2 ?? (icons == null ? void 0 : icons.empty) ?? React149.createElement(IconStar, null);
  const items = new Array(Math.ceil(maxValue)).fill(1).map((_, index3) => {
    const currentIconIndex = index3 + 1;
    if (isIconFilled(currentIconIndex, value))
      return React149.createElement(RatingIcon, { key: index3.toString(), icon: filledIcon, fill: fillColor, className: classNameModifier(ComponentClassName.RatingIcon, "filled") });
    if (isIconEmpty(currentIconIndex, value))
      return React149.createElement(RatingIcon, { key: index3.toString(), icon: _emptyIcon, fill: emptyColor, className: classNameModifier(ComponentClassName.RatingIcon, "empty") });
    if (isIconMixed(currentIconIndex, value))
      return React149.createElement(RatingMixedIcon, { key: index3.toString(), fillIcon: filledIcon, emptyIcon: _emptyIcon, value, fillColor, emptyColor });
  });
  return React149.createElement(
    Flex,
    { className: classNames(ComponentClassName.Rating, classNameModifier(ComponentClassName.Rating, size4), className), ref, ...rest },
    items,
    React149.createElement(
      VisuallyHidden,
      null,
      value,
      " out of ",
      maxValue,
      " rating"
    )
  );
};
var Rating = primitiveWithForwardRef(RatingPrimitive);
Rating.displayName = "Rating";

// node_modules/@radix-ui/react-slider/dist/index.mjs
var React151 = __toESM(require_react(), 1);

// node_modules/@radix-ui/number/dist/index.mjs
function clamp2(value, [min3, max3]) {
  return Math.min(max3, Math.max(min3, value));
}

// node_modules/@radix-ui/react-use-previous/dist/index.mjs
var React150 = __toESM(require_react(), 1);
function usePrevious(value) {
  const ref = React150.useRef({ value, previous: value });
  return React150.useMemo(() => {
    if (ref.current.value !== value) {
      ref.current.previous = ref.current.value;
      ref.current.value = value;
    }
    return ref.current.previous;
  }, [value]);
}

// node_modules/@radix-ui/react-slider/dist/index.mjs
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var PAGE_KEYS = ["PageUp", "PageDown"];
var ARROW_KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
var BACK_KEYS = {
  "from-left": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
  "from-right": ["Home", "PageDown", "ArrowDown", "ArrowRight"],
  "from-bottom": ["Home", "PageDown", "ArrowDown", "ArrowLeft"],
  "from-top": ["Home", "PageDown", "ArrowUp", "ArrowLeft"]
};
var SLIDER_NAME = "Slider";
var [Collection4, useCollection3, createCollectionScope3] = createCollection(SLIDER_NAME);
var [createSliderContext, createSliderScope] = createContextScope(SLIDER_NAME, [
  createCollectionScope3
]);
var [SliderProvider, useSliderContext] = createSliderContext(SLIDER_NAME);
var Slider = React151.forwardRef(
  (props, forwardedRef) => {
    const {
      name: name2,
      min: min3 = 0,
      max: max3 = 100,
      step = 1,
      orientation = "horizontal",
      disabled = false,
      minStepsBetweenThumbs = 0,
      defaultValue: defaultValue2 = [min3],
      value,
      onValueChange = () => {
      },
      onValueCommit = () => {
      },
      inverted = false,
      form,
      ...sliderProps
    } = props;
    const thumbRefs = React151.useRef(/* @__PURE__ */ new Set());
    const valueIndexToChangeRef = React151.useRef(0);
    const isHorizontal = orientation === "horizontal";
    const SliderOrientation = isHorizontal ? SliderHorizontal : SliderVertical;
    const [values = [], setValues] = useControllableState({
      prop: value,
      defaultProp: defaultValue2,
      onChange: (value2) => {
        var _a2;
        const thumbs = [...thumbRefs.current];
        (_a2 = thumbs[valueIndexToChangeRef.current]) == null ? void 0 : _a2.focus();
        onValueChange(value2);
      }
    });
    const valuesBeforeSlideStartRef = React151.useRef(values);
    function handleSlideStart(value2) {
      const closestIndex = getClosestValueIndex(values, value2);
      updateValues(value2, closestIndex);
    }
    function handleSlideMove(value2) {
      updateValues(value2, valueIndexToChangeRef.current);
    }
    function handleSlideEnd() {
      const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];
      const nextValue = values[valueIndexToChangeRef.current];
      const hasChanged = nextValue !== prevValue;
      if (hasChanged)
        onValueCommit(values);
    }
    function updateValues(value2, atIndex, { commit } = { commit: false }) {
      const decimalCount = getDecimalCount(step);
      const snapToStep = roundValue(Math.round((value2 - min3) / step) * step + min3, decimalCount);
      const nextValue = clamp2(snapToStep, [min3, max3]);
      setValues((prevValues = []) => {
        const nextValues = getNextSortedValues(prevValues, nextValue, atIndex);
        if (hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {
          valueIndexToChangeRef.current = nextValues.indexOf(nextValue);
          const hasChanged = String(nextValues) !== String(prevValues);
          if (hasChanged && commit)
            onValueCommit(nextValues);
          return hasChanged ? nextValues : prevValues;
        } else {
          return prevValues;
        }
      });
    }
    return (0, import_jsx_runtime15.jsx)(
      SliderProvider,
      {
        scope: props.__scopeSlider,
        name: name2,
        disabled,
        min: min3,
        max: max3,
        valueIndexToChangeRef,
        thumbs: thumbRefs.current,
        values,
        orientation,
        form,
        children: (0, import_jsx_runtime15.jsx)(Collection4.Provider, { scope: props.__scopeSlider, children: (0, import_jsx_runtime15.jsx)(Collection4.Slot, { scope: props.__scopeSlider, children: (0, import_jsx_runtime15.jsx)(
          SliderOrientation,
          {
            "aria-disabled": disabled,
            "data-disabled": disabled ? "" : void 0,
            ...sliderProps,
            ref: forwardedRef,
            onPointerDown: composeEventHandlers(sliderProps.onPointerDown, () => {
              if (!disabled)
                valuesBeforeSlideStartRef.current = values;
            }),
            min: min3,
            max: max3,
            inverted,
            onSlideStart: disabled ? void 0 : handleSlideStart,
            onSlideMove: disabled ? void 0 : handleSlideMove,
            onSlideEnd: disabled ? void 0 : handleSlideEnd,
            onHomeKeyDown: () => !disabled && updateValues(min3, 0, { commit: true }),
            onEndKeyDown: () => !disabled && updateValues(max3, values.length - 1, { commit: true }),
            onStepKeyDown: ({ event: event2, direction: stepDirection }) => {
              if (!disabled) {
                const isPageKey = PAGE_KEYS.includes(event2.key);
                const isSkipKey = isPageKey || event2.shiftKey && ARROW_KEYS.includes(event2.key);
                const multiplier = isSkipKey ? 10 : 1;
                const atIndex = valueIndexToChangeRef.current;
                const value2 = values[atIndex];
                const stepInDirection = step * multiplier * stepDirection;
                updateValues(value2 + stepInDirection, atIndex, { commit: true });
              }
            }
          }
        ) }) })
      }
    );
  }
);
Slider.displayName = SLIDER_NAME;
var [SliderOrientationProvider, useSliderOrientationContext] = createSliderContext(SLIDER_NAME, {
  startEdge: "left",
  endEdge: "right",
  size: "width",
  direction: 1
});
var SliderHorizontal = React151.forwardRef(
  (props, forwardedRef) => {
    const {
      min: min3,
      max: max3,
      dir,
      inverted,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const [slider, setSlider] = React151.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setSlider(node));
    const rectRef = React151.useRef(void 0);
    const direction = useDirection(dir);
    const isDirectionLTR = direction === "ltr";
    const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;
    function getValueFromPointer(pointerPosition) {
      const rect = rectRef.current || slider.getBoundingClientRect();
      const input2 = [0, rect.width];
      const output = isSlidingFromLeft ? [min3, max3] : [max3, min3];
      const value = linearScale(input2, output);
      rectRef.current = rect;
      return value(pointerPosition - rect.left);
    }
    return (0, import_jsx_runtime15.jsx)(
      SliderOrientationProvider,
      {
        scope: props.__scopeSlider,
        startEdge: isSlidingFromLeft ? "left" : "right",
        endEdge: isSlidingFromLeft ? "right" : "left",
        direction: isSlidingFromLeft ? 1 : -1,
        size: "width",
        children: (0, import_jsx_runtime15.jsx)(
          SliderImpl,
          {
            dir: direction,
            "data-orientation": "horizontal",
            ...sliderProps,
            ref: composedRefs,
            style: {
              ...sliderProps.style,
              ["--radix-slider-thumb-transform"]: "translateX(-50%)"
            },
            onSlideStart: (event2) => {
              const value = getValueFromPointer(event2.clientX);
              onSlideStart == null ? void 0 : onSlideStart(value);
            },
            onSlideMove: (event2) => {
              const value = getValueFromPointer(event2.clientX);
              onSlideMove == null ? void 0 : onSlideMove(value);
            },
            onSlideEnd: () => {
              rectRef.current = void 0;
              onSlideEnd == null ? void 0 : onSlideEnd();
            },
            onStepKeyDown: (event2) => {
              const slideDirection = isSlidingFromLeft ? "from-left" : "from-right";
              const isBackKey = BACK_KEYS[slideDirection].includes(event2.key);
              onStepKeyDown == null ? void 0 : onStepKeyDown({ event: event2, direction: isBackKey ? -1 : 1 });
            }
          }
        )
      }
    );
  }
);
var SliderVertical = React151.forwardRef(
  (props, forwardedRef) => {
    const {
      min: min3,
      max: max3,
      inverted,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const sliderRef = React151.useRef(null);
    const ref = useComposedRefs(forwardedRef, sliderRef);
    const rectRef = React151.useRef(void 0);
    const isSlidingFromBottom = !inverted;
    function getValueFromPointer(pointerPosition) {
      const rect = rectRef.current || sliderRef.current.getBoundingClientRect();
      const input2 = [0, rect.height];
      const output = isSlidingFromBottom ? [max3, min3] : [min3, max3];
      const value = linearScale(input2, output);
      rectRef.current = rect;
      return value(pointerPosition - rect.top);
    }
    return (0, import_jsx_runtime15.jsx)(
      SliderOrientationProvider,
      {
        scope: props.__scopeSlider,
        startEdge: isSlidingFromBottom ? "bottom" : "top",
        endEdge: isSlidingFromBottom ? "top" : "bottom",
        size: "height",
        direction: isSlidingFromBottom ? 1 : -1,
        children: (0, import_jsx_runtime15.jsx)(
          SliderImpl,
          {
            "data-orientation": "vertical",
            ...sliderProps,
            ref,
            style: {
              ...sliderProps.style,
              ["--radix-slider-thumb-transform"]: "translateY(50%)"
            },
            onSlideStart: (event2) => {
              const value = getValueFromPointer(event2.clientY);
              onSlideStart == null ? void 0 : onSlideStart(value);
            },
            onSlideMove: (event2) => {
              const value = getValueFromPointer(event2.clientY);
              onSlideMove == null ? void 0 : onSlideMove(value);
            },
            onSlideEnd: () => {
              rectRef.current = void 0;
              onSlideEnd == null ? void 0 : onSlideEnd();
            },
            onStepKeyDown: (event2) => {
              const slideDirection = isSlidingFromBottom ? "from-bottom" : "from-top";
              const isBackKey = BACK_KEYS[slideDirection].includes(event2.key);
              onStepKeyDown == null ? void 0 : onStepKeyDown({ event: event2, direction: isBackKey ? -1 : 1 });
            }
          }
        )
      }
    );
  }
);
var SliderImpl = React151.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSlider,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onHomeKeyDown,
      onEndKeyDown,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const context2 = useSliderContext(SLIDER_NAME, __scopeSlider);
    return (0, import_jsx_runtime15.jsx)(
      Primitive.span,
      {
        ...sliderProps,
        ref: forwardedRef,
        onKeyDown: composeEventHandlers(props.onKeyDown, (event2) => {
          if (event2.key === "Home") {
            onHomeKeyDown(event2);
            event2.preventDefault();
          } else if (event2.key === "End") {
            onEndKeyDown(event2);
            event2.preventDefault();
          } else if (PAGE_KEYS.concat(ARROW_KEYS).includes(event2.key)) {
            onStepKeyDown(event2);
            event2.preventDefault();
          }
        }),
        onPointerDown: composeEventHandlers(props.onPointerDown, (event2) => {
          const target = event2.target;
          target.setPointerCapture(event2.pointerId);
          event2.preventDefault();
          if (context2.thumbs.has(target)) {
            target.focus();
          } else {
            onSlideStart(event2);
          }
        }),
        onPointerMove: composeEventHandlers(props.onPointerMove, (event2) => {
          const target = event2.target;
          if (target.hasPointerCapture(event2.pointerId))
            onSlideMove(event2);
        }),
        onPointerUp: composeEventHandlers(props.onPointerUp, (event2) => {
          const target = event2.target;
          if (target.hasPointerCapture(event2.pointerId)) {
            target.releasePointerCapture(event2.pointerId);
            onSlideEnd(event2);
          }
        })
      }
    );
  }
);
var TRACK_NAME = "SliderTrack";
var SliderTrack = React151.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSlider, ...trackProps } = props;
    const context2 = useSliderContext(TRACK_NAME, __scopeSlider);
    return (0, import_jsx_runtime15.jsx)(
      Primitive.span,
      {
        "data-disabled": context2.disabled ? "" : void 0,
        "data-orientation": context2.orientation,
        ...trackProps,
        ref: forwardedRef
      }
    );
  }
);
SliderTrack.displayName = TRACK_NAME;
var RANGE_NAME = "SliderRange";
var SliderRange = React151.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSlider, ...rangeProps } = props;
    const context2 = useSliderContext(RANGE_NAME, __scopeSlider);
    const orientation = useSliderOrientationContext(RANGE_NAME, __scopeSlider);
    const ref = React151.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const valuesCount = context2.values.length;
    const percentages = context2.values.map(
      (value) => convertValueToPercentage(value, context2.min, context2.max)
    );
    const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;
    const offsetEnd = 100 - Math.max(...percentages);
    return (0, import_jsx_runtime15.jsx)(
      Primitive.span,
      {
        "data-orientation": context2.orientation,
        "data-disabled": context2.disabled ? "" : void 0,
        ...rangeProps,
        ref: composedRefs,
        style: {
          ...props.style,
          [orientation.startEdge]: offsetStart + "%",
          [orientation.endEdge]: offsetEnd + "%"
        }
      }
    );
  }
);
SliderRange.displayName = RANGE_NAME;
var THUMB_NAME = "SliderThumb";
var SliderThumb = React151.forwardRef(
  (props, forwardedRef) => {
    const getItems = useCollection3(props.__scopeSlider);
    const [thumb, setThumb] = React151.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));
    const index3 = React151.useMemo(
      () => thumb ? getItems().findIndex((item) => item.ref.current === thumb) : -1,
      [getItems, thumb]
    );
    return (0, import_jsx_runtime15.jsx)(SliderThumbImpl, { ...props, ref: composedRefs, index: index3 });
  }
);
var SliderThumbImpl = React151.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSlider, index: index3, name: name2, ...thumbProps } = props;
    const context2 = useSliderContext(THUMB_NAME, __scopeSlider);
    const orientation = useSliderOrientationContext(THUMB_NAME, __scopeSlider);
    const [thumb, setThumb] = React151.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setThumb(node));
    const isFormControl = thumb ? context2.form || !!thumb.closest("form") : true;
    const size4 = useSize(thumb);
    const value = context2.values[index3];
    const percent = value === void 0 ? 0 : convertValueToPercentage(value, context2.min, context2.max);
    const label = getLabel(index3, context2.values.length);
    const orientationSize = size4 == null ? void 0 : size4[orientation.size];
    const thumbInBoundsOffset = orientationSize ? getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;
    React151.useEffect(() => {
      if (thumb) {
        context2.thumbs.add(thumb);
        return () => {
          context2.thumbs.delete(thumb);
        };
      }
    }, [thumb, context2.thumbs]);
    return (0, import_jsx_runtime15.jsxs)(
      "span",
      {
        style: {
          transform: "var(--radix-slider-thumb-transform)",
          position: "absolute",
          [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`
        },
        children: [
          (0, import_jsx_runtime15.jsx)(Collection4.ItemSlot, { scope: props.__scopeSlider, children: (0, import_jsx_runtime15.jsx)(
            Primitive.span,
            {
              role: "slider",
              "aria-label": props["aria-label"] || label,
              "aria-valuemin": context2.min,
              "aria-valuenow": value,
              "aria-valuemax": context2.max,
              "aria-orientation": context2.orientation,
              "data-orientation": context2.orientation,
              "data-disabled": context2.disabled ? "" : void 0,
              tabIndex: context2.disabled ? void 0 : 0,
              ...thumbProps,
              ref: composedRefs,
              style: value === void 0 ? { display: "none" } : props.style,
              onFocus: composeEventHandlers(props.onFocus, () => {
                context2.valueIndexToChangeRef.current = index3;
              })
            }
          ) }),
          isFormControl && (0, import_jsx_runtime15.jsx)(
            SliderBubbleInput,
            {
              name: name2 ?? (context2.name ? context2.name + (context2.values.length > 1 ? "[]" : "") : void 0),
              form: context2.form,
              value
            },
            index3
          )
        ]
      }
    );
  }
);
SliderThumb.displayName = THUMB_NAME;
var BUBBLE_INPUT_NAME = "RadioBubbleInput";
var SliderBubbleInput = React151.forwardRef(
  ({ __scopeSlider, value, ...props }, forwardedRef) => {
    const ref = React151.useRef(null);
    const composedRefs = useComposedRefs(ref, forwardedRef);
    const prevValue = usePrevious(value);
    React151.useEffect(() => {
      const input2 = ref.current;
      if (!input2)
        return;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(inputProto, "value");
      const setValue = descriptor.set;
      if (prevValue !== value && setValue) {
        const event2 = new Event("input", { bubbles: true });
        setValue.call(input2, value);
        input2.dispatchEvent(event2);
      }
    }, [prevValue, value]);
    return (0, import_jsx_runtime15.jsx)(
      Primitive.input,
      {
        style: { display: "none" },
        ...props,
        ref: composedRefs,
        defaultValue: value
      }
    );
  }
);
SliderBubbleInput.displayName = BUBBLE_INPUT_NAME;
function getNextSortedValues(prevValues = [], nextValue, atIndex) {
  const nextValues = [...prevValues];
  nextValues[atIndex] = nextValue;
  return nextValues.sort((a, b) => a - b);
}
function convertValueToPercentage(value, min3, max3) {
  const maxSteps = max3 - min3;
  const percentPerStep = 100 / maxSteps;
  const percentage = percentPerStep * (value - min3);
  return clamp2(percentage, [0, 100]);
}
function getLabel(index3, totalValues) {
  if (totalValues > 2) {
    return `Value ${index3 + 1} of ${totalValues}`;
  } else if (totalValues === 2) {
    return ["Minimum", "Maximum"][index3];
  } else {
    return void 0;
  }
}
function getClosestValueIndex(values, nextValue) {
  if (values.length === 1)
    return 0;
  const distances = values.map((value) => Math.abs(value - nextValue));
  const closestDistance = Math.min(...distances);
  return distances.indexOf(closestDistance);
}
function getThumbInBoundsOffset(width, left, direction) {
  const halfWidth = width / 2;
  const halfPercent = 50;
  const offset4 = linearScale([0, halfPercent], [0, halfWidth]);
  return (halfWidth - offset4(left) * direction) * direction;
}
function getStepsBetweenValues(values) {
  return values.slice(0, -1).map((value, index3) => values[index3 + 1] - value);
}
function hasMinStepsBetweenValues(values, minStepsBetweenValues) {
  if (minStepsBetweenValues > 0) {
    const stepsBetweenValues = getStepsBetweenValues(values);
    const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);
    return actualMinStepsBetweenValues >= minStepsBetweenValues;
  }
  return true;
}
function linearScale(input2, output) {
  return (value) => {
    if (input2[0] === input2[1] || output[0] === output[1])
      return output[0];
    const ratio = (output[1] - output[0]) / (input2[1] - input2[0]);
    return output[0] + ratio * (value - input2[0]);
  };
}
function getDecimalCount(value) {
  return (String(value).split(".")[1] || "").length;
}
function roundValue(value, decimalCount) {
  const rounder = Math.pow(10, decimalCount);
  return Math.round(value * rounder) / rounder;
}
var Root4 = Slider;
var Track = SliderTrack;
var Range = SliderRange;
var Thumb = SliderThumb;

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SliderField/SliderField.mjs
var React152 = __toESM(require_react(), 1);
var SLIDER_LABEL_TEST_ID = "slider-label";
var SLIDER_ROOT_TEST_ID = "slider-root";
var SLIDER_TRACK_TEST_ID = "slider-track";
var SLIDER_RANGE_TEST_ID = "slider-range";
var SliderFieldPrimitive = ({ ariaValuetext, className, defaultValue: defaultValue2 = 0, descriptiveText, emptyTrackColor, errorMessage, filledTrackColor, formatValue, hasError = false, id, isDisabled, isValueHidden = false, label, labelHidden = false, onChange, orientation = "horizontal", outerEndComponent, outerStartComponent, testId, thumbColor, trackSize, value, size: size4, ..._rest }, ref) => {
  const { isFieldsetDisabled } = useFieldset();
  const fieldId = useStableId(id);
  const stableId = useStableId();
  const descriptionId = descriptiveText ? getUniqueComponentId(stableId, DESCRIPTION_SUFFIX) : void 0;
  const errorId = hasError ? getUniqueComponentId(stableId, ERROR_SUFFIX) : void 0;
  const ariaDescribedBy = createSpaceSeparatedIds([errorId, descriptionId]);
  const disabled = isFieldsetDisabled ? isFieldsetDisabled : isDisabled;
  const { styleProps, rest } = splitPrimitiveProps(_rest);
  const isControlled = value !== void 0;
  const [currentValue, setCurrentValue] = React152.useState(isControlled ? value : defaultValue2);
  const values = isControlled ? [value] : void 0;
  const defaultValues = !isControlled ? [defaultValue2] : void 0;
  const onValueChange = React152.useCallback((value2) => {
    setCurrentValue(value2[0]);
    if (isFunction3(onChange)) {
      onChange(value2[0]);
    }
  }, [onChange]);
  const realValue = isControlled ? value : currentValue;
  const formattedValue = isFunction3(formatValue) ? formatValue(realValue) : realValue;
  const isVertical = orientation === "vertical";
  const componentClasses = classNames(ComponentClassName.SliderFieldTrack, classNameModifier(ComponentClassName.SliderFieldTrack, orientation), classNameModifier(ComponentClassName.SliderFieldTrack, size4));
  const rootComponentClasses = classNames(ComponentClassName.SliderFieldRoot, classNameModifier(ComponentClassName.SliderFieldRoot, orientation), classNameModifier(ComponentClassName.SliderFieldRoot, size4), classNameModifierByFlag(ComponentClassName.SliderFieldRoot, "disabled", disabled), className);
  return React152.createElement(
    Flex,
    {
      // Custom classnames will be added to Root below
      className: classNames(ComponentClassName.Field, classNameModifier(ComponentClassName.Field, size4), ComponentClassName.SliderField),
      testId,
      ...styleProps
    },
    React152.createElement(
      Label,
      { className: ComponentClassName.SliderFieldLabel, id: stableId, testId: SLIDER_LABEL_TEST_ID, visuallyHidden: labelHidden },
      React152.createElement(View, { as: "span" }, label),
      !isValueHidden ? typeof formatValue === "string" ? React152.createElement(View, { as: "span" }, formattedValue) : formattedValue : null
    ),
    React152.createElement(FieldDescription, { id: descriptionId, labelHidden, descriptiveText }),
    React152.createElement(
      FieldGroup,
      { className: ComponentClassName.SliderFieldGroup, id: fieldId, orientation, outerStartComponent, outerEndComponent },
      React152.createElement(
        Root4,
        { className: rootComponentClasses, "data-testid": SLIDER_ROOT_TEST_ID, disabled, defaultValue: defaultValues, onValueChange, orientation, ref, value: values, ...rest },
        React152.createElement(
          Track,
          { className: componentClasses, "data-testid": SLIDER_TRACK_TEST_ID, style: {
            backgroundColor: String(emptyTrackColor),
            [`${isVertical ? "width" : "height"}`]: trackSize
          } },
          React152.createElement(Range, { className: classNames(ComponentClassName.SliderFieldRange, classNameModifier(ComponentClassName.SliderFieldRange, orientation), classNameModifierByFlag(ComponentClassName.SliderFieldRange, "disabled", disabled)), "data-testid": SLIDER_RANGE_TEST_ID, style: { backgroundColor: String(filledTrackColor) } })
        ),
        React152.createElement(Thumb, { "aria-describedby": ariaDescribedBy, "aria-labelledby": stableId, "aria-valuetext": ariaValuetext, className: classNames(ComponentClassName.SliderFieldThumb, classNameModifier(ComponentClassName.SliderFieldThumb, size4), classNameModifierByFlag(ComponentClassName.SliderFieldThumb, "disabled", disabled)), style: { backgroundColor: String(thumbColor) } })
      )
    ),
    React152.createElement(FieldErrorMessage, { id: errorId, hasError, errorMessage })
  );
};
var SliderField = primitiveWithForwardRef(SliderFieldPrimitive);
SliderField.displayName = "SliderField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/StepperField/StepperField.mjs
var React156 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/StepperField/useStepper.mjs
var React153 = __toESM(require_react(), 1);
var getCorrectSteppingValue = ({ max: max3, min: min3, step, value }) => {
  const remainder = (value - min3) % step;
  value = value - remainder + Math.round(remainder / step) * step;
  value = Math.max(min3, value);
  if (value > max3) {
    value = max3 - (max3 - min3) % step;
  }
  return value;
};
var useStepper = ({ defaultValue: defaultValue2 = 0, value: controlledValue, step = 1, max: max3 = Number.MAX_SAFE_INTEGER, min: min3 = Number.MIN_SAFE_INTEGER, isDisabled, isReadOnly, onChange, onDecrease, onIncrease, onStepChange }) => {
  const isControlled = controlledValue !== void 0;
  max3 = Math.max(min3, max3);
  const [uncontrolledValue, setUncontrolledValue] = React153.useState(() => (
    // This is required for users could provide any defaultValue
    getCorrectSteppingValue({ min: min3, max: max3, step, value: defaultValue2 })
  ));
  const value = isControlled ? getCorrectSteppingValue({ min: min3, max: max3, step, value: controlledValue }) : uncontrolledValue;
  const shouldDisableIncreaseButton = isDisabled ?? isReadOnly ?? value + step > max3;
  const shouldDisableDecreaseButton = isDisabled ?? isReadOnly ?? value - step < min3;
  const [inputValue, setInputValue] = React153.useState(value);
  const handleOnChange = React153.useCallback((event2) => {
    setInputValue(event2.target.value);
    if (isFunction3(onChange)) {
      onChange(event2);
    }
  }, [onChange]);
  const handleOnBlur = React153.useCallback((event2) => {
    const parsedValue = parseFloat(event2.target.value);
    if (isNaN(parsedValue)) {
      return;
    }
    const newValue = getCorrectSteppingValue({
      min: min3,
      max: max3,
      step,
      value: parsedValue
    });
    if (!isControlled) {
      setUncontrolledValue(newValue);
    }
    if (isFunction3(onStepChange)) {
      onStepChange(newValue);
    }
    setInputValue(newValue);
  }, [min3, max3, step, isControlled, onStepChange]);
  const handleIncrease = React153.useCallback(() => {
    if (!isControlled) {
      setUncontrolledValue(value + step);
    }
    if (isFunction3(onStepChange)) {
      onStepChange(value + step);
    }
    if (isFunction3(onIncrease)) {
      onIncrease();
    }
    setInputValue(value + step);
  }, [step, value, isControlled, onIncrease, onStepChange]);
  const handleDecrease = React153.useCallback(() => {
    if (!isControlled) {
      setUncontrolledValue(value - step);
    }
    if (isFunction3(onStepChange)) {
      onStepChange(value - step);
    }
    if (isFunction3(onDecrease)) {
      onDecrease();
    }
    setInputValue(value - step);
  }, [step, value, isControlled, onDecrease, onStepChange]);
  const handleOnWheel = React153.useCallback((event2) => {
    event2.currentTarget.blur();
  }, []);
  return {
    step,
    value,
    inputValue,
    handleDecrease,
    handleIncrease,
    handleOnBlur,
    handleOnChange,
    handleOnWheel,
    setInputValue,
    shouldDisableDecreaseButton,
    shouldDisableIncreaseButton
  };
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconAdd.mjs
var React154 = __toESM(require_react(), 1);
var IconAdd = (props) => {
  const { className, ...rest } = props;
  return React154.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React154.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React154.createElement("path", { d: "M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/icons/IconRemove.mjs
var React155 = __toESM(require_react(), 1);
var IconRemove = (props) => {
  const { className, ...rest } = props;
  return React155.createElement(
    View,
    { as: "span", width: "1em", height: "1em", className: classNames(ComponentClassName.Icon, className), ...rest },
    React155.createElement(
      "svg",
      { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
      React155.createElement("path", { d: "M19 13H5V11H19V13Z", fill: "currentColor" })
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/StepperField/StepperField.mjs
var DECREASE_ICON = "decrease-icon";
var INCREASE_ICON = "increase-icon";
var StepperFieldPrimitive = (props, ref) => {
  const {
    className,
    // destructure to prevent `defaultValue` from being passed to underlying `Input` via `_rest`
    defaultValue: defaultValue2,
    descriptiveText,
    errorMessage,
    hasError = false,
    id,
    inputStyles,
    isDisabled,
    isReadOnly,
    isRequired,
    increaseButtonLabel = ComponentText.StepperField.increaseButtonLabel,
    decreaseButtonLabel = ComponentText.StepperField.decreaseButtonLabel,
    label,
    labelHidden = false,
    // destructure to prevent `onStepChange` from being passed to underlying `Input` via `_rest`
    onStepChange,
    size: size4,
    testId,
    // this is only required in useStepper hook but deconstruct here to remove its existence in rest
    value: controlledValue,
    variation,
    ..._rest
  } = props;
  const fieldId = useStableId(id);
  const stableId = useStableId();
  const descriptionId = descriptiveText ? getUniqueComponentId(stableId, DESCRIPTION_SUFFIX) : void 0;
  const errorId = hasError ? getUniqueComponentId(stableId, ERROR_SUFFIX) : void 0;
  const ariaDescribedBy = createSpaceSeparatedIds([errorId, descriptionId]);
  const { styleProps, rest } = splitPrimitiveProps(_rest);
  const icons = useIcons("stepperField");
  const { step, value, inputValue, handleDecrease, handleIncrease, handleOnBlur, handleOnChange, handleOnWheel, setInputValue, shouldDisableDecreaseButton, shouldDisableIncreaseButton } = useStepper({ ...props, defaultValue: defaultValue2, onStepChange });
  React156.useEffect(() => {
    const isControlled = controlledValue !== void 0;
    if (isControlled) {
      setInputValue(controlledValue);
    }
  }, [controlledValue, setInputValue]);
  return React156.createElement(
    Flex,
    { className: classNames(ComponentClassName.Field, classNameModifier(ComponentClassName.Field, size4), ComponentClassName.StepperField, className), testId, ...styleProps },
    React156.createElement(Label, { htmlFor: fieldId, visuallyHidden: labelHidden }, label),
    React156.createElement(FieldDescription, { id: descriptionId, labelHidden, descriptiveText }),
    React156.createElement(
      FieldGroup,
      { outerStartComponent: React156.createElement(FieldGroupIconButton, { "aria-controls": fieldId, ariaLabel: `${decreaseButtonLabel} ${value - step}`, className: classNames(ComponentClassName.StepperFieldButtonDecrease, classNameModifier(ComponentClassName.StepperFieldButtonDecrease, variation), classNameModifierByFlag(ComponentClassName.StepperFieldButtonDecrease, "disabled", shouldDisableDecreaseButton)), "data-invalid": hasError, isDisabled: shouldDisableDecreaseButton, onClick: handleDecrease, size: size4 }, (icons == null ? void 0 : icons.remove) ?? React156.createElement(IconRemove, { "data-testid": DECREASE_ICON })), outerEndComponent: React156.createElement(FieldGroupIconButton, { "aria-controls": fieldId, ariaLabel: `${increaseButtonLabel} ${value + step}`, className: classNames(ComponentClassName.StepperFieldButtonIncrease, classNameModifier(ComponentClassName.StepperFieldButtonIncrease, variation), classNameModifierByFlag(ComponentClassName.StepperFieldButtonIncrease, "disabled", shouldDisableIncreaseButton)), "data-invalid": hasError, isDisabled: shouldDisableIncreaseButton, onClick: handleIncrease, size: size4 }, (icons == null ? void 0 : icons.add) ?? React156.createElement(IconAdd, { "data-testid": INCREASE_ICON })) },
      React156.createElement(Input, { "aria-describedby": ariaDescribedBy, className: ComponentClassName.StepperFieldInput, hasError, id: fieldId, isDisabled, isReadOnly, isRequired, onBlur: handleOnBlur, onChange: handleOnChange, onWheel: handleOnWheel, ref, size: size4, variation, type: "number", value: inputValue, ...inputStyles, ...rest })
    ),
    React156.createElement(FieldErrorMessage, { id: errorId, hasError, errorMessage })
  );
};
var StepperField = primitiveWithForwardRef(StepperFieldPrimitive);
StepperField.displayName = "StepperField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SwitchField/SwitchField.mjs
var React157 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SwitchField/useSwitch.mjs
var import_react34 = __toESM(require_react(), 1);
var useSwitch = (props) => {
  const { onChange, isChecked, defaultChecked, isDisabled } = props;
  const isControlled = typeof isChecked !== "undefined";
  const [isOn, setIsOn] = (0, import_react34.useState)(isControlled ? isChecked : !!defaultChecked);
  const [isFocused, setIsFocused] = (0, import_react34.useState)(false);
  const changeHandler = (0, import_react34.useCallback)((event2) => {
    if (isDisabled) {
      event2.preventDefault();
      return;
    }
    if (isFunction3(onChange)) {
      onChange(event2);
    }
    setIsOn(event2.target.checked);
  }, [onChange, isDisabled]);
  if (isControlled && isOn !== isChecked) {
    setIsOn(isChecked);
  }
  return {
    isOn,
    changeHandler,
    isFocused,
    setIsFocused
  };
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/SwitchField/SwitchField.mjs
var SwitchFieldPrimitive = ({ className, defaultChecked, id, isChecked, isDisabled, isLabelHidden, label, labelPosition, name: name2, onChange, size: size4, thumbColor, trackCheckedColor, trackColor, value, hasError, errorMessage, ...rest }, ref) => {
  const { isOn, changeHandler, isFocused, setIsFocused } = useSwitch({
    onChange,
    isChecked,
    defaultChecked,
    isDisabled
  });
  const { isFieldsetDisabled } = useFieldset();
  const shouldBeDisabled = isFieldsetDisabled ? isFieldsetDisabled : isDisabled;
  const fieldId = useStableId(id);
  const wrapperClasses = classNames(ComponentClassName.SwitchTrack, classNameModifierByFlag(ComponentClassName.SwitchTrack, "checked", isOn), classNameModifierByFlag(ComponentClassName.SwitchTrack, "disabled", shouldBeDisabled), classNameModifierByFlag(ComponentClassName.SwitchTrack, "focused", isFocused), classNameModifierByFlag(ComponentClassName.SwitchTrack, "error", hasError));
  const componentClasses = classNames(ComponentClassName.SwitchThumb, classNameModifierByFlag(ComponentClassName.SwitchThumb, "checked", isOn), classNameModifierByFlag(ComponentClassName.SwitchThumb, "disabled", shouldBeDisabled));
  return React157.createElement(
    Flex,
    { className: classNames(ComponentClassName.SwitchField, classNameModifier(ComponentClassName.SwitchField, size4), labelPosition ? `amplify-label-${labelPosition}` : null, className), ref, ...rest },
    React157.createElement(
      VisuallyHidden,
      null,
      React157.createElement(Input, { role: "switch", type: "checkbox", id: fieldId, onChange: changeHandler, disabled: isDisabled, name: name2, checked: isOn, value, onFocus: () => {
        setIsFocused(true);
      }, onBlur: () => {
        setIsFocused(false);
      } })
    ),
    React157.createElement(
      Label,
      { htmlFor: fieldId, className: classNames(ComponentClassName.SwitchWrapper, classNameModifier(ComponentClassName.SwitchWrapper, labelPosition)) },
      isLabelHidden ? React157.createElement(VisuallyHidden, { as: "span", className: ComponentClassName.SwitchLabel }, label) : React157.createElement(View, { as: "span", className: ComponentClassName.SwitchLabel }, label),
      React157.createElement(
        View,
        { as: "span", className: wrapperClasses, backgroundColor: isOn ? trackCheckedColor : trackColor },
        React157.createElement(View, { as: "span", className: componentClasses, "data-checked": isOn, "data-disabled": shouldBeDisabled, backgroundColor: thumbColor })
      )
    ),
    React157.createElement(FieldErrorMessage, { hasError, errorMessage })
  );
};
var SwitchField = primitiveWithForwardRef(SwitchFieldPrimitive);
SwitchField.displayName = "SwitchField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Table/Table.mjs
var React158 = __toESM(require_react(), 1);
var TablePrimitive = ({ caption, children: children2, className, highlightOnHover = false, size: size4, variation, ...rest }, ref) => {
  const componentClasses = classNames(ComponentClassName.Table, classNameModifier(ComponentClassName.Table, size4), classNameModifier(ComponentClassName.Table, variation), className);
  return React158.createElement(
    View,
    { as: "table", className: componentClasses, "data-highlightonhover": highlightOnHover, ref, ...rest },
    caption && React158.createElement(View, { as: "caption", className: ComponentClassName.TableCaption }, caption),
    children2
  );
};
var Table = primitiveWithForwardRef(TablePrimitive);
Table.displayName = "Table";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Table/TableBody.mjs
var React159 = __toESM(require_react(), 1);
var TableBodyPrimitive = ({ children: children2, className, ...rest }, ref) => React159.createElement(View, { as: "tbody", className: classNames(ComponentClassName.TableBody, className), ref, ...rest }, children2);
var TableBody = primitiveWithForwardRef(TableBodyPrimitive);
TableBody.displayName = "TableBody";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Table/TableCell.mjs
var React160 = __toESM(require_react(), 1);
var TableCellPrimitive = ({ as: asElementTag = "td", children: children2, className, ...rest }, ref) => React160.createElement(View, { as: asElementTag, className: classNames(asElementTag === "td" ? ComponentClassName.TableTd : ComponentClassName.TableTh, className), ref, ...rest }, children2);
var TableCell = primitiveWithForwardRef(TableCellPrimitive);
TableCell.displayName = "TableCell";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Table/TableFoot.mjs
var React161 = __toESM(require_react(), 1);
var TableFootPrimitive = ({ children: children2, className, ...rest }, ref) => React161.createElement(View, { as: "tfoot", className: classNames(ComponentClassName.TableFoot, className), ref, ...rest }, children2);
var TableFoot = primitiveWithForwardRef(TableFootPrimitive);
TableFoot.displayName = "TableFoot";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Table/TableHead.mjs
var React162 = __toESM(require_react(), 1);
var TableHeadPrimitive = ({ children: children2, className, ...rest }, ref) => React162.createElement(View, { as: "thead", className: classNames(ComponentClassName.TableHead, className), ref, ...rest }, children2);
var TableHead = primitiveWithForwardRef(TableHeadPrimitive);
TableHead.displayName = "TableHead";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Table/TableRow.mjs
var React163 = __toESM(require_react(), 1);
var TableRowPrimitive = ({ children: children2, className, ...rest }, ref) => React163.createElement(View, { as: "tr", className: classNames(ComponentClassName.TableRow, className), ref, ...rest }, children2);
var TableRow = primitiveWithForwardRef(TableRowPrimitive);
TableRow.displayName = "TableRow";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/Tabs.mjs
var React169 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/TabsItem.mjs
var React165 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/TabsContext.mjs
var React164 = __toESM(require_react(), 1);
var TabsContext = React164.createContext({
  groupId: "",
  activeTab: "",
  setActiveTab: () => {
  }
});

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/constants.mjs
var WHITESPACE_VALUE = "-";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/TabsItem.mjs
var TabsItemPrimitive = ({ className, value, children: children2, onClick, as = "button", role = "tab", ...rest }, ref) => {
  const { activeTab, setActiveTab, groupId } = React165.useContext(TabsContext);
  let idValue = value;
  if (typeof idValue === "string") {
    idValue = idValue.replace(" ", WHITESPACE_VALUE);
  }
  const isActive = activeTab === value;
  const handleOnClick = (e) => {
    if (isFunction3(onClick)) {
      onClick == null ? void 0 : onClick(e);
    }
    setActiveTab(value);
  };
  return React165.createElement(View, { ...rest, role, as, id: `${groupId}-tab-${idValue}`, "aria-selected": isActive, "aria-controls": `${groupId}-panel-${idValue}`, tabIndex: !isActive ? -1 : void 0, className: classNames(ComponentClassName.TabsItem, classNameModifierByFlag(ComponentClassName.TabsItem, "active", activeTab === value), className), ref, onClick: handleOnClick }, children2);
};
var TabsItem = primitiveWithForwardRef(TabsItemPrimitive);
TabsItem.displayName = "Tabs.Item";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/TabsList.mjs
var React166 = __toESM(require_react(), 1);
var isValidTab = (child) => React166.isValidElement(child);
var TabListPrimitive = ({ className, children: children2, indicatorPosition, spacing, role = "tablist", ...rest }, ref) => {
  const internalRef = React166.useRef(null);
  const { activeTab, setActiveTab } = React166.useContext(TabsContext);
  React166.useImperativeHandle(ref, () => internalRef.current);
  const values = React166.useMemo(() => React166.Children.toArray(children2).map((child) => {
    if (child && isValidTab(child)) {
      return child.props.value;
    }
  }).filter((child) => !!child), [children2]);
  const currentIndex = values.indexOf(activeTab);
  const nextTab = React166.useCallback(() => {
    var _a2;
    let nextIndex = currentIndex === values.length - 1 ? 0 : currentIndex + 1;
    const elems = ((_a2 = internalRef.current) == null ? void 0 : _a2.querySelectorAll("button")) ?? [];
    while (elems[nextIndex].disabled) {
      if (nextIndex === values.length - 1) {
        nextIndex = 0;
      } else {
        nextIndex++;
      }
    }
    const value = values[nextIndex];
    if (value) {
      setActiveTab(value);
      const elem = elems[nextIndex];
      elem == null ? void 0 : elem.focus();
      elem == null ? void 0 : elem.click();
    }
  }, [currentIndex, setActiveTab, values]);
  const prevTab = React166.useCallback(() => {
    var _a2;
    let prevIndex = currentIndex === 0 ? values.length - 1 : currentIndex - 1;
    const elems = ((_a2 = internalRef.current) == null ? void 0 : _a2.querySelectorAll("button")) ?? [];
    while (elems[prevIndex].disabled) {
      if (prevIndex === 0) {
        prevIndex = values.length - 1;
      } else {
        prevIndex--;
      }
    }
    const value = values[prevIndex];
    if (value) {
      setActiveTab(value);
      const elem = elems[prevIndex];
      elem == null ? void 0 : elem.focus();
      elem == null ? void 0 : elem.click();
    }
  }, [currentIndex, setActiveTab, values]);
  const onKeyDown = React166.useCallback((event2) => {
    switch (event2.key) {
      case "ArrowLeft":
        event2.preventDefault();
        event2.stopPropagation();
        prevTab();
        break;
      case "ArrowUp":
      case "ArrowRight":
        event2.preventDefault();
        event2.stopPropagation();
        nextTab();
        break;
    }
  }, [prevTab, nextTab]);
  return React166.createElement(View, { ...rest, role, onKeyDown, className: classNames(ComponentClassName.TabsList, indicatorPosition ? classNameModifier(ComponentClassName.TabsList, indicatorPosition) : null, spacing ? classNameModifier(ComponentClassName.TabsList, spacing) : null, className), ref: internalRef }, children2);
};
var TabList = primitiveWithForwardRef(TabListPrimitive);
TabList.displayName = "Tabs.List";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/TabsPanel.mjs
var React167 = __toESM(require_react(), 1);
var TabPanelPrimitive = ({ className, value, children: children2, role = "tabpanel", ...rest }, ref) => {
  const { activeTab, isLazy, groupId } = React167.useContext(TabsContext);
  if (isLazy && activeTab !== value)
    return null;
  let idValue = value;
  if (typeof idValue === "string") {
    idValue = idValue.replace(" ", WHITESPACE_VALUE);
  }
  return React167.createElement(View, { ...rest, role, id: `${groupId}-panel-${idValue}`, "aria-labelledby": `${groupId}-tab-${idValue}`, className: classNames(ComponentClassName.TabsPanel, classNameModifierByFlag(ComponentClassName.TabsPanel, "active", activeTab === value), className), ref }, children2);
};
var TabPanel = primitiveWithForwardRef(TabPanelPrimitive);
TabPanel.displayName = "Tabs.Panel";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/TabsContainer.mjs
var React168 = __toESM(require_react(), 1);
var TabsContainerPrimitive = ({ children: children2, defaultValue: defaultValue2, className, value: controlledValue, onValueChange, isLazy, ...rest }, ref) => {
  const groupId = useStableId();
  const isControlled = controlledValue !== void 0;
  const [localValue, setLocalValue] = React168.useState(() => isControlled ? controlledValue : defaultValue2);
  const activeTab = isControlled ? controlledValue : localValue ?? "";
  const setActiveTab = React168.useCallback((newValue) => {
    if (isFunction3(onValueChange)) {
      onValueChange(newValue);
    }
    if (!isControlled) {
      setLocalValue(newValue);
    }
  }, [onValueChange, isControlled]);
  const _value = React168.useMemo(() => {
    return {
      activeTab,
      isLazy,
      setActiveTab,
      groupId
    };
  }, [activeTab, setActiveTab, isLazy, groupId]);
  return React168.createElement(
    TabsContext.Provider,
    { value: _value },
    React168.createElement(View, { ...rest, ref, className: classNames(className, ComponentClassName.Tabs) }, children2)
  );
};
var TabsContainer = primitiveWithForwardRef(TabsContainerPrimitive);
TabsContainer.displayName = "Tabs.Container";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Tabs/Tabs.mjs
var TabsPrimitive = ({ items, indicatorPosition, justifyContent, spacing, ...rest }, ref) => {
  return React169.createElement(
    TabsContainer,
    { ...rest, ref },
    React169.createElement(TabList, { indicatorPosition, justifyContent, spacing }, items == null ? void 0 : items.map(({ value, label, content, ...rest2 }) => React169.createElement(TabsItem, { ...rest2, key: value, value }, label))),
    items == null ? void 0 : items.map(({ value, content, isDisabled }) => React169.createElement(TabPanel, { key: value, value, isDisabled }, content))
  );
};
var Tabs = Object.assign(primitiveWithForwardRef(TabsPrimitive), {
  Item: TabsItem,
  List: TabList,
  Panel: TabPanel,
  Container: TabsContainer
});
Tabs.displayName = "Tabs";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/TextAreaField/TextAreaField.mjs
var React172 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/TextArea/TextArea.mjs
var React170 = __toESM(require_react(), 1);
var TextAreaPrimitive = ({ className, isDisabled, isReadOnly, isRequired, size: size4, hasError = false, variation, ...rest }, ref) => {
  const componentClasses = classNames(ComponentClassName.Textarea, ComponentClassName.FieldGroupControl, classNameModifier(ComponentClassName.Textarea, variation), classNameModifier(ComponentClassName.Textarea, size4), classNameModifierByFlag(ComponentClassName.Textarea, "error", hasError), className);
  const { isFieldsetDisabled } = useFieldset();
  return React170.createElement(View, { "aria-invalid": hasError, as: "textarea", className: componentClasses, disabled: isFieldsetDisabled ? isFieldsetDisabled : isDisabled, readOnly: isReadOnly, ref, required: isRequired, ...rest });
};
var TextArea = primitiveWithForwardRef(TextAreaPrimitive);
TextArea.displayName = "TextArea";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/TextArea/AutoresizeTextarea.mjs
var React171 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/TextArea/useAutoresizeTextarea.mjs
var import_react35 = __toESM(require_react(), 1);
var useAutoresizeTextArea = (textAreaRef, value) => {
  (0, import_react35.useEffect)(() => {
    const resizeTextArea = () => {
      if (textAreaRef) {
        textAreaRef.style.height = "auto";
        const { scrollHeight } = textAreaRef;
        textAreaRef.style.height = `${scrollHeight}px`;
      }
    };
    resizeTextArea();
    window.addEventListener("resize", resizeTextArea);
    return () => {
      window.removeEventListener("resize", resizeTextArea);
    };
  }, [
    textAreaRef,
    // Trigger the effect if the value changes
    value
  ]);
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/TextArea/AutoresizeTextarea.mjs
var AutoresizeTextAreaPrimitive = ({ value, ...rest }, externalRef) => {
  const internalRef = React171.useRef(null);
  useAutoresizeTextArea(internalRef.current, value);
  const composedRef = useComposeRefsCallback({
    externalRef,
    internalRef
  });
  return React171.createElement(TextArea, { ...rest, ref: composedRef, value });
};
var AutoresizeTextArea = primitiveWithForwardRef(AutoresizeTextAreaPrimitive);
AutoresizeTextArea.displayName = "AutoresizeTextArea";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/TextAreaField/TextAreaField.mjs
var DEFAULT_ROW_COUNT = 3;
var TextAreaFieldPrimitive = (props, ref) => {
  const {
    className,
    descriptiveText,
    errorMessage,
    hasError = false,
    id,
    label,
    labelHidden = false,
    rows,
    size: size4,
    testId,
    inputStyles,
    autoResize,
    // Destructuring the 'resize' style prop because while it is a style prop
    // it should go on the textarea element and not the wrapper div.
    resize,
    ..._rest
  } = props;
  const fieldId = useStableId(id);
  const stableId = useStableId();
  const descriptionId = descriptiveText ? getUniqueComponentId(stableId, DESCRIPTION_SUFFIX) : void 0;
  const errorId = hasError ? getUniqueComponentId(stableId, ERROR_SUFFIX) : void 0;
  const ariaDescribedBy = createSpaceSeparatedIds([errorId, descriptionId]);
  const { styleProps, rest } = splitPrimitiveProps(_rest);
  return React172.createElement(
    Flex,
    { className: classNames(ComponentClassName.Field, classNameModifier(ComponentClassName.Field, size4), ComponentClassName.TextAreaField, className), testId, ...styleProps },
    React172.createElement(Label, { htmlFor: fieldId, visuallyHidden: labelHidden }, label),
    React172.createElement(FieldDescription, { id: descriptionId, labelHidden, descriptiveText }),
    autoResize ? React172.createElement(AutoresizeTextArea, { "aria-describedby": ariaDescribedBy, hasError, id: fieldId, ref, rows: rows ?? DEFAULT_ROW_COUNT, size: size4, resize, ...rest, ...inputStyles }) : React172.createElement(TextArea, { "aria-describedby": ariaDescribedBy, hasError, id: fieldId, ref, rows: rows ?? DEFAULT_ROW_COUNT, size: size4, resize, ...rest, ...inputStyles }),
    React172.createElement(FieldErrorMessage, { id: errorId, hasError, errorMessage })
  );
};
var TextAreaField = primitiveWithForwardRef(TextAreaFieldPrimitive);
TextAreaField.displayName = "TextAreaField";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/ToggleButton/ToggleButton.mjs
var React174 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/ToggleButton/useToggleButton.mjs
var React173 = __toESM(require_react(), 1);
var useToggleButton = ({ isPressed, defaultPressed, onClick, onChange, value }) => {
  const isControlled = isPressed !== void 0;
  const [pressed, setPressed] = React173.useState(defaultPressed);
  isPressed = isControlled ? isPressed : pressed;
  const handleClick = React173.useCallback((event2) => {
    if (isFunction3(onClick)) {
      onClick(event2);
    }
    if (!isControlled) {
      setPressed(!pressed);
    }
    if (isControlled && isFunction3(onChange)) {
      onChange(value);
    }
  }, [isControlled, onClick, onChange, pressed, value]);
  return { isPressed, handleClick };
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/ToggleButton/ToggleButton.mjs
var ToggleButtonPrimitive = ({ className, children: children2, defaultPressed = false, isDisabled, isPressed: isPressedProp, onChange, onClick, size: size4, value, variation, ...rest }, ref) => {
  const { isPressed, handleClick } = useToggleButton({
    isPressed: isPressedProp,
    defaultPressed,
    onChange,
    onClick,
    value
  });
  const componentClasses = classNames(ComponentClassName.ToggleButton, classNameModifier(ComponentClassName.ToggleButton, variation), classNameModifierByFlag(ComponentClassName.ToggleButton, "pressed", isPressed), className);
  return React174.createElement(Button, { "aria-pressed": isPressed, className: componentClasses, isDisabled, onClick: handleClick, ref, size: size4, type: "button", variation, ...rest }, children2);
};
var ToggleButton = primitiveWithForwardRef(ToggleButtonPrimitive);
ToggleButton.displayName = "ToggleButton";

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/ToggleButtonGroup/ToggleButtonGroup.mjs
var React176 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/ToggleButtonGroup/useToggleButtonGroup.mjs
var React175 = __toESM(require_react(), 1);
var useToggleButtonGroup = ({ onChange, value, isExclusive = false, isSelectionRequired = false }) => {
  const handleChange = React175.useCallback((buttonValue) => {
    if (!isFunction3(onChange) || !Array.isArray(value)) {
      return;
    }
    const index3 = isString2(buttonValue) ? value.indexOf(buttonValue) : -1;
    let newValue;
    const shouldToggleOff = index3 >= 0;
    if (shouldToggleOff) {
      newValue = [...value];
      if (!isSelectionRequired || newValue.length > 1) {
        newValue.splice(index3, 1);
      }
    } else {
      newValue = [...value, buttonValue];
    }
    onChange(newValue);
  }, [onChange, value, isSelectionRequired]);
  const handleExclusiveChange = React175.useCallback((buttonValue) => {
    if (!isFunction3(onChange)) {
      return;
    }
    onChange(value === buttonValue && !isSelectionRequired ? void 0 : buttonValue);
  }, [onChange, value, isSelectionRequired]);
  return isExclusive ? handleExclusiveChange : handleChange;
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/ToggleButtonGroup/ToggleButtonGroup.mjs
var ToggleButtonGroupPrimitive = ({ children: children2, className, isExclusive, isSelectionRequired, onChange, size: size4, value, variation, ...rest }, ref) => {
  const handleChange = useToggleButtonGroup({
    onChange,
    value,
    isExclusive,
    isSelectionRequired
  });
  return React176.createElement(Flex, { className: classNames(ComponentClassName.ToggleButtonGroup, className), ref, role: "group", ...rest }, React176.Children.map(children2, (child) => {
    if (React176.isValidElement(child)) {
      return React176.cloneElement(child, {
        isPressed: isExclusive ? value === child.props.value : isString2(child.props.value) && value.includes(child.props.value),
        onChange: handleChange,
        size: size4,
        variation
      });
    }
    return child;
  }));
};
var ToggleButtonGroup = primitiveWithForwardRef(ToggleButtonGroupPrimitive);
ToggleButtonGroup.displayName = "ToggleButtonGroup";

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/constants.mjs
var ComponentClassName2;
(function(ComponentClassName3) {
  ComponentClassName3["ChangePassword"] = "amplify-accountsettings-changepassword";
  ComponentClassName3["DeleteUser"] = "amplify-accountsettings-deleteuser";
})(ComponentClassName2 || (ComponentClassName2 = {}));

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/ChangePassword/defaults.mjs
var import_react38 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/shared/ValidationErrors.mjs
var import_react36 = __toESM(require_react(), 1);
var ValidationErrors = ({ errors, id, dataAttr }) => {
  if (!((errors == null ? void 0 : errors.length) > 0))
    return null;
  const dataAttrProp = dataAttr ? { [dataAttr]: true } : {};
  return import_react36.default.createElement(View, { ...dataAttrProp, id }, errors.map((error3) => {
    return import_react36.default.createElement(Text, { key: error3, role: "alert", variation: "error" }, translate(error3));
  }));
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/shared/Defaults.mjs
var import_react37 = __toESM(require_react(), 1);
var DefaultErrorMessage = (props) => {
  return import_react37.default.createElement(Alert, { variation: "error", ...props });
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/ChangePassword/defaults.mjs
var DefaultPasswordField = ({ fieldValidationErrors, label, ...rest }) => {
  return import_react38.default.createElement(
    import_react38.default.Fragment,
    null,
    import_react38.default.createElement(PasswordField, { ...rest, label }),
    fieldValidationErrors ? import_react38.default.createElement(ValidationErrors, { errors: fieldValidationErrors }) : null
  );
};
var DEFAULTS = {
  CurrentPasswordField: DefaultPasswordField,
  NewPasswordField: DefaultPasswordField,
  ConfirmPasswordField: DefaultPasswordField,
  SubmitButton: Button,
  ErrorMessage: DefaultErrorMessage
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/utils/displayText.mjs
var defaultChangePasswordDisplayText = {
  confirmPasswordFieldLabel: "Confirm Password",
  currentPasswordFieldLabel: "Current Password",
  newPasswordFieldLabel: "New Password",
  updatePasswordButtonText: "Update password"
};
var defaultDeleteUserDisplayText = {
  cancelButtonText: "Cancel",
  confirmDeleteButtonText: "Delete",
  deleteAccountButtonText: "Delete Account",
  warningText: "Deleting your account is not reversible. You will lose access to your account and all data associated with it."
};

// node_modules/@aws-amplify/ui-react/dist/esm/version.mjs
var VERSION = "6.11.1";

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/ChangePassword/ChangePassword.mjs
var logger18 = getLogger("AccountSettings");
var getIsDisabled = (formValues, validationError) => {
  var _a2, _b;
  const { currentPassword, newPassword, confirmPassword } = formValues;
  const hasEmptyField = !currentPassword || !newPassword || !confirmPassword;
  if (hasEmptyField) {
    return true;
  }
  const arePasswordsInvalid = ((_a2 = validationError.newPassword) == null ? void 0 : _a2.length) > 0 || ((_b = validationError.confirmPassword) == null ? void 0 : _b.length) > 0;
  return arePasswordsInvalid;
};
function ChangePassword({ components: components2, displayText: overrideDisplayText, onError, onSuccess, validators }) {
  const [errorMessage, setErrorMessage] = import_react39.default.useState(null);
  const [formValues, setFormValues] = import_react39.default.useState({});
  const [validationError, setValidationError] = import_react39.default.useState({});
  const blurredFields = import_react39.default.useRef([]);
  const { user, isLoading } = useAuth();
  const isDisabled = getIsDisabled(formValues, validationError);
  const passwordValidators = import_react39.default.useMemo(() => {
    return validators ?? getDefaultPasswordValidators();
  }, [validators]);
  useSetUserAgent({
    componentName: "ChangePassword",
    packageName: "react",
    version: VERSION
  });
  const validateNewPassword = import_react39.default.useCallback(({ formValues: formValues2, eventType }) => {
    const { newPassword } = formValues2;
    const hasBlurred = blurredFields.current.includes("newPassword");
    return runFieldValidators({
      value: newPassword,
      validators: passwordValidators,
      eventType,
      hasBlurred
    });
  }, [passwordValidators]);
  const validateConfirmPassword = import_react39.default.useCallback(({ formValues: formValues2, eventType }) => {
    const { newPassword, confirmPassword } = formValues2;
    const hasBlurred = blurredFields.current.includes("confirmPassword");
    const confirmPasswordValidators = getDefaultConfirmPasswordValidators(newPassword);
    return runFieldValidators({
      value: confirmPassword,
      validators: confirmPasswordValidators,
      eventType,
      hasBlurred
    });
  }, []);
  const runValidation = import_react39.default.useCallback((param) => {
    const passwordErrors = validateNewPassword(param);
    const confirmPasswordErrors = validateConfirmPassword(param);
    const newValidationError = {
      newPassword: passwordErrors,
      confirmPassword: confirmPasswordErrors
    };
    if (!(0, import_isEqual.default)(validationError, newValidationError)) {
      setValidationError(newValidationError);
    }
  }, [validateConfirmPassword, validateNewPassword, validationError]);
  const displayText = {
    ...defaultChangePasswordDisplayText,
    ...overrideDisplayText
  };
  const { confirmPasswordFieldLabel, currentPasswordFieldLabel, newPasswordFieldLabel, updatePasswordButtonText } = displayText;
  const { CurrentPasswordField, NewPasswordField, ConfirmPasswordField, SubmitButton, ErrorMessage } = import_react39.default.useMemo(() => ({ ...DEFAULTS, ...components2 ?? {} }), [components2]);
  const handleChange = (event2) => {
    event2.preventDefault();
    const { name: name2, value } = event2.target;
    const newFormValues = { ...formValues, [name2]: value };
    runValidation({ formValues: newFormValues, eventType: "change" });
    setFormValues(newFormValues);
  };
  const handleBlur2 = (event2) => {
    event2.preventDefault();
    const { name: name2 } = event2.target;
    if (!blurredFields.current.includes(name2)) {
      const newBlurredFields = [...blurredFields.current, name2];
      blurredFields.current = newBlurredFields;
      runValidation({ formValues, eventType: "blur" });
    }
  };
  const handleSubmit2 = (event2) => {
    event2.preventDefault();
    if (!user) {
      return;
    }
    const { currentPassword, newPassword } = formValues;
    if (errorMessage) {
      setErrorMessage(null);
    }
    changePassword({ currentPassword, newPassword }).then(() => {
      onSuccess == null ? void 0 : onSuccess();
    }).catch((e) => {
      const error3 = e;
      if (error3.message)
        setErrorMessage(error3.message);
      onError == null ? void 0 : onError(error3);
    });
  };
  if (isLoading) {
    return null;
  }
  if (!user) {
    logger18.warn("<ChangePassword /> requires user to be authenticated.");
    return null;
  }
  return import_react39.default.createElement(
    View,
    { as: "form", className: ComponentClassName2.ChangePassword, onSubmit: handleSubmit2 },
    import_react39.default.createElement(
      Flex,
      { direction: "column" },
      import_react39.default.createElement(CurrentPasswordField, { autoComplete: "current-password", isRequired: true, label: currentPasswordFieldLabel, name: "currentPassword", onBlur: handleBlur2, onChange: handleChange }),
      import_react39.default.createElement(NewPasswordField, { autoComplete: "new-password", fieldValidationErrors: validationError == null ? void 0 : validationError.newPassword, isRequired: true, label: newPasswordFieldLabel, name: "newPassword", onBlur: handleBlur2, onChange: handleChange }),
      import_react39.default.createElement(ConfirmPasswordField, { autoComplete: "new-password", fieldValidationErrors: validationError == null ? void 0 : validationError.confirmPassword, isRequired: true, label: confirmPasswordFieldLabel, name: "confirmPassword", onBlur: handleBlur2, onChange: handleChange }),
      import_react39.default.createElement(SubmitButton, { isDisabled, type: "submit" }, updatePasswordButtonText),
      errorMessage ? import_react39.default.createElement(ErrorMessage, null, errorMessage) : null
    )
  );
}
ChangePassword.CurrentPasswordField = DEFAULTS.CurrentPasswordField;
ChangePassword.NewPasswordField = DEFAULTS.NewPasswordField;
ChangePassword.ConfirmPasswordField = DEFAULTS.ConfirmPasswordField;
ChangePassword.SubmitButton = DEFAULTS.SubmitButton;
ChangePassword.ErrorMessage = DEFAULTS.ErrorMessage;

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/DeleteUser/DeleteUser.mjs
var import_react41 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/DeleteUser/defaults.mjs
var import_react40 = __toESM(require_react(), 1);
var DefaultWarningView = ({ displayText: overrideDisplayText, isDisabled, onCancel, onConfirm }) => {
  const displayText = {
    ...defaultDeleteUserDisplayText,
    ...overrideDisplayText
  };
  const { cancelButtonText, confirmDeleteButtonText, warningText } = displayText;
  return import_react40.default.createElement(
    Card,
    null,
    import_react40.default.createElement(
      Flex,
      { direction: "column" },
      import_react40.default.createElement(Text, { color: "font.error" }, warningText),
      import_react40.default.createElement(
        Flex,
        null,
        import_react40.default.createElement(Button, { variation: "link", onClick: onCancel, isDisabled }, cancelButtonText),
        import_react40.default.createElement(Button, { variation: "destructive", onClick: onConfirm, isDisabled }, confirmDeleteButtonText)
      )
    )
  );
};
var DefaultDeleteButton = (props) => import_react40.default.createElement(Button, { ...props, variation: "warning" });
var DEFAULTS2 = {
  ErrorMessage: DefaultErrorMessage,
  DeleteButton: DefaultDeleteButton,
  WarningView: DefaultWarningView
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/DeleteUser/DeleteUser.mjs
var logger19 = getLogger("AccountSettings");
function DeleteUser({ components: components2, displayText: overrideDisplayText, handleDelete, onError, onSuccess }) {
  const [state, setState] = import_react41.default.useState("IDLE");
  const [errorMessage, setErrorMessage] = import_react41.default.useState(null);
  useSetUserAgent({
    componentName: "DeleteUser",
    packageName: "react",
    version: VERSION
  });
  const displayText = {
    ...defaultDeleteUserDisplayText,
    ...overrideDisplayText
  };
  const { deleteAccountButtonText } = displayText;
  const { user, isLoading } = useAuth();
  const { ErrorMessage, DeleteButton, WarningView } = import_react41.default.useMemo(() => ({ ...DEFAULTS2, ...components2 ?? {} }), [components2]);
  const startConfirmation = (event2) => {
    event2.preventDefault();
    setState("CONFIRMATION");
  };
  const runDeleteUser = import_react41.default.useCallback(async () => {
    if (!user) {
      return;
    }
    setState("DELETING");
    if (errorMessage) {
      setErrorMessage(null);
    }
    try {
      if (handleDelete) {
        await handleDelete(user);
      } else {
        await deleteUser2();
      }
      setState("DONE");
      onSuccess == null ? void 0 : onSuccess();
    } catch (e) {
      const error3 = e;
      setState("ERROR");
      setErrorMessage(error3.message);
      onError == null ? void 0 : onError(error3);
    }
  }, [errorMessage, handleDelete, onError, onSuccess, user]);
  const handleCancel = import_react41.default.useCallback(() => {
    setState("IDLE");
  }, []);
  const handleConfirmDelete = import_react41.default.useCallback(() => {
    runDeleteUser();
  }, [runDeleteUser]);
  if (isLoading) {
    return null;
  }
  if (!user) {
    logger19.warn("<DeleteUser /> requires user to be authenticated.");
    return null;
  }
  if (state === "DONE") {
    return null;
  }
  return import_react41.default.createElement(
    Flex,
    { className: ComponentClassName2.DeleteUser, direction: "column" },
    import_react41.default.createElement(DeleteButton, { isDisabled: state === "CONFIRMATION" || state === "DELETING", onClick: startConfirmation }, deleteAccountButtonText),
    state === "CONFIRMATION" || state === "DELETING" ? import_react41.default.createElement(WarningView, { displayText, isDisabled: state === "DELETING", onCancel: handleCancel, onConfirm: handleConfirmDelete }) : null,
    errorMessage ? import_react41.default.createElement(ErrorMessage, null, errorMessage) : null
  );
}
DeleteUser.ErrorMessage = DEFAULTS2.ErrorMessage;
DeleteUser.DeleteButton = DEFAULTS2.DeleteButton;
DeleteUser.WarningView = DEFAULTS2.WarningView;

// node_modules/@aws-amplify/ui-react/dist/esm/components/AccountSettings/AccountSettings.mjs
var AccountSettings = { ChangePassword, DeleteUser };

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/Authenticator.mjs
var React183 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/hooks/useDeprecationWarning.mjs
var useDeprecationWarning2 = ({ message: message2, shouldWarn: _shouldWarn }) => {
  const shouldWarn = _shouldWarn && // show message on builds without Node `process` polyfill
  // or with process.env.NODE_ENV not production
  (typeof process === "undefined" || process && true);
  useDeprecationWarning({ message: message2, shouldWarn });
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/hooks/useCustomComponents/useCustomComponents.mjs
var React177 = __toESM(require_react(), 1);
var CustomComponentsContext = (
  // @ts-ignore
  React177.createContext(null)
);
var useCustomComponents = () => {
  const context2 = React177.useContext(CustomComponentsContext);
  if (!context2) {
    throw new Error("`useCustomComponents` cannot be used outside of a `CustomComponentsContext.Provider`");
  }
  return context2;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/Router/Router.mjs
var import_react59 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ConfirmSignUp/ConfirmSignUp.mjs
var import_react45 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/hooks/useFormHandlers/useFormHandlers.mjs
var import_react42 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/helpers/utils.mjs
var getFormDataFromEvent2 = (event2) => {
  const formData = new FormData(event2.target);
  return Object.fromEntries(formData);
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/hooks/useFormHandlers/useFormHandlers.mjs
function useFormHandlers() {
  const { submitForm, updateBlur, updateForm } = useAuthenticator((context2) => [
    context2.submitForm,
    context2.updateBlur,
    context2.updateForm
  ]);
  const handleBlur2 = (0, import_react42.useCallback)(({ target: { name: name2 } }) => {
    updateBlur({ name: name2 });
  }, [updateBlur]);
  const handleChange = (0, import_react42.useCallback)(({ target: { checked, name: name2, type, value } }) => {
    const isUncheckedCheckbox = type === "checkbox" && !checked;
    updateForm({
      name: name2,
      value: isUncheckedCheckbox ? void 0 : value
    });
  }, [updateForm]);
  const handleSubmit2 = (0, import_react42.useCallback)((event2) => {
    event2.preventDefault();
    submitForm(getFormDataFromEvent2(event2));
  }, [submitForm]);
  return { handleBlur: handleBlur2, handleChange, handleSubmit: handleSubmit2 };
}

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/RemoteErrorMessage.mjs
var import_react43 = __toESM(require_react(), 1);
var RemoteErrorMessage = () => {
  const { error: error3 } = useAuthenticator((context2) => [context2.error]);
  return import_react43.default.createElement(import_react43.default.Fragment, null, error3 ? import_react43.default.createElement(Alert, { variation: "error", isDismissible: true }, translate(error3)) : null);
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/FormFields.mjs
var React179 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/FormField.mjs
var React178 = __toESM(require_react(), 1);
function FormField({ autocomplete: autoComplete, dialCode, name: name2, type, ...props }) {
  const { validationErrors } = useAuthenticator(({ validationErrors: validationErrors2 }) => [
    validationErrors2
  ]);
  const errors = React178.useMemo(() => getErrors(validationErrors[name2]), [name2, validationErrors]);
  const hasError = (errors == null ? void 0 : errors.length) > 0;
  const errorId = useStableId();
  const ariaDescribedBy = hasError ? errorId : void 0;
  if (type === "tel") {
    return React178.createElement(
      React178.Fragment,
      null,
      React178.createElement(PhoneNumberField, { ...props, name: name2, defaultDialCode: dialCode, dialCodeName: "country_code", autoComplete, hasError, "aria-describedby": ariaDescribedBy }),
      React178.createElement(ValidationErrors, { dataAttr: "data-amplify-sign-up-errors", errors, id: errorId })
    );
  } else if (type === "password") {
    return React178.createElement(
      React178.Fragment,
      null,
      React178.createElement(PasswordField, { ...props, name: name2, autoCapitalize: "off", autoComplete, hasError, "aria-describedby": ariaDescribedBy }),
      React178.createElement(ValidationErrors, { dataAttr: "data-amplify-sign-up-errors", errors, id: errorId })
    );
  } else {
    return React178.createElement(
      React178.Fragment,
      null,
      React178.createElement(TextField, { ...props, name: name2, autoCapitalize: "off", autoComplete, hasError, type, "aria-describedby": ariaDescribedBy }),
      React178.createElement(ValidationErrors, { dataAttr: "data-amplify-sign-up-errors", errors, id: errorId })
    );
  }
}

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/FormFields.mjs
function FormFields() {
  const { fields } = useAuthenticator(({ route }) => [route]);
  const formFields = React179.useRef(fields.map((field2, index3) => React179.createElement(
    FormField,
    {
      // use index for key, field order is static
      key: index3,
      ...field2
    }
  ))).current;
  return React179.createElement(React179.Fragment, null, formFields);
}

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/RouteContainer/RouteContainer.mjs
var import_react44 = __toESM(require_react(), 1);
function RouteContainer({ children: children2, className, variation = "default" }) {
  const { route } = useAuthenticator(({ route: route2 }) => [route2]);
  const {
    // @ts-ignore
    components: { Header: Header12, Footer: Footer12 }
  } = useCustomComponents();
  return import_react44.default.createElement(
    View,
    { className, "data-amplify-authenticator": "", "data-variation": variation },
    import_react44.default.createElement(
      View,
      { "data-amplify-container": "" },
      import_react44.default.createElement(Header12, null),
      import_react44.default.createElement(View, { "data-amplify-router": "", "data-amplify-router-content": void 0 }, children2),
      import_react44.default.createElement(Footer12, null)
    )
  );
}

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ConfirmSignUp/ConfirmSignUp.mjs
var { getDeliveryMessageText: getDeliveryMessageText2, getDeliveryMethodText: getDeliveryMethodText2, getConfirmingText, getConfirmText, getResendCodeText } = authenticatorTextUtil;
function ConfirmSignUp({ className, variation }) {
  const { isPending, resendCode, codeDeliveryDetails } = useAuthenticator((context2) => [
    context2.isPending,
    context2.resendCode,
    context2.codeDeliveryDetails
  ]);
  const { handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    ConfirmSignUp: { Header: Header12 = ConfirmSignUp.Header, Footer: Footer12 = ConfirmSignUp.Footer }
  } } = useCustomComponents();
  return (
    // TODO Automatically add these namespaces again from `useAmplify`
    import_react45.default.createElement(
      RouteContainer,
      { className, variation },
      import_react45.default.createElement(
        "form",
        { "data-amplify-form": "", "data-amplify-authenticator-confirmsignup": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2 },
        import_react45.default.createElement(
          Flex,
          { as: "fieldset", direction: "column", isDisabled: isPending },
          import_react45.default.createElement(Header12, null),
          import_react45.default.createElement(
            Flex,
            { direction: "column" },
            import_react45.default.createElement(Text, { className: "amplify-authenticator__subtitle" }, getDeliveryMessageText2(codeDeliveryDetails)),
            import_react45.default.createElement(FormFields, null),
            import_react45.default.createElement(RemoteErrorMessage, null),
            import_react45.default.createElement(Button, { variation: "primary", isDisabled: isPending, type: "submit", loadingText: getConfirmingText(), isLoading: isPending }, getConfirmText()),
            import_react45.default.createElement(Button, { onClick: resendCode, type: "button" }, getResendCodeText())
          ),
          import_react45.default.createElement(Footer12, null)
        )
      )
    )
  );
}
var DefaultHeader = () => {
  const { codeDeliveryDetails } = useAuthenticator((context2) => [
    context2.codeDeliveryDetails
  ]);
  return import_react45.default.createElement(Heading, { level: 4 }, getDeliveryMethodText2(codeDeliveryDetails));
};
ConfirmSignUp.Header = DefaultHeader;
ConfirmSignUp.Footer = function Footer() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ForceNewPassword/ForceNewPassword.mjs
var import_react46 = __toESM(require_react(), 1);
var { getChangePasswordText, getChangingText, getBackToSignInText } = authenticatorTextUtil;
var ForceNewPassword = ({ className, variation }) => {
  const { isPending, toSignIn } = useAuthenticator((context2) => [
    context2.isPending,
    context2.toSignIn
  ]);
  const { handleBlur: handleBlur2, handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    ForceNewPassword: { FormFields: FormFields2 = ForceNewPassword.FormFields, Header: Header12 = ForceNewPassword.Header, Footer: Footer12 = ForceNewPassword.Footer }
  } } = useCustomComponents();
  return import_react46.default.createElement(
    RouteContainer,
    { className, variation },
    import_react46.default.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-forcenewpassword": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2, onBlur: handleBlur2 },
      import_react46.default.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        import_react46.default.createElement(Header12, null),
        import_react46.default.createElement(FormFields2, null),
        import_react46.default.createElement(RemoteErrorMessage, null),
        import_react46.default.createElement(Button, { isDisabled: isPending, type: "submit", variation: "primary", isLoading: isPending, loadingText: getChangingText() }, getChangePasswordText()),
        import_react46.default.createElement(Button, { onClick: toSignIn, type: "button", variation: "link", size: "small" }, getBackToSignInText()),
        import_react46.default.createElement(Footer12, null)
      )
    )
  );
};
ForceNewPassword.FormFields = function FormFields$1() {
  return import_react46.default.createElement(FormFields, null);
};
ForceNewPassword.Header = function Header() {
  return import_react46.default.createElement(Heading, { level: 4 }, getChangePasswordText());
};
ForceNewPassword.Footer = function Footer2() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SetupTotp/SetupTotp.mjs
var import_qrcode = __toESM(require_browser(), 1);
var React180 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/ConfirmSignInFooter.mjs
var import_react47 = __toESM(require_react(), 1);
var { getConfirmText: getConfirmText2, getConfirmingText: getConfirmingText2, getBackToSignInText: getBackToSignInText2 } = authenticatorTextUtil;
var ConfirmSignInFooter = () => {
  const { isPending, toSignIn } = useAuthenticator((context2) => [
    context2.isPending,
    context2.toSignIn
  ]);
  return import_react47.default.createElement(
    Flex,
    { direction: "column" },
    import_react47.default.createElement(Button, { isDisabled: isPending, type: "submit", variation: "primary", isLoading: isPending, loadingText: getConfirmingText2() }, getConfirmText2()),
    import_react47.default.createElement(Button, { onClick: toSignIn, type: "button", variation: "link", size: "small" }, getBackToSignInText2())
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SetupTotp/SetupTotp.mjs
var logger20 = new ConsoleLogger("SetupTotp-logger");
var { getSetupTotpText, getCopiedText, getLoadingText } = authenticatorTextUtil;
var SetupTotp = ({ className, variation }) => {
  const { totpSecretCode, isPending, username, QRFields } = useAuthenticator((context2) => [context2.isPending, context2.totpSecretCode, context2.username]);
  const { handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    SetupTotp: { Header: Header12 = SetupTotp.Header, Footer: Footer12 = SetupTotp.Footer }
  } } = useCustomComponents();
  const [isLoading, setIsLoading] = React180.useState(true);
  const [qrCode, setQrCode] = React180.useState();
  const [copyTextLabel, setCopyTextLabel] = React180.useState("COPY");
  const { totpIssuer = "AWSCognito", totpUsername = username } = QRFields ?? {};
  const generateQRCode = React180.useCallback(async () => {
    try {
      const totpCode = getTotpCodeURL(totpIssuer, totpUsername, totpSecretCode);
      const qrCodeImageSource = await import_qrcode.default.toDataURL(totpCode);
      setQrCode(qrCodeImageSource);
    } catch (error3) {
      logger20.error(error3);
    } finally {
      setIsLoading(false);
    }
  }, [totpIssuer, totpUsername, totpSecretCode]);
  React180.useEffect(() => {
    if (!qrCode) {
      generateQRCode();
    }
  }, [generateQRCode, qrCode]);
  const copyText = () => {
    navigator.clipboard.writeText(totpSecretCode);
    setCopyTextLabel(getCopiedText());
  };
  return React180.createElement(
    RouteContainer,
    { className, variation },
    React180.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-setup-totp": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2 },
      React180.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        React180.createElement(Header12, null),
        React180.createElement(
          Flex,
          { direction: "column" },
          isLoading ? React180.createElement(
            "p",
            null,
            getLoadingText(),
            "…"
          ) : React180.createElement("img", { "data-amplify-qrcode": true, src: qrCode, alt: "qr code", width: "228", height: "228" }),
          React180.createElement(
            Flex,
            { "data-amplify-copy": true },
            React180.createElement("div", null, totpSecretCode),
            React180.createElement(
              Flex,
              { "data-amplify-copy-svg": true, onClick: copyText },
              React180.createElement("div", { "data-amplify-copy-tooltip": true }, copyTextLabel),
              React180.createElement(
                "svg",
                { width: "24", height: "24", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" },
                React180.createElement("path", { d: "M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM15 5H8C6.9 5 6.01 5.9 6.01 7L6 21C6 22.1 6.89 23 7.99 23H19C20.1 23 21 22.1 21 21V11L15 5ZM8 21V7H14V12H19V21H8Z" })
              )
            )
          ),
          React180.createElement(FormFields, null),
          React180.createElement(RemoteErrorMessage, null)
        ),
        React180.createElement(ConfirmSignInFooter, null),
        React180.createElement(Footer12, null)
      )
    )
  );
};
SetupTotp.Header = function Header2() {
  return React180.createElement(Heading, { level: 3 }, getSetupTotpText());
};
SetupTotp.Footer = function Footer3() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/TwoButtonSubmitFooter.mjs
var import_react48 = __toESM(require_react(), 1);
var { getSubmitText, getSubmittingText } = authenticatorTextUtil;
var TwoButtonSubmitFooter = (props) => {
  const { cancelButtonSendType, cancelButtonText, submitButtonText } = props;
  const { isPending, resendCode, skipVerification, toSignIn } = useAuthenticator((context2) => [context2.isPending]);
  const onClick = () => {
    switch (cancelButtonSendType) {
      case "SKIP":
        skipVerification();
        break;
      case "RESEND":
        resendCode();
        break;
      case "SIGN_IN":
        toSignIn();
        break;
      default:
        return;
    }
  };
  const defaultSubmitText = isPending ? import_react48.default.createElement(
    import_react48.default.Fragment,
    null,
    getSubmittingText(),
    "…"
  ) : import_react48.default.createElement(import_react48.default.Fragment, null, getSubmitText());
  const submitText = submitButtonText ?? defaultSubmitText;
  return import_react48.default.createElement(
    Flex,
    { direction: "column" },
    import_react48.default.createElement(Button, { variation: "primary", isDisabled: isPending, type: "submit" }, submitText),
    import_react48.default.createElement(
      Flex,
      { direction: "column", alignItems: "center" },
      import_react48.default.createElement(Button, { onClick, type: "button", variation: "link", size: "small" }, cancelButtonText)
    )
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/SignInSignUpTabs.mjs
var import_react53 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SignIn/SignIn.mjs
var import_react51 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/FederatedSignIn/FederatedSignIn.mjs
var import_react50 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/FederatedSignIn/FederatedSignInButtons/FederatedSignInButton.mjs
var import_react49 = __toESM(require_react(), 1);
var AppleIcon = () => {
  return import_react49.default.createElement(
    "svg",
    { "aria-label": "Apple icon", className: "amplify-icon federated-sign-in-icon", fill: "#000", preserveAspectRatio: "xMidYMid", stroke: "#000", strokeWidth: "0", viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg" },
    import_react49.default.createElement("path", { d: "M747.4 535.7c-.4-68.2 30.5-119.6 92.9-157.5-34.9-50-87.7-77.5-157.3-82.8-65.9-5.2-138 38.4-164.4 38.4-27.9 0-91.7-36.6-141.9-36.6C273.1 298.8 163 379.8 163 544.6c0 48.7 8.9 99 26.7 150.8 23.8 68.2 109.6 235.3 199.1 232.6 46.8-1.1 79.9-33.2 140.8-33.2 59.1 0 89.7 33.2 141.9 33.2 90.3-1.3 167.9-153.2 190.5-221.6-121.1-57.1-114.6-167.2-114.6-170.7zm-105.1-305c50.7-60.2 46.1-115 44.6-134.7-44.8 2.6-96.6 30.5-126.1 64.8-32.5 36.8-51.6 82.3-47.5 133.6 48.4 3.7 92.6-21.2 129-63.7z" })
  );
};
var GoogleIcon = () => {
  return import_react49.default.createElement(
    "svg",
    { "aria-label": "Google icon", className: "amplify-icon federated-sign-in-icon", viewBox: "0 0 256 262", xmlns: "http://www.w3.org/2000/svg", preserveAspectRatio: "xMidYMid" },
    import_react49.default.createElement("path", { d: "M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027", fill: "#4285F4" }),
    import_react49.default.createElement("path", { d: "M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1", fill: "#34A853" }),
    import_react49.default.createElement("path", { d: "M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782", fill: "#FBBC05" }),
    import_react49.default.createElement("path", { d: "M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251", fill: "#EB4335" })
  );
};
var FacebookIcon = () => {
  return import_react49.default.createElement(Icon, { className: "federated-sign-in-icon", ariaLabel: "Facebook icon", viewBox: { minX: 0, minY: 0, width: 279, height: 538 }, pathData: "M82.3409742,538 L82.3409742,292.936652 L0,292.936652 L0,196.990154 L82.2410458,196.990154 L82.2410458,126.4295 C82.2410458,44.575144 132.205229,0 205.252865,0 C240.227794,0 270.306232,2.59855099 279,3.79788222 L279,89.2502322 L228.536175,89.2502322 C188.964542,89.2502322 181.270057,108.139699 181.270057,135.824262 L181.270057,196.89021 L276.202006,196.89021 L263.810888,292.836708 L181.16913,292.836708 L181.16913,538 L82.3409742,538 Z", fill: "#1877F2" });
};
var AmazonIcon = () => {
  return import_react49.default.createElement(
    "svg",
    { "aria-label": "Amazon icon", className: "amplify-icon federated-sign-in-icon", viewBox: "0 0 243 264", xmlns: "http://www.w3.org/2000/svg", preserveAspectRatio: "xMidYMid" },
    import_react49.default.createElement("path", { d: "M230.826 208.039C227.468 203.683 208.551 205.982 200.056 206.998C197.471 207.321 197.076 205.042 199.407 203.405C214.475 192.665 239.201 195.766 242.082 199.364C244.966 202.982 241.337 228.071 227.173 240.049C225.001 241.888 222.93 240.904 223.898 238.468C227.077 230.431 234.205 212.419 230.826 208.039ZM123.769 264C71.0234 264 39.0764 241.955 14.7853 217.542C9.97339 212.706 3.71799 206.296 0.311513 200.691C-1.09773 198.372 2.59096 195.022 5.04421 196.844C35.239 219.268 79.1012 239.538 122.53 239.538C151.82 239.538 188.046 227.47 217.669 214.868C222.147 212.966 222.147 219.18 221.512 221.061C221.183 222.032 206.515 236.221 186.247 247.047C167.304 257.166 143.397 264 123.769 264Z", fill: "#F2541B" }),
    import_react49.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M142.943 111.185C142.943 124.756 143.268 136.054 136.406 148.123C130.856 157.913 122.027 163.95 112.222 163.95C98.8288 163.95 90.9806 153.772 90.9806 138.693C90.9806 109.036 117.677 103.647 142.943 103.647V111.185ZM178.166 196.081C175.858 198.15 171.635 198.22 169.914 196.894C157.974 187.684 149.89 173.688 149.89 173.688C130.706 193.156 117.127 199 92.2879 199C62.8772 199 40 180.905 40 144.729C40 116.461 55.3552 97.2408 77.2563 87.823C96.2094 79.5256 122.684 78.0173 142.943 75.7517C142.943 75.7517 144.633 53.933 138.699 45.9806C134.098 39.8163 126.272 36.9329 119.089 36.9329C106.127 36.8829 93.61 43.9051 91.1262 57.4188C90.4136 61.2829 87.5533 64.5261 84.54 64.206L51.0823 60.5922C48.5156 60.2951 45.0381 57.6639 45.8636 53.3081C53.644 12.3684 90.7373 0 123.989 0C140.983 0 163.21 4.51651 176.608 17.3349C193.597 33.1648 191.969 54.2755 191.969 77.2722V131.51C191.969 147.835 198.768 154.987 205.151 163.775C207.376 166.953 207.886 170.714 205.04 173.032C197.902 178.999 178.166 196.081 178.166 196.081Z", fill: "#F2541B" })
  );
};
var FederatedSignInButton = (props) => {
  const { icon: icon2, provider, text: text2 } = props;
  const { toFederatedSignIn } = useAuthenticator();
  const handleClick = (event2) => {
    event2.preventDefault();
    toFederatedSignIn({ provider });
  };
  let iconComponent;
  if (icon2 === "facebook") {
    iconComponent = import_react49.default.createElement(FacebookIcon, null);
  } else if (icon2 === "google") {
    iconComponent = import_react49.default.createElement(GoogleIcon, null);
  } else if (icon2 === "amazon") {
    iconComponent = import_react49.default.createElement(AmazonIcon, null);
  } else if (icon2 === "apple") {
    iconComponent = import_react49.default.createElement(AppleIcon, null);
  }
  return import_react49.default.createElement(
    Button,
    { onClick: handleClick, className: "federated-sign-in-button", gap: "1rem" },
    iconComponent,
    import_react49.default.createElement(Text, { as: "span" }, text2)
  );
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/FederatedSignIn/FederatedSignIn.mjs
var { getSignInWithFederationText: getSignInWithFederationText2, getOrText } = authenticatorTextUtil;
function FederatedSignIn() {
  const { route, socialProviders } = useAuthenticator(({ route: route2, socialProviders: socialProviders2 }) => [route2, socialProviders2]);
  if (socialProviders.length === 0) {
    return null;
  }
  return import_react50.default.createElement(
    Flex,
    { direction: "column", padding: `0 0 1rem 0`, className: "federated-sign-in-container" },
    socialProviders.map((provider) => {
      switch (provider) {
        case "amazon":
          return import_react50.default.createElement(FederatedSignInButton, { icon: "amazon", key: provider, provider: FederatedIdentityProviders.Amazon, text: getSignInWithFederationText2(route, provider) });
        case "apple":
          return import_react50.default.createElement(FederatedSignInButton, { icon: "apple", key: provider, provider: FederatedIdentityProviders.Apple, text: getSignInWithFederationText2(route, provider) });
        case "facebook":
          return import_react50.default.createElement(FederatedSignInButton, { icon: "facebook", key: provider, provider: FederatedIdentityProviders.Facebook, text: getSignInWithFederationText2(route, provider) });
        case "google":
          return import_react50.default.createElement(FederatedSignInButton, { icon: "google", key: provider, provider: FederatedIdentityProviders.Google, text: getSignInWithFederationText2(route, provider) });
        default:
          console.error(`Authenticator does not support ${provider}. Please open an issue: https://github.com/aws-amplify/amplify-ui/issues/choose`);
      }
    }),
    import_react50.default.createElement(Divider, { size: "small", label: getOrText() })
  );
}

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SignIn/SignIn.mjs
var { getSignInText, getSigningInText, getForgotPasswordText } = authenticatorTextUtil;
function SignIn() {
  const { isPending } = useAuthenticator((context2) => [context2.isPending]);
  const { handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    SignIn: { Header: Header12 = SignIn.Header, Footer: Footer12 = SignIn.Footer }
  } } = useCustomComponents();
  return import_react51.default.createElement(
    View,
    null,
    import_react51.default.createElement(Header12, null),
    import_react51.default.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-signin": "", method: "post", onSubmit: handleSubmit2, onChange: handleChange },
      import_react51.default.createElement(FederatedSignIn, null),
      import_react51.default.createElement(
        Flex,
        { direction: "column" },
        import_react51.default.createElement(
          Flex,
          { as: "fieldset", direction: "column", isDisabled: isPending },
          import_react51.default.createElement(
            VisuallyHidden,
            null,
            import_react51.default.createElement("legend", null, getSignInText())
          ),
          import_react51.default.createElement(FormFields, null)
        ),
        import_react51.default.createElement(RemoteErrorMessage, null),
        import_react51.default.createElement(Button, { isDisabled: isPending, type: "submit", variation: "primary", isLoading: isPending, loadingText: getSigningInText() }, getSignInText()),
        import_react51.default.createElement(Footer12, null)
      )
    )
  );
}
var DefaultFooter = () => {
  const { toForgotPassword } = useAuthenticator((context2) => [
    context2.toForgotPassword
  ]);
  return import_react51.default.createElement(
    View,
    { "data-amplify-footer": "" },
    import_react51.default.createElement(Button, { onClick: toForgotPassword, size: "small", variation: "link" }, getForgotPasswordText())
  );
};
SignIn.Footer = DefaultFooter;
SignIn.Header = function Header3() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SignUp/SignUp.mjs
var import_react52 = __toESM(require_react(), 1);
var { getCreateAccountText, getCreatingAccountText } = authenticatorTextUtil;
function SignUp() {
  const { hasValidationErrors, isPending } = useAuthenticator((context2) => [
    context2.hasValidationErrors,
    context2.isPending
  ]);
  const { handleChange, handleBlur: handleBlur2, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    SignUp: { Header: Header12 = SignUp.Header, FormFields: FormFields2 = SignUp.FormFields, Footer: Footer12 = SignUp.Footer }
  } } = useCustomComponents();
  return import_react52.default.createElement(
    View,
    null,
    import_react52.default.createElement(Header12, null),
    import_react52.default.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-signup": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2, onBlur: handleBlur2 },
      import_react52.default.createElement(FederatedSignIn, null),
      import_react52.default.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        import_react52.default.createElement(
          Flex,
          { direction: "column" },
          import_react52.default.createElement(FormFields2, null),
          import_react52.default.createElement(RemoteErrorMessage, null)
        ),
        import_react52.default.createElement(Button, { isDisabled: hasValidationErrors || isPending, isFullWidth: true, type: "submit", variation: "primary", isLoading: isPending, loadingText: getCreatingAccountText() }, getCreateAccountText()),
        import_react52.default.createElement(Footer12, null)
      )
    )
  );
}
SignUp.Header = function Header4() {
  return null;
};
SignUp.FormFields = function FormFields$12() {
  return import_react52.default.createElement(FormFields, null);
};
SignUp.Footer = function Footer4() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/shared/SignInSignUpTabs.mjs
var { getSignInTabText, getSignUpTabText } = authenticatorTextUtil;
var SignInSignUpTabs = ({ className, hideSignUp, variation }) => {
  const { route, toSignIn, toSignUp } = useAuthenticator((context2) => [
    context2.route,
    context2.toSignIn,
    context2.toSignUp
  ]);
  return import_react53.default.createElement(RouteContainer, { className, variation }, hideSignUp ? import_react53.default.createElement(View, { "data-amplify-router-content": "" }, route === "signIn" && import_react53.default.createElement(SignIn, null)) : import_react53.default.createElement(
    Tabs.Container,
    { value: route, isLazy: true, onValueChange: (newRoute) => {
      if (newRoute !== route) {
        newRoute === "signIn" ? toSignIn() : toSignUp();
      }
    } },
    import_react53.default.createElement(
      Tabs.List,
      { spacing: "equal", indicatorPosition: "top" },
      import_react53.default.createElement(Tabs.Item, { value: "signIn" }, getSignInTabText()),
      import_react53.default.createElement(Tabs.Item, { value: "signUp" }, getSignUpTabText())
    ),
    import_react53.default.createElement(
      Tabs.Panel,
      { value: "signIn", "data-amplify-router-content": "" },
      import_react53.default.createElement(SignIn, null)
    ),
    import_react53.default.createElement(
      Tabs.Panel,
      { value: "signUp", "data-amplify-router-content": "" },
      import_react53.default.createElement(SignUp, null)
    )
  ));
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/VerifyUser/ConfirmVerifyUser.mjs
var import_react54 = __toESM(require_react(), 1);
var { getAccountRecoveryInfoText, getSkipText } = authenticatorTextUtil;
var ConfirmVerifyUser = ({ className, variation }) => {
  const { isPending } = useAuthenticator((context2) => [context2.isPending]);
  const { handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    ConfirmVerifyUser: { Header: Header12 = ConfirmVerifyUser.Header, Footer: Footer12 = ConfirmVerifyUser.Footer }
  } } = useCustomComponents();
  return import_react54.default.createElement(
    RouteContainer,
    { className, variation },
    import_react54.default.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-confirmverifyuser": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2 },
      import_react54.default.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        import_react54.default.createElement(Header12, null),
        import_react54.default.createElement(
          Flex,
          { direction: "column" },
          import_react54.default.createElement(FormFields, null)
        ),
        import_react54.default.createElement(RemoteErrorMessage, null),
        import_react54.default.createElement(TwoButtonSubmitFooter, { cancelButtonText: getSkipText(), cancelButtonSendType: "SKIP" }),
        import_react54.default.createElement(Footer12, null)
      )
    )
  );
};
ConfirmVerifyUser.Header = function Header5() {
  return import_react54.default.createElement(Heading, { level: 3 }, getAccountRecoveryInfoText());
};
ConfirmVerifyUser.Footer = function Footer5() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/VerifyUser/VerifyUser.mjs
var import_react55 = __toESM(require_react(), 1);
var { getSkipText: getSkipText2, getVerifyText, getVerifyContactText, getAccountRecoveryInfoText: getAccountRecoveryInfoText2 } = authenticatorTextUtil;
var generateRadioGroup = (attributes) => {
  return Object.entries(attributes).map(([key, value], index3) => {
    const verificationType = defaultFormFieldOptions[key].label;
    return import_react55.default.createElement(
      Radio,
      { name: "unverifiedAttr", value: key, key, defaultChecked: index3 === 0 },
      translate(verificationType),
      ":",
      " ",
      censorContactMethod(verificationType, value)
    );
  });
};
var VerifyUser = ({ className, variation }) => {
  const { components: {
    // @ts-ignore
    VerifyUser: { Header: Header12 = VerifyUser.Header, Footer: Footer12 = VerifyUser.Footer }
  } } = useCustomComponents();
  const { isPending, unverifiedUserAttributes } = useAuthenticator(({ isPending: isPending2, unverifiedUserAttributes: unverifiedUserAttributes2 }) => [
    isPending2,
    unverifiedUserAttributes2
  ]);
  const { handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const footerSubmitText = isPending ? import_react55.default.createElement(import_react55.default.Fragment, null, "Verifying…") : import_react55.default.createElement(import_react55.default.Fragment, null, getVerifyText());
  const verificationRadioGroup = import_react55.default.createElement(RadioGroupField, { legend: getVerifyContactText(), name: "verify_context", isDisabled: isPending, legendHidden: true }, generateRadioGroup(unverifiedUserAttributes));
  return import_react55.default.createElement(
    RouteContainer,
    { className, variation },
    import_react55.default.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-verifyuser": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2 },
      import_react55.default.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        import_react55.default.createElement(Header12, null),
        verificationRadioGroup,
        import_react55.default.createElement(RemoteErrorMessage, null),
        import_react55.default.createElement(TwoButtonSubmitFooter, { cancelButtonText: getSkipText2(), cancelButtonSendType: "SKIP", submitButtonText: footerSubmitText }),
        import_react55.default.createElement(Footer12, null)
      )
    )
  );
};
VerifyUser.Header = function Header6() {
  return import_react55.default.createElement(Heading, { level: 3 }, getAccountRecoveryInfoText2());
};
VerifyUser.Footer = function Footer6() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ConfirmSignIn/ConfirmSignIn.mjs
var import_react56 = __toESM(require_react(), 1);
var { getChallengeText: getChallengeText2 } = authenticatorTextUtil;
var ConfirmSignIn = ({ className, variation }) => {
  const { isPending } = useAuthenticator((context2) => [context2.isPending]);
  const { handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    ConfirmSignIn: { Header: Header12 = ConfirmSignIn.Header, Footer: Footer12 = ConfirmSignIn.Footer }
  } } = useCustomComponents();
  return import_react56.default.createElement(
    RouteContainer,
    { className, variation },
    import_react56.default.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-confirmsignin": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2 },
      import_react56.default.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        import_react56.default.createElement(Header12, null),
        import_react56.default.createElement(
          Flex,
          { direction: "column" },
          import_react56.default.createElement(FormFields, null),
          import_react56.default.createElement(RemoteErrorMessage, null)
        ),
        import_react56.default.createElement(ConfirmSignInFooter, null),
        import_react56.default.createElement(Footer12, null)
      )
    )
  );
};
function Header7() {
  const { challengeName } = useAuthenticator(({ challengeName: challengeName2 }) => [
    challengeName2
  ]);
  return import_react56.default.createElement(Heading, { level: 3 }, getChallengeText2(challengeName));
}
ConfirmSignIn.Header = Header7;
ConfirmSignIn.Footer = function Footer7() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ForgotPassword/ConfirmResetPassword.mjs
var import_react57 = __toESM(require_react(), 1);
var { getResendCodeText: getResendCodeText2, getResetYourPasswordText } = authenticatorTextUtil;
var ConfirmResetPassword = ({ className, variation }) => {
  const { isPending } = useAuthenticator((context2) => [context2.isPending]);
  const { handleBlur: handleBlur2, handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    ConfirmResetPassword: { Header: Header12 = ConfirmResetPassword.Header, Footer: Footer12 = ConfirmResetPassword.Footer }
  } } = useCustomComponents();
  return import_react57.default.createElement(
    RouteContainer,
    { className, variation },
    import_react57.default.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-confirmresetpassword": "", method: "post", onSubmit: handleSubmit2, onChange: handleChange, onBlur: handleBlur2 },
      import_react57.default.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        import_react57.default.createElement(Header12, null),
        import_react57.default.createElement(
          Flex,
          { direction: "column" },
          import_react57.default.createElement(FormFields, null)
        ),
        import_react57.default.createElement(RemoteErrorMessage, null),
        import_react57.default.createElement(TwoButtonSubmitFooter, { cancelButtonSendType: "RESEND", cancelButtonText: getResendCodeText2() }),
        import_react57.default.createElement(Footer12, null)
      )
    )
  );
};
ConfirmResetPassword.Header = function Header8() {
  const headerText = getResetYourPasswordText();
  return import_react57.default.createElement(Heading, { level: 3 }, headerText);
};
ConfirmResetPassword.Footer = function Footer8() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/ForgotPassword/ForgotPassword.mjs
var import_react58 = __toESM(require_react(), 1);
var { getBackToSignInText: getBackToSignInText3, getSendingText, getSendCodeText, getResetYourPasswordText: getResetYourPasswordText2 } = authenticatorTextUtil;
var ForgotPassword = ({ className, variation }) => {
  const { isPending } = useAuthenticator((context2) => [context2.isPending]);
  const { handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    ForgotPassword: { Header: Header12 = ForgotPassword.Header, Footer: Footer12 = ForgotPassword.Footer }
  } } = useCustomComponents();
  return import_react58.default.createElement(
    RouteContainer,
    { className, variation },
    import_react58.default.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-forgotpassword": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2 },
      import_react58.default.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        import_react58.default.createElement(Header12, null),
        import_react58.default.createElement(
          Flex,
          { direction: "column" },
          import_react58.default.createElement(FormFields, null)
        ),
        import_react58.default.createElement(RemoteErrorMessage, null),
        import_react58.default.createElement(TwoButtonSubmitFooter, { cancelButtonText: getBackToSignInText3(), cancelButtonSendType: "SIGN_IN", submitButtonText: isPending ? import_react58.default.createElement(
          import_react58.default.Fragment,
          null,
          getSendingText(),
          "…"
        ) : import_react58.default.createElement(import_react58.default.Fragment, null, getSendCodeText()) }),
        import_react58.default.createElement(Footer12, null)
      )
    )
  );
};
ForgotPassword.Header = function Header9() {
  return import_react58.default.createElement(Heading, { level: 3 }, getResetYourPasswordText2());
};
ForgotPassword.Footer = function Footer9() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/utils.mjs
var isSignInOrSignUpRoute = (route) => route === "signIn" || route === "signUp";

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SelectMfaType/SelectMfaType.mjs
var React181 = __toESM(require_react(), 1);
var { getMfaTypeLabelByValue: getMfaTypeLabelByValue2, getSelectMfaTypeByChallengeName: getSelectMfaTypeByChallengeName2, getSelectMfaTypeText } = authenticatorTextUtil;
var SelectMfaType = ({ className, variation }) => {
  const { isPending, allowedMfaTypes = [] } = useAuthenticator((context2) => {
    return [context2.isPending, context2.allowedMfaTypes];
  });
  const { handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    SelectMfaType: { Header: Header12 = SelectMfaType.Header, Footer: Footer12 = SelectMfaType.Footer }
  } } = useCustomComponents();
  return React181.createElement(
    RouteContainer,
    { className, variation },
    React181.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-select-mfa-type": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2 },
      React181.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        React181.createElement(Header12, null),
        React181.createElement(
          Flex,
          { direction: "column" },
          React181.createElement(RadioGroupField, { name: "mfa_type", legend: getSelectMfaTypeText(), legendHidden: true, isDisabled: isPending, isRequired: true }, allowedMfaTypes.map((value, index3) => React181.createElement(Radio, { name: "mfa_type", key: value, value, defaultChecked: index3 === 0 }, getMfaTypeLabelByValue2(value)))),
          React181.createElement(RemoteErrorMessage, null)
        ),
        React181.createElement(ConfirmSignInFooter, null),
        React181.createElement(Footer12, null)
      )
    )
  );
};
SelectMfaType.Header = function Header10() {
  const { challengeName } = useAuthenticator((context2) => {
    return [context2.challengeName];
  });
  return React181.createElement(Heading, { level: 3 }, getSelectMfaTypeByChallengeName2(challengeName));
};
SelectMfaType.Footer = function Footer10() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/SetupEmail/SetupEmail.mjs
var React182 = __toESM(require_react(), 1);
var { getSetupEmailText } = authenticatorTextUtil;
var SetupEmail = ({ className, variation }) => {
  const { isPending } = useAuthenticator((context2) => [context2.isPending]);
  const { handleChange, handleSubmit: handleSubmit2 } = useFormHandlers();
  const { components: {
    // @ts-ignore
    SetupEmail: { Header: Header12 = SetupEmail.Header, Footer: Footer12 = SetupEmail.Footer }
  } } = useCustomComponents();
  return React182.createElement(
    RouteContainer,
    { className, variation },
    React182.createElement(
      "form",
      { "data-amplify-form": "", "data-amplify-authenticator-setup-email": "", method: "post", onChange: handleChange, onSubmit: handleSubmit2 },
      React182.createElement(
        Flex,
        { as: "fieldset", direction: "column", isDisabled: isPending },
        React182.createElement(Header12, null),
        React182.createElement(
          Flex,
          { direction: "column" },
          React182.createElement(FormFields, null),
          React182.createElement(RemoteErrorMessage, null)
        ),
        React182.createElement(ConfirmSignInFooter, null),
        React182.createElement(Footer12, null)
      )
    )
  );
};
SetupEmail.Header = function Header11() {
  return React182.createElement(Heading, { level: 3 }, getSetupEmailText());
};
SetupEmail.Footer = function Footer11() {
  return null;
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/Router/Router.mjs
function RenderNothing2() {
  return null;
}
var getRouteComponent = (route) => {
  switch (route) {
    case "authenticated":
    case "idle":
    case "setup":
    case "transition":
      return RenderNothing2;
    case "confirmSignUp":
      return ConfirmSignUp;
    case "confirmSignIn":
      return ConfirmSignIn;
    case "selectMfaType":
      return SelectMfaType;
    case "setupEmail":
      return SetupEmail;
    case "setupTotp":
      return SetupTotp;
    case "signIn":
    case "signUp":
      return SignInSignUpTabs;
    case "forceNewPassword":
      return ForceNewPassword;
    case "forgotPassword":
      return ForgotPassword;
    case "confirmResetPassword":
      return ConfirmResetPassword;
    case "verifyUser":
      return VerifyUser;
    case "confirmVerifyUser":
      return ConfirmVerifyUser;
    default:
      console.warn(`Unhandled Authenticator route - please open an issue: ${route}`);
      return RenderNothing2;
  }
};
function Router({ className, hideSignUp, variation }) {
  const { route } = useAuthenticator(({ route: route2 }) => [route2]);
  const RouterChildren = (0, import_react59.useMemo)(() => getRouteComponent(route), [route]);
  return import_react59.default.createElement(RouterChildren, {
    className,
    // @ts-ignore
    hideSignUp: isSignInOrSignUpRoute(route) ? hideSignUp : void 0,
    variation
  });
}

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/hooks/useCustomComponents/defaultComponents.mjs
var defaultComponents = {
  // @ts-ignore
  Header: () => null,
  SignIn: {
    Header: SignIn.Header,
    Footer: SignIn.Footer
  },
  SignUp: {
    Header: SignUp.Header,
    FormFields: SignUp.FormFields,
    Footer: SignUp.Footer
  },
  ConfirmSignUp: {
    Header: ConfirmSignUp.Header,
    Footer: ConfirmSignUp.Footer
  },
  SelectMfaType: {
    Header: SelectMfaType.Header,
    Footer: SelectMfaType.Footer
  },
  SetupEmail: {
    Header: SetupEmail.Header,
    Footer: SetupEmail.Footer
  },
  SetupTotp: {
    Header: SetupTotp.Header,
    Footer: SetupTotp.Footer
  },
  ConfirmResetPassword: {
    Header: ConfirmResetPassword.Header,
    Footer: ConfirmResetPassword.Footer
  },
  ConfirmSignIn: {
    Header: ConfirmSignIn.Header,
    Footer: ConfirmSignIn.Footer
  },
  VerifyUser: {
    Header: VerifyUser.Header,
    Footer: VerifyUser.Footer
  },
  ConfirmVerifyUser: {
    Header: ConfirmVerifyUser.Header,
    // @ts-ignore
    Footer: ConfirmVerifyUser.Footer
  },
  ForceNewPassword: {
    Header: ForceNewPassword.Header,
    Footer: ForceNewPassword.Footer,
    FormFields: ForceNewPassword.FormFields
  },
  ForgotPassword: {
    Header: ForgotPassword.Header,
    Footer: ForgotPassword.Footer
  },
  // @ts-ignore
  Footer: () => null
};

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/Authenticator.mjs
function AuthenticatorInternal({ children: children2, className, components: customComponents, formFields, hideSignUp, initialState, loginMechanisms, passwordSettings, signUpAttributes, services, socialProviders, variation }) {
  useDeprecationWarning2({
    message: "The `passwordSettings` prop has been deprecated and will be removed in a future major version of Amplify UI.",
    // shouldWarn: !!passwordSettings,
    /**
     * @migration turn off until getConfig returns zero config
     */
    shouldWarn: false
  });
  const { route, signOut: signOut2, user } = useAuthenticator(({ route: route2, signOut: signOut3, user: user2 }) => [route2, signOut3, user2]);
  useAuthenticatorInitMachine({
    initialState,
    loginMechanisms,
    passwordSettings,
    services,
    signUpAttributes,
    socialProviders,
    formFields
  });
  const value = React183.useMemo(() => ({ components: { ...defaultComponents, ...customComponents } }), [customComponents]);
  const isAuthenticatedRoute = route === "authenticated" || route === "signOut";
  if (isAuthenticatedRoute) {
    if (!children2) {
      return null;
    }
    return React183.createElement(React183.Fragment, null, isFunction3(children2) ? children2({ signOut: signOut2, user }) : children2);
  }
  return React183.createElement(
    CustomComponentsContext.Provider,
    { value },
    React183.createElement(Router, { className, hideSignUp, variation })
  );
}
function Authenticator(props) {
  useSetUserAgent({
    componentName: "Authenticator",
    packageName: "react",
    version: VERSION
  });
  return React183.createElement(
    AuthenticatorProvider,
    null,
    React183.createElement(AuthenticatorInternal, { ...props })
  );
}
Authenticator.Provider = AuthenticatorProvider;
Authenticator.ForgotPassword = ForgotPassword;
Authenticator.SetupTotp = SetupTotp;
Authenticator.SignIn = SignIn;
Authenticator.SignUp = SignUp;
Authenticator.ForceNewPassword = ForceNewPassword;
Authenticator.SelectMfaType = SelectMfaType;
Authenticator.SetupEmail = SetupEmail;

// node_modules/@aws-amplify/ui-react/dist/esm/components/Authenticator/withAuthenticator.mjs
var import_react60 = __toESM(require_react(), 1);
function withAuthenticator(Component, options = {}) {
  const { variation = "modal" } = options;
  return function WrappedWithAuthenticator(props) {
    return import_react60.default.createElement(Authenticator, { variation, ...options }, (withAuthenticatorProps) => import_react60.default.createElement(Component, { ...props, ...withAuthenticatorProps }));
  };
}

// node_modules/@aws-amplify/ui-react/dist/esm/components/ThemeProvider/ThemeProvider.mjs
var React186 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/ThemeProvider/ThemeStyle.mjs
var React185 = __toESM(require_react(), 1);

// node_modules/@aws-amplify/ui-react/dist/esm/components/ThemeProvider/Style.mjs
var React184 = __toESM(require_react(), 1);
var Style2 = ({ cssText, ...rest }) => {
  if (cssText === void 0 || /<\/style/i.test(cssText)) {
    return null;
  }
  return React184.createElement("style", {
    ...rest,
    // eslint-disable-next-line react/no-danger
    dangerouslySetInnerHTML: { __html: cssText }
  });
};
Style2.displayName = "Style";

// node_modules/@aws-amplify/ui-react/dist/esm/components/ThemeProvider/ThemeStyle.mjs
var ThemeStyle = ({ theme, ...rest }) => {
  if (!theme)
    return null;
  const { name: name2, cssText } = theme;
  return React185.createElement(Style2, { ...rest, cssText, id: `amplify-theme-${name2}` });
};
ThemeStyle.displayName = "ThemeStyle";

// node_modules/@aws-amplify/ui-react/dist/esm/components/ThemeProvider/ThemeProvider.mjs
function ThemeProvider({ children: children2, colorMode, direction = "ltr", nonce, theme }) {
  const value = React186.useMemo(() => ({ theme: createTheme(theme), colorMode }), [theme, colorMode]);
  return React186.createElement(
    ThemeContext.Provider,
    { value },
    React186.createElement(
      DirectionProvider,
      { dir: direction },
      React186.createElement("div", { "data-amplify-theme": value.theme.name, "data-amplify-color-mode": colorMode, dir: direction }, children2),
      theme ? React186.createElement(ThemeStyle, { theme: value.theme, nonce }) : null
    )
  );
}

// node_modules/@aws-amplify/ui-react/dist/esm/hooks/useBreakpointValue.mjs
var useBreakpointValue = (values, defaultBreakpoint = "base", propKey) => {
  const { breakpoints: { values: breakpoints2 }, tokens: tokens2 } = useTheme();
  const breakpoint = useBreakpoint({
    breakpoints: breakpoints2,
    defaultBreakpoint
  });
  const value = getValueAtCurrentBreakpoint({
    breakpoint,
    breakpoints: breakpoints2,
    values
  });
  if (isDesignToken(value) || isString2(value)) {
    return getStyleValue({ value, propKey, tokens: tokens2 });
  } else {
    return value;
  }
};

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/index.mjs
var primitives_exports = {};
__export(primitives_exports, {
  Accordion: () => Accordion,
  Alert: () => Alert,
  Autocomplete: () => Autocomplete,
  Avatar: () => Avatar,
  Badge: () => Badge,
  Breadcrumbs: () => Breadcrumbs,
  Button: () => Button,
  ButtonGroup: () => ButtonGroup,
  Card: () => Card,
  Checkbox: () => Checkbox,
  CheckboxField: () => CheckboxField,
  Collection: () => Collection,
  ComponentPropsToStylePropsMap: () => ComponentPropsToStylePropsMap,
  ComponentPropsToStylePropsMapKeys: () => ComponentPropsToStylePropsMapKeys,
  Divider: () => Divider,
  DropZone: () => DropZone,
  FieldGroupIcon: () => FieldGroupIcon,
  FieldGroupIconButton: () => FieldGroupIconButton,
  Fieldset: () => Fieldset,
  Flex: () => Flex,
  Grid: () => Grid,
  Heading: () => Heading,
  HighlightMatch: () => HighlightMatch,
  Icon: () => Icon,
  IconsProvider: () => IconsProvider,
  Image: () => Image,
  Input: () => Input,
  Label: () => Label,
  Link: () => Link,
  Loader: () => Loader,
  Menu: () => Menu2,
  MenuButton: () => MenuButton,
  MenuItem: () => MenuItem2,
  Message: () => Message,
  Pagination: () => Pagination,
  PasswordField: () => PasswordField,
  PhoneNumberField: () => PhoneNumberField,
  Placeholder: () => Placeholder,
  Radio: () => Radio,
  RadioGroupField: () => RadioGroupField,
  Rating: () => Rating,
  ScrollView: () => ScrollView,
  SearchField: () => SearchField,
  SelectField: () => SelectField,
  SliderField: () => SliderField,
  StepperField: () => StepperField,
  SwitchField: () => SwitchField,
  Table: () => Table,
  TableBody: () => TableBody,
  TableCell: () => TableCell,
  TableFoot: () => TableFoot,
  TableHead: () => TableHead,
  TableRow: () => TableRow,
  Tabs: () => Tabs,
  Text: () => Text,
  TextAreaField: () => TextAreaField,
  TextField: () => TextField,
  ToggleButton: () => ToggleButton,
  ToggleButtonGroup: () => ToggleButtonGroup,
  View: () => View,
  VisuallyHidden: () => VisuallyHidden,
  usePagination: () => usePagination
});

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/Icon/context/IconsProvider.mjs
var React187 = __toESM(require_react(), 1);
function IconsProvider({ children: children2, icons }) {
  return React187.createElement(IconsContext.Provider, { value: icons }, children2);
}

// node_modules/@aws-amplify/ui-react/dist/esm/primitives/index.mjs
var import_react61 = __toESM(require_react(), 1);
export {
  Accordion,
  AccountSettings,
  Alert,
  Authenticator,
  Autocomplete,
  Avatar,
  Badge,
  Breadcrumbs,
  Button,
  ButtonGroup,
  Card,
  Checkbox,
  CheckboxField,
  Collection,
  ComponentPropsToStylePropsMap,
  ComponentPropsToStylePropsMapKeys,
  Divider,
  DropZone,
  FieldGroupIcon,
  FieldGroupIconButton,
  Fieldset,
  Flex,
  Grid,
  Heading,
  HighlightMatch,
  Icon,
  IconsProvider,
  Image,
  Input,
  Label,
  Link,
  Loader,
  Menu2 as Menu,
  MenuButton,
  MenuItem2 as MenuItem,
  Message,
  Pagination,
  PasswordField,
  PhoneNumberField,
  Placeholder,
  Radio,
  RadioGroupField,
  Rating,
  ScrollView,
  SearchField,
  SelectField,
  SliderField,
  StepperField,
  SwitchField,
  Table,
  TableBody,
  TableCell,
  TableFoot,
  TableHead,
  TableRow,
  Tabs,
  Text,
  TextAreaField,
  TextField,
  ThemeProvider,
  ToggleButton,
  ToggleButtonGroup,
  View,
  VisuallyHidden,
  components_exports as components,
  createTheme,
  defaultDarkModeOverride,
  defaultTheme,
  primitives_exports as primitives,
  translations,
  useAuthenticator,
  useBreakpointValue,
  usePagination,
  useTheme,
  withAuthenticator
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

crc-32/crc32.js:
  (*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com *)

xstate/es/_virtual/_tslib.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

js-cookie/dist/js.cookie.mjs:
  (*! js-cookie v3.0.5 | MIT *)

@aws-amplify/core/dist/esm/Mutex/Mutex.mjs:
  (*!
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
*/
//# sourceMappingURL=@aws-amplify_ui-react.js.map
